
RTOS_STM32_F303RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007134  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  080072d4  080072d4  000172d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073f0  080073f0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080073f0  080073f0  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080073f0  080073f0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073f0  080073f0  000173f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073f4  080073f4  000173f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080073f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          0000132c  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001398  20001398  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a3c0  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000036ad  00000000  00000000  0003a49f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001610  00000000  00000000  0003db50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000114b  00000000  00000000  0003f160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000247ef  00000000  00000000  000402ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001cb7d  00000000  00000000  00064a9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000de9f0  00000000  00000000  00081617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000064a4  00000000  00000000  00160008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000083  00000000  00000000  001664ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080072bc 	.word	0x080072bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	080072bc 	.word	0x080072bc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	4a07      	ldr	r2, [pc, #28]	; (80002ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000290:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000292:	68bb      	ldr	r3, [r7, #8]
 8000294:	4a06      	ldr	r2, [pc, #24]	; (80002b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000296:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2280      	movs	r2, #128	; 0x80
 800029c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	20000088 	.word	0x20000088
 80002b0:	20000128 	.word	0x20000128

080002b4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002c0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80002c4:	f003 0301 	and.w	r3, r3, #1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d013      	beq.n	80002f4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80002cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002d0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80002d4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d00b      	beq.n	80002f4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80002dc:	e000      	b.n	80002e0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80002de:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80002e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d0f9      	beq.n	80002de <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002ea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002ee:	687a      	ldr	r2, [r7, #4]
 80002f0:	b2d2      	uxtb	r2, r2
 80002f2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002f4:	687b      	ldr	r3, [r7, #4]
}
 80002f6:	4618      	mov	r0, r3
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr

08000302 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 8000302:	b580      	push	{r7, lr}
 8000304:	b086      	sub	sp, #24
 8000306:	af00      	add	r7, sp, #0
 8000308:	60f8      	str	r0, [r7, #12]
 800030a:	60b9      	str	r1, [r7, #8]
 800030c:	607a      	str	r2, [r7, #4]
	/* Write code that is used by puts and printf */
	int i = 0;
 800030e:	2300      	movs	r3, #0
 8000310:	617b      	str	r3, [r7, #20]
	for(i=0; i<len; i++)
 8000312:	2300      	movs	r3, #0
 8000314:	617b      	str	r3, [r7, #20]
 8000316:	e009      	b.n	800032c <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	1c5a      	adds	r2, r3, #1
 800031c:	60ba      	str	r2, [r7, #8]
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	4618      	mov	r0, r3
 8000322:	f7ff ffc7 	bl	80002b4 <ITM_SendChar>
	for(i=0; i<len; i++)
 8000326:	697b      	ldr	r3, [r7, #20]
 8000328:	3301      	adds	r3, #1
 800032a:	617b      	str	r3, [r7, #20]
 800032c:	697a      	ldr	r2, [r7, #20]
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	429a      	cmp	r2, r3
 8000332:	dbf1      	blt.n	8000318 <_write+0x16>

	return len;
 8000334:	687b      	ldr	r3, [r7, #4]
}
 8000336:	4618      	mov	r0, r3
 8000338:	3718      	adds	r7, #24
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
	...

08000340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000340:	b5b0      	push	{r4, r5, r7, lr}
 8000342:	b096      	sub	sp, #88	; 0x58
 8000344:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000346:	f000 fd1b 	bl	8000d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800034a:	f000 f855 	bl	80003f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800034e:	f000 f9d7 	bl	8000700 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000352:	f000 f9a5 	bl	80006a0 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8000356:	f000 f8b7 	bl	80004c8 <MX_ADC2_Init>
  MX_I2C1_Init();
 800035a:	f000 f913 	bl	8000584 <MX_I2C1_Init>
  MX_TIM3_Init();
 800035e:	f000 f951 	bl	8000604 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  printf("starting....\n");
 8000362:	481e      	ldr	r0, [pc, #120]	; (80003dc <main+0x9c>)
 8000364:	f006 f8ea 	bl	800653c <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, Task1_init, osPriorityNormal, 0, 128);
 8000368:	4b1d      	ldr	r3, [pc, #116]	; (80003e0 <main+0xa0>)
 800036a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800036e:	461d      	mov	r5, r3
 8000370:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000372:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000374:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000378:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 800037c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000380:	2100      	movs	r1, #0
 8000382:	4618      	mov	r0, r3
 8000384:	f004 fd64 	bl	8004e50 <osThreadCreate>
 8000388:	4603      	mov	r3, r0
 800038a:	4a16      	ldr	r2, [pc, #88]	; (80003e4 <main+0xa4>)
 800038c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, Task2_init, osPriorityBelowNormal, 0, 128);
 800038e:	4b16      	ldr	r3, [pc, #88]	; (80003e8 <main+0xa8>)
 8000390:	f107 0420 	add.w	r4, r7, #32
 8000394:	461d      	mov	r5, r3
 8000396:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000398:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800039a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800039e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 80003a2:	f107 0320 	add.w	r3, r7, #32
 80003a6:	2100      	movs	r1, #0
 80003a8:	4618      	mov	r0, r3
 80003aa:	f004 fd51 	bl	8004e50 <osThreadCreate>
 80003ae:	4603      	mov	r3, r0
 80003b0:	4a0e      	ldr	r2, [pc, #56]	; (80003ec <main+0xac>)
 80003b2:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task3 */
  osThreadDef(Task3, Task3_init, osPriorityAboveNormal, 0, 128);
 80003b4:	4b0e      	ldr	r3, [pc, #56]	; (80003f0 <main+0xb0>)
 80003b6:	1d3c      	adds	r4, r7, #4
 80003b8:	461d      	mov	r5, r3
 80003ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task3Handle = osThreadCreate(osThread(Task3), NULL);
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	2100      	movs	r1, #0
 80003ca:	4618      	mov	r0, r3
 80003cc:	f004 fd40 	bl	8004e50 <osThreadCreate>
 80003d0:	4603      	mov	r3, r0
 80003d2:	4a08      	ldr	r2, [pc, #32]	; (80003f4 <main+0xb4>)
 80003d4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80003d6:	f004 fd34 	bl	8004e42 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003da:	e7fe      	b.n	80003da <main+0x9a>
 80003dc:	080072d4 	.word	0x080072d4
 80003e0:	080072ec 	.word	0x080072ec
 80003e4:	200004a0 	.word	0x200004a0
 80003e8:	08007310 	.word	0x08007310
 80003ec:	200004a4 	.word	0x200004a4
 80003f0:	08007334 	.word	0x08007334
 80003f4:	200004a8 	.word	0x200004a8

080003f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b0a6      	sub	sp, #152	; 0x98
 80003fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000402:	2228      	movs	r2, #40	; 0x28
 8000404:	2100      	movs	r1, #0
 8000406:	4618      	mov	r0, r3
 8000408:	f006 f978 	bl	80066fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800040c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	605a      	str	r2, [r3, #4]
 8000416:	609a      	str	r2, [r3, #8]
 8000418:	60da      	str	r2, [r3, #12]
 800041a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	2258      	movs	r2, #88	; 0x58
 8000420:	2100      	movs	r1, #0
 8000422:	4618      	mov	r0, r3
 8000424:	f006 f96a 	bl	80066fc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000428:	2302      	movs	r3, #2
 800042a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800042c:	2301      	movs	r3, #1
 800042e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000430:	2310      	movs	r3, #16
 8000432:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000436:	2302      	movs	r3, #2
 8000438:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800043c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000440:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000444:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000448:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800044c:	2300      	movs	r3, #0
 800044e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000452:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000456:	4618      	mov	r0, r3
 8000458:	f001 fdbc 	bl	8001fd4 <HAL_RCC_OscConfig>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000462:	f000 fa27 	bl	80008b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000466:	230f      	movs	r3, #15
 8000468:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800046a:	2302      	movs	r3, #2
 800046c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800046e:	2300      	movs	r3, #0
 8000470:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000476:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000478:	2300      	movs	r3, #0
 800047a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800047c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000480:	2102      	movs	r1, #2
 8000482:	4618      	mov	r0, r3
 8000484:	f002 fdfa 	bl	800307c <HAL_RCC_ClockConfig>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800048e:	f000 fa11 	bl	80008b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8000492:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <SystemClock_Config+0xcc>)
 8000494:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000496:	2300      	movs	r3, #0
 8000498:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800049a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800049e:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80004a0:	2300      	movs	r3, #0
 80004a2:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80004a4:	2300      	movs	r3, #0
 80004a6:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	4618      	mov	r0, r3
 80004ac:	f003 f84e 	bl	800354c <HAL_RCCEx_PeriphCLKConfig>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80004b6:	f000 f9fd 	bl	80008b4 <Error_Handler>
  }
}
 80004ba:	bf00      	nop
 80004bc:	3798      	adds	r7, #152	; 0x98
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	002000a2 	.word	0x002000a2

080004c8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ce:	463b      	mov	r3, r7
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
 80004d8:	60da      	str	r2, [r3, #12]
 80004da:	611a      	str	r2, [r3, #16]
 80004dc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80004de:	4b27      	ldr	r3, [pc, #156]	; (800057c <MX_ADC2_Init+0xb4>)
 80004e0:	4a27      	ldr	r2, [pc, #156]	; (8000580 <MX_ADC2_Init+0xb8>)
 80004e2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004e4:	4b25      	ldr	r3, [pc, #148]	; (800057c <MX_ADC2_Init+0xb4>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80004ea:	4b24      	ldr	r3, [pc, #144]	; (800057c <MX_ADC2_Init+0xb4>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004f0:	4b22      	ldr	r3, [pc, #136]	; (800057c <MX_ADC2_Init+0xb4>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80004f6:	4b21      	ldr	r3, [pc, #132]	; (800057c <MX_ADC2_Init+0xb4>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80004fc:	4b1f      	ldr	r3, [pc, #124]	; (800057c <MX_ADC2_Init+0xb4>)
 80004fe:	2200      	movs	r2, #0
 8000500:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000504:	4b1d      	ldr	r3, [pc, #116]	; (800057c <MX_ADC2_Init+0xb4>)
 8000506:	2200      	movs	r2, #0
 8000508:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800050a:	4b1c      	ldr	r3, [pc, #112]	; (800057c <MX_ADC2_Init+0xb4>)
 800050c:	2201      	movs	r2, #1
 800050e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000510:	4b1a      	ldr	r3, [pc, #104]	; (800057c <MX_ADC2_Init+0xb4>)
 8000512:	2200      	movs	r2, #0
 8000514:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000516:	4b19      	ldr	r3, [pc, #100]	; (800057c <MX_ADC2_Init+0xb4>)
 8000518:	2201      	movs	r2, #1
 800051a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800051c:	4b17      	ldr	r3, [pc, #92]	; (800057c <MX_ADC2_Init+0xb4>)
 800051e:	2200      	movs	r2, #0
 8000520:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000524:	4b15      	ldr	r3, [pc, #84]	; (800057c <MX_ADC2_Init+0xb4>)
 8000526:	2204      	movs	r2, #4
 8000528:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800052a:	4b14      	ldr	r3, [pc, #80]	; (800057c <MX_ADC2_Init+0xb4>)
 800052c:	2200      	movs	r2, #0
 800052e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <MX_ADC2_Init+0xb4>)
 8000532:	2200      	movs	r2, #0
 8000534:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000536:	4811      	ldr	r0, [pc, #68]	; (800057c <MX_ADC2_Init+0xb4>)
 8000538:	f000 fc58 	bl	8000dec <HAL_ADC_Init>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000542:	f000 f9b7 	bl	80008b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000546:	2301      	movs	r3, #1
 8000548:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800054a:	2301      	movs	r3, #1
 800054c:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800054e:	2300      	movs	r3, #0
 8000550:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000556:	2300      	movs	r3, #0
 8000558:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800055a:	2300      	movs	r3, #0
 800055c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800055e:	463b      	mov	r3, r7
 8000560:	4619      	mov	r1, r3
 8000562:	4806      	ldr	r0, [pc, #24]	; (800057c <MX_ADC2_Init+0xb4>)
 8000564:	f000 fe3c 	bl	80011e0 <HAL_ADC_ConfigChannel>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800056e:	f000 f9a1 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000572:	bf00      	nop
 8000574:	3718      	adds	r7, #24
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000328 	.word	0x20000328
 8000580:	50000100 	.word	0x50000100

08000584 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000588:	4b1b      	ldr	r3, [pc, #108]	; (80005f8 <MX_I2C1_Init+0x74>)
 800058a:	4a1c      	ldr	r2, [pc, #112]	; (80005fc <MX_I2C1_Init+0x78>)
 800058c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800058e:	4b1a      	ldr	r3, [pc, #104]	; (80005f8 <MX_I2C1_Init+0x74>)
 8000590:	4a1b      	ldr	r2, [pc, #108]	; (8000600 <MX_I2C1_Init+0x7c>)
 8000592:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000594:	4b18      	ldr	r3, [pc, #96]	; (80005f8 <MX_I2C1_Init+0x74>)
 8000596:	2200      	movs	r2, #0
 8000598:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800059a:	4b17      	ldr	r3, [pc, #92]	; (80005f8 <MX_I2C1_Init+0x74>)
 800059c:	2201      	movs	r2, #1
 800059e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005a0:	4b15      	ldr	r3, [pc, #84]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005a6:	4b14      	ldr	r3, [pc, #80]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005ac:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005b2:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005b8:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005be:	480e      	ldr	r0, [pc, #56]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005c0:	f001 fbe2 	bl	8001d88 <HAL_I2C_Init>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005ca:	f000 f973 	bl	80008b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005ce:	2100      	movs	r1, #0
 80005d0:	4809      	ldr	r0, [pc, #36]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005d2:	f001 fc68 	bl	8001ea6 <HAL_I2CEx_ConfigAnalogFilter>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005dc:	f000 f96a 	bl	80008b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005e0:	2100      	movs	r1, #0
 80005e2:	4805      	ldr	r0, [pc, #20]	; (80005f8 <MX_I2C1_Init+0x74>)
 80005e4:	f001 fcaa 	bl	8001f3c <HAL_I2CEx_ConfigDigitalFilter>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005ee:	f000 f961 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000378 	.word	0x20000378
 80005fc:	40005400 	.word	0x40005400
 8000600:	2000090e 	.word	0x2000090e

08000604 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800060a:	f107 0310 	add.w	r3, r7, #16
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000622:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <MX_TIM3_Init+0x94>)
 8000624:	4a1d      	ldr	r2, [pc, #116]	; (800069c <MX_TIM3_Init+0x98>)
 8000626:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8000628:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <MX_TIM3_Init+0x94>)
 800062a:	2248      	movs	r2, #72	; 0x48
 800062c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800062e:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <MX_TIM3_Init+0x94>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000634:	4b18      	ldr	r3, [pc, #96]	; (8000698 <MX_TIM3_Init+0x94>)
 8000636:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800063a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800063c:	4b16      	ldr	r3, [pc, #88]	; (8000698 <MX_TIM3_Init+0x94>)
 800063e:	2200      	movs	r2, #0
 8000640:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <MX_TIM3_Init+0x94>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000648:	4813      	ldr	r0, [pc, #76]	; (8000698 <MX_TIM3_Init+0x94>)
 800064a:	f003 f99d 	bl	8003988 <HAL_TIM_Base_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000654:	f000 f92e 	bl	80008b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800065e:	f107 0310 	add.w	r3, r7, #16
 8000662:	4619      	mov	r1, r3
 8000664:	480c      	ldr	r0, [pc, #48]	; (8000698 <MX_TIM3_Init+0x94>)
 8000666:	f003 fb76 	bl	8003d56 <HAL_TIM_ConfigClockSource>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000670:	f000 f920 	bl	80008b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	4619      	mov	r1, r3
 8000680:	4805      	ldr	r0, [pc, #20]	; (8000698 <MX_TIM3_Init+0x94>)
 8000682:	f003 fd91 	bl	80041a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800068c:	f000 f912 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	3720      	adds	r7, #32
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200003cc 	.word	0x200003cc
 800069c:	40000400 	.word	0x40000400

080006a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a4:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006a6:	4a15      	ldr	r2, [pc, #84]	; (80006fc <MX_USART2_UART_Init+0x5c>)
 80006a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006de:	2200      	movs	r2, #0
 80006e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006e4:	f003 fe0a 	bl	80042fc <HAL_UART_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006ee:	f000 f8e1 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000418 	.word	0x20000418
 80006fc:	40004400 	.word	0x40004400

08000700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	; 0x28
 8000704:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	4b2c      	ldr	r3, [pc, #176]	; (80007c8 <MX_GPIO_Init+0xc8>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	4a2b      	ldr	r2, [pc, #172]	; (80007c8 <MX_GPIO_Init+0xc8>)
 800071c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000720:	6153      	str	r3, [r2, #20]
 8000722:	4b29      	ldr	r3, [pc, #164]	; (80007c8 <MX_GPIO_Init+0xc8>)
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800072a:	613b      	str	r3, [r7, #16]
 800072c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800072e:	4b26      	ldr	r3, [pc, #152]	; (80007c8 <MX_GPIO_Init+0xc8>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	4a25      	ldr	r2, [pc, #148]	; (80007c8 <MX_GPIO_Init+0xc8>)
 8000734:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000738:	6153      	str	r3, [r2, #20]
 800073a:	4b23      	ldr	r3, [pc, #140]	; (80007c8 <MX_GPIO_Init+0xc8>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	4b20      	ldr	r3, [pc, #128]	; (80007c8 <MX_GPIO_Init+0xc8>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	4a1f      	ldr	r2, [pc, #124]	; (80007c8 <MX_GPIO_Init+0xc8>)
 800074c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000750:	6153      	str	r3, [r2, #20]
 8000752:	4b1d      	ldr	r3, [pc, #116]	; (80007c8 <MX_GPIO_Init+0xc8>)
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075e:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <MX_GPIO_Init+0xc8>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	4a19      	ldr	r2, [pc, #100]	; (80007c8 <MX_GPIO_Init+0xc8>)
 8000764:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000768:	6153      	str	r3, [r2, #20]
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_GPIO_Init+0xc8>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|ALARM_LED_Pin, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800077c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000780:	f001 faea 	bl	8001d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000784:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800078a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800078e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	4619      	mov	r1, r3
 800079a:	480c      	ldr	r0, [pc, #48]	; (80007cc <MX_GPIO_Init+0xcc>)
 800079c:	f001 f952 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin ALARM_LED_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|ALARM_LED_Pin;
 80007a0:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80007a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a6:	2301      	movs	r3, #1
 80007a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	2300      	movs	r3, #0
 80007b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	4619      	mov	r1, r3
 80007b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007bc:	f001 f942 	bl	8001a44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c0:	bf00      	nop
 80007c2:	3728      	adds	r7, #40	; 0x28
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40021000 	.word	0x40021000
 80007cc:	48000800 	.word	0x48000800

080007d0 <Task1_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task1_init */
void Task1_init(void const * argument)
{
 80007d0:	b590      	push	{r4, r7, lr}
 80007d2:	b08b      	sub	sp, #44	; 0x2c
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t receivedData;
  /* Infinite loop */
  for(;;)
  {
	  printf("Checking");
 80007d8:	4821      	ldr	r0, [pc, #132]	; (8000860 <Task1_init+0x90>)
 80007da:	f005 fe49 	bl	8006470 <iprintf>

	  if(HAL_UART_Receive(&huart2, &receivedData, 1, 100) == HAL_OK)
 80007de:	f107 0127 	add.w	r1, r7, #39	; 0x27
 80007e2:	2364      	movs	r3, #100	; 0x64
 80007e4:	2201      	movs	r2, #1
 80007e6:	481f      	ldr	r0, [pc, #124]	; (8000864 <Task1_init+0x94>)
 80007e8:	f003 fe60 	bl	80044ac <HAL_UART_Receive>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d131      	bne.n	8000856 <Task1_init+0x86>
	  {
		  uint8_t message1[] = "Diode is ON\r\n";
 80007f2:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <Task1_init+0x98>)
 80007f4:	f107 0418 	add.w	r4, r7, #24
 80007f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007fa:	c407      	stmia	r4!, {r0, r1, r2}
 80007fc:	8023      	strh	r3, [r4, #0]
		  uint8_t message2[] = "Diode is OFF\r\n";
 80007fe:	4b1b      	ldr	r3, [pc, #108]	; (800086c <Task1_init+0x9c>)
 8000800:	f107 0408 	add.w	r4, r7, #8
 8000804:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000806:	c407      	stmia	r4!, {r0, r1, r2}
 8000808:	8023      	strh	r3, [r4, #0]
 800080a:	3402      	adds	r4, #2
 800080c:	0c1b      	lsrs	r3, r3, #16
 800080e:	7023      	strb	r3, [r4, #0]
		  //HAL_UART_Transmit(&huart2, message, sizeof(message), 500);
		  if(receivedData == 'e')
 8000810:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000814:	2b65      	cmp	r3, #101	; 0x65
 8000816:	d10d      	bne.n	8000834 <Task1_init+0x64>
			{
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	2120      	movs	r1, #32
 800081c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000820:	f001 fa9a 	bl	8001d58 <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart2, message1, sizeof(message1), 200);
 8000824:	f107 0118 	add.w	r1, r7, #24
 8000828:	23c8      	movs	r3, #200	; 0xc8
 800082a:	220e      	movs	r2, #14
 800082c:	480d      	ldr	r0, [pc, #52]	; (8000864 <Task1_init+0x94>)
 800082e:	f003 fdb3 	bl	8004398 <HAL_UART_Transmit>
 8000832:	e010      	b.n	8000856 <Task1_init+0x86>
			}else if(receivedData == 'd')
 8000834:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000838:	2b64      	cmp	r3, #100	; 0x64
 800083a:	d10c      	bne.n	8000856 <Task1_init+0x86>
			{
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	2120      	movs	r1, #32
 8000840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000844:	f001 fa88 	bl	8001d58 <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart2, message2, sizeof(message2), 200);
 8000848:	f107 0108 	add.w	r1, r7, #8
 800084c:	23c8      	movs	r3, #200	; 0xc8
 800084e:	220f      	movs	r2, #15
 8000850:	4804      	ldr	r0, [pc, #16]	; (8000864 <Task1_init+0x94>)
 8000852:	f003 fda1 	bl	8004398 <HAL_UART_Transmit>
				//dl_kom = sizeof(komunikat);
			}
	  }
	  //uint8_t text[] = "text from TASK1\r\n";
	  //HAL_UART_Transmit(&huart2, text, sizeof(text), 500);
	  osDelay(500);
 8000856:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800085a:	f004 fb45 	bl	8004ee8 <osDelay>
	  printf("Checking");
 800085e:	e7bb      	b.n	80007d8 <Task1_init+0x8>
 8000860:	08007350 	.word	0x08007350
 8000864:	20000418 	.word	0x20000418
 8000868:	0800735c 	.word	0x0800735c
 800086c:	0800736c 	.word	0x0800736c

08000870 <Task2_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_init */
void Task2_init(void const * argument)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000878:	2001      	movs	r0, #1
 800087a:	f004 fb35 	bl	8004ee8 <osDelay>
 800087e:	e7fb      	b.n	8000878 <Task2_init+0x8>

08000880 <Task3_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task3_init */
void Task3_init(void const * argument)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task3_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000888:	2001      	movs	r0, #1
 800088a:	f004 fb2d 	bl	8004ee8 <osDelay>
 800088e:	e7fb      	b.n	8000888 <Task3_init+0x8>

08000890 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d101      	bne.n	80008a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008a2:	f000 fa83 	bl	8000dac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40012c00 	.word	0x40012c00

080008b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b8:	b672      	cpsid	i
}
 80008ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008bc:	e7fe      	b.n	80008bc <Error_Handler+0x8>
	...

080008c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <HAL_MspInit+0x4c>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	4a10      	ldr	r2, [pc, #64]	; (800090c <HAL_MspInit+0x4c>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6193      	str	r3, [r2, #24]
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <HAL_MspInit+0x4c>)
 80008d4:	699b      	ldr	r3, [r3, #24]
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <HAL_MspInit+0x4c>)
 80008e0:	69db      	ldr	r3, [r3, #28]
 80008e2:	4a0a      	ldr	r2, [pc, #40]	; (800090c <HAL_MspInit+0x4c>)
 80008e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e8:	61d3      	str	r3, [r2, #28]
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <HAL_MspInit+0x4c>)
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008f6:	2200      	movs	r2, #0
 80008f8:	210f      	movs	r1, #15
 80008fa:	f06f 0001 	mvn.w	r0, #1
 80008fe:	f001 f877 	bl	80019f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40021000 	.word	0x40021000

08000910 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a15      	ldr	r2, [pc, #84]	; (8000984 <HAL_ADC_MspInit+0x74>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d124      	bne.n	800097c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <HAL_ADC_MspInit+0x78>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	4a14      	ldr	r2, [pc, #80]	; (8000988 <HAL_ADC_MspInit+0x78>)
 8000938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800093c:	6153      	str	r3, [r2, #20]
 800093e:	4b12      	ldr	r3, [pc, #72]	; (8000988 <HAL_ADC_MspInit+0x78>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <HAL_ADC_MspInit+0x78>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	4a0e      	ldr	r2, [pc, #56]	; (8000988 <HAL_ADC_MspInit+0x78>)
 8000950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000954:	6153      	str	r3, [r2, #20]
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <HAL_ADC_MspInit+0x78>)
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA4     ------> ADC2_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000962:	2310      	movs	r3, #16
 8000964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000966:	2303      	movs	r3, #3
 8000968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4619      	mov	r1, r3
 8000974:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000978:	f001 f864 	bl	8001a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800097c:	bf00      	nop
 800097e:	3728      	adds	r7, #40	; 0x28
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	50000100 	.word	0x50000100
 8000988:	40021000 	.word	0x40021000

0800098c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a17      	ldr	r2, [pc, #92]	; (8000a08 <HAL_I2C_MspInit+0x7c>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d128      	bne.n	8000a00 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ae:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <HAL_I2C_MspInit+0x80>)
 80009b0:	695b      	ldr	r3, [r3, #20]
 80009b2:	4a16      	ldr	r2, [pc, #88]	; (8000a0c <HAL_I2C_MspInit+0x80>)
 80009b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009b8:	6153      	str	r3, [r2, #20]
 80009ba:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <HAL_I2C_MspInit+0x80>)
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009cc:	2312      	movs	r3, #18
 80009ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009d8:	2304      	movs	r3, #4
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	480b      	ldr	r0, [pc, #44]	; (8000a10 <HAL_I2C_MspInit+0x84>)
 80009e4:	f001 f82e 	bl	8001a44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <HAL_I2C_MspInit+0x80>)
 80009ea:	69db      	ldr	r3, [r3, #28]
 80009ec:	4a07      	ldr	r2, [pc, #28]	; (8000a0c <HAL_I2C_MspInit+0x80>)
 80009ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009f2:	61d3      	str	r3, [r2, #28]
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <HAL_I2C_MspInit+0x80>)
 80009f6:	69db      	ldr	r3, [r3, #28]
 80009f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a00:	bf00      	nop
 8000a02:	3728      	adds	r7, #40	; 0x28
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40005400 	.word	0x40005400
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	48000400 	.word	0x48000400

08000a14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <HAL_TIM_Base_MspInit+0x38>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d10b      	bne.n	8000a3e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a26:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <HAL_TIM_Base_MspInit+0x3c>)
 8000a28:	69db      	ldr	r3, [r3, #28]
 8000a2a:	4a09      	ldr	r2, [pc, #36]	; (8000a50 <HAL_TIM_Base_MspInit+0x3c>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	61d3      	str	r3, [r2, #28]
 8000a32:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <HAL_TIM_Base_MspInit+0x3c>)
 8000a34:	69db      	ldr	r3, [r3, #28]
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a3e:	bf00      	nop
 8000a40:	3714      	adds	r7, #20
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	40000400 	.word	0x40000400
 8000a50:	40021000 	.word	0x40021000

08000a54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	; 0x28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a17      	ldr	r2, [pc, #92]	; (8000ad0 <HAL_UART_MspInit+0x7c>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d128      	bne.n	8000ac8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a76:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <HAL_UART_MspInit+0x80>)
 8000a78:	69db      	ldr	r3, [r3, #28]
 8000a7a:	4a16      	ldr	r2, [pc, #88]	; (8000ad4 <HAL_UART_MspInit+0x80>)
 8000a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a80:	61d3      	str	r3, [r2, #28]
 8000a82:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <HAL_UART_MspInit+0x80>)
 8000a84:	69db      	ldr	r3, [r3, #28]
 8000a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <HAL_UART_MspInit+0x80>)
 8000a90:	695b      	ldr	r3, [r3, #20]
 8000a92:	4a10      	ldr	r2, [pc, #64]	; (8000ad4 <HAL_UART_MspInit+0x80>)
 8000a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a98:	6153      	str	r3, [r2, #20]
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <HAL_UART_MspInit+0x80>)
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aa6:	230c      	movs	r3, #12
 8000aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ab6:	2307      	movs	r3, #7
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac4:	f000 ffbe 	bl	8001a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ac8:	bf00      	nop
 8000aca:	3728      	adds	r7, #40	; 0x28
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40004400 	.word	0x40004400
 8000ad4:	40021000 	.word	0x40021000

08000ad8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08c      	sub	sp, #48	; 0x30
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ae8:	4b2e      	ldr	r3, [pc, #184]	; (8000ba4 <HAL_InitTick+0xcc>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	4a2d      	ldr	r2, [pc, #180]	; (8000ba4 <HAL_InitTick+0xcc>)
 8000aee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000af2:	6193      	str	r3, [r2, #24]
 8000af4:	4b2b      	ldr	r3, [pc, #172]	; (8000ba4 <HAL_InitTick+0xcc>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b00:	f107 020c 	add.w	r2, r7, #12
 8000b04:	f107 0310 	add.w	r3, r7, #16
 8000b08:	4611      	mov	r1, r2
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f002 fcec 	bl	80034e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b10:	f002 fcc8 	bl	80034a4 <HAL_RCC_GetPCLK2Freq>
 8000b14:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b18:	4a23      	ldr	r2, [pc, #140]	; (8000ba8 <HAL_InitTick+0xd0>)
 8000b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b1e:	0c9b      	lsrs	r3, r3, #18
 8000b20:	3b01      	subs	r3, #1
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b24:	4b21      	ldr	r3, [pc, #132]	; (8000bac <HAL_InitTick+0xd4>)
 8000b26:	4a22      	ldr	r2, [pc, #136]	; (8000bb0 <HAL_InitTick+0xd8>)
 8000b28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b2a:	4b20      	ldr	r3, [pc, #128]	; (8000bac <HAL_InitTick+0xd4>)
 8000b2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b30:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b32:	4a1e      	ldr	r2, [pc, #120]	; (8000bac <HAL_InitTick+0xd4>)
 8000b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b36:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b38:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <HAL_InitTick+0xd4>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3e:	4b1b      	ldr	r3, [pc, #108]	; (8000bac <HAL_InitTick+0xd4>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b44:	4b19      	ldr	r3, [pc, #100]	; (8000bac <HAL_InitTick+0xd4>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b4a:	4818      	ldr	r0, [pc, #96]	; (8000bac <HAL_InitTick+0xd4>)
 8000b4c:	f002 ff1c 	bl	8003988 <HAL_TIM_Base_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000b56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d11b      	bne.n	8000b96 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000b5e:	4813      	ldr	r0, [pc, #76]	; (8000bac <HAL_InitTick+0xd4>)
 8000b60:	f002 ff6a 	bl	8003a38 <HAL_TIM_Base_Start_IT>
 8000b64:	4603      	mov	r3, r0
 8000b66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000b6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d111      	bne.n	8000b96 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b72:	2019      	movs	r0, #25
 8000b74:	f000 ff58 	bl	8001a28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2b0f      	cmp	r3, #15
 8000b7c:	d808      	bhi.n	8000b90 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	6879      	ldr	r1, [r7, #4]
 8000b82:	2019      	movs	r0, #25
 8000b84:	f000 ff34 	bl	80019f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b88:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <HAL_InitTick+0xdc>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6013      	str	r3, [r2, #0]
 8000b8e:	e002      	b.n	8000b96 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000b90:	2301      	movs	r3, #1
 8000b92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3730      	adds	r7, #48	; 0x30
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	431bde83 	.word	0x431bde83
 8000bac:	200004ac 	.word	0x200004ac
 8000bb0:	40012c00 	.word	0x40012c00
 8000bb4:	20000004 	.word	0x20000004

08000bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bbc:	e7fe      	b.n	8000bbc <NMI_Handler+0x4>

08000bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <HardFault_Handler+0x4>

08000bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <MemManage_Handler+0x4>

08000bca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <BusFault_Handler+0x4>

08000bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <UsageFault_Handler+0x4>

08000bd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000bea:	f002 ff95 	bl	8003b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200004ac 	.word	0x200004ac

08000bf8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	e00a      	b.n	8000c20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c0a:	f3af 8000 	nop.w
 8000c0e:	4601      	mov	r1, r0
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	1c5a      	adds	r2, r3, #1
 8000c14:	60ba      	str	r2, [r7, #8]
 8000c16:	b2ca      	uxtb	r2, r1
 8000c18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	697a      	ldr	r2, [r7, #20]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	dbf0      	blt.n	8000c0a <_read+0x12>
  }

  return len;
 8000c28:	687b      	ldr	r3, [r7, #4]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b083      	sub	sp, #12
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	b083      	sub	sp, #12
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
 8000c52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c5a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <_isatty>:

int _isatty(int file)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c72:	2301      	movs	r3, #1
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
	...

08000c9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca4:	4a14      	ldr	r2, [pc, #80]	; (8000cf8 <_sbrk+0x5c>)
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <_sbrk+0x60>)
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb0:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <_sbrk+0x64>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d102      	bne.n	8000cbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <_sbrk+0x64>)
 8000cba:	4a12      	ldr	r2, [pc, #72]	; (8000d04 <_sbrk+0x68>)
 8000cbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <_sbrk+0x64>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d207      	bcs.n	8000cdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ccc:	f005 fdba 	bl	8006844 <__errno>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	220c      	movs	r2, #12
 8000cd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cda:	e009      	b.n	8000cf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <_sbrk+0x64>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ce2:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <_sbrk+0x64>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4413      	add	r3, r2
 8000cea:	4a05      	ldr	r2, [pc, #20]	; (8000d00 <_sbrk+0x64>)
 8000cec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cee:	68fb      	ldr	r3, [r7, #12]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20010000 	.word	0x20010000
 8000cfc:	00000400 	.word	0x00000400
 8000d00:	200004f8 	.word	0x200004f8
 8000d04:	20001398 	.word	0x20001398

08000d08 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <SystemInit+0x20>)
 8000d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d12:	4a05      	ldr	r2, [pc, #20]	; (8000d28 <SystemInit+0x20>)
 8000d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d64 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d30:	f7ff ffea 	bl	8000d08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d34:	480c      	ldr	r0, [pc, #48]	; (8000d68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d36:	490d      	ldr	r1, [pc, #52]	; (8000d6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d38:	4a0d      	ldr	r2, [pc, #52]	; (8000d70 <LoopForever+0xe>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d3c:	e002      	b.n	8000d44 <LoopCopyDataInit>

08000d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d42:	3304      	adds	r3, #4

08000d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d48:	d3f9      	bcc.n	8000d3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d4c:	4c0a      	ldr	r4, [pc, #40]	; (8000d78 <LoopForever+0x16>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d50:	e001      	b.n	8000d56 <LoopFillZerobss>

08000d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d54:	3204      	adds	r2, #4

08000d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d58:	d3fb      	bcc.n	8000d52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d5a:	f005 fd79 	bl	8006850 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d5e:	f7ff faef 	bl	8000340 <main>

08000d62 <LoopForever>:

LoopForever:
    b LoopForever
 8000d62:	e7fe      	b.n	8000d62 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d64:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d6c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000d70:	080073f8 	.word	0x080073f8
  ldr r2, =_sbss
 8000d74:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000d78:	20001398 	.word	0x20001398

08000d7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d7c:	e7fe      	b.n	8000d7c <ADC1_2_IRQHandler>
	...

08000d80 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <HAL_Init+0x28>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a07      	ldr	r2, [pc, #28]	; (8000da8 <HAL_Init+0x28>)
 8000d8a:	f043 0310 	orr.w	r3, r3, #16
 8000d8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d90:	2003      	movs	r0, #3
 8000d92:	f000 fe22 	bl	80019da <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d96:	200f      	movs	r0, #15
 8000d98:	f7ff fe9e 	bl	8000ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d9c:	f7ff fd90 	bl	80008c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40022000 	.word	0x40022000

08000dac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_IncTick+0x20>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_IncTick+0x24>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4413      	add	r3, r2
 8000dbc:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <HAL_IncTick+0x24>)
 8000dbe:	6013      	str	r3, [r2, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	200004fc 	.word	0x200004fc

08000dd4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <HAL_GetTick+0x14>)
 8000dda:	681b      	ldr	r3, [r3, #0]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	200004fc 	.word	0x200004fc

08000dec <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b09a      	sub	sp, #104	; 0x68
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000df4:	2300      	movs	r3, #0
 8000df6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d101      	bne.n	8000e0c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e1e3      	b.n	80011d4 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	691b      	ldr	r3, [r3, #16]
 8000e10:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	f003 0310 	and.w	r3, r3, #16
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d176      	bne.n	8000f0c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d152      	bne.n	8000ecc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2200      	movs	r2, #0
 8000e36:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff fd65 	bl	8000910 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d13b      	bne.n	8000ecc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f000 fcad 	bl	80017b4 <ADC_Disable>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e64:	f003 0310 	and.w	r3, r3, #16
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d12f      	bne.n	8000ecc <HAL_ADC_Init+0xe0>
 8000e6c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d12b      	bne.n	8000ecc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e78:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e7c:	f023 0302 	bic.w	r3, r3, #2
 8000e80:	f043 0202 	orr.w	r2, r3, #2
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	689a      	ldr	r2, [r3, #8]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e96:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	689a      	ldr	r2, [r3, #8]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ea6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ea8:	4b92      	ldr	r3, [pc, #584]	; (80010f4 <HAL_ADC_Init+0x308>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a92      	ldr	r2, [pc, #584]	; (80010f8 <HAL_ADC_Init+0x30c>)
 8000eae:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb2:	0c9a      	lsrs	r2, r3, #18
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	4413      	add	r3, r2
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ebe:	e002      	b.n	8000ec6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d1f9      	bne.n	8000ec0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d007      	beq.n	8000eea <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ee4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ee8:	d110      	bne.n	8000f0c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	f023 0312 	bic.w	r3, r3, #18
 8000ef2:	f043 0210 	orr.w	r2, r3, #16
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	f043 0201 	orr.w	r2, r3, #1
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f10:	f003 0310 	and.w	r3, r3, #16
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	f040 8150 	bne.w	80011ba <HAL_ADC_Init+0x3ce>
 8000f1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f040 814b 	bne.w	80011ba <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	f040 8143 	bne.w	80011ba <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f38:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000f3c:	f043 0202 	orr.w	r2, r3, #2
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f4c:	d004      	beq.n	8000f58 <HAL_ADC_Init+0x16c>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a6a      	ldr	r2, [pc, #424]	; (80010fc <HAL_ADC_Init+0x310>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d101      	bne.n	8000f5c <HAL_ADC_Init+0x170>
 8000f58:	4b69      	ldr	r3, [pc, #420]	; (8001100 <HAL_ADC_Init+0x314>)
 8000f5a:	e000      	b.n	8000f5e <HAL_ADC_Init+0x172>
 8000f5c:	4b69      	ldr	r3, [pc, #420]	; (8001104 <HAL_ADC_Init+0x318>)
 8000f5e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f68:	d102      	bne.n	8000f70 <HAL_ADC_Init+0x184>
 8000f6a:	4b64      	ldr	r3, [pc, #400]	; (80010fc <HAL_ADC_Init+0x310>)
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	e01a      	b.n	8000fa6 <HAL_ADC_Init+0x1ba>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a61      	ldr	r2, [pc, #388]	; (80010fc <HAL_ADC_Init+0x310>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d103      	bne.n	8000f82 <HAL_ADC_Init+0x196>
 8000f7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	e011      	b.n	8000fa6 <HAL_ADC_Init+0x1ba>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a60      	ldr	r2, [pc, #384]	; (8001108 <HAL_ADC_Init+0x31c>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d102      	bne.n	8000f92 <HAL_ADC_Init+0x1a6>
 8000f8c:	4b5f      	ldr	r3, [pc, #380]	; (800110c <HAL_ADC_Init+0x320>)
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	e009      	b.n	8000fa6 <HAL_ADC_Init+0x1ba>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a5d      	ldr	r2, [pc, #372]	; (800110c <HAL_ADC_Init+0x320>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d102      	bne.n	8000fa2 <HAL_ADC_Init+0x1b6>
 8000f9c:	4b5a      	ldr	r3, [pc, #360]	; (8001108 <HAL_ADC_Init+0x31c>)
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	e001      	b.n	8000fa6 <HAL_ADC_Init+0x1ba>
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	f003 0303 	and.w	r3, r3, #3
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d108      	bne.n	8000fc6 <HAL_ADC_Init+0x1da>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d101      	bne.n	8000fc6 <HAL_ADC_Init+0x1da>
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e000      	b.n	8000fc8 <HAL_ADC_Init+0x1dc>
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d11c      	bne.n	8001006 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000fcc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d010      	beq.n	8000ff4 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d107      	bne.n	8000fee <HAL_ADC_Init+0x202>
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d101      	bne.n	8000fee <HAL_ADC_Init+0x202>
 8000fea:	2301      	movs	r3, #1
 8000fec:	e000      	b.n	8000ff0 <HAL_ADC_Init+0x204>
 8000fee:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d108      	bne.n	8001006 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000ff4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	431a      	orrs	r2, r3
 8001002:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001004:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	7e5b      	ldrb	r3, [r3, #25]
 800100a:	035b      	lsls	r3, r3, #13
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001010:	2a01      	cmp	r2, #1
 8001012:	d002      	beq.n	800101a <HAL_ADC_Init+0x22e>
 8001014:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001018:	e000      	b.n	800101c <HAL_ADC_Init+0x230>
 800101a:	2200      	movs	r2, #0
 800101c:	431a      	orrs	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	431a      	orrs	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	4313      	orrs	r3, r2
 800102a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800102c:	4313      	orrs	r3, r2
 800102e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d11b      	bne.n	8001072 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	7e5b      	ldrb	r3, [r3, #25]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d109      	bne.n	8001056 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001046:	3b01      	subs	r3, #1
 8001048:	045a      	lsls	r2, r3, #17
 800104a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800104c:	4313      	orrs	r3, r2
 800104e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001052:	663b      	str	r3, [r7, #96]	; 0x60
 8001054:	e00d      	b.n	8001072 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800105e:	f043 0220 	orr.w	r2, r3, #32
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	f043 0201 	orr.w	r2, r3, #1
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001076:	2b01      	cmp	r3, #1
 8001078:	d054      	beq.n	8001124 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a22      	ldr	r2, [pc, #136]	; (8001108 <HAL_ADC_Init+0x31c>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d004      	beq.n	800108e <HAL_ADC_Init+0x2a2>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a20      	ldr	r2, [pc, #128]	; (800110c <HAL_ADC_Init+0x320>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d140      	bne.n	8001110 <HAL_ADC_Init+0x324>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001092:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001096:	d02a      	beq.n	80010ee <HAL_ADC_Init+0x302>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800109c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010a0:	d022      	beq.n	80010e8 <HAL_ADC_Init+0x2fc>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a6:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80010aa:	d01a      	beq.n	80010e2 <HAL_ADC_Init+0x2f6>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b0:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80010b4:	d012      	beq.n	80010dc <HAL_ADC_Init+0x2f0>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ba:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80010be:	d00a      	beq.n	80010d6 <HAL_ADC_Init+0x2ea>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c4:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80010c8:	d002      	beq.n	80010d0 <HAL_ADC_Init+0x2e4>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ce:	e023      	b.n	8001118 <HAL_ADC_Init+0x32c>
 80010d0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80010d4:	e020      	b.n	8001118 <HAL_ADC_Init+0x32c>
 80010d6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80010da:	e01d      	b.n	8001118 <HAL_ADC_Init+0x32c>
 80010dc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80010e0:	e01a      	b.n	8001118 <HAL_ADC_Init+0x32c>
 80010e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010e6:	e017      	b.n	8001118 <HAL_ADC_Init+0x32c>
 80010e8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80010ec:	e014      	b.n	8001118 <HAL_ADC_Init+0x32c>
 80010ee:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80010f2:	e011      	b.n	8001118 <HAL_ADC_Init+0x32c>
 80010f4:	20000000 	.word	0x20000000
 80010f8:	431bde83 	.word	0x431bde83
 80010fc:	50000100 	.word	0x50000100
 8001100:	50000300 	.word	0x50000300
 8001104:	50000700 	.word	0x50000700
 8001108:	50000400 	.word	0x50000400
 800110c:	50000500 	.word	0x50000500
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001114:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800111c:	4313      	orrs	r3, r2
 800111e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001120:	4313      	orrs	r3, r2
 8001122:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f003 030c 	and.w	r3, r3, #12
 800112e:	2b00      	cmp	r3, #0
 8001130:	d114      	bne.n	800115c <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	6812      	ldr	r2, [r2, #0]
 800113c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001140:	f023 0302 	bic.w	r3, r3, #2
 8001144:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	7e1b      	ldrb	r3, [r3, #24]
 800114a:	039a      	lsls	r2, r3, #14
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	4313      	orrs	r3, r2
 8001156:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001158:	4313      	orrs	r3, r2
 800115a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	68da      	ldr	r2, [r3, #12]
 8001162:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <HAL_ADC_Init+0x3f0>)
 8001164:	4013      	ands	r3, r2
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	6812      	ldr	r2, [r2, #0]
 800116a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800116c:	430b      	orrs	r3, r1
 800116e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	691b      	ldr	r3, [r3, #16]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d10c      	bne.n	8001192 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f023 010f 	bic.w	r1, r3, #15
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	1e5a      	subs	r2, r3, #1
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	430a      	orrs	r2, r1
 800118e:	631a      	str	r2, [r3, #48]	; 0x30
 8001190:	e007      	b.n	80011a2 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f022 020f 	bic.w	r2, r2, #15
 80011a0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ac:	f023 0303 	bic.w	r3, r3, #3
 80011b0:	f043 0201 	orr.w	r2, r3, #1
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	641a      	str	r2, [r3, #64]	; 0x40
 80011b8:	e00a      	b.n	80011d0 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	f023 0312 	bic.w	r3, r3, #18
 80011c2:	f043 0210 	orr.w	r2, r3, #16
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80011ca:	2301      	movs	r3, #1
 80011cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80011d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3768      	adds	r7, #104	; 0x68
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	fff0c007 	.word	0xfff0c007

080011e0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b09b      	sub	sp, #108	; 0x6c
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011ea:	2300      	movs	r3, #0
 80011ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d101      	bne.n	8001202 <HAL_ADC_ConfigChannel+0x22>
 80011fe:	2302      	movs	r3, #2
 8001200:	e2c8      	b.n	8001794 <HAL_ADC_ConfigChannel+0x5b4>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2201      	movs	r2, #1
 8001206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	2b00      	cmp	r3, #0
 8001216:	f040 82ac 	bne.w	8001772 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b04      	cmp	r3, #4
 8001220:	d81c      	bhi.n	800125c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	4613      	mov	r3, r2
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	4413      	add	r3, r2
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	461a      	mov	r2, r3
 8001236:	231f      	movs	r3, #31
 8001238:	4093      	lsls	r3, r2
 800123a:	43db      	mvns	r3, r3
 800123c:	4019      	ands	r1, r3
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	6818      	ldr	r0, [r3, #0]
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685a      	ldr	r2, [r3, #4]
 8001246:	4613      	mov	r3, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	4413      	add	r3, r2
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	fa00 f203 	lsl.w	r2, r0, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	430a      	orrs	r2, r1
 8001258:	631a      	str	r2, [r3, #48]	; 0x30
 800125a:	e063      	b.n	8001324 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b09      	cmp	r3, #9
 8001262:	d81e      	bhi.n	80012a2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	4613      	mov	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	4413      	add	r3, r2
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	3b1e      	subs	r3, #30
 8001278:	221f      	movs	r2, #31
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43db      	mvns	r3, r3
 8001280:	4019      	ands	r1, r3
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	6818      	ldr	r0, [r3, #0]
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	4613      	mov	r3, r2
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	4413      	add	r3, r2
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	3b1e      	subs	r3, #30
 8001294:	fa00 f203 	lsl.w	r2, r0, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	430a      	orrs	r2, r1
 800129e:	635a      	str	r2, [r3, #52]	; 0x34
 80012a0:	e040      	b.n	8001324 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b0e      	cmp	r3, #14
 80012a8:	d81e      	bhi.n	80012e8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	4613      	mov	r3, r2
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4413      	add	r3, r2
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	3b3c      	subs	r3, #60	; 0x3c
 80012be:	221f      	movs	r2, #31
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	4019      	ands	r1, r3
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	6818      	ldr	r0, [r3, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	4613      	mov	r3, r2
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	4413      	add	r3, r2
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	3b3c      	subs	r3, #60	; 0x3c
 80012da:	fa00 f203 	lsl.w	r2, r0, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	430a      	orrs	r2, r1
 80012e4:	639a      	str	r2, [r3, #56]	; 0x38
 80012e6:	e01d      	b.n	8001324 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	4613      	mov	r3, r2
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	4413      	add	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	3b5a      	subs	r3, #90	; 0x5a
 80012fc:	221f      	movs	r2, #31
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43db      	mvns	r3, r3
 8001304:	4019      	ands	r1, r3
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	6818      	ldr	r0, [r3, #0]
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	4613      	mov	r3, r2
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	4413      	add	r3, r2
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	3b5a      	subs	r3, #90	; 0x5a
 8001318:	fa00 f203 	lsl.w	r2, r0, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	430a      	orrs	r2, r1
 8001322:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 030c 	and.w	r3, r3, #12
 800132e:	2b00      	cmp	r3, #0
 8001330:	f040 80e5 	bne.w	80014fe <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b09      	cmp	r3, #9
 800133a:	d91c      	bls.n	8001376 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6999      	ldr	r1, [r3, #24]
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	4613      	mov	r3, r2
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	4413      	add	r3, r2
 800134c:	3b1e      	subs	r3, #30
 800134e:	2207      	movs	r2, #7
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	4019      	ands	r1, r3
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	6898      	ldr	r0, [r3, #8]
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4613      	mov	r3, r2
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	4413      	add	r3, r2
 8001366:	3b1e      	subs	r3, #30
 8001368:	fa00 f203 	lsl.w	r2, r0, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	430a      	orrs	r2, r1
 8001372:	619a      	str	r2, [r3, #24]
 8001374:	e019      	b.n	80013aa <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	6959      	ldr	r1, [r3, #20]
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4613      	mov	r3, r2
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	4413      	add	r3, r2
 8001386:	2207      	movs	r2, #7
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	4019      	ands	r1, r3
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	6898      	ldr	r0, [r3, #8]
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4613      	mov	r3, r2
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	4413      	add	r3, r2
 800139e:	fa00 f203 	lsl.w	r2, r0, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	430a      	orrs	r2, r1
 80013a8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	695a      	ldr	r2, [r3, #20]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	08db      	lsrs	r3, r3, #3
 80013b6:	f003 0303 	and.w	r3, r3, #3
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	691b      	ldr	r3, [r3, #16]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	2b03      	cmp	r3, #3
 80013ca:	d84f      	bhi.n	800146c <HAL_ADC_ConfigChannel+0x28c>
 80013cc:	a201      	add	r2, pc, #4	; (adr r2, 80013d4 <HAL_ADC_ConfigChannel+0x1f4>)
 80013ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d2:	bf00      	nop
 80013d4:	080013e5 	.word	0x080013e5
 80013d8:	08001407 	.word	0x08001407
 80013dc:	08001429 	.word	0x08001429
 80013e0:	0800144b 	.word	0x0800144b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013ea:	4b99      	ldr	r3, [pc, #612]	; (8001650 <HAL_ADC_ConfigChannel+0x470>)
 80013ec:	4013      	ands	r3, r2
 80013ee:	683a      	ldr	r2, [r7, #0]
 80013f0:	6812      	ldr	r2, [r2, #0]
 80013f2:	0691      	lsls	r1, r2, #26
 80013f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013f6:	430a      	orrs	r2, r1
 80013f8:	431a      	orrs	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001402:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001404:	e07b      	b.n	80014fe <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800140c:	4b90      	ldr	r3, [pc, #576]	; (8001650 <HAL_ADC_ConfigChannel+0x470>)
 800140e:	4013      	ands	r3, r2
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	6812      	ldr	r2, [r2, #0]
 8001414:	0691      	lsls	r1, r2, #26
 8001416:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001418:	430a      	orrs	r2, r1
 800141a:	431a      	orrs	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001424:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001426:	e06a      	b.n	80014fe <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800142e:	4b88      	ldr	r3, [pc, #544]	; (8001650 <HAL_ADC_ConfigChannel+0x470>)
 8001430:	4013      	ands	r3, r2
 8001432:	683a      	ldr	r2, [r7, #0]
 8001434:	6812      	ldr	r2, [r2, #0]
 8001436:	0691      	lsls	r1, r2, #26
 8001438:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800143a:	430a      	orrs	r2, r1
 800143c:	431a      	orrs	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001446:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001448:	e059      	b.n	80014fe <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001450:	4b7f      	ldr	r3, [pc, #508]	; (8001650 <HAL_ADC_ConfigChannel+0x470>)
 8001452:	4013      	ands	r3, r2
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	6812      	ldr	r2, [r2, #0]
 8001458:	0691      	lsls	r1, r2, #26
 800145a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800145c:	430a      	orrs	r2, r1
 800145e:	431a      	orrs	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001468:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800146a:	e048      	b.n	80014fe <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001472:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	069b      	lsls	r3, r3, #26
 800147c:	429a      	cmp	r2, r3
 800147e:	d107      	bne.n	8001490 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800148e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001496:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	069b      	lsls	r3, r3, #26
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d107      	bne.n	80014b4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80014b2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80014ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	069b      	lsls	r3, r3, #26
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d107      	bne.n	80014d8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80014d6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80014de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	069b      	lsls	r3, r3, #26
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d107      	bne.n	80014fc <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80014fa:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80014fc:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	2b01      	cmp	r3, #1
 800150a:	d108      	bne.n	800151e <HAL_ADC_ConfigChannel+0x33e>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b01      	cmp	r3, #1
 8001518:	d101      	bne.n	800151e <HAL_ADC_ConfigChannel+0x33e>
 800151a:	2301      	movs	r3, #1
 800151c:	e000      	b.n	8001520 <HAL_ADC_ConfigChannel+0x340>
 800151e:	2300      	movs	r3, #0
 8001520:	2b00      	cmp	r3, #0
 8001522:	f040 8131 	bne.w	8001788 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d00f      	beq.n	800154e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2201      	movs	r2, #1
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43da      	mvns	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	400a      	ands	r2, r1
 8001548:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800154c:	e049      	b.n	80015e2 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2201      	movs	r2, #1
 800155c:	409a      	lsls	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b09      	cmp	r3, #9
 800156e:	d91c      	bls.n	80015aa <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6999      	ldr	r1, [r3, #24]
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	4613      	mov	r3, r2
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	4413      	add	r3, r2
 8001580:	3b1b      	subs	r3, #27
 8001582:	2207      	movs	r2, #7
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	4019      	ands	r1, r3
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	6898      	ldr	r0, [r3, #8]
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4613      	mov	r3, r2
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	4413      	add	r3, r2
 800159a:	3b1b      	subs	r3, #27
 800159c:	fa00 f203 	lsl.w	r2, r0, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	619a      	str	r2, [r3, #24]
 80015a8:	e01b      	b.n	80015e2 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6959      	ldr	r1, [r3, #20]
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	1c5a      	adds	r2, r3, #1
 80015b6:	4613      	mov	r3, r2
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	4413      	add	r3, r2
 80015bc:	2207      	movs	r2, #7
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43db      	mvns	r3, r3
 80015c4:	4019      	ands	r1, r3
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	6898      	ldr	r0, [r3, #8]
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	1c5a      	adds	r2, r3, #1
 80015d0:	4613      	mov	r3, r2
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	4413      	add	r3, r2
 80015d6:	fa00 f203 	lsl.w	r2, r0, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	430a      	orrs	r2, r1
 80015e0:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015ea:	d004      	beq.n	80015f6 <HAL_ADC_ConfigChannel+0x416>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a18      	ldr	r2, [pc, #96]	; (8001654 <HAL_ADC_ConfigChannel+0x474>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d101      	bne.n	80015fa <HAL_ADC_ConfigChannel+0x41a>
 80015f6:	4b18      	ldr	r3, [pc, #96]	; (8001658 <HAL_ADC_ConfigChannel+0x478>)
 80015f8:	e000      	b.n	80015fc <HAL_ADC_ConfigChannel+0x41c>
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <HAL_ADC_ConfigChannel+0x47c>)
 80015fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2b10      	cmp	r3, #16
 8001604:	d105      	bne.n	8001612 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001606:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800160e:	2b00      	cmp	r3, #0
 8001610:	d015      	beq.n	800163e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001616:	2b11      	cmp	r3, #17
 8001618:	d105      	bne.n	8001626 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800161a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001622:	2b00      	cmp	r3, #0
 8001624:	d00b      	beq.n	800163e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800162a:	2b12      	cmp	r3, #18
 800162c:	f040 80ac 	bne.w	8001788 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001630:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001638:	2b00      	cmp	r3, #0
 800163a:	f040 80a5 	bne.w	8001788 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001646:	d10b      	bne.n	8001660 <HAL_ADC_ConfigChannel+0x480>
 8001648:	4b02      	ldr	r3, [pc, #8]	; (8001654 <HAL_ADC_ConfigChannel+0x474>)
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	e023      	b.n	8001696 <HAL_ADC_ConfigChannel+0x4b6>
 800164e:	bf00      	nop
 8001650:	83fff000 	.word	0x83fff000
 8001654:	50000100 	.word	0x50000100
 8001658:	50000300 	.word	0x50000300
 800165c:	50000700 	.word	0x50000700
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a4e      	ldr	r2, [pc, #312]	; (80017a0 <HAL_ADC_ConfigChannel+0x5c0>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d103      	bne.n	8001672 <HAL_ADC_ConfigChannel+0x492>
 800166a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	e011      	b.n	8001696 <HAL_ADC_ConfigChannel+0x4b6>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a4b      	ldr	r2, [pc, #300]	; (80017a4 <HAL_ADC_ConfigChannel+0x5c4>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d102      	bne.n	8001682 <HAL_ADC_ConfigChannel+0x4a2>
 800167c:	4b4a      	ldr	r3, [pc, #296]	; (80017a8 <HAL_ADC_ConfigChannel+0x5c8>)
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	e009      	b.n	8001696 <HAL_ADC_ConfigChannel+0x4b6>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a48      	ldr	r2, [pc, #288]	; (80017a8 <HAL_ADC_ConfigChannel+0x5c8>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d102      	bne.n	8001692 <HAL_ADC_ConfigChannel+0x4b2>
 800168c:	4b45      	ldr	r3, [pc, #276]	; (80017a4 <HAL_ADC_ConfigChannel+0x5c4>)
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	e001      	b.n	8001696 <HAL_ADC_ConfigChannel+0x4b6>
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d108      	bne.n	80016b6 <HAL_ADC_ConfigChannel+0x4d6>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d101      	bne.n	80016b6 <HAL_ADC_ConfigChannel+0x4d6>
 80016b2:	2301      	movs	r3, #1
 80016b4:	e000      	b.n	80016b8 <HAL_ADC_ConfigChannel+0x4d8>
 80016b6:	2300      	movs	r3, #0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d150      	bne.n	800175e <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80016bc:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d010      	beq.n	80016e4 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f003 0303 	and.w	r3, r3, #3
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d107      	bne.n	80016de <HAL_ADC_ConfigChannel+0x4fe>
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d101      	bne.n	80016de <HAL_ADC_ConfigChannel+0x4fe>
 80016da:	2301      	movs	r3, #1
 80016dc:	e000      	b.n	80016e0 <HAL_ADC_ConfigChannel+0x500>
 80016de:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d13c      	bne.n	800175e <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b10      	cmp	r3, #16
 80016ea:	d11d      	bne.n	8001728 <HAL_ADC_ConfigChannel+0x548>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016f4:	d118      	bne.n	8001728 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80016f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80016fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001700:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001702:	4b2a      	ldr	r3, [pc, #168]	; (80017ac <HAL_ADC_ConfigChannel+0x5cc>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a2a      	ldr	r2, [pc, #168]	; (80017b0 <HAL_ADC_ConfigChannel+0x5d0>)
 8001708:	fba2 2303 	umull	r2, r3, r2, r3
 800170c:	0c9a      	lsrs	r2, r3, #18
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001718:	e002      	b.n	8001720 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	3b01      	subs	r3, #1
 800171e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f9      	bne.n	800171a <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001726:	e02e      	b.n	8001786 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b11      	cmp	r3, #17
 800172e:	d10b      	bne.n	8001748 <HAL_ADC_ConfigChannel+0x568>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001738:	d106      	bne.n	8001748 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800173a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001742:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001744:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001746:	e01e      	b.n	8001786 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b12      	cmp	r3, #18
 800174e:	d11a      	bne.n	8001786 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001750:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001758:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800175a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800175c:	e013      	b.n	8001786 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	f043 0220 	orr.w	r2, r3, #32
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001770:	e00a      	b.n	8001788 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f043 0220 	orr.w	r2, r3, #32
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001784:	e000      	b.n	8001788 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001786:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001790:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001794:	4618      	mov	r0, r3
 8001796:	376c      	adds	r7, #108	; 0x6c
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	50000100 	.word	0x50000100
 80017a4:	50000400 	.word	0x50000400
 80017a8:	50000500 	.word	0x50000500
 80017ac:	20000000 	.word	0x20000000
 80017b0:	431bde83 	.word	0x431bde83

080017b4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017bc:	2300      	movs	r3, #0
 80017be:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d108      	bne.n	80017e0 <ADC_Disable+0x2c>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d101      	bne.n	80017e0 <ADC_Disable+0x2c>
 80017dc:	2301      	movs	r3, #1
 80017de:	e000      	b.n	80017e2 <ADC_Disable+0x2e>
 80017e0:	2300      	movs	r3, #0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d047      	beq.n	8001876 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f003 030d 	and.w	r3, r3, #13
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d10f      	bne.n	8001814 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f042 0202 	orr.w	r2, r2, #2
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2203      	movs	r2, #3
 800180a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800180c:	f7ff fae2 	bl	8000dd4 <HAL_GetTick>
 8001810:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001812:	e029      	b.n	8001868 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001818:	f043 0210 	orr.w	r2, r3, #16
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001824:	f043 0201 	orr.w	r2, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e023      	b.n	8001878 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001830:	f7ff fad0 	bl	8000dd4 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d914      	bls.n	8001868 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	2b01      	cmp	r3, #1
 800184a:	d10d      	bne.n	8001868 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001850:	f043 0210 	orr.w	r2, r3, #16
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185c:	f043 0201 	orr.w	r2, r3, #1
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e007      	b.n	8001878 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b01      	cmp	r3, #1
 8001874:	d0dc      	beq.n	8001830 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <__NVIC_SetPriorityGrouping>:
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800189c:	4013      	ands	r3, r2
 800189e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b2:	4a04      	ldr	r2, [pc, #16]	; (80018c4 <__NVIC_SetPriorityGrouping+0x44>)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	60d3      	str	r3, [r2, #12]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <__NVIC_GetPriorityGrouping>:
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018cc:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	0a1b      	lsrs	r3, r3, #8
 80018d2:	f003 0307 	and.w	r3, r3, #7
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <__NVIC_EnableIRQ>:
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	db0b      	blt.n	800190e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	f003 021f 	and.w	r2, r3, #31
 80018fc:	4907      	ldr	r1, [pc, #28]	; (800191c <__NVIC_EnableIRQ+0x38>)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	095b      	lsrs	r3, r3, #5
 8001904:	2001      	movs	r0, #1
 8001906:	fa00 f202 	lsl.w	r2, r0, r2
 800190a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000e100 	.word	0xe000e100

08001920 <__NVIC_SetPriority>:
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	6039      	str	r1, [r7, #0]
 800192a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001930:	2b00      	cmp	r3, #0
 8001932:	db0a      	blt.n	800194a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	b2da      	uxtb	r2, r3
 8001938:	490c      	ldr	r1, [pc, #48]	; (800196c <__NVIC_SetPriority+0x4c>)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	0112      	lsls	r2, r2, #4
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	440b      	add	r3, r1
 8001944:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001948:	e00a      	b.n	8001960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	b2da      	uxtb	r2, r3
 800194e:	4908      	ldr	r1, [pc, #32]	; (8001970 <__NVIC_SetPriority+0x50>)
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	3b04      	subs	r3, #4
 8001958:	0112      	lsls	r2, r2, #4
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	440b      	add	r3, r1
 800195e:	761a      	strb	r2, [r3, #24]
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000e100 	.word	0xe000e100
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <NVIC_EncodePriority>:
{
 8001974:	b480      	push	{r7}
 8001976:	b089      	sub	sp, #36	; 0x24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f1c3 0307 	rsb	r3, r3, #7
 800198e:	2b04      	cmp	r3, #4
 8001990:	bf28      	it	cs
 8001992:	2304      	movcs	r3, #4
 8001994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3304      	adds	r3, #4
 800199a:	2b06      	cmp	r3, #6
 800199c:	d902      	bls.n	80019a4 <NVIC_EncodePriority+0x30>
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3b03      	subs	r3, #3
 80019a2:	e000      	b.n	80019a6 <NVIC_EncodePriority+0x32>
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	f04f 32ff 	mov.w	r2, #4294967295
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43da      	mvns	r2, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	401a      	ands	r2, r3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019bc:	f04f 31ff 	mov.w	r1, #4294967295
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	fa01 f303 	lsl.w	r3, r1, r3
 80019c6:	43d9      	mvns	r1, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019cc:	4313      	orrs	r3, r2
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3724      	adds	r7, #36	; 0x24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff ff4c 	bl	8001880 <__NVIC_SetPriorityGrouping>
}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
 80019fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a02:	f7ff ff61 	bl	80018c8 <__NVIC_GetPriorityGrouping>
 8001a06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	68b9      	ldr	r1, [r7, #8]
 8001a0c:	6978      	ldr	r0, [r7, #20]
 8001a0e:	f7ff ffb1 	bl	8001974 <NVIC_EncodePriority>
 8001a12:	4602      	mov	r2, r0
 8001a14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a18:	4611      	mov	r1, r2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff ff80 	bl	8001920 <__NVIC_SetPriority>
}
 8001a20:	bf00      	nop
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff ff54 	bl	80018e4 <__NVIC_EnableIRQ>
}
 8001a3c:	bf00      	nop
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a52:	e160      	b.n	8001d16 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	2101      	movs	r1, #1
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a60:	4013      	ands	r3, r2
 8001a62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 8152 	beq.w	8001d10 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d005      	beq.n	8001a84 <HAL_GPIO_Init+0x40>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d130      	bne.n	8001ae6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	2203      	movs	r2, #3
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	68da      	ldr	r2, [r3, #12]
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aba:	2201      	movs	r2, #1
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	091b      	lsrs	r3, r3, #4
 8001ad0:	f003 0201 	and.w	r2, r3, #1
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d017      	beq.n	8001b22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	2203      	movs	r2, #3
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4013      	ands	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d123      	bne.n	8001b76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	08da      	lsrs	r2, r3, #3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3208      	adds	r2, #8
 8001b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	220f      	movs	r2, #15
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	691a      	ldr	r2, [r3, #16]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	08da      	lsrs	r2, r3, #3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3208      	adds	r2, #8
 8001b70:	6939      	ldr	r1, [r7, #16]
 8001b72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	2203      	movs	r2, #3
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 0203 	and.w	r2, r3, #3
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 80ac 	beq.w	8001d10 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb8:	4b5e      	ldr	r3, [pc, #376]	; (8001d34 <HAL_GPIO_Init+0x2f0>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	4a5d      	ldr	r2, [pc, #372]	; (8001d34 <HAL_GPIO_Init+0x2f0>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	6193      	str	r3, [r2, #24]
 8001bc4:	4b5b      	ldr	r3, [pc, #364]	; (8001d34 <HAL_GPIO_Init+0x2f0>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bd0:	4a59      	ldr	r2, [pc, #356]	; (8001d38 <HAL_GPIO_Init+0x2f4>)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	089b      	lsrs	r3, r3, #2
 8001bd6:	3302      	adds	r3, #2
 8001bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	220f      	movs	r2, #15
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bfa:	d025      	beq.n	8001c48 <HAL_GPIO_Init+0x204>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a4f      	ldr	r2, [pc, #316]	; (8001d3c <HAL_GPIO_Init+0x2f8>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d01f      	beq.n	8001c44 <HAL_GPIO_Init+0x200>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a4e      	ldr	r2, [pc, #312]	; (8001d40 <HAL_GPIO_Init+0x2fc>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d019      	beq.n	8001c40 <HAL_GPIO_Init+0x1fc>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a4d      	ldr	r2, [pc, #308]	; (8001d44 <HAL_GPIO_Init+0x300>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d013      	beq.n	8001c3c <HAL_GPIO_Init+0x1f8>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a4c      	ldr	r2, [pc, #304]	; (8001d48 <HAL_GPIO_Init+0x304>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d00d      	beq.n	8001c38 <HAL_GPIO_Init+0x1f4>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a4b      	ldr	r2, [pc, #300]	; (8001d4c <HAL_GPIO_Init+0x308>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d007      	beq.n	8001c34 <HAL_GPIO_Init+0x1f0>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a4a      	ldr	r2, [pc, #296]	; (8001d50 <HAL_GPIO_Init+0x30c>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d101      	bne.n	8001c30 <HAL_GPIO_Init+0x1ec>
 8001c2c:	2306      	movs	r3, #6
 8001c2e:	e00c      	b.n	8001c4a <HAL_GPIO_Init+0x206>
 8001c30:	2307      	movs	r3, #7
 8001c32:	e00a      	b.n	8001c4a <HAL_GPIO_Init+0x206>
 8001c34:	2305      	movs	r3, #5
 8001c36:	e008      	b.n	8001c4a <HAL_GPIO_Init+0x206>
 8001c38:	2304      	movs	r3, #4
 8001c3a:	e006      	b.n	8001c4a <HAL_GPIO_Init+0x206>
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e004      	b.n	8001c4a <HAL_GPIO_Init+0x206>
 8001c40:	2302      	movs	r3, #2
 8001c42:	e002      	b.n	8001c4a <HAL_GPIO_Init+0x206>
 8001c44:	2301      	movs	r3, #1
 8001c46:	e000      	b.n	8001c4a <HAL_GPIO_Init+0x206>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	f002 0203 	and.w	r2, r2, #3
 8001c50:	0092      	lsls	r2, r2, #2
 8001c52:	4093      	lsls	r3, r2
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c5a:	4937      	ldr	r1, [pc, #220]	; (8001d38 <HAL_GPIO_Init+0x2f4>)
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	089b      	lsrs	r3, r3, #2
 8001c60:	3302      	adds	r3, #2
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c68:	4b3a      	ldr	r3, [pc, #232]	; (8001d54 <HAL_GPIO_Init+0x310>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	43db      	mvns	r3, r3
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4013      	ands	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c8c:	4a31      	ldr	r2, [pc, #196]	; (8001d54 <HAL_GPIO_Init+0x310>)
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c92:	4b30      	ldr	r3, [pc, #192]	; (8001d54 <HAL_GPIO_Init+0x310>)
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cb6:	4a27      	ldr	r2, [pc, #156]	; (8001d54 <HAL_GPIO_Init+0x310>)
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cbc:	4b25      	ldr	r3, [pc, #148]	; (8001d54 <HAL_GPIO_Init+0x310>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ce0:	4a1c      	ldr	r2, [pc, #112]	; (8001d54 <HAL_GPIO_Init+0x310>)
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ce6:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <HAL_GPIO_Init+0x310>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d0a:	4a12      	ldr	r2, [pc, #72]	; (8001d54 <HAL_GPIO_Init+0x310>)
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	3301      	adds	r3, #1
 8001d14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f47f ae97 	bne.w	8001a54 <HAL_GPIO_Init+0x10>
  }
}
 8001d26:	bf00      	nop
 8001d28:	bf00      	nop
 8001d2a:	371c      	adds	r7, #28
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40010000 	.word	0x40010000
 8001d3c:	48000400 	.word	0x48000400
 8001d40:	48000800 	.word	0x48000800
 8001d44:	48000c00 	.word	0x48000c00
 8001d48:	48001000 	.word	0x48001000
 8001d4c:	48001400 	.word	0x48001400
 8001d50:	48001800 	.word	0x48001800
 8001d54:	40010400 	.word	0x40010400

08001d58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	807b      	strh	r3, [r7, #2]
 8001d64:	4613      	mov	r3, r2
 8001d66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d68:	787b      	ldrb	r3, [r7, #1]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d6e:	887a      	ldrh	r2, [r7, #2]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d74:	e002      	b.n	8001d7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d76:	887a      	ldrh	r2, [r7, #2]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e081      	b.n	8001e9e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d106      	bne.n	8001db4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7fe fdec 	bl	800098c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2224      	movs	r2, #36	; 0x24
 8001db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0201 	bic.w	r2, r2, #1
 8001dca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dd8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001de8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d107      	bne.n	8001e02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	e006      	b.n	8001e10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689a      	ldr	r2, [r3, #8]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d104      	bne.n	8001e22 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e20:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6812      	ldr	r2, [r2, #0]
 8001e2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e34:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68da      	ldr	r2, [r3, #12]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e44:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691a      	ldr	r2, [r3, #16]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	69d9      	ldr	r1, [r3, #28]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a1a      	ldr	r2, [r3, #32]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0201 	orr.w	r2, r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2220      	movs	r2, #32
 8001e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
 8001eae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b20      	cmp	r3, #32
 8001eba:	d138      	bne.n	8001f2e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d101      	bne.n	8001eca <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e032      	b.n	8001f30 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2224      	movs	r2, #36	; 0x24
 8001ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0201 	bic.w	r2, r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ef8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6819      	ldr	r1, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f042 0201 	orr.w	r2, r2, #1
 8001f18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2220      	movs	r2, #32
 8001f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	e000      	b.n	8001f30 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f2e:	2302      	movs	r3, #2
  }
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b20      	cmp	r3, #32
 8001f50:	d139      	bne.n	8001fc6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d101      	bne.n	8001f60 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	e033      	b.n	8001fc8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2224      	movs	r2, #36	; 0x24
 8001f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0201 	bic.w	r2, r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f8e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	021b      	lsls	r3, r3, #8
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f042 0201 	orr.w	r2, r2, #1
 8001fb0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	e000      	b.n	8001fc8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001fc6:	2302      	movs	r3, #2
  }
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fe0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fe4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fe6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d102      	bne.n	8001ffa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	f001 b83a 	b.w	800306e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ffa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ffe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 816f 	beq.w	80022ee <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002010:	4bb5      	ldr	r3, [pc, #724]	; (80022e8 <HAL_RCC_OscConfig+0x314>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 030c 	and.w	r3, r3, #12
 8002018:	2b04      	cmp	r3, #4
 800201a:	d00c      	beq.n	8002036 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800201c:	4bb2      	ldr	r3, [pc, #712]	; (80022e8 <HAL_RCC_OscConfig+0x314>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 030c 	and.w	r3, r3, #12
 8002024:	2b08      	cmp	r3, #8
 8002026:	d15c      	bne.n	80020e2 <HAL_RCC_OscConfig+0x10e>
 8002028:	4baf      	ldr	r3, [pc, #700]	; (80022e8 <HAL_RCC_OscConfig+0x314>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002034:	d155      	bne.n	80020e2 <HAL_RCC_OscConfig+0x10e>
 8002036:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800203a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002042:	fa93 f3a3 	rbit	r3, r3
 8002046:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800204a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800204e:	fab3 f383 	clz	r3, r3
 8002052:	b2db      	uxtb	r3, r3
 8002054:	095b      	lsrs	r3, r3, #5
 8002056:	b2db      	uxtb	r3, r3
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b01      	cmp	r3, #1
 8002060:	d102      	bne.n	8002068 <HAL_RCC_OscConfig+0x94>
 8002062:	4ba1      	ldr	r3, [pc, #644]	; (80022e8 <HAL_RCC_OscConfig+0x314>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	e015      	b.n	8002094 <HAL_RCC_OscConfig+0xc0>
 8002068:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800206c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002070:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002074:	fa93 f3a3 	rbit	r3, r3
 8002078:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800207c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002080:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002084:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002088:	fa93 f3a3 	rbit	r3, r3
 800208c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002090:	4b95      	ldr	r3, [pc, #596]	; (80022e8 <HAL_RCC_OscConfig+0x314>)
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002098:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800209c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80020a0:	fa92 f2a2 	rbit	r2, r2
 80020a4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80020a8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80020ac:	fab2 f282 	clz	r2, r2
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	f042 0220 	orr.w	r2, r2, #32
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	f002 021f 	and.w	r2, r2, #31
 80020bc:	2101      	movs	r1, #1
 80020be:	fa01 f202 	lsl.w	r2, r1, r2
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 8111 	beq.w	80022ec <HAL_RCC_OscConfig+0x318>
 80020ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f040 8108 	bne.w	80022ec <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	f000 bfc6 	b.w	800306e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f2:	d106      	bne.n	8002102 <HAL_RCC_OscConfig+0x12e>
 80020f4:	4b7c      	ldr	r3, [pc, #496]	; (80022e8 <HAL_RCC_OscConfig+0x314>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a7b      	ldr	r2, [pc, #492]	; (80022e8 <HAL_RCC_OscConfig+0x314>)
 80020fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020fe:	6013      	str	r3, [r2, #0]
 8002100:	e036      	b.n	8002170 <HAL_RCC_OscConfig+0x19c>
 8002102:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002106:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10c      	bne.n	800212c <HAL_RCC_OscConfig+0x158>
 8002112:	4b75      	ldr	r3, [pc, #468]	; (80022e8 <HAL_RCC_OscConfig+0x314>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a74      	ldr	r2, [pc, #464]	; (80022e8 <HAL_RCC_OscConfig+0x314>)
 8002118:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	4b72      	ldr	r3, [pc, #456]	; (80022e8 <HAL_RCC_OscConfig+0x314>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a71      	ldr	r2, [pc, #452]	; (80022e8 <HAL_RCC_OscConfig+0x314>)
 8002124:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	e021      	b.n	8002170 <HAL_RCC_OscConfig+0x19c>
 800212c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002130:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800213c:	d10c      	bne.n	8002158 <HAL_RCC_OscConfig+0x184>
 800213e:	4b6a      	ldr	r3, [pc, #424]	; (80022e8 <HAL_RCC_OscConfig+0x314>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a69      	ldr	r2, [pc, #420]	; (80022e8 <HAL_RCC_OscConfig+0x314>)
 8002144:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	4b67      	ldr	r3, [pc, #412]	; (80022e8 <HAL_RCC_OscConfig+0x314>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a66      	ldr	r2, [pc, #408]	; (80022e8 <HAL_RCC_OscConfig+0x314>)
 8002150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	e00b      	b.n	8002170 <HAL_RCC_OscConfig+0x19c>
 8002158:	4b63      	ldr	r3, [pc, #396]	; (80022e8 <HAL_RCC_OscConfig+0x314>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a62      	ldr	r2, [pc, #392]	; (80022e8 <HAL_RCC_OscConfig+0x314>)
 800215e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002162:	6013      	str	r3, [r2, #0]
 8002164:	4b60      	ldr	r3, [pc, #384]	; (80022e8 <HAL_RCC_OscConfig+0x314>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a5f      	ldr	r2, [pc, #380]	; (80022e8 <HAL_RCC_OscConfig+0x314>)
 800216a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800216e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002170:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002174:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d059      	beq.n	8002234 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002180:	f7fe fe28 	bl	8000dd4 <HAL_GetTick>
 8002184:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002188:	e00a      	b.n	80021a0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800218a:	f7fe fe23 	bl	8000dd4 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b64      	cmp	r3, #100	; 0x64
 8002198:	d902      	bls.n	80021a0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	f000 bf67 	b.w	800306e <HAL_RCC_OscConfig+0x109a>
 80021a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021a4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80021ac:	fa93 f3a3 	rbit	r3, r3
 80021b0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80021b4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b8:	fab3 f383 	clz	r3, r3
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	095b      	lsrs	r3, r3, #5
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	f043 0301 	orr.w	r3, r3, #1
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d102      	bne.n	80021d2 <HAL_RCC_OscConfig+0x1fe>
 80021cc:	4b46      	ldr	r3, [pc, #280]	; (80022e8 <HAL_RCC_OscConfig+0x314>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	e015      	b.n	80021fe <HAL_RCC_OscConfig+0x22a>
 80021d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021d6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021da:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80021de:	fa93 f3a3 	rbit	r3, r3
 80021e2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80021e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021ea:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80021ee:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80021f2:	fa93 f3a3 	rbit	r3, r3
 80021f6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80021fa:	4b3b      	ldr	r3, [pc, #236]	; (80022e8 <HAL_RCC_OscConfig+0x314>)
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002202:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002206:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800220a:	fa92 f2a2 	rbit	r2, r2
 800220e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002212:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002216:	fab2 f282 	clz	r2, r2
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	f042 0220 	orr.w	r2, r2, #32
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	f002 021f 	and.w	r2, r2, #31
 8002226:	2101      	movs	r1, #1
 8002228:	fa01 f202 	lsl.w	r2, r1, r2
 800222c:	4013      	ands	r3, r2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0ab      	beq.n	800218a <HAL_RCC_OscConfig+0x1b6>
 8002232:	e05c      	b.n	80022ee <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002234:	f7fe fdce 	bl	8000dd4 <HAL_GetTick>
 8002238:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223c:	e00a      	b.n	8002254 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800223e:	f7fe fdc9 	bl	8000dd4 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b64      	cmp	r3, #100	; 0x64
 800224c:	d902      	bls.n	8002254 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	f000 bf0d 	b.w	800306e <HAL_RCC_OscConfig+0x109a>
 8002254:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002258:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002260:	fa93 f3a3 	rbit	r3, r3
 8002264:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002268:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800226c:	fab3 f383 	clz	r3, r3
 8002270:	b2db      	uxtb	r3, r3
 8002272:	095b      	lsrs	r3, r3, #5
 8002274:	b2db      	uxtb	r3, r3
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b01      	cmp	r3, #1
 800227e:	d102      	bne.n	8002286 <HAL_RCC_OscConfig+0x2b2>
 8002280:	4b19      	ldr	r3, [pc, #100]	; (80022e8 <HAL_RCC_OscConfig+0x314>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	e015      	b.n	80022b2 <HAL_RCC_OscConfig+0x2de>
 8002286:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800228a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002292:	fa93 f3a3 	rbit	r3, r3
 8002296:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800229a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800229e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80022a2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80022a6:	fa93 f3a3 	rbit	r3, r3
 80022aa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80022ae:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <HAL_RCC_OscConfig+0x314>)
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022b6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80022ba:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80022be:	fa92 f2a2 	rbit	r2, r2
 80022c2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80022c6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80022ca:	fab2 f282 	clz	r2, r2
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	f042 0220 	orr.w	r2, r2, #32
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	f002 021f 	and.w	r2, r2, #31
 80022da:	2101      	movs	r1, #1
 80022dc:	fa01 f202 	lsl.w	r2, r1, r2
 80022e0:	4013      	ands	r3, r2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1ab      	bne.n	800223e <HAL_RCC_OscConfig+0x26a>
 80022e6:	e002      	b.n	80022ee <HAL_RCC_OscConfig+0x31a>
 80022e8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 817f 	beq.w	8002602 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002304:	4ba7      	ldr	r3, [pc, #668]	; (80025a4 <HAL_RCC_OscConfig+0x5d0>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 030c 	and.w	r3, r3, #12
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00c      	beq.n	800232a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002310:	4ba4      	ldr	r3, [pc, #656]	; (80025a4 <HAL_RCC_OscConfig+0x5d0>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 030c 	and.w	r3, r3, #12
 8002318:	2b08      	cmp	r3, #8
 800231a:	d173      	bne.n	8002404 <HAL_RCC_OscConfig+0x430>
 800231c:	4ba1      	ldr	r3, [pc, #644]	; (80025a4 <HAL_RCC_OscConfig+0x5d0>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002324:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002328:	d16c      	bne.n	8002404 <HAL_RCC_OscConfig+0x430>
 800232a:	2302      	movs	r3, #2
 800232c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002330:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002334:	fa93 f3a3 	rbit	r3, r3
 8002338:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800233c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002340:	fab3 f383 	clz	r3, r3
 8002344:	b2db      	uxtb	r3, r3
 8002346:	095b      	lsrs	r3, r3, #5
 8002348:	b2db      	uxtb	r3, r3
 800234a:	f043 0301 	orr.w	r3, r3, #1
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b01      	cmp	r3, #1
 8002352:	d102      	bne.n	800235a <HAL_RCC_OscConfig+0x386>
 8002354:	4b93      	ldr	r3, [pc, #588]	; (80025a4 <HAL_RCC_OscConfig+0x5d0>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	e013      	b.n	8002382 <HAL_RCC_OscConfig+0x3ae>
 800235a:	2302      	movs	r3, #2
 800235c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002360:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002364:	fa93 f3a3 	rbit	r3, r3
 8002368:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800236c:	2302      	movs	r3, #2
 800236e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002372:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002376:	fa93 f3a3 	rbit	r3, r3
 800237a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800237e:	4b89      	ldr	r3, [pc, #548]	; (80025a4 <HAL_RCC_OscConfig+0x5d0>)
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	2202      	movs	r2, #2
 8002384:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002388:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800238c:	fa92 f2a2 	rbit	r2, r2
 8002390:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002394:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002398:	fab2 f282 	clz	r2, r2
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	f042 0220 	orr.w	r2, r2, #32
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	f002 021f 	and.w	r2, r2, #31
 80023a8:	2101      	movs	r1, #1
 80023aa:	fa01 f202 	lsl.w	r2, r1, r2
 80023ae:	4013      	ands	r3, r2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00a      	beq.n	80023ca <HAL_RCC_OscConfig+0x3f6>
 80023b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d002      	beq.n	80023ca <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	f000 be52 	b.w	800306e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ca:	4b76      	ldr	r3, [pc, #472]	; (80025a4 <HAL_RCC_OscConfig+0x5d0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	21f8      	movs	r1, #248	; 0xf8
 80023e0:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e4:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80023e8:	fa91 f1a1 	rbit	r1, r1
 80023ec:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80023f0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80023f4:	fab1 f181 	clz	r1, r1
 80023f8:	b2c9      	uxtb	r1, r1
 80023fa:	408b      	lsls	r3, r1
 80023fc:	4969      	ldr	r1, [pc, #420]	; (80025a4 <HAL_RCC_OscConfig+0x5d0>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002402:	e0fe      	b.n	8002602 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002404:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002408:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 8088 	beq.w	8002526 <HAL_RCC_OscConfig+0x552>
 8002416:	2301      	movs	r3, #1
 8002418:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002420:	fa93 f3a3 	rbit	r3, r3
 8002424:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002428:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800242c:	fab3 f383 	clz	r3, r3
 8002430:	b2db      	uxtb	r3, r3
 8002432:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002436:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	461a      	mov	r2, r3
 800243e:	2301      	movs	r3, #1
 8002440:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002442:	f7fe fcc7 	bl	8000dd4 <HAL_GetTick>
 8002446:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800244a:	e00a      	b.n	8002462 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800244c:	f7fe fcc2 	bl	8000dd4 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d902      	bls.n	8002462 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	f000 be06 	b.w	800306e <HAL_RCC_OscConfig+0x109a>
 8002462:	2302      	movs	r3, #2
 8002464:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002468:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800246c:	fa93 f3a3 	rbit	r3, r3
 8002470:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002474:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002478:	fab3 f383 	clz	r3, r3
 800247c:	b2db      	uxtb	r3, r3
 800247e:	095b      	lsrs	r3, r3, #5
 8002480:	b2db      	uxtb	r3, r3
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b01      	cmp	r3, #1
 800248a:	d102      	bne.n	8002492 <HAL_RCC_OscConfig+0x4be>
 800248c:	4b45      	ldr	r3, [pc, #276]	; (80025a4 <HAL_RCC_OscConfig+0x5d0>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	e013      	b.n	80024ba <HAL_RCC_OscConfig+0x4e6>
 8002492:	2302      	movs	r3, #2
 8002494:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002498:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800249c:	fa93 f3a3 	rbit	r3, r3
 80024a0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80024a4:	2302      	movs	r3, #2
 80024a6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80024aa:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80024ae:	fa93 f3a3 	rbit	r3, r3
 80024b2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80024b6:	4b3b      	ldr	r3, [pc, #236]	; (80025a4 <HAL_RCC_OscConfig+0x5d0>)
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	2202      	movs	r2, #2
 80024bc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80024c0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80024c4:	fa92 f2a2 	rbit	r2, r2
 80024c8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80024cc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80024d0:	fab2 f282 	clz	r2, r2
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	f042 0220 	orr.w	r2, r2, #32
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	f002 021f 	and.w	r2, r2, #31
 80024e0:	2101      	movs	r1, #1
 80024e2:	fa01 f202 	lsl.w	r2, r1, r2
 80024e6:	4013      	ands	r3, r2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0af      	beq.n	800244c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ec:	4b2d      	ldr	r3, [pc, #180]	; (80025a4 <HAL_RCC_OscConfig+0x5d0>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	21f8      	movs	r1, #248	; 0xf8
 8002502:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002506:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800250a:	fa91 f1a1 	rbit	r1, r1
 800250e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002512:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002516:	fab1 f181 	clz	r1, r1
 800251a:	b2c9      	uxtb	r1, r1
 800251c:	408b      	lsls	r3, r1
 800251e:	4921      	ldr	r1, [pc, #132]	; (80025a4 <HAL_RCC_OscConfig+0x5d0>)
 8002520:	4313      	orrs	r3, r2
 8002522:	600b      	str	r3, [r1, #0]
 8002524:	e06d      	b.n	8002602 <HAL_RCC_OscConfig+0x62e>
 8002526:	2301      	movs	r3, #1
 8002528:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002530:	fa93 f3a3 	rbit	r3, r3
 8002534:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002538:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800253c:	fab3 f383 	clz	r3, r3
 8002540:	b2db      	uxtb	r3, r3
 8002542:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002546:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	461a      	mov	r2, r3
 800254e:	2300      	movs	r3, #0
 8002550:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002552:	f7fe fc3f 	bl	8000dd4 <HAL_GetTick>
 8002556:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800255a:	e00a      	b.n	8002572 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800255c:	f7fe fc3a 	bl	8000dd4 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d902      	bls.n	8002572 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	f000 bd7e 	b.w	800306e <HAL_RCC_OscConfig+0x109a>
 8002572:	2302      	movs	r3, #2
 8002574:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002578:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800257c:	fa93 f3a3 	rbit	r3, r3
 8002580:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002584:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002588:	fab3 f383 	clz	r3, r3
 800258c:	b2db      	uxtb	r3, r3
 800258e:	095b      	lsrs	r3, r3, #5
 8002590:	b2db      	uxtb	r3, r3
 8002592:	f043 0301 	orr.w	r3, r3, #1
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b01      	cmp	r3, #1
 800259a:	d105      	bne.n	80025a8 <HAL_RCC_OscConfig+0x5d4>
 800259c:	4b01      	ldr	r3, [pc, #4]	; (80025a4 <HAL_RCC_OscConfig+0x5d0>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	e016      	b.n	80025d0 <HAL_RCC_OscConfig+0x5fc>
 80025a2:	bf00      	nop
 80025a4:	40021000 	.word	0x40021000
 80025a8:	2302      	movs	r3, #2
 80025aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80025ba:	2302      	movs	r3, #2
 80025bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80025c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80025c4:	fa93 f3a3 	rbit	r3, r3
 80025c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80025cc:	4bbf      	ldr	r3, [pc, #764]	; (80028cc <HAL_RCC_OscConfig+0x8f8>)
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	2202      	movs	r2, #2
 80025d2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80025d6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80025da:	fa92 f2a2 	rbit	r2, r2
 80025de:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80025e2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80025e6:	fab2 f282 	clz	r2, r2
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	f042 0220 	orr.w	r2, r2, #32
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	f002 021f 	and.w	r2, r2, #31
 80025f6:	2101      	movs	r1, #1
 80025f8:	fa01 f202 	lsl.w	r2, r1, r2
 80025fc:	4013      	ands	r3, r2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1ac      	bne.n	800255c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002602:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002606:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0308 	and.w	r3, r3, #8
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 8113 	beq.w	800283e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002618:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800261c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d07c      	beq.n	8002722 <HAL_RCC_OscConfig+0x74e>
 8002628:	2301      	movs	r3, #1
 800262a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002632:	fa93 f3a3 	rbit	r3, r3
 8002636:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800263a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800263e:	fab3 f383 	clz	r3, r3
 8002642:	b2db      	uxtb	r3, r3
 8002644:	461a      	mov	r2, r3
 8002646:	4ba2      	ldr	r3, [pc, #648]	; (80028d0 <HAL_RCC_OscConfig+0x8fc>)
 8002648:	4413      	add	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	461a      	mov	r2, r3
 800264e:	2301      	movs	r3, #1
 8002650:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002652:	f7fe fbbf 	bl	8000dd4 <HAL_GetTick>
 8002656:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800265a:	e00a      	b.n	8002672 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800265c:	f7fe fbba 	bl	8000dd4 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d902      	bls.n	8002672 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	f000 bcfe 	b.w	800306e <HAL_RCC_OscConfig+0x109a>
 8002672:	2302      	movs	r3, #2
 8002674:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002678:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800267c:	fa93 f2a3 	rbit	r2, r3
 8002680:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002684:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800268e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002692:	2202      	movs	r2, #2
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800269a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	fa93 f2a3 	rbit	r2, r3
 80026a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80026b6:	2202      	movs	r2, #2
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	fa93 f2a3 	rbit	r2, r3
 80026c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026cc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80026d0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026d2:	4b7e      	ldr	r3, [pc, #504]	; (80028cc <HAL_RCC_OscConfig+0x8f8>)
 80026d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026da:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80026de:	2102      	movs	r1, #2
 80026e0:	6019      	str	r1, [r3, #0]
 80026e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026e6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	fa93 f1a3 	rbit	r1, r3
 80026f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026f4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80026f8:	6019      	str	r1, [r3, #0]
  return result;
 80026fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026fe:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	fab3 f383 	clz	r3, r3
 8002708:	b2db      	uxtb	r3, r3
 800270a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800270e:	b2db      	uxtb	r3, r3
 8002710:	f003 031f 	and.w	r3, r3, #31
 8002714:	2101      	movs	r1, #1
 8002716:	fa01 f303 	lsl.w	r3, r1, r3
 800271a:	4013      	ands	r3, r2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d09d      	beq.n	800265c <HAL_RCC_OscConfig+0x688>
 8002720:	e08d      	b.n	800283e <HAL_RCC_OscConfig+0x86a>
 8002722:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002726:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800272a:	2201      	movs	r2, #1
 800272c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002732:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	fa93 f2a3 	rbit	r2, r3
 800273c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002740:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002744:	601a      	str	r2, [r3, #0]
  return result;
 8002746:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800274a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800274e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002750:	fab3 f383 	clz	r3, r3
 8002754:	b2db      	uxtb	r3, r3
 8002756:	461a      	mov	r2, r3
 8002758:	4b5d      	ldr	r3, [pc, #372]	; (80028d0 <HAL_RCC_OscConfig+0x8fc>)
 800275a:	4413      	add	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	461a      	mov	r2, r3
 8002760:	2300      	movs	r3, #0
 8002762:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002764:	f7fe fb36 	bl	8000dd4 <HAL_GetTick>
 8002768:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800276c:	e00a      	b.n	8002784 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800276e:	f7fe fb31 	bl	8000dd4 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d902      	bls.n	8002784 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	f000 bc75 	b.w	800306e <HAL_RCC_OscConfig+0x109a>
 8002784:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002788:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800278c:	2202      	movs	r2, #2
 800278e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002790:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002794:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	fa93 f2a3 	rbit	r2, r3
 800279e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027a2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80027b0:	2202      	movs	r2, #2
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	fa93 f2a3 	rbit	r2, r3
 80027c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027d0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80027d4:	2202      	movs	r2, #2
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027dc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	fa93 f2a3 	rbit	r2, r3
 80027e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027ea:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80027ee:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f0:	4b36      	ldr	r3, [pc, #216]	; (80028cc <HAL_RCC_OscConfig+0x8f8>)
 80027f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027f8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80027fc:	2102      	movs	r1, #2
 80027fe:	6019      	str	r1, [r3, #0]
 8002800:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002804:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	fa93 f1a3 	rbit	r1, r3
 800280e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002812:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002816:	6019      	str	r1, [r3, #0]
  return result;
 8002818:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800281c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	fab3 f383 	clz	r3, r3
 8002826:	b2db      	uxtb	r3, r3
 8002828:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800282c:	b2db      	uxtb	r3, r3
 800282e:	f003 031f 	and.w	r3, r3, #31
 8002832:	2101      	movs	r1, #1
 8002834:	fa01 f303 	lsl.w	r3, r1, r3
 8002838:	4013      	ands	r3, r2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d197      	bne.n	800276e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800283e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002842:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0304 	and.w	r3, r3, #4
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 81a5 	beq.w	8002b9e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002854:	2300      	movs	r3, #0
 8002856:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800285a:	4b1c      	ldr	r3, [pc, #112]	; (80028cc <HAL_RCC_OscConfig+0x8f8>)
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d116      	bne.n	8002894 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002866:	4b19      	ldr	r3, [pc, #100]	; (80028cc <HAL_RCC_OscConfig+0x8f8>)
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	4a18      	ldr	r2, [pc, #96]	; (80028cc <HAL_RCC_OscConfig+0x8f8>)
 800286c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002870:	61d3      	str	r3, [r2, #28]
 8002872:	4b16      	ldr	r3, [pc, #88]	; (80028cc <HAL_RCC_OscConfig+0x8f8>)
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800287a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800287e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002888:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800288c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800288e:	2301      	movs	r3, #1
 8002890:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002894:	4b0f      	ldr	r3, [pc, #60]	; (80028d4 <HAL_RCC_OscConfig+0x900>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289c:	2b00      	cmp	r3, #0
 800289e:	d121      	bne.n	80028e4 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028a0:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <HAL_RCC_OscConfig+0x900>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a0b      	ldr	r2, [pc, #44]	; (80028d4 <HAL_RCC_OscConfig+0x900>)
 80028a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028aa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ac:	f7fe fa92 	bl	8000dd4 <HAL_GetTick>
 80028b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b4:	e010      	b.n	80028d8 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b6:	f7fe fa8d 	bl	8000dd4 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b64      	cmp	r3, #100	; 0x64
 80028c4:	d908      	bls.n	80028d8 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e3d1      	b.n	800306e <HAL_RCC_OscConfig+0x109a>
 80028ca:	bf00      	nop
 80028cc:	40021000 	.word	0x40021000
 80028d0:	10908120 	.word	0x10908120
 80028d4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d8:	4b8d      	ldr	r3, [pc, #564]	; (8002b10 <HAL_RCC_OscConfig+0xb3c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0e8      	beq.n	80028b6 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d106      	bne.n	8002902 <HAL_RCC_OscConfig+0x92e>
 80028f4:	4b87      	ldr	r3, [pc, #540]	; (8002b14 <HAL_RCC_OscConfig+0xb40>)
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	4a86      	ldr	r2, [pc, #536]	; (8002b14 <HAL_RCC_OscConfig+0xb40>)
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	6213      	str	r3, [r2, #32]
 8002900:	e035      	b.n	800296e <HAL_RCC_OscConfig+0x99a>
 8002902:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002906:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10c      	bne.n	800292c <HAL_RCC_OscConfig+0x958>
 8002912:	4b80      	ldr	r3, [pc, #512]	; (8002b14 <HAL_RCC_OscConfig+0xb40>)
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	4a7f      	ldr	r2, [pc, #508]	; (8002b14 <HAL_RCC_OscConfig+0xb40>)
 8002918:	f023 0301 	bic.w	r3, r3, #1
 800291c:	6213      	str	r3, [r2, #32]
 800291e:	4b7d      	ldr	r3, [pc, #500]	; (8002b14 <HAL_RCC_OscConfig+0xb40>)
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	4a7c      	ldr	r2, [pc, #496]	; (8002b14 <HAL_RCC_OscConfig+0xb40>)
 8002924:	f023 0304 	bic.w	r3, r3, #4
 8002928:	6213      	str	r3, [r2, #32]
 800292a:	e020      	b.n	800296e <HAL_RCC_OscConfig+0x99a>
 800292c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002930:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	2b05      	cmp	r3, #5
 800293a:	d10c      	bne.n	8002956 <HAL_RCC_OscConfig+0x982>
 800293c:	4b75      	ldr	r3, [pc, #468]	; (8002b14 <HAL_RCC_OscConfig+0xb40>)
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	4a74      	ldr	r2, [pc, #464]	; (8002b14 <HAL_RCC_OscConfig+0xb40>)
 8002942:	f043 0304 	orr.w	r3, r3, #4
 8002946:	6213      	str	r3, [r2, #32]
 8002948:	4b72      	ldr	r3, [pc, #456]	; (8002b14 <HAL_RCC_OscConfig+0xb40>)
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	4a71      	ldr	r2, [pc, #452]	; (8002b14 <HAL_RCC_OscConfig+0xb40>)
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	6213      	str	r3, [r2, #32]
 8002954:	e00b      	b.n	800296e <HAL_RCC_OscConfig+0x99a>
 8002956:	4b6f      	ldr	r3, [pc, #444]	; (8002b14 <HAL_RCC_OscConfig+0xb40>)
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	4a6e      	ldr	r2, [pc, #440]	; (8002b14 <HAL_RCC_OscConfig+0xb40>)
 800295c:	f023 0301 	bic.w	r3, r3, #1
 8002960:	6213      	str	r3, [r2, #32]
 8002962:	4b6c      	ldr	r3, [pc, #432]	; (8002b14 <HAL_RCC_OscConfig+0xb40>)
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	4a6b      	ldr	r2, [pc, #428]	; (8002b14 <HAL_RCC_OscConfig+0xb40>)
 8002968:	f023 0304 	bic.w	r3, r3, #4
 800296c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800296e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002972:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 8081 	beq.w	8002a82 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002980:	f7fe fa28 	bl	8000dd4 <HAL_GetTick>
 8002984:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002988:	e00b      	b.n	80029a2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800298a:	f7fe fa23 	bl	8000dd4 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	f241 3288 	movw	r2, #5000	; 0x1388
 800299a:	4293      	cmp	r3, r2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e365      	b.n	800306e <HAL_RCC_OscConfig+0x109a>
 80029a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029a6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80029aa:	2202      	movs	r2, #2
 80029ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029b2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	fa93 f2a3 	rbit	r2, r3
 80029bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029c0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ca:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80029ce:	2202      	movs	r2, #2
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029d6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	fa93 f2a3 	rbit	r2, r3
 80029e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029e4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80029e8:	601a      	str	r2, [r3, #0]
  return result;
 80029ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ee:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80029f2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f4:	fab3 f383 	clz	r3, r3
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	095b      	lsrs	r3, r3, #5
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	f043 0302 	orr.w	r3, r3, #2
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d102      	bne.n	8002a0e <HAL_RCC_OscConfig+0xa3a>
 8002a08:	4b42      	ldr	r3, [pc, #264]	; (8002b14 <HAL_RCC_OscConfig+0xb40>)
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	e013      	b.n	8002a36 <HAL_RCC_OscConfig+0xa62>
 8002a0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a12:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002a16:	2202      	movs	r2, #2
 8002a18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a1e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	fa93 f2a3 	rbit	r2, r3
 8002a28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a2c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	4b38      	ldr	r3, [pc, #224]	; (8002b14 <HAL_RCC_OscConfig+0xb40>)
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a3a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002a3e:	2102      	movs	r1, #2
 8002a40:	6011      	str	r1, [r2, #0]
 8002a42:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a46:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002a4a:	6812      	ldr	r2, [r2, #0]
 8002a4c:	fa92 f1a2 	rbit	r1, r2
 8002a50:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a54:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002a58:	6011      	str	r1, [r2, #0]
  return result;
 8002a5a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a5e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	fab2 f282 	clz	r2, r2
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	f002 021f 	and.w	r2, r2, #31
 8002a74:	2101      	movs	r1, #1
 8002a76:	fa01 f202 	lsl.w	r2, r1, r2
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d084      	beq.n	800298a <HAL_RCC_OscConfig+0x9b6>
 8002a80:	e083      	b.n	8002b8a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a82:	f7fe f9a7 	bl	8000dd4 <HAL_GetTick>
 8002a86:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a8a:	e00b      	b.n	8002aa4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a8c:	f7fe f9a2 	bl	8000dd4 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e2e4      	b.n	800306e <HAL_RCC_OscConfig+0x109a>
 8002aa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aa8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002aac:	2202      	movs	r2, #2
 8002aae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ab4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	fa93 f2a3 	rbit	r2, r3
 8002abe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ac2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002acc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ad8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	fa93 f2a3 	rbit	r2, r3
 8002ae2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ae6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002aea:	601a      	str	r2, [r3, #0]
  return result;
 8002aec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002af0:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002af4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af6:	fab3 f383 	clz	r3, r3
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	095b      	lsrs	r3, r3, #5
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	f043 0302 	orr.w	r3, r3, #2
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d106      	bne.n	8002b18 <HAL_RCC_OscConfig+0xb44>
 8002b0a:	4b02      	ldr	r3, [pc, #8]	; (8002b14 <HAL_RCC_OscConfig+0xb40>)
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	e017      	b.n	8002b40 <HAL_RCC_OscConfig+0xb6c>
 8002b10:	40007000 	.word	0x40007000
 8002b14:	40021000 	.word	0x40021000
 8002b18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b1c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002b20:	2202      	movs	r2, #2
 8002b22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b28:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	fa93 f2a3 	rbit	r2, r3
 8002b32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b36:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	4bb3      	ldr	r3, [pc, #716]	; (8002e0c <HAL_RCC_OscConfig+0xe38>)
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b44:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002b48:	2102      	movs	r1, #2
 8002b4a:	6011      	str	r1, [r2, #0]
 8002b4c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b50:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002b54:	6812      	ldr	r2, [r2, #0]
 8002b56:	fa92 f1a2 	rbit	r1, r2
 8002b5a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b5e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002b62:	6011      	str	r1, [r2, #0]
  return result;
 8002b64:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b68:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002b6c:	6812      	ldr	r2, [r2, #0]
 8002b6e:	fab2 f282 	clz	r2, r2
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	f002 021f 	and.w	r2, r2, #31
 8002b7e:	2101      	movs	r1, #1
 8002b80:	fa01 f202 	lsl.w	r2, r1, r2
 8002b84:	4013      	ands	r3, r2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d180      	bne.n	8002a8c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b8a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d105      	bne.n	8002b9e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b92:	4b9e      	ldr	r3, [pc, #632]	; (8002e0c <HAL_RCC_OscConfig+0xe38>)
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	4a9d      	ldr	r2, [pc, #628]	; (8002e0c <HAL_RCC_OscConfig+0xe38>)
 8002b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ba2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 825e 	beq.w	800306c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bb0:	4b96      	ldr	r3, [pc, #600]	; (8002e0c <HAL_RCC_OscConfig+0xe38>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 030c 	and.w	r3, r3, #12
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	f000 821f 	beq.w	8002ffc <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bc2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	f040 8170 	bne.w	8002eb0 <HAL_RCC_OscConfig+0xedc>
 8002bd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bd4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002bd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002bdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002be2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	fa93 f2a3 	rbit	r2, r3
 8002bec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bf0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002bf4:	601a      	str	r2, [r3, #0]
  return result;
 8002bf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bfa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002bfe:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c00:	fab3 f383 	clz	r3, r3
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c0a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	461a      	mov	r2, r3
 8002c12:	2300      	movs	r3, #0
 8002c14:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c16:	f7fe f8dd 	bl	8000dd4 <HAL_GetTick>
 8002c1a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c1e:	e009      	b.n	8002c34 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c20:	f7fe f8d8 	bl	8000dd4 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e21c      	b.n	800306e <HAL_RCC_OscConfig+0x109a>
 8002c34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c38:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002c3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c46:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	fa93 f2a3 	rbit	r2, r3
 8002c50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c54:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002c58:	601a      	str	r2, [r3, #0]
  return result;
 8002c5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c5e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002c62:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c64:	fab3 f383 	clz	r3, r3
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	095b      	lsrs	r3, r3, #5
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	f043 0301 	orr.w	r3, r3, #1
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d102      	bne.n	8002c7e <HAL_RCC_OscConfig+0xcaa>
 8002c78:	4b64      	ldr	r3, [pc, #400]	; (8002e0c <HAL_RCC_OscConfig+0xe38>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	e027      	b.n	8002cce <HAL_RCC_OscConfig+0xcfa>
 8002c7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c82:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002c86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c90:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	fa93 f2a3 	rbit	r2, r3
 8002c9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c9e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ca8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002cac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cb6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	fa93 f2a3 	rbit	r2, r3
 8002cc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cc4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	4b50      	ldr	r3, [pc, #320]	; (8002e0c <HAL_RCC_OscConfig+0xe38>)
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002cd2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002cd6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002cda:	6011      	str	r1, [r2, #0]
 8002cdc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ce0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002ce4:	6812      	ldr	r2, [r2, #0]
 8002ce6:	fa92 f1a2 	rbit	r1, r2
 8002cea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002cee:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002cf2:	6011      	str	r1, [r2, #0]
  return result;
 8002cf4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002cf8:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002cfc:	6812      	ldr	r2, [r2, #0]
 8002cfe:	fab2 f282 	clz	r2, r2
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	f042 0220 	orr.w	r2, r2, #32
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	f002 021f 	and.w	r2, r2, #31
 8002d0e:	2101      	movs	r1, #1
 8002d10:	fa01 f202 	lsl.w	r2, r1, r2
 8002d14:	4013      	ands	r3, r2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d182      	bne.n	8002c20 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d1a:	4b3c      	ldr	r3, [pc, #240]	; (8002e0c <HAL_RCC_OscConfig+0xe38>)
 8002d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1e:	f023 020f 	bic.w	r2, r3, #15
 8002d22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d26:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2e:	4937      	ldr	r1, [pc, #220]	; (8002e0c <HAL_RCC_OscConfig+0xe38>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002d34:	4b35      	ldr	r3, [pc, #212]	; (8002e0c <HAL_RCC_OscConfig+0xe38>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002d3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d40:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6a19      	ldr	r1, [r3, #32]
 8002d48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d4c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	69db      	ldr	r3, [r3, #28]
 8002d54:	430b      	orrs	r3, r1
 8002d56:	492d      	ldr	r1, [pc, #180]	; (8002e0c <HAL_RCC_OscConfig+0xe38>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	604b      	str	r3, [r1, #4]
 8002d5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d60:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002d64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d6e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	fa93 f2a3 	rbit	r2, r3
 8002d78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d7c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002d80:	601a      	str	r2, [r3, #0]
  return result;
 8002d82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d86:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002d8a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d8c:	fab3 f383 	clz	r3, r3
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d96:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	2301      	movs	r3, #1
 8002da0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da2:	f7fe f817 	bl	8000dd4 <HAL_GetTick>
 8002da6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002daa:	e009      	b.n	8002dc0 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dac:	f7fe f812 	bl	8000dd4 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e156      	b.n	800306e <HAL_RCC_OscConfig+0x109a>
 8002dc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dc4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002dc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dd2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	fa93 f2a3 	rbit	r2, r3
 8002ddc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002de0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002de4:	601a      	str	r2, [r3, #0]
  return result;
 8002de6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dea:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002dee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002df0:	fab3 f383 	clz	r3, r3
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	095b      	lsrs	r3, r3, #5
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d105      	bne.n	8002e10 <HAL_RCC_OscConfig+0xe3c>
 8002e04:	4b01      	ldr	r3, [pc, #4]	; (8002e0c <HAL_RCC_OscConfig+0xe38>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	e02a      	b.n	8002e60 <HAL_RCC_OscConfig+0xe8c>
 8002e0a:	bf00      	nop
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e14:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002e18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e22:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	fa93 f2a3 	rbit	r2, r3
 8002e2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e30:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e3a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002e3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e48:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	fa93 f2a3 	rbit	r2, r3
 8002e52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e56:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	4b86      	ldr	r3, [pc, #536]	; (8003078 <HAL_RCC_OscConfig+0x10a4>)
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e64:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002e68:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e6c:	6011      	str	r1, [r2, #0]
 8002e6e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e72:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002e76:	6812      	ldr	r2, [r2, #0]
 8002e78:	fa92 f1a2 	rbit	r1, r2
 8002e7c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e80:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002e84:	6011      	str	r1, [r2, #0]
  return result;
 8002e86:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e8a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002e8e:	6812      	ldr	r2, [r2, #0]
 8002e90:	fab2 f282 	clz	r2, r2
 8002e94:	b2d2      	uxtb	r2, r2
 8002e96:	f042 0220 	orr.w	r2, r2, #32
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	f002 021f 	and.w	r2, r2, #31
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f43f af7f 	beq.w	8002dac <HAL_RCC_OscConfig+0xdd8>
 8002eae:	e0dd      	b.n	800306c <HAL_RCC_OscConfig+0x1098>
 8002eb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eb4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002eb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ebc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ec2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	fa93 f2a3 	rbit	r2, r3
 8002ecc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ed0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002ed4:	601a      	str	r2, [r3, #0]
  return result;
 8002ed6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eda:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002ede:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee0:	fab3 f383 	clz	r3, r3
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002eea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef6:	f7fd ff6d 	bl	8000dd4 <HAL_GetTick>
 8002efa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002efe:	e009      	b.n	8002f14 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f00:	f7fd ff68 	bl	8000dd4 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e0ac      	b.n	800306e <HAL_RCC_OscConfig+0x109a>
 8002f14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f18:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f26:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	fa93 f2a3 	rbit	r2, r3
 8002f30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f34:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002f38:	601a      	str	r2, [r3, #0]
  return result;
 8002f3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f3e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002f42:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f44:	fab3 f383 	clz	r3, r3
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	095b      	lsrs	r3, r3, #5
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	f043 0301 	orr.w	r3, r3, #1
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d102      	bne.n	8002f5e <HAL_RCC_OscConfig+0xf8a>
 8002f58:	4b47      	ldr	r3, [pc, #284]	; (8003078 <HAL_RCC_OscConfig+0x10a4>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	e027      	b.n	8002fae <HAL_RCC_OscConfig+0xfda>
 8002f5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f62:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002f66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f70:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	fa93 f2a3 	rbit	r2, r3
 8002f7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f7e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f88:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002f8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f96:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	fa93 f2a3 	rbit	r2, r3
 8002fa0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fa4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	4b33      	ldr	r3, [pc, #204]	; (8003078 <HAL_RCC_OscConfig+0x10a4>)
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002fb2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002fb6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002fba:	6011      	str	r1, [r2, #0]
 8002fbc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002fc0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002fc4:	6812      	ldr	r2, [r2, #0]
 8002fc6:	fa92 f1a2 	rbit	r1, r2
 8002fca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002fce:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002fd2:	6011      	str	r1, [r2, #0]
  return result;
 8002fd4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002fd8:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002fdc:	6812      	ldr	r2, [r2, #0]
 8002fde:	fab2 f282 	clz	r2, r2
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	f042 0220 	orr.w	r2, r2, #32
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	f002 021f 	and.w	r2, r2, #31
 8002fee:	2101      	movs	r1, #1
 8002ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d182      	bne.n	8002f00 <HAL_RCC_OscConfig+0xf2c>
 8002ffa:	e037      	b.n	800306c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ffc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003000:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d101      	bne.n	8003010 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e02e      	b.n	800306e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003010:	4b19      	ldr	r3, [pc, #100]	; (8003078 <HAL_RCC_OscConfig+0x10a4>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003018:	4b17      	ldr	r3, [pc, #92]	; (8003078 <HAL_RCC_OscConfig+0x10a4>)
 800301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003020:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003024:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003028:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800302c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	429a      	cmp	r2, r3
 8003036:	d117      	bne.n	8003068 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003038:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800303c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003040:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003044:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800304c:	429a      	cmp	r2, r3
 800304e:	d10b      	bne.n	8003068 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003050:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003054:	f003 020f 	and.w	r2, r3, #15
 8003058:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800305c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003064:	429a      	cmp	r2, r3
 8003066:	d001      	beq.n	800306c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e000      	b.n	800306e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40021000 	.word	0x40021000

0800307c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b09e      	sub	sp, #120	; 0x78
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003086:	2300      	movs	r3, #0
 8003088:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e162      	b.n	800335a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003094:	4b90      	ldr	r3, [pc, #576]	; (80032d8 <HAL_RCC_ClockConfig+0x25c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d910      	bls.n	80030c4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a2:	4b8d      	ldr	r3, [pc, #564]	; (80032d8 <HAL_RCC_ClockConfig+0x25c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 0207 	bic.w	r2, r3, #7
 80030aa:	498b      	ldr	r1, [pc, #556]	; (80032d8 <HAL_RCC_ClockConfig+0x25c>)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b2:	4b89      	ldr	r3, [pc, #548]	; (80032d8 <HAL_RCC_ClockConfig+0x25c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d001      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e14a      	b.n	800335a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d008      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d0:	4b82      	ldr	r3, [pc, #520]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	497f      	ldr	r1, [pc, #508]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 80dc 	beq.w	80032a8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d13c      	bne.n	8003172 <HAL_RCC_ClockConfig+0xf6>
 80030f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030fc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003100:	fa93 f3a3 	rbit	r3, r3
 8003104:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003108:	fab3 f383 	clz	r3, r3
 800310c:	b2db      	uxtb	r3, r3
 800310e:	095b      	lsrs	r3, r3, #5
 8003110:	b2db      	uxtb	r3, r3
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b01      	cmp	r3, #1
 800311a:	d102      	bne.n	8003122 <HAL_RCC_ClockConfig+0xa6>
 800311c:	4b6f      	ldr	r3, [pc, #444]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	e00f      	b.n	8003142 <HAL_RCC_ClockConfig+0xc6>
 8003122:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003126:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003128:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800312a:	fa93 f3a3 	rbit	r3, r3
 800312e:	667b      	str	r3, [r7, #100]	; 0x64
 8003130:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003134:	663b      	str	r3, [r7, #96]	; 0x60
 8003136:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003138:	fa93 f3a3 	rbit	r3, r3
 800313c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800313e:	4b67      	ldr	r3, [pc, #412]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003146:	65ba      	str	r2, [r7, #88]	; 0x58
 8003148:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800314a:	fa92 f2a2 	rbit	r2, r2
 800314e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003150:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003152:	fab2 f282 	clz	r2, r2
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	f042 0220 	orr.w	r2, r2, #32
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	f002 021f 	and.w	r2, r2, #31
 8003162:	2101      	movs	r1, #1
 8003164:	fa01 f202 	lsl.w	r2, r1, r2
 8003168:	4013      	ands	r3, r2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d17b      	bne.n	8003266 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e0f3      	b.n	800335a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b02      	cmp	r3, #2
 8003178:	d13c      	bne.n	80031f4 <HAL_RCC_ClockConfig+0x178>
 800317a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800317e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003182:	fa93 f3a3 	rbit	r3, r3
 8003186:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800318a:	fab3 f383 	clz	r3, r3
 800318e:	b2db      	uxtb	r3, r3
 8003190:	095b      	lsrs	r3, r3, #5
 8003192:	b2db      	uxtb	r3, r3
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b01      	cmp	r3, #1
 800319c:	d102      	bne.n	80031a4 <HAL_RCC_ClockConfig+0x128>
 800319e:	4b4f      	ldr	r3, [pc, #316]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	e00f      	b.n	80031c4 <HAL_RCC_ClockConfig+0x148>
 80031a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031ac:	fa93 f3a3 	rbit	r3, r3
 80031b0:	647b      	str	r3, [r7, #68]	; 0x44
 80031b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031b6:	643b      	str	r3, [r7, #64]	; 0x40
 80031b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031ba:	fa93 f3a3 	rbit	r3, r3
 80031be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031c0:	4b46      	ldr	r3, [pc, #280]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031c8:	63ba      	str	r2, [r7, #56]	; 0x38
 80031ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031cc:	fa92 f2a2 	rbit	r2, r2
 80031d0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80031d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031d4:	fab2 f282 	clz	r2, r2
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	f042 0220 	orr.w	r2, r2, #32
 80031de:	b2d2      	uxtb	r2, r2
 80031e0:	f002 021f 	and.w	r2, r2, #31
 80031e4:	2101      	movs	r1, #1
 80031e6:	fa01 f202 	lsl.w	r2, r1, r2
 80031ea:	4013      	ands	r3, r2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d13a      	bne.n	8003266 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0b2      	b.n	800335a <HAL_RCC_ClockConfig+0x2de>
 80031f4:	2302      	movs	r3, #2
 80031f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fa:	fa93 f3a3 	rbit	r3, r3
 80031fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003202:	fab3 f383 	clz	r3, r3
 8003206:	b2db      	uxtb	r3, r3
 8003208:	095b      	lsrs	r3, r3, #5
 800320a:	b2db      	uxtb	r3, r3
 800320c:	f043 0301 	orr.w	r3, r3, #1
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b01      	cmp	r3, #1
 8003214:	d102      	bne.n	800321c <HAL_RCC_ClockConfig+0x1a0>
 8003216:	4b31      	ldr	r3, [pc, #196]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	e00d      	b.n	8003238 <HAL_RCC_ClockConfig+0x1bc>
 800321c:	2302      	movs	r3, #2
 800321e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003222:	fa93 f3a3 	rbit	r3, r3
 8003226:	627b      	str	r3, [r7, #36]	; 0x24
 8003228:	2302      	movs	r3, #2
 800322a:	623b      	str	r3, [r7, #32]
 800322c:	6a3b      	ldr	r3, [r7, #32]
 800322e:	fa93 f3a3 	rbit	r3, r3
 8003232:	61fb      	str	r3, [r7, #28]
 8003234:	4b29      	ldr	r3, [pc, #164]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	2202      	movs	r2, #2
 800323a:	61ba      	str	r2, [r7, #24]
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	fa92 f2a2 	rbit	r2, r2
 8003242:	617a      	str	r2, [r7, #20]
  return result;
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	fab2 f282 	clz	r2, r2
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	f042 0220 	orr.w	r2, r2, #32
 8003250:	b2d2      	uxtb	r2, r2
 8003252:	f002 021f 	and.w	r2, r2, #31
 8003256:	2101      	movs	r1, #1
 8003258:	fa01 f202 	lsl.w	r2, r1, r2
 800325c:	4013      	ands	r3, r2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e079      	b.n	800335a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003266:	4b1d      	ldr	r3, [pc, #116]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f023 0203 	bic.w	r2, r3, #3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	491a      	ldr	r1, [pc, #104]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 8003274:	4313      	orrs	r3, r2
 8003276:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003278:	f7fd fdac 	bl	8000dd4 <HAL_GetTick>
 800327c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327e:	e00a      	b.n	8003296 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003280:	f7fd fda8 	bl	8000dd4 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	f241 3288 	movw	r2, #5000	; 0x1388
 800328e:	4293      	cmp	r3, r2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e061      	b.n	800335a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003296:	4b11      	ldr	r3, [pc, #68]	; (80032dc <HAL_RCC_ClockConfig+0x260>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f003 020c 	and.w	r2, r3, #12
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d1eb      	bne.n	8003280 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032a8:	4b0b      	ldr	r3, [pc, #44]	; (80032d8 <HAL_RCC_ClockConfig+0x25c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d214      	bcs.n	80032e0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b6:	4b08      	ldr	r3, [pc, #32]	; (80032d8 <HAL_RCC_ClockConfig+0x25c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f023 0207 	bic.w	r2, r3, #7
 80032be:	4906      	ldr	r1, [pc, #24]	; (80032d8 <HAL_RCC_ClockConfig+0x25c>)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c6:	4b04      	ldr	r3, [pc, #16]	; (80032d8 <HAL_RCC_ClockConfig+0x25c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d005      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e040      	b.n	800335a <HAL_RCC_ClockConfig+0x2de>
 80032d8:	40022000 	.word	0x40022000
 80032dc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d008      	beq.n	80032fe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032ec:	4b1d      	ldr	r3, [pc, #116]	; (8003364 <HAL_RCC_ClockConfig+0x2e8>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	491a      	ldr	r1, [pc, #104]	; (8003364 <HAL_RCC_ClockConfig+0x2e8>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d009      	beq.n	800331e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800330a:	4b16      	ldr	r3, [pc, #88]	; (8003364 <HAL_RCC_ClockConfig+0x2e8>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	4912      	ldr	r1, [pc, #72]	; (8003364 <HAL_RCC_ClockConfig+0x2e8>)
 800331a:	4313      	orrs	r3, r2
 800331c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800331e:	f000 f829 	bl	8003374 <HAL_RCC_GetSysClockFreq>
 8003322:	4601      	mov	r1, r0
 8003324:	4b0f      	ldr	r3, [pc, #60]	; (8003364 <HAL_RCC_ClockConfig+0x2e8>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800332c:	22f0      	movs	r2, #240	; 0xf0
 800332e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	fa92 f2a2 	rbit	r2, r2
 8003336:	60fa      	str	r2, [r7, #12]
  return result;
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	fab2 f282 	clz	r2, r2
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	40d3      	lsrs	r3, r2
 8003342:	4a09      	ldr	r2, [pc, #36]	; (8003368 <HAL_RCC_ClockConfig+0x2ec>)
 8003344:	5cd3      	ldrb	r3, [r2, r3]
 8003346:	fa21 f303 	lsr.w	r3, r1, r3
 800334a:	4a08      	ldr	r2, [pc, #32]	; (800336c <HAL_RCC_ClockConfig+0x2f0>)
 800334c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800334e:	4b08      	ldr	r3, [pc, #32]	; (8003370 <HAL_RCC_ClockConfig+0x2f4>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7fd fbc0 	bl	8000ad8 <HAL_InitTick>
  
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3778      	adds	r7, #120	; 0x78
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40021000 	.word	0x40021000
 8003368:	08007384 	.word	0x08007384
 800336c:	20000000 	.word	0x20000000
 8003370:	20000004 	.word	0x20000004

08003374 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003374:	b480      	push	{r7}
 8003376:	b08b      	sub	sp, #44	; 0x2c
 8003378:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800337a:	2300      	movs	r3, #0
 800337c:	61fb      	str	r3, [r7, #28]
 800337e:	2300      	movs	r3, #0
 8003380:	61bb      	str	r3, [r7, #24]
 8003382:	2300      	movs	r3, #0
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
 8003386:	2300      	movs	r3, #0
 8003388:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800338a:	2300      	movs	r3, #0
 800338c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800338e:	4b2a      	ldr	r3, [pc, #168]	; (8003438 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f003 030c 	and.w	r3, r3, #12
 800339a:	2b04      	cmp	r3, #4
 800339c:	d002      	beq.n	80033a4 <HAL_RCC_GetSysClockFreq+0x30>
 800339e:	2b08      	cmp	r3, #8
 80033a0:	d003      	beq.n	80033aa <HAL_RCC_GetSysClockFreq+0x36>
 80033a2:	e03f      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033a4:	4b25      	ldr	r3, [pc, #148]	; (800343c <HAL_RCC_GetSysClockFreq+0xc8>)
 80033a6:	623b      	str	r3, [r7, #32]
      break;
 80033a8:	e03f      	b.n	800342a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80033b0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80033b4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	fa92 f2a2 	rbit	r2, r2
 80033bc:	607a      	str	r2, [r7, #4]
  return result;
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	fab2 f282 	clz	r2, r2
 80033c4:	b2d2      	uxtb	r2, r2
 80033c6:	40d3      	lsrs	r3, r2
 80033c8:	4a1d      	ldr	r2, [pc, #116]	; (8003440 <HAL_RCC_GetSysClockFreq+0xcc>)
 80033ca:	5cd3      	ldrb	r3, [r2, r3]
 80033cc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80033ce:	4b1a      	ldr	r3, [pc, #104]	; (8003438 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	220f      	movs	r2, #15
 80033d8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	fa92 f2a2 	rbit	r2, r2
 80033e0:	60fa      	str	r2, [r7, #12]
  return result;
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	fab2 f282 	clz	r2, r2
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	40d3      	lsrs	r3, r2
 80033ec:	4a15      	ldr	r2, [pc, #84]	; (8003444 <HAL_RCC_GetSysClockFreq+0xd0>)
 80033ee:	5cd3      	ldrb	r3, [r2, r3]
 80033f0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d008      	beq.n	800340e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033fc:	4a0f      	ldr	r2, [pc, #60]	; (800343c <HAL_RCC_GetSysClockFreq+0xc8>)
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	fbb2 f2f3 	udiv	r2, r2, r3
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	fb02 f303 	mul.w	r3, r2, r3
 800340a:	627b      	str	r3, [r7, #36]	; 0x24
 800340c:	e007      	b.n	800341e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800340e:	4a0b      	ldr	r2, [pc, #44]	; (800343c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	fbb2 f2f3 	udiv	r2, r2, r3
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	fb02 f303 	mul.w	r3, r2, r3
 800341c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	623b      	str	r3, [r7, #32]
      break;
 8003422:	e002      	b.n	800342a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003424:	4b05      	ldr	r3, [pc, #20]	; (800343c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003426:	623b      	str	r3, [r7, #32]
      break;
 8003428:	bf00      	nop
    }
  }
  return sysclockfreq;
 800342a:	6a3b      	ldr	r3, [r7, #32]
}
 800342c:	4618      	mov	r0, r3
 800342e:	372c      	adds	r7, #44	; 0x2c
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	40021000 	.word	0x40021000
 800343c:	007a1200 	.word	0x007a1200
 8003440:	0800739c 	.word	0x0800739c
 8003444:	080073ac 	.word	0x080073ac

08003448 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800344c:	4b03      	ldr	r3, [pc, #12]	; (800345c <HAL_RCC_GetHCLKFreq+0x14>)
 800344e:	681b      	ldr	r3, [r3, #0]
}
 8003450:	4618      	mov	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	20000000 	.word	0x20000000

08003460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003466:	f7ff ffef 	bl	8003448 <HAL_RCC_GetHCLKFreq>
 800346a:	4601      	mov	r1, r0
 800346c:	4b0b      	ldr	r3, [pc, #44]	; (800349c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003474:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003478:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	fa92 f2a2 	rbit	r2, r2
 8003480:	603a      	str	r2, [r7, #0]
  return result;
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	fab2 f282 	clz	r2, r2
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	40d3      	lsrs	r3, r2
 800348c:	4a04      	ldr	r2, [pc, #16]	; (80034a0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800348e:	5cd3      	ldrb	r3, [r2, r3]
 8003490:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003494:	4618      	mov	r0, r3
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40021000 	.word	0x40021000
 80034a0:	08007394 	.word	0x08007394

080034a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80034aa:	f7ff ffcd 	bl	8003448 <HAL_RCC_GetHCLKFreq>
 80034ae:	4601      	mov	r1, r0
 80034b0:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80034b8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80034bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	fa92 f2a2 	rbit	r2, r2
 80034c4:	603a      	str	r2, [r7, #0]
  return result;
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	fab2 f282 	clz	r2, r2
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	40d3      	lsrs	r3, r2
 80034d0:	4a04      	ldr	r2, [pc, #16]	; (80034e4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80034d2:	5cd3      	ldrb	r3, [r2, r3]
 80034d4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80034d8:	4618      	mov	r0, r3
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40021000 	.word	0x40021000
 80034e4:	08007394 	.word	0x08007394

080034e8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	220f      	movs	r2, #15
 80034f6:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80034f8:	4b12      	ldr	r3, [pc, #72]	; (8003544 <HAL_RCC_GetClockConfig+0x5c>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 0203 	and.w	r2, r3, #3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003504:	4b0f      	ldr	r3, [pc, #60]	; (8003544 <HAL_RCC_GetClockConfig+0x5c>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003510:	4b0c      	ldr	r3, [pc, #48]	; (8003544 <HAL_RCC_GetClockConfig+0x5c>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800351c:	4b09      	ldr	r3, [pc, #36]	; (8003544 <HAL_RCC_GetClockConfig+0x5c>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	08db      	lsrs	r3, r3, #3
 8003522:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800352a:	4b07      	ldr	r3, [pc, #28]	; (8003548 <HAL_RCC_GetClockConfig+0x60>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0207 	and.w	r2, r3, #7
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	601a      	str	r2, [r3, #0]
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	40021000 	.word	0x40021000
 8003548:	40022000 	.word	0x40022000

0800354c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b092      	sub	sp, #72	; 0x48
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003554:	2300      	movs	r3, #0
 8003556:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800355c:	2300      	movs	r3, #0
 800355e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 80d4 	beq.w	8003718 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003570:	4b4e      	ldr	r3, [pc, #312]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10e      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800357c:	4b4b      	ldr	r3, [pc, #300]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	4a4a      	ldr	r2, [pc, #296]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003586:	61d3      	str	r3, [r2, #28]
 8003588:	4b48      	ldr	r3, [pc, #288]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800358a:	69db      	ldr	r3, [r3, #28]
 800358c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003590:	60bb      	str	r3, [r7, #8]
 8003592:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003594:	2301      	movs	r3, #1
 8003596:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800359a:	4b45      	ldr	r3, [pc, #276]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d118      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035a6:	4b42      	ldr	r3, [pc, #264]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a41      	ldr	r2, [pc, #260]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035b2:	f7fd fc0f 	bl	8000dd4 <HAL_GetTick>
 80035b6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b8:	e008      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ba:	f7fd fc0b 	bl	8000dd4 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b64      	cmp	r3, #100	; 0x64
 80035c6:	d901      	bls.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e1d6      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035cc:	4b38      	ldr	r3, [pc, #224]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0f0      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035d8:	4b34      	ldr	r3, [pc, #208]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 8084 	beq.w	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d07c      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035f8:	4b2c      	ldr	r3, [pc, #176]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003600:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003602:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003606:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360a:	fa93 f3a3 	rbit	r3, r3
 800360e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003612:	fab3 f383 	clz	r3, r3
 8003616:	b2db      	uxtb	r3, r3
 8003618:	461a      	mov	r2, r3
 800361a:	4b26      	ldr	r3, [pc, #152]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800361c:	4413      	add	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	461a      	mov	r2, r3
 8003622:	2301      	movs	r3, #1
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800362a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800362e:	fa93 f3a3 	rbit	r3, r3
 8003632:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003636:	fab3 f383 	clz	r3, r3
 800363a:	b2db      	uxtb	r3, r3
 800363c:	461a      	mov	r2, r3
 800363e:	4b1d      	ldr	r3, [pc, #116]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	461a      	mov	r2, r3
 8003646:	2300      	movs	r3, #0
 8003648:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800364a:	4a18      	ldr	r2, [pc, #96]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800364c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800364e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	d04b      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365a:	f7fd fbbb 	bl	8000dd4 <HAL_GetTick>
 800365e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003660:	e00a      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003662:	f7fd fbb7 	bl	8000dd4 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003670:	4293      	cmp	r3, r2
 8003672:	d901      	bls.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e180      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003678:	2302      	movs	r3, #2
 800367a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367e:	fa93 f3a3 	rbit	r3, r3
 8003682:	627b      	str	r3, [r7, #36]	; 0x24
 8003684:	2302      	movs	r3, #2
 8003686:	623b      	str	r3, [r7, #32]
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	fa93 f3a3 	rbit	r3, r3
 800368e:	61fb      	str	r3, [r7, #28]
  return result;
 8003690:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003692:	fab3 f383 	clz	r3, r3
 8003696:	b2db      	uxtb	r3, r3
 8003698:	095b      	lsrs	r3, r3, #5
 800369a:	b2db      	uxtb	r3, r3
 800369c:	f043 0302 	orr.w	r3, r3, #2
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d108      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80036a6:	4b01      	ldr	r3, [pc, #4]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	e00d      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80036ac:	40021000 	.word	0x40021000
 80036b0:	40007000 	.word	0x40007000
 80036b4:	10908100 	.word	0x10908100
 80036b8:	2302      	movs	r3, #2
 80036ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	fa93 f3a3 	rbit	r3, r3
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	4b9a      	ldr	r3, [pc, #616]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	2202      	movs	r2, #2
 80036ca:	613a      	str	r2, [r7, #16]
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	fa92 f2a2 	rbit	r2, r2
 80036d2:	60fa      	str	r2, [r7, #12]
  return result;
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	fab2 f282 	clz	r2, r2
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	f002 021f 	and.w	r2, r2, #31
 80036e6:	2101      	movs	r1, #1
 80036e8:	fa01 f202 	lsl.w	r2, r1, r2
 80036ec:	4013      	ands	r3, r2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0b7      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80036f2:	4b8f      	ldr	r3, [pc, #572]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	498c      	ldr	r1, [pc, #560]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003700:	4313      	orrs	r3, r2
 8003702:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003704:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003708:	2b01      	cmp	r3, #1
 800370a:	d105      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800370c:	4b88      	ldr	r3, [pc, #544]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	4a87      	ldr	r2, [pc, #540]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003712:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003716:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	d008      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003724:	4b82      	ldr	r3, [pc, #520]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	f023 0203 	bic.w	r2, r3, #3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	497f      	ldr	r1, [pc, #508]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003732:	4313      	orrs	r3, r2
 8003734:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d008      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003742:	4b7b      	ldr	r3, [pc, #492]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	4978      	ldr	r1, [pc, #480]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003750:	4313      	orrs	r3, r2
 8003752:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	d008      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003760:	4b73      	ldr	r3, [pc, #460]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003764:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	4970      	ldr	r1, [pc, #448]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800376e:	4313      	orrs	r3, r2
 8003770:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0320 	and.w	r3, r3, #32
 800377a:	2b00      	cmp	r3, #0
 800377c:	d008      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800377e:	4b6c      	ldr	r3, [pc, #432]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	f023 0210 	bic.w	r2, r3, #16
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	4969      	ldr	r1, [pc, #420]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800378c:	4313      	orrs	r3, r2
 800378e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d008      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800379c:	4b64      	ldr	r3, [pc, #400]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a8:	4961      	ldr	r1, [pc, #388]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d008      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037ba:	4b5d      	ldr	r3, [pc, #372]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	f023 0220 	bic.w	r2, r3, #32
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	495a      	ldr	r1, [pc, #360]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d008      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037d8:	4b55      	ldr	r3, [pc, #340]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037dc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e4:	4952      	ldr	r1, [pc, #328]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d008      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037f6:	4b4e      	ldr	r3, [pc, #312]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	494b      	ldr	r1, [pc, #300]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003804:	4313      	orrs	r3, r2
 8003806:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0310 	and.w	r3, r3, #16
 8003810:	2b00      	cmp	r3, #0
 8003812:	d008      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003814:	4b46      	ldr	r3, [pc, #280]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003818:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	4943      	ldr	r1, [pc, #268]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003822:	4313      	orrs	r3, r2
 8003824:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800382e:	2b00      	cmp	r3, #0
 8003830:	d008      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003832:	4b3f      	ldr	r3, [pc, #252]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	493c      	ldr	r1, [pc, #240]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003840:	4313      	orrs	r3, r2
 8003842:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384c:	2b00      	cmp	r3, #0
 800384e:	d008      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003850:	4b37      	ldr	r3, [pc, #220]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385c:	4934      	ldr	r1, [pc, #208]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800385e:	4313      	orrs	r3, r2
 8003860:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386a:	2b00      	cmp	r3, #0
 800386c:	d008      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800386e:	4b30      	ldr	r3, [pc, #192]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003872:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387a:	492d      	ldr	r1, [pc, #180]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800387c:	4313      	orrs	r3, r2
 800387e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d008      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800388c:	4b28      	ldr	r3, [pc, #160]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800388e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003890:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003898:	4925      	ldr	r1, [pc, #148]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800389a:	4313      	orrs	r3, r2
 800389c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d008      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80038aa:	4b21      	ldr	r3, [pc, #132]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ae:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	491e      	ldr	r1, [pc, #120]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d008      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80038c8:	4b19      	ldr	r3, [pc, #100]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d4:	4916      	ldr	r1, [pc, #88]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d008      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80038e6:	4b12      	ldr	r3, [pc, #72]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f2:	490f      	ldr	r1, [pc, #60]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d008      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003904:	4b0a      	ldr	r3, [pc, #40]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003908:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003910:	4907      	ldr	r1, [pc, #28]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003912:	4313      	orrs	r3, r2
 8003914:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00c      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003922:	4b03      	ldr	r3, [pc, #12]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	e002      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800392e:	bf00      	nop
 8003930:	40021000 	.word	0x40021000
 8003934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003936:	4913      	ldr	r1, [pc, #76]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003938:	4313      	orrs	r3, r2
 800393a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d008      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003948:	4b0e      	ldr	r3, [pc, #56]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800394a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003954:	490b      	ldr	r1, [pc, #44]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003956:	4313      	orrs	r3, r2
 8003958:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d008      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003966:	4b07      	ldr	r3, [pc, #28]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003972:	4904      	ldr	r1, [pc, #16]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003974:	4313      	orrs	r3, r2
 8003976:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3748      	adds	r7, #72	; 0x48
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40021000 	.word	0x40021000

08003988 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e049      	b.n	8003a2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d106      	bne.n	80039b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7fd f830 	bl	8000a14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3304      	adds	r3, #4
 80039c4:	4619      	mov	r1, r3
 80039c6:	4610      	mov	r0, r2
 80039c8:	f000 fab6 	bl	8003f38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
	...

08003a38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d001      	beq.n	8003a50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e04f      	b.n	8003af0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68da      	ldr	r2, [r3, #12]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0201 	orr.w	r2, r2, #1
 8003a66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a23      	ldr	r2, [pc, #140]	; (8003afc <HAL_TIM_Base_Start_IT+0xc4>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d01d      	beq.n	8003aae <HAL_TIM_Base_Start_IT+0x76>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a7a:	d018      	beq.n	8003aae <HAL_TIM_Base_Start_IT+0x76>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a1f      	ldr	r2, [pc, #124]	; (8003b00 <HAL_TIM_Base_Start_IT+0xc8>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d013      	beq.n	8003aae <HAL_TIM_Base_Start_IT+0x76>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a1e      	ldr	r2, [pc, #120]	; (8003b04 <HAL_TIM_Base_Start_IT+0xcc>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d00e      	beq.n	8003aae <HAL_TIM_Base_Start_IT+0x76>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a1c      	ldr	r2, [pc, #112]	; (8003b08 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d009      	beq.n	8003aae <HAL_TIM_Base_Start_IT+0x76>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a1b      	ldr	r2, [pc, #108]	; (8003b0c <HAL_TIM_Base_Start_IT+0xd4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d004      	beq.n	8003aae <HAL_TIM_Base_Start_IT+0x76>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a19      	ldr	r2, [pc, #100]	; (8003b10 <HAL_TIM_Base_Start_IT+0xd8>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d115      	bne.n	8003ada <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	4b17      	ldr	r3, [pc, #92]	; (8003b14 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2b06      	cmp	r3, #6
 8003abe:	d015      	beq.n	8003aec <HAL_TIM_Base_Start_IT+0xb4>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ac6:	d011      	beq.n	8003aec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0201 	orr.w	r2, r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ad8:	e008      	b.n	8003aec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f042 0201 	orr.w	r2, r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	e000      	b.n	8003aee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	40012c00 	.word	0x40012c00
 8003b00:	40000400 	.word	0x40000400
 8003b04:	40000800 	.word	0x40000800
 8003b08:	40013400 	.word	0x40013400
 8003b0c:	40014000 	.word	0x40014000
 8003b10:	40015000 	.word	0x40015000
 8003b14:	00010007 	.word	0x00010007

08003b18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d122      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d11b      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f06f 0202 	mvn.w	r2, #2
 8003b44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f9ce 	bl	8003efc <HAL_TIM_IC_CaptureCallback>
 8003b60:	e005      	b.n	8003b6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f9c0 	bl	8003ee8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f9d1 	bl	8003f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f003 0304 	and.w	r3, r3, #4
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d122      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b04      	cmp	r3, #4
 8003b8e:	d11b      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f06f 0204 	mvn.w	r2, #4
 8003b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2202      	movs	r2, #2
 8003b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f9a4 	bl	8003efc <HAL_TIM_IC_CaptureCallback>
 8003bb4:	e005      	b.n	8003bc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f996 	bl	8003ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f9a7 	bl	8003f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b08      	cmp	r3, #8
 8003bd4:	d122      	bne.n	8003c1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f003 0308 	and.w	r3, r3, #8
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d11b      	bne.n	8003c1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f06f 0208 	mvn.w	r2, #8
 8003bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2204      	movs	r2, #4
 8003bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f97a 	bl	8003efc <HAL_TIM_IC_CaptureCallback>
 8003c08:	e005      	b.n	8003c16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f96c 	bl	8003ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f97d 	bl	8003f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	f003 0310 	and.w	r3, r3, #16
 8003c26:	2b10      	cmp	r3, #16
 8003c28:	d122      	bne.n	8003c70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f003 0310 	and.w	r3, r3, #16
 8003c34:	2b10      	cmp	r3, #16
 8003c36:	d11b      	bne.n	8003c70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f06f 0210 	mvn.w	r2, #16
 8003c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2208      	movs	r2, #8
 8003c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f950 	bl	8003efc <HAL_TIM_IC_CaptureCallback>
 8003c5c:	e005      	b.n	8003c6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f942 	bl	8003ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f953 	bl	8003f10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d10e      	bne.n	8003c9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d107      	bne.n	8003c9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f06f 0201 	mvn.w	r2, #1
 8003c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7fc fdfa 	bl	8000890 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca6:	2b80      	cmp	r3, #128	; 0x80
 8003ca8:	d10e      	bne.n	8003cc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb4:	2b80      	cmp	r3, #128	; 0x80
 8003cb6:	d107      	bne.n	8003cc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 fb06 	bl	80042d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cd6:	d10e      	bne.n	8003cf6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce2:	2b80      	cmp	r3, #128	; 0x80
 8003ce4:	d107      	bne.n	8003cf6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003cee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 faf9 	bl	80042e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d00:	2b40      	cmp	r3, #64	; 0x40
 8003d02:	d10e      	bne.n	8003d22 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0e:	2b40      	cmp	r3, #64	; 0x40
 8003d10:	d107      	bne.n	8003d22 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 f901 	bl	8003f24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	f003 0320 	and.w	r3, r3, #32
 8003d2c:	2b20      	cmp	r3, #32
 8003d2e:	d10e      	bne.n	8003d4e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f003 0320 	and.w	r3, r3, #32
 8003d3a:	2b20      	cmp	r3, #32
 8003d3c:	d107      	bne.n	8003d4e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f06f 0220 	mvn.w	r2, #32
 8003d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 fab9 	bl	80042c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d4e:	bf00      	nop
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b084      	sub	sp, #16
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
 8003d5e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d60:	2300      	movs	r3, #0
 8003d62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d101      	bne.n	8003d72 <HAL_TIM_ConfigClockSource+0x1c>
 8003d6e:	2302      	movs	r3, #2
 8003d70:	e0b6      	b.n	8003ee0 <HAL_TIM_ConfigClockSource+0x18a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2202      	movs	r2, #2
 8003d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d90:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d94:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d9c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dae:	d03e      	beq.n	8003e2e <HAL_TIM_ConfigClockSource+0xd8>
 8003db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db4:	f200 8087 	bhi.w	8003ec6 <HAL_TIM_ConfigClockSource+0x170>
 8003db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dbc:	f000 8086 	beq.w	8003ecc <HAL_TIM_ConfigClockSource+0x176>
 8003dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc4:	d87f      	bhi.n	8003ec6 <HAL_TIM_ConfigClockSource+0x170>
 8003dc6:	2b70      	cmp	r3, #112	; 0x70
 8003dc8:	d01a      	beq.n	8003e00 <HAL_TIM_ConfigClockSource+0xaa>
 8003dca:	2b70      	cmp	r3, #112	; 0x70
 8003dcc:	d87b      	bhi.n	8003ec6 <HAL_TIM_ConfigClockSource+0x170>
 8003dce:	2b60      	cmp	r3, #96	; 0x60
 8003dd0:	d050      	beq.n	8003e74 <HAL_TIM_ConfigClockSource+0x11e>
 8003dd2:	2b60      	cmp	r3, #96	; 0x60
 8003dd4:	d877      	bhi.n	8003ec6 <HAL_TIM_ConfigClockSource+0x170>
 8003dd6:	2b50      	cmp	r3, #80	; 0x50
 8003dd8:	d03c      	beq.n	8003e54 <HAL_TIM_ConfigClockSource+0xfe>
 8003dda:	2b50      	cmp	r3, #80	; 0x50
 8003ddc:	d873      	bhi.n	8003ec6 <HAL_TIM_ConfigClockSource+0x170>
 8003dde:	2b40      	cmp	r3, #64	; 0x40
 8003de0:	d058      	beq.n	8003e94 <HAL_TIM_ConfigClockSource+0x13e>
 8003de2:	2b40      	cmp	r3, #64	; 0x40
 8003de4:	d86f      	bhi.n	8003ec6 <HAL_TIM_ConfigClockSource+0x170>
 8003de6:	2b30      	cmp	r3, #48	; 0x30
 8003de8:	d064      	beq.n	8003eb4 <HAL_TIM_ConfigClockSource+0x15e>
 8003dea:	2b30      	cmp	r3, #48	; 0x30
 8003dec:	d86b      	bhi.n	8003ec6 <HAL_TIM_ConfigClockSource+0x170>
 8003dee:	2b20      	cmp	r3, #32
 8003df0:	d060      	beq.n	8003eb4 <HAL_TIM_ConfigClockSource+0x15e>
 8003df2:	2b20      	cmp	r3, #32
 8003df4:	d867      	bhi.n	8003ec6 <HAL_TIM_ConfigClockSource+0x170>
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d05c      	beq.n	8003eb4 <HAL_TIM_ConfigClockSource+0x15e>
 8003dfa:	2b10      	cmp	r3, #16
 8003dfc:	d05a      	beq.n	8003eb4 <HAL_TIM_ConfigClockSource+0x15e>
 8003dfe:	e062      	b.n	8003ec6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e10:	f000 f9aa 	bl	8004168 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e22:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	609a      	str	r2, [r3, #8]
      break;
 8003e2c:	e04f      	b.n	8003ece <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e3e:	f000 f993 	bl	8004168 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e50:	609a      	str	r2, [r3, #8]
      break;
 8003e52:	e03c      	b.n	8003ece <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e60:	461a      	mov	r2, r3
 8003e62:	f000 f907 	bl	8004074 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2150      	movs	r1, #80	; 0x50
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 f960 	bl	8004132 <TIM_ITRx_SetConfig>
      break;
 8003e72:	e02c      	b.n	8003ece <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e80:	461a      	mov	r2, r3
 8003e82:	f000 f926 	bl	80040d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2160      	movs	r1, #96	; 0x60
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 f950 	bl	8004132 <TIM_ITRx_SetConfig>
      break;
 8003e92:	e01c      	b.n	8003ece <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	f000 f8e7 	bl	8004074 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2140      	movs	r1, #64	; 0x40
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 f940 	bl	8004132 <TIM_ITRx_SetConfig>
      break;
 8003eb2:	e00c      	b.n	8003ece <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4610      	mov	r0, r2
 8003ec0:	f000 f937 	bl	8004132 <TIM_ITRx_SetConfig>
      break;
 8003ec4:	e003      	b.n	8003ece <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	73fb      	strb	r3, [r7, #15]
      break;
 8003eca:	e000      	b.n	8003ece <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003ecc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a42      	ldr	r2, [pc, #264]	; (8004054 <TIM_Base_SetConfig+0x11c>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d013      	beq.n	8003f78 <TIM_Base_SetConfig+0x40>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f56:	d00f      	beq.n	8003f78 <TIM_Base_SetConfig+0x40>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a3f      	ldr	r2, [pc, #252]	; (8004058 <TIM_Base_SetConfig+0x120>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d00b      	beq.n	8003f78 <TIM_Base_SetConfig+0x40>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a3e      	ldr	r2, [pc, #248]	; (800405c <TIM_Base_SetConfig+0x124>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d007      	beq.n	8003f78 <TIM_Base_SetConfig+0x40>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a3d      	ldr	r2, [pc, #244]	; (8004060 <TIM_Base_SetConfig+0x128>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d003      	beq.n	8003f78 <TIM_Base_SetConfig+0x40>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a3c      	ldr	r2, [pc, #240]	; (8004064 <TIM_Base_SetConfig+0x12c>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d108      	bne.n	8003f8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a31      	ldr	r2, [pc, #196]	; (8004054 <TIM_Base_SetConfig+0x11c>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d01f      	beq.n	8003fd2 <TIM_Base_SetConfig+0x9a>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f98:	d01b      	beq.n	8003fd2 <TIM_Base_SetConfig+0x9a>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a2e      	ldr	r2, [pc, #184]	; (8004058 <TIM_Base_SetConfig+0x120>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d017      	beq.n	8003fd2 <TIM_Base_SetConfig+0x9a>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a2d      	ldr	r2, [pc, #180]	; (800405c <TIM_Base_SetConfig+0x124>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d013      	beq.n	8003fd2 <TIM_Base_SetConfig+0x9a>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a2c      	ldr	r2, [pc, #176]	; (8004060 <TIM_Base_SetConfig+0x128>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00f      	beq.n	8003fd2 <TIM_Base_SetConfig+0x9a>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a2c      	ldr	r2, [pc, #176]	; (8004068 <TIM_Base_SetConfig+0x130>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d00b      	beq.n	8003fd2 <TIM_Base_SetConfig+0x9a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a2b      	ldr	r2, [pc, #172]	; (800406c <TIM_Base_SetConfig+0x134>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d007      	beq.n	8003fd2 <TIM_Base_SetConfig+0x9a>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a2a      	ldr	r2, [pc, #168]	; (8004070 <TIM_Base_SetConfig+0x138>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d003      	beq.n	8003fd2 <TIM_Base_SetConfig+0x9a>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a25      	ldr	r2, [pc, #148]	; (8004064 <TIM_Base_SetConfig+0x12c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d108      	bne.n	8003fe4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a12      	ldr	r2, [pc, #72]	; (8004054 <TIM_Base_SetConfig+0x11c>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d013      	beq.n	8004038 <TIM_Base_SetConfig+0x100>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a13      	ldr	r2, [pc, #76]	; (8004060 <TIM_Base_SetConfig+0x128>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d00f      	beq.n	8004038 <TIM_Base_SetConfig+0x100>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a13      	ldr	r2, [pc, #76]	; (8004068 <TIM_Base_SetConfig+0x130>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d00b      	beq.n	8004038 <TIM_Base_SetConfig+0x100>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a12      	ldr	r2, [pc, #72]	; (800406c <TIM_Base_SetConfig+0x134>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d007      	beq.n	8004038 <TIM_Base_SetConfig+0x100>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a11      	ldr	r2, [pc, #68]	; (8004070 <TIM_Base_SetConfig+0x138>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d003      	beq.n	8004038 <TIM_Base_SetConfig+0x100>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a0c      	ldr	r2, [pc, #48]	; (8004064 <TIM_Base_SetConfig+0x12c>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d103      	bne.n	8004040 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	691a      	ldr	r2, [r3, #16]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	615a      	str	r2, [r3, #20]
}
 8004046:	bf00      	nop
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	40012c00 	.word	0x40012c00
 8004058:	40000400 	.word	0x40000400
 800405c:	40000800 	.word	0x40000800
 8004060:	40013400 	.word	0x40013400
 8004064:	40015000 	.word	0x40015000
 8004068:	40014000 	.word	0x40014000
 800406c:	40014400 	.word	0x40014400
 8004070:	40014800 	.word	0x40014800

08004074 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004074:	b480      	push	{r7}
 8004076:	b087      	sub	sp, #28
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	f023 0201 	bic.w	r2, r3, #1
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800409e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f023 030a 	bic.w	r3, r3, #10
 80040b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	621a      	str	r2, [r3, #32]
}
 80040c6:	bf00      	nop
 80040c8:	371c      	adds	r7, #28
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b087      	sub	sp, #28
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	60f8      	str	r0, [r7, #12]
 80040da:	60b9      	str	r1, [r7, #8]
 80040dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	f023 0210 	bic.w	r2, r3, #16
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	031b      	lsls	r3, r3, #12
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	4313      	orrs	r3, r2
 8004106:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800410e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	4313      	orrs	r3, r2
 8004118:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	621a      	str	r2, [r3, #32]
}
 8004126:	bf00      	nop
 8004128:	371c      	adds	r7, #28
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004132:	b480      	push	{r7}
 8004134:	b085      	sub	sp, #20
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004148:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	4313      	orrs	r3, r2
 8004150:	f043 0307 	orr.w	r3, r3, #7
 8004154:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	609a      	str	r2, [r3, #8]
}
 800415c:	bf00      	nop
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004168:	b480      	push	{r7}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
 8004174:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004182:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	021a      	lsls	r2, r3, #8
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	431a      	orrs	r2, r3
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	4313      	orrs	r3, r2
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	4313      	orrs	r3, r2
 8004194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	609a      	str	r2, [r3, #8]
}
 800419c:	bf00      	nop
 800419e:	371c      	adds	r7, #28
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d101      	bne.n	80041c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041bc:	2302      	movs	r3, #2
 80041be:	e06d      	b.n	800429c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a30      	ldr	r2, [pc, #192]	; (80042a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d009      	beq.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a2f      	ldr	r2, [pc, #188]	; (80042ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d004      	beq.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a2d      	ldr	r2, [pc, #180]	; (80042b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d108      	bne.n	8004210 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004204:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	4313      	orrs	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004216:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	4313      	orrs	r3, r2
 8004220:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a1e      	ldr	r2, [pc, #120]	; (80042a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d01d      	beq.n	8004270 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800423c:	d018      	beq.n	8004270 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a1c      	ldr	r2, [pc, #112]	; (80042b4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d013      	beq.n	8004270 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a1a      	ldr	r2, [pc, #104]	; (80042b8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d00e      	beq.n	8004270 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a15      	ldr	r2, [pc, #84]	; (80042ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d009      	beq.n	8004270 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a16      	ldr	r2, [pc, #88]	; (80042bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d004      	beq.n	8004270 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a11      	ldr	r2, [pc, #68]	; (80042b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d10c      	bne.n	800428a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004276:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	4313      	orrs	r3, r2
 8004280:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3714      	adds	r7, #20
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	40012c00 	.word	0x40012c00
 80042ac:	40013400 	.word	0x40013400
 80042b0:	40015000 	.word	0x40015000
 80042b4:	40000400 	.word	0x40000400
 80042b8:	40000800 	.word	0x40000800
 80042bc:	40014000 	.word	0x40014000

080042c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e040      	b.n	8004390 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004312:	2b00      	cmp	r3, #0
 8004314:	d106      	bne.n	8004324 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7fc fb98 	bl	8000a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2224      	movs	r2, #36	; 0x24
 8004328:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 0201 	bic.w	r2, r2, #1
 8004338:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f980 	bl	8004640 <UART_SetConfig>
 8004340:	4603      	mov	r3, r0
 8004342:	2b01      	cmp	r3, #1
 8004344:	d101      	bne.n	800434a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e022      	b.n	8004390 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	2b00      	cmp	r3, #0
 8004350:	d002      	beq.n	8004358 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 fb48 	bl	80049e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004366:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689a      	ldr	r2, [r3, #8]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004376:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0201 	orr.w	r2, r2, #1
 8004386:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 fbcf 	bl	8004b2c <UART_CheckIdleState>
 800438e:	4603      	mov	r3, r0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b08a      	sub	sp, #40	; 0x28
 800439c:	af02      	add	r7, sp, #8
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	603b      	str	r3, [r7, #0]
 80043a4:	4613      	mov	r3, r2
 80043a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043ac:	2b20      	cmp	r3, #32
 80043ae:	d178      	bne.n	80044a2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d002      	beq.n	80043bc <HAL_UART_Transmit+0x24>
 80043b6:	88fb      	ldrh	r3, [r7, #6]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e071      	b.n	80044a4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2221      	movs	r2, #33	; 0x21
 80043cc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043ce:	f7fc fd01 	bl	8000dd4 <HAL_GetTick>
 80043d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	88fa      	ldrh	r2, [r7, #6]
 80043d8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	88fa      	ldrh	r2, [r7, #6]
 80043e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ec:	d108      	bne.n	8004400 <HAL_UART_Transmit+0x68>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d104      	bne.n	8004400 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80043f6:	2300      	movs	r3, #0
 80043f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	61bb      	str	r3, [r7, #24]
 80043fe:	e003      	b.n	8004408 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004404:	2300      	movs	r3, #0
 8004406:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004408:	e030      	b.n	800446c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	2200      	movs	r2, #0
 8004412:	2180      	movs	r1, #128	; 0x80
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 fc31 	bl	8004c7c <UART_WaitOnFlagUntilTimeout>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d004      	beq.n	800442a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2220      	movs	r2, #32
 8004424:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e03c      	b.n	80044a4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10b      	bne.n	8004448 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	881a      	ldrh	r2, [r3, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800443c:	b292      	uxth	r2, r2
 800443e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	3302      	adds	r3, #2
 8004444:	61bb      	str	r3, [r7, #24]
 8004446:	e008      	b.n	800445a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	781a      	ldrb	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	b292      	uxth	r2, r2
 8004452:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	3301      	adds	r3, #1
 8004458:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004460:	b29b      	uxth	r3, r3
 8004462:	3b01      	subs	r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004472:	b29b      	uxth	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1c8      	bne.n	800440a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	2200      	movs	r2, #0
 8004480:	2140      	movs	r1, #64	; 0x40
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 fbfa 	bl	8004c7c <UART_WaitOnFlagUntilTimeout>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d004      	beq.n	8004498 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2220      	movs	r2, #32
 8004492:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e005      	b.n	80044a4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2220      	movs	r2, #32
 800449c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800449e:	2300      	movs	r3, #0
 80044a0:	e000      	b.n	80044a4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80044a2:	2302      	movs	r3, #2
  }
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3720      	adds	r7, #32
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b08a      	sub	sp, #40	; 0x28
 80044b0:	af02      	add	r7, sp, #8
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	603b      	str	r3, [r7, #0]
 80044b8:	4613      	mov	r3, r2
 80044ba:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044c2:	2b20      	cmp	r3, #32
 80044c4:	f040 80b6 	bne.w	8004634 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d002      	beq.n	80044d4 <HAL_UART_Receive+0x28>
 80044ce:	88fb      	ldrh	r3, [r7, #6]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e0ae      	b.n	8004636 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2222      	movs	r2, #34	; 0x22
 80044e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044ee:	f7fc fc71 	bl	8000dd4 <HAL_GetTick>
 80044f2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	88fa      	ldrh	r2, [r7, #6]
 80044f8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	88fa      	ldrh	r2, [r7, #6]
 8004500:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800450c:	d10e      	bne.n	800452c <HAL_UART_Receive+0x80>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d105      	bne.n	8004522 <HAL_UART_Receive+0x76>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f240 12ff 	movw	r2, #511	; 0x1ff
 800451c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004520:	e02d      	b.n	800457e <HAL_UART_Receive+0xd2>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	22ff      	movs	r2, #255	; 0xff
 8004526:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800452a:	e028      	b.n	800457e <HAL_UART_Receive+0xd2>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10d      	bne.n	8004550 <HAL_UART_Receive+0xa4>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d104      	bne.n	8004546 <HAL_UART_Receive+0x9a>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	22ff      	movs	r2, #255	; 0xff
 8004540:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004544:	e01b      	b.n	800457e <HAL_UART_Receive+0xd2>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	227f      	movs	r2, #127	; 0x7f
 800454a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800454e:	e016      	b.n	800457e <HAL_UART_Receive+0xd2>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004558:	d10d      	bne.n	8004576 <HAL_UART_Receive+0xca>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d104      	bne.n	800456c <HAL_UART_Receive+0xc0>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	227f      	movs	r2, #127	; 0x7f
 8004566:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800456a:	e008      	b.n	800457e <HAL_UART_Receive+0xd2>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	223f      	movs	r2, #63	; 0x3f
 8004570:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004574:	e003      	b.n	800457e <HAL_UART_Receive+0xd2>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004584:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800458e:	d108      	bne.n	80045a2 <HAL_UART_Receive+0xf6>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d104      	bne.n	80045a2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004598:	2300      	movs	r3, #0
 800459a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	61bb      	str	r3, [r7, #24]
 80045a0:	e003      	b.n	80045aa <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045a6:	2300      	movs	r3, #0
 80045a8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80045aa:	e037      	b.n	800461c <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	2200      	movs	r2, #0
 80045b4:	2120      	movs	r1, #32
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 fb60 	bl	8004c7c <UART_WaitOnFlagUntilTimeout>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d005      	beq.n	80045ce <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2220      	movs	r2, #32
 80045c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e033      	b.n	8004636 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10c      	bne.n	80045ee <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80045da:	b29a      	uxth	r2, r3
 80045dc:	8a7b      	ldrh	r3, [r7, #18]
 80045de:	4013      	ands	r3, r2
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	3302      	adds	r3, #2
 80045ea:	61bb      	str	r3, [r7, #24]
 80045ec:	e00d      	b.n	800460a <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	8a7b      	ldrh	r3, [r7, #18]
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	4013      	ands	r3, r2
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	3301      	adds	r3, #1
 8004608:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004610:	b29b      	uxth	r3, r3
 8004612:	3b01      	subs	r3, #1
 8004614:	b29a      	uxth	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004622:	b29b      	uxth	r3, r3
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1c1      	bne.n	80045ac <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2220      	movs	r2, #32
 800462c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004630:	2300      	movs	r3, #0
 8004632:	e000      	b.n	8004636 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8004634:	2302      	movs	r3, #2
  }
}
 8004636:	4618      	mov	r0, r3
 8004638:	3720      	adds	r7, #32
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
	...

08004640 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b088      	sub	sp, #32
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004648:	2300      	movs	r3, #0
 800464a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	431a      	orrs	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	4313      	orrs	r3, r2
 8004662:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	4b92      	ldr	r3, [pc, #584]	; (80048b4 <UART_SetConfig+0x274>)
 800466c:	4013      	ands	r3, r2
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6812      	ldr	r2, [r2, #0]
 8004672:	6979      	ldr	r1, [r7, #20]
 8004674:	430b      	orrs	r3, r1
 8004676:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68da      	ldr	r2, [r3, #12]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	430a      	orrs	r2, r1
 800468c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	4313      	orrs	r3, r2
 800469c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a80      	ldr	r2, [pc, #512]	; (80048b8 <UART_SetConfig+0x278>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d120      	bne.n	80046fe <UART_SetConfig+0xbe>
 80046bc:	4b7f      	ldr	r3, [pc, #508]	; (80048bc <UART_SetConfig+0x27c>)
 80046be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c0:	f003 0303 	and.w	r3, r3, #3
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	d817      	bhi.n	80046f8 <UART_SetConfig+0xb8>
 80046c8:	a201      	add	r2, pc, #4	; (adr r2, 80046d0 <UART_SetConfig+0x90>)
 80046ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ce:	bf00      	nop
 80046d0:	080046e1 	.word	0x080046e1
 80046d4:	080046ed 	.word	0x080046ed
 80046d8:	080046f3 	.word	0x080046f3
 80046dc:	080046e7 	.word	0x080046e7
 80046e0:	2301      	movs	r3, #1
 80046e2:	77fb      	strb	r3, [r7, #31]
 80046e4:	e0b5      	b.n	8004852 <UART_SetConfig+0x212>
 80046e6:	2302      	movs	r3, #2
 80046e8:	77fb      	strb	r3, [r7, #31]
 80046ea:	e0b2      	b.n	8004852 <UART_SetConfig+0x212>
 80046ec:	2304      	movs	r3, #4
 80046ee:	77fb      	strb	r3, [r7, #31]
 80046f0:	e0af      	b.n	8004852 <UART_SetConfig+0x212>
 80046f2:	2308      	movs	r3, #8
 80046f4:	77fb      	strb	r3, [r7, #31]
 80046f6:	e0ac      	b.n	8004852 <UART_SetConfig+0x212>
 80046f8:	2310      	movs	r3, #16
 80046fa:	77fb      	strb	r3, [r7, #31]
 80046fc:	e0a9      	b.n	8004852 <UART_SetConfig+0x212>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a6f      	ldr	r2, [pc, #444]	; (80048c0 <UART_SetConfig+0x280>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d124      	bne.n	8004752 <UART_SetConfig+0x112>
 8004708:	4b6c      	ldr	r3, [pc, #432]	; (80048bc <UART_SetConfig+0x27c>)
 800470a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004710:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004714:	d011      	beq.n	800473a <UART_SetConfig+0xfa>
 8004716:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800471a:	d817      	bhi.n	800474c <UART_SetConfig+0x10c>
 800471c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004720:	d011      	beq.n	8004746 <UART_SetConfig+0x106>
 8004722:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004726:	d811      	bhi.n	800474c <UART_SetConfig+0x10c>
 8004728:	2b00      	cmp	r3, #0
 800472a:	d003      	beq.n	8004734 <UART_SetConfig+0xf4>
 800472c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004730:	d006      	beq.n	8004740 <UART_SetConfig+0x100>
 8004732:	e00b      	b.n	800474c <UART_SetConfig+0x10c>
 8004734:	2300      	movs	r3, #0
 8004736:	77fb      	strb	r3, [r7, #31]
 8004738:	e08b      	b.n	8004852 <UART_SetConfig+0x212>
 800473a:	2302      	movs	r3, #2
 800473c:	77fb      	strb	r3, [r7, #31]
 800473e:	e088      	b.n	8004852 <UART_SetConfig+0x212>
 8004740:	2304      	movs	r3, #4
 8004742:	77fb      	strb	r3, [r7, #31]
 8004744:	e085      	b.n	8004852 <UART_SetConfig+0x212>
 8004746:	2308      	movs	r3, #8
 8004748:	77fb      	strb	r3, [r7, #31]
 800474a:	e082      	b.n	8004852 <UART_SetConfig+0x212>
 800474c:	2310      	movs	r3, #16
 800474e:	77fb      	strb	r3, [r7, #31]
 8004750:	e07f      	b.n	8004852 <UART_SetConfig+0x212>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a5b      	ldr	r2, [pc, #364]	; (80048c4 <UART_SetConfig+0x284>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d124      	bne.n	80047a6 <UART_SetConfig+0x166>
 800475c:	4b57      	ldr	r3, [pc, #348]	; (80048bc <UART_SetConfig+0x27c>)
 800475e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004760:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004764:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004768:	d011      	beq.n	800478e <UART_SetConfig+0x14e>
 800476a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800476e:	d817      	bhi.n	80047a0 <UART_SetConfig+0x160>
 8004770:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004774:	d011      	beq.n	800479a <UART_SetConfig+0x15a>
 8004776:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800477a:	d811      	bhi.n	80047a0 <UART_SetConfig+0x160>
 800477c:	2b00      	cmp	r3, #0
 800477e:	d003      	beq.n	8004788 <UART_SetConfig+0x148>
 8004780:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004784:	d006      	beq.n	8004794 <UART_SetConfig+0x154>
 8004786:	e00b      	b.n	80047a0 <UART_SetConfig+0x160>
 8004788:	2300      	movs	r3, #0
 800478a:	77fb      	strb	r3, [r7, #31]
 800478c:	e061      	b.n	8004852 <UART_SetConfig+0x212>
 800478e:	2302      	movs	r3, #2
 8004790:	77fb      	strb	r3, [r7, #31]
 8004792:	e05e      	b.n	8004852 <UART_SetConfig+0x212>
 8004794:	2304      	movs	r3, #4
 8004796:	77fb      	strb	r3, [r7, #31]
 8004798:	e05b      	b.n	8004852 <UART_SetConfig+0x212>
 800479a:	2308      	movs	r3, #8
 800479c:	77fb      	strb	r3, [r7, #31]
 800479e:	e058      	b.n	8004852 <UART_SetConfig+0x212>
 80047a0:	2310      	movs	r3, #16
 80047a2:	77fb      	strb	r3, [r7, #31]
 80047a4:	e055      	b.n	8004852 <UART_SetConfig+0x212>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a47      	ldr	r2, [pc, #284]	; (80048c8 <UART_SetConfig+0x288>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d124      	bne.n	80047fa <UART_SetConfig+0x1ba>
 80047b0:	4b42      	ldr	r3, [pc, #264]	; (80048bc <UART_SetConfig+0x27c>)
 80047b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80047b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80047bc:	d011      	beq.n	80047e2 <UART_SetConfig+0x1a2>
 80047be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80047c2:	d817      	bhi.n	80047f4 <UART_SetConfig+0x1b4>
 80047c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047c8:	d011      	beq.n	80047ee <UART_SetConfig+0x1ae>
 80047ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047ce:	d811      	bhi.n	80047f4 <UART_SetConfig+0x1b4>
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d003      	beq.n	80047dc <UART_SetConfig+0x19c>
 80047d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047d8:	d006      	beq.n	80047e8 <UART_SetConfig+0x1a8>
 80047da:	e00b      	b.n	80047f4 <UART_SetConfig+0x1b4>
 80047dc:	2300      	movs	r3, #0
 80047de:	77fb      	strb	r3, [r7, #31]
 80047e0:	e037      	b.n	8004852 <UART_SetConfig+0x212>
 80047e2:	2302      	movs	r3, #2
 80047e4:	77fb      	strb	r3, [r7, #31]
 80047e6:	e034      	b.n	8004852 <UART_SetConfig+0x212>
 80047e8:	2304      	movs	r3, #4
 80047ea:	77fb      	strb	r3, [r7, #31]
 80047ec:	e031      	b.n	8004852 <UART_SetConfig+0x212>
 80047ee:	2308      	movs	r3, #8
 80047f0:	77fb      	strb	r3, [r7, #31]
 80047f2:	e02e      	b.n	8004852 <UART_SetConfig+0x212>
 80047f4:	2310      	movs	r3, #16
 80047f6:	77fb      	strb	r3, [r7, #31]
 80047f8:	e02b      	b.n	8004852 <UART_SetConfig+0x212>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a33      	ldr	r2, [pc, #204]	; (80048cc <UART_SetConfig+0x28c>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d124      	bne.n	800484e <UART_SetConfig+0x20e>
 8004804:	4b2d      	ldr	r3, [pc, #180]	; (80048bc <UART_SetConfig+0x27c>)
 8004806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004808:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800480c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004810:	d011      	beq.n	8004836 <UART_SetConfig+0x1f6>
 8004812:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004816:	d817      	bhi.n	8004848 <UART_SetConfig+0x208>
 8004818:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800481c:	d011      	beq.n	8004842 <UART_SetConfig+0x202>
 800481e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004822:	d811      	bhi.n	8004848 <UART_SetConfig+0x208>
 8004824:	2b00      	cmp	r3, #0
 8004826:	d003      	beq.n	8004830 <UART_SetConfig+0x1f0>
 8004828:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800482c:	d006      	beq.n	800483c <UART_SetConfig+0x1fc>
 800482e:	e00b      	b.n	8004848 <UART_SetConfig+0x208>
 8004830:	2300      	movs	r3, #0
 8004832:	77fb      	strb	r3, [r7, #31]
 8004834:	e00d      	b.n	8004852 <UART_SetConfig+0x212>
 8004836:	2302      	movs	r3, #2
 8004838:	77fb      	strb	r3, [r7, #31]
 800483a:	e00a      	b.n	8004852 <UART_SetConfig+0x212>
 800483c:	2304      	movs	r3, #4
 800483e:	77fb      	strb	r3, [r7, #31]
 8004840:	e007      	b.n	8004852 <UART_SetConfig+0x212>
 8004842:	2308      	movs	r3, #8
 8004844:	77fb      	strb	r3, [r7, #31]
 8004846:	e004      	b.n	8004852 <UART_SetConfig+0x212>
 8004848:	2310      	movs	r3, #16
 800484a:	77fb      	strb	r3, [r7, #31]
 800484c:	e001      	b.n	8004852 <UART_SetConfig+0x212>
 800484e:	2310      	movs	r3, #16
 8004850:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800485a:	d16b      	bne.n	8004934 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800485c:	7ffb      	ldrb	r3, [r7, #31]
 800485e:	2b08      	cmp	r3, #8
 8004860:	d838      	bhi.n	80048d4 <UART_SetConfig+0x294>
 8004862:	a201      	add	r2, pc, #4	; (adr r2, 8004868 <UART_SetConfig+0x228>)
 8004864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004868:	0800488d 	.word	0x0800488d
 800486c:	08004895 	.word	0x08004895
 8004870:	0800489d 	.word	0x0800489d
 8004874:	080048d5 	.word	0x080048d5
 8004878:	080048a3 	.word	0x080048a3
 800487c:	080048d5 	.word	0x080048d5
 8004880:	080048d5 	.word	0x080048d5
 8004884:	080048d5 	.word	0x080048d5
 8004888:	080048ab 	.word	0x080048ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800488c:	f7fe fde8 	bl	8003460 <HAL_RCC_GetPCLK1Freq>
 8004890:	61b8      	str	r0, [r7, #24]
        break;
 8004892:	e024      	b.n	80048de <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004894:	f7fe fe06 	bl	80034a4 <HAL_RCC_GetPCLK2Freq>
 8004898:	61b8      	str	r0, [r7, #24]
        break;
 800489a:	e020      	b.n	80048de <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800489c:	4b0c      	ldr	r3, [pc, #48]	; (80048d0 <UART_SetConfig+0x290>)
 800489e:	61bb      	str	r3, [r7, #24]
        break;
 80048a0:	e01d      	b.n	80048de <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048a2:	f7fe fd67 	bl	8003374 <HAL_RCC_GetSysClockFreq>
 80048a6:	61b8      	str	r0, [r7, #24]
        break;
 80048a8:	e019      	b.n	80048de <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ae:	61bb      	str	r3, [r7, #24]
        break;
 80048b0:	e015      	b.n	80048de <UART_SetConfig+0x29e>
 80048b2:	bf00      	nop
 80048b4:	efff69f3 	.word	0xefff69f3
 80048b8:	40013800 	.word	0x40013800
 80048bc:	40021000 	.word	0x40021000
 80048c0:	40004400 	.word	0x40004400
 80048c4:	40004800 	.word	0x40004800
 80048c8:	40004c00 	.word	0x40004c00
 80048cc:	40005000 	.word	0x40005000
 80048d0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80048d4:	2300      	movs	r3, #0
 80048d6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	77bb      	strb	r3, [r7, #30]
        break;
 80048dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d073      	beq.n	80049cc <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	005a      	lsls	r2, r3, #1
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	085b      	lsrs	r3, r3, #1
 80048ee:	441a      	add	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	2b0f      	cmp	r3, #15
 80048fe:	d916      	bls.n	800492e <UART_SetConfig+0x2ee>
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004906:	d212      	bcs.n	800492e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	b29b      	uxth	r3, r3
 800490c:	f023 030f 	bic.w	r3, r3, #15
 8004910:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	085b      	lsrs	r3, r3, #1
 8004916:	b29b      	uxth	r3, r3
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	b29a      	uxth	r2, r3
 800491e:	89fb      	ldrh	r3, [r7, #14]
 8004920:	4313      	orrs	r3, r2
 8004922:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	89fa      	ldrh	r2, [r7, #14]
 800492a:	60da      	str	r2, [r3, #12]
 800492c:	e04e      	b.n	80049cc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	77bb      	strb	r3, [r7, #30]
 8004932:	e04b      	b.n	80049cc <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004934:	7ffb      	ldrb	r3, [r7, #31]
 8004936:	2b08      	cmp	r3, #8
 8004938:	d827      	bhi.n	800498a <UART_SetConfig+0x34a>
 800493a:	a201      	add	r2, pc, #4	; (adr r2, 8004940 <UART_SetConfig+0x300>)
 800493c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004940:	08004965 	.word	0x08004965
 8004944:	0800496d 	.word	0x0800496d
 8004948:	08004975 	.word	0x08004975
 800494c:	0800498b 	.word	0x0800498b
 8004950:	0800497b 	.word	0x0800497b
 8004954:	0800498b 	.word	0x0800498b
 8004958:	0800498b 	.word	0x0800498b
 800495c:	0800498b 	.word	0x0800498b
 8004960:	08004983 	.word	0x08004983
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004964:	f7fe fd7c 	bl	8003460 <HAL_RCC_GetPCLK1Freq>
 8004968:	61b8      	str	r0, [r7, #24]
        break;
 800496a:	e013      	b.n	8004994 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800496c:	f7fe fd9a 	bl	80034a4 <HAL_RCC_GetPCLK2Freq>
 8004970:	61b8      	str	r0, [r7, #24]
        break;
 8004972:	e00f      	b.n	8004994 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004974:	4b1b      	ldr	r3, [pc, #108]	; (80049e4 <UART_SetConfig+0x3a4>)
 8004976:	61bb      	str	r3, [r7, #24]
        break;
 8004978:	e00c      	b.n	8004994 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800497a:	f7fe fcfb 	bl	8003374 <HAL_RCC_GetSysClockFreq>
 800497e:	61b8      	str	r0, [r7, #24]
        break;
 8004980:	e008      	b.n	8004994 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004986:	61bb      	str	r3, [r7, #24]
        break;
 8004988:	e004      	b.n	8004994 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800498a:	2300      	movs	r3, #0
 800498c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	77bb      	strb	r3, [r7, #30]
        break;
 8004992:	bf00      	nop
    }

    if (pclk != 0U)
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d018      	beq.n	80049cc <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	085a      	lsrs	r2, r3, #1
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	441a      	add	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	2b0f      	cmp	r3, #15
 80049b2:	d909      	bls.n	80049c8 <UART_SetConfig+0x388>
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ba:	d205      	bcs.n	80049c8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	b29a      	uxth	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	60da      	str	r2, [r3, #12]
 80049c6:	e001      	b.n	80049cc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80049d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3720      	adds	r7, #32
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	007a1200 	.word	0x007a1200

080049e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00a      	beq.n	8004a12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00a      	beq.n	8004a34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00a      	beq.n	8004a56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	f003 0308 	and.w	r3, r3, #8
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00a      	beq.n	8004a78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	430a      	orrs	r2, r1
 8004a76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	f003 0310 	and.w	r3, r3, #16
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00a      	beq.n	8004a9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	f003 0320 	and.w	r3, r3, #32
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00a      	beq.n	8004abc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d01a      	beq.n	8004afe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ae6:	d10a      	bne.n	8004afe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00a      	beq.n	8004b20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	605a      	str	r2, [r3, #4]
  }
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b098      	sub	sp, #96	; 0x60
 8004b30:	af02      	add	r7, sp, #8
 8004b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b3c:	f7fc f94a 	bl	8000dd4 <HAL_GetTick>
 8004b40:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0308 	and.w	r3, r3, #8
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d12e      	bne.n	8004bae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b54:	9300      	str	r3, [sp, #0]
 8004b56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f88c 	bl	8004c7c <UART_WaitOnFlagUntilTimeout>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d021      	beq.n	8004bae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b72:	e853 3f00 	ldrex	r3, [r3]
 8004b76:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b7e:	653b      	str	r3, [r7, #80]	; 0x50
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	461a      	mov	r2, r3
 8004b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b88:	647b      	str	r3, [r7, #68]	; 0x44
 8004b8a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b90:	e841 2300 	strex	r3, r2, [r1]
 8004b94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1e6      	bne.n	8004b6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e062      	b.n	8004c74 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0304 	and.w	r3, r3, #4
 8004bb8:	2b04      	cmp	r3, #4
 8004bba:	d149      	bne.n	8004c50 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f856 	bl	8004c7c <UART_WaitOnFlagUntilTimeout>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d03c      	beq.n	8004c50 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	e853 3f00 	ldrex	r3, [r3]
 8004be2:	623b      	str	r3, [r7, #32]
   return(result);
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bf4:	633b      	str	r3, [r7, #48]	; 0x30
 8004bf6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bfc:	e841 2300 	strex	r3, r2, [r1]
 8004c00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1e6      	bne.n	8004bd6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	3308      	adds	r3, #8
 8004c0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	e853 3f00 	ldrex	r3, [r3]
 8004c16:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f023 0301 	bic.w	r3, r3, #1
 8004c1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	3308      	adds	r3, #8
 8004c26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c28:	61fa      	str	r2, [r7, #28]
 8004c2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2c:	69b9      	ldr	r1, [r7, #24]
 8004c2e:	69fa      	ldr	r2, [r7, #28]
 8004c30:	e841 2300 	strex	r3, r2, [r1]
 8004c34:	617b      	str	r3, [r7, #20]
   return(result);
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1e5      	bne.n	8004c08 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e011      	b.n	8004c74 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2220      	movs	r2, #32
 8004c54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3758      	adds	r7, #88	; 0x58
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	603b      	str	r3, [r7, #0]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c8c:	e049      	b.n	8004d22 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c94:	d045      	beq.n	8004d22 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c96:	f7fc f89d 	bl	8000dd4 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d302      	bcc.n	8004cac <UART_WaitOnFlagUntilTimeout+0x30>
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d101      	bne.n	8004cb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e048      	b.n	8004d42 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0304 	and.w	r3, r3, #4
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d031      	beq.n	8004d22 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	69db      	ldr	r3, [r3, #28]
 8004cc4:	f003 0308 	and.w	r3, r3, #8
 8004cc8:	2b08      	cmp	r3, #8
 8004cca:	d110      	bne.n	8004cee <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2208      	movs	r2, #8
 8004cd2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 f838 	bl	8004d4a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2208      	movs	r2, #8
 8004cde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e029      	b.n	8004d42 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cfc:	d111      	bne.n	8004d22 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f000 f81e 	bl	8004d4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2220      	movs	r2, #32
 8004d12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e00f      	b.n	8004d42 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	69da      	ldr	r2, [r3, #28]
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	68ba      	ldr	r2, [r7, #8]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	bf0c      	ite	eq
 8004d32:	2301      	moveq	r3, #1
 8004d34:	2300      	movne	r3, #0
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	461a      	mov	r2, r3
 8004d3a:	79fb      	ldrb	r3, [r7, #7]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d0a6      	beq.n	8004c8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b095      	sub	sp, #84	; 0x54
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d5a:	e853 3f00 	ldrex	r3, [r3]
 8004d5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d70:	643b      	str	r3, [r7, #64]	; 0x40
 8004d72:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d78:	e841 2300 	strex	r3, r2, [r1]
 8004d7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1e6      	bne.n	8004d52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3308      	adds	r3, #8
 8004d8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	e853 3f00 	ldrex	r3, [r3]
 8004d92:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	f023 0301 	bic.w	r3, r3, #1
 8004d9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3308      	adds	r3, #8
 8004da2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004da4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004da6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004daa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dac:	e841 2300 	strex	r3, r2, [r1]
 8004db0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1e5      	bne.n	8004d84 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d118      	bne.n	8004df2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	e853 3f00 	ldrex	r3, [r3]
 8004dcc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	f023 0310 	bic.w	r3, r3, #16
 8004dd4:	647b      	str	r3, [r7, #68]	; 0x44
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dde:	61bb      	str	r3, [r7, #24]
 8004de0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de2:	6979      	ldr	r1, [r7, #20]
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	e841 2300 	strex	r3, r2, [r1]
 8004dea:	613b      	str	r3, [r7, #16]
   return(result);
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1e6      	bne.n	8004dc0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2220      	movs	r2, #32
 8004df6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004e06:	bf00      	nop
 8004e08:	3754      	adds	r7, #84	; 0x54
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b085      	sub	sp, #20
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	4603      	mov	r3, r0
 8004e1a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004e20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e24:	2b84      	cmp	r3, #132	; 0x84
 8004e26:	d005      	beq.n	8004e34 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004e28:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4413      	add	r3, r2
 8004e30:	3303      	adds	r3, #3
 8004e32:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004e34:	68fb      	ldr	r3, [r7, #12]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr

08004e42 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004e46:	f000 faed 	bl	8005424 <vTaskStartScheduler>
  
  return osOK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e52:	b089      	sub	sp, #36	; 0x24
 8004e54:	af04      	add	r7, sp, #16
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d020      	beq.n	8004ea4 <osThreadCreate+0x54>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d01c      	beq.n	8004ea4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685c      	ldr	r4, [r3, #4]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	691e      	ldr	r6, [r3, #16]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7ff ffc8 	bl	8004e12 <makeFreeRtosPriority>
 8004e82:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	695b      	ldr	r3, [r3, #20]
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e8c:	9202      	str	r2, [sp, #8]
 8004e8e:	9301      	str	r3, [sp, #4]
 8004e90:	9100      	str	r1, [sp, #0]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	4632      	mov	r2, r6
 8004e96:	4629      	mov	r1, r5
 8004e98:	4620      	mov	r0, r4
 8004e9a:	f000 f8ed 	bl	8005078 <xTaskCreateStatic>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	60fb      	str	r3, [r7, #12]
 8004ea2:	e01c      	b.n	8004ede <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685c      	ldr	r4, [r3, #4]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004eb0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7ff ffaa 	bl	8004e12 <makeFreeRtosPriority>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	f107 030c 	add.w	r3, r7, #12
 8004ec4:	9301      	str	r3, [sp, #4]
 8004ec6:	9200      	str	r2, [sp, #0]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	4632      	mov	r2, r6
 8004ecc:	4629      	mov	r1, r5
 8004ece:	4620      	mov	r0, r4
 8004ed0:	f000 f92e 	bl	8005130 <xTaskCreate>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d001      	beq.n	8004ede <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004eda:	2300      	movs	r3, #0
 8004edc:	e000      	b.n	8004ee0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004ede:	68fb      	ldr	r3, [r7, #12]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3714      	adds	r7, #20
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ee8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <osDelay+0x16>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	e000      	b.n	8004f00 <osDelay+0x18>
 8004efe:	2301      	movs	r3, #1
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 fa5b 	bl	80053bc <vTaskDelay>
  
  return osOK;
 8004f06:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f103 0208 	add.w	r2, r3, #8
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f04f 32ff 	mov.w	r2, #4294967295
 8004f28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f103 0208 	add.w	r2, r3, #8
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f103 0208 	add.w	r2, r3, #8
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f5e:	bf00      	nop
 8004f60:	370c      	adds	r7, #12
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr

08004f6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b085      	sub	sp, #20
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
 8004f72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	689a      	ldr	r2, [r3, #8]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	1c5a      	adds	r2, r3, #1
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	601a      	str	r2, [r3, #0]
}
 8004fa6:	bf00      	nop
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b085      	sub	sp, #20
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
 8004fba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc8:	d103      	bne.n	8004fd2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	e00c      	b.n	8004fec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	3308      	adds	r3, #8
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	e002      	b.n	8004fe0 <vListInsert+0x2e>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	60fb      	str	r3, [r7, #12]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d2f6      	bcs.n	8004fda <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	1c5a      	adds	r2, r3, #1
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	601a      	str	r2, [r3, #0]
}
 8005018:	bf00      	nop
 800501a:	3714      	adds	r7, #20
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6892      	ldr	r2, [r2, #8]
 800503a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6852      	ldr	r2, [r2, #4]
 8005044:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	429a      	cmp	r2, r3
 800504e:	d103      	bne.n	8005058 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	1e5a      	subs	r2, r3, #1
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
}
 800506c:	4618      	mov	r0, r3
 800506e:	3714      	adds	r7, #20
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005078:	b580      	push	{r7, lr}
 800507a:	b08e      	sub	sp, #56	; 0x38
 800507c:	af04      	add	r7, sp, #16
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
 8005084:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10a      	bne.n	80050a2 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800508c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005090:	f383 8811 	msr	BASEPRI, r3
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800509e:	bf00      	nop
 80050a0:	e7fe      	b.n	80050a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80050a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10a      	bne.n	80050be <xTaskCreateStatic+0x46>
	__asm volatile
 80050a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ac:	f383 8811 	msr	BASEPRI, r3
 80050b0:	f3bf 8f6f 	isb	sy
 80050b4:	f3bf 8f4f 	dsb	sy
 80050b8:	61fb      	str	r3, [r7, #28]
}
 80050ba:	bf00      	nop
 80050bc:	e7fe      	b.n	80050bc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80050be:	23a0      	movs	r3, #160	; 0xa0
 80050c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	2ba0      	cmp	r3, #160	; 0xa0
 80050c6:	d00a      	beq.n	80050de <xTaskCreateStatic+0x66>
	__asm volatile
 80050c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050cc:	f383 8811 	msr	BASEPRI, r3
 80050d0:	f3bf 8f6f 	isb	sy
 80050d4:	f3bf 8f4f 	dsb	sy
 80050d8:	61bb      	str	r3, [r7, #24]
}
 80050da:	bf00      	nop
 80050dc:	e7fe      	b.n	80050dc <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80050de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d01e      	beq.n	8005122 <xTaskCreateStatic+0xaa>
 80050e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d01b      	beq.n	8005122 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ec:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050f2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	2202      	movs	r2, #2
 80050f8:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80050fc:	2300      	movs	r3, #0
 80050fe:	9303      	str	r3, [sp, #12]
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005102:	9302      	str	r3, [sp, #8]
 8005104:	f107 0314 	add.w	r3, r7, #20
 8005108:	9301      	str	r3, [sp, #4]
 800510a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	68b9      	ldr	r1, [r7, #8]
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 f851 	bl	80051bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800511a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800511c:	f000 f8e4 	bl	80052e8 <prvAddNewTaskToReadyList>
 8005120:	e001      	b.n	8005126 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005122:	2300      	movs	r3, #0
 8005124:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005126:	697b      	ldr	r3, [r7, #20]
	}
 8005128:	4618      	mov	r0, r3
 800512a:	3728      	adds	r7, #40	; 0x28
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005130:	b580      	push	{r7, lr}
 8005132:	b08c      	sub	sp, #48	; 0x30
 8005134:	af04      	add	r7, sp, #16
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	603b      	str	r3, [r7, #0]
 800513c:	4613      	mov	r3, r2
 800513e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005140:	88fb      	ldrh	r3, [r7, #6]
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4618      	mov	r0, r3
 8005146:	f000 fef7 	bl	8005f38 <pvPortMalloc>
 800514a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00e      	beq.n	8005170 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005152:	20a0      	movs	r0, #160	; 0xa0
 8005154:	f000 fef0 	bl	8005f38 <pvPortMalloc>
 8005158:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d003      	beq.n	8005168 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	631a      	str	r2, [r3, #48]	; 0x30
 8005166:	e005      	b.n	8005174 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005168:	6978      	ldr	r0, [r7, #20]
 800516a:	f000 ffa9 	bl	80060c0 <vPortFree>
 800516e:	e001      	b.n	8005174 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005170:	2300      	movs	r3, #0
 8005172:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d017      	beq.n	80051aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005182:	88fa      	ldrh	r2, [r7, #6]
 8005184:	2300      	movs	r3, #0
 8005186:	9303      	str	r3, [sp, #12]
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	9302      	str	r3, [sp, #8]
 800518c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518e:	9301      	str	r3, [sp, #4]
 8005190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	68b9      	ldr	r1, [r7, #8]
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f000 f80f 	bl	80051bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800519e:	69f8      	ldr	r0, [r7, #28]
 80051a0:	f000 f8a2 	bl	80052e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80051a4:	2301      	movs	r3, #1
 80051a6:	61bb      	str	r3, [r7, #24]
 80051a8:	e002      	b.n	80051b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051aa:	f04f 33ff 	mov.w	r3, #4294967295
 80051ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80051b0:	69bb      	ldr	r3, [r7, #24]
	}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3720      	adds	r7, #32
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
	...

080051bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b088      	sub	sp, #32
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
 80051c8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80051ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80051d4:	3b01      	subs	r3, #1
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4413      	add	r3, r2
 80051da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	f023 0307 	bic.w	r3, r3, #7
 80051e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	f003 0307 	and.w	r3, r3, #7
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <prvInitialiseNewTask+0x48>
	__asm volatile
 80051ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	617b      	str	r3, [r7, #20]
}
 8005200:	bf00      	nop
 8005202:	e7fe      	b.n	8005202 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005204:	2300      	movs	r3, #0
 8005206:	61fb      	str	r3, [r7, #28]
 8005208:	e012      	b.n	8005230 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	4413      	add	r3, r2
 8005210:	7819      	ldrb	r1, [r3, #0]
 8005212:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	4413      	add	r3, r2
 8005218:	3334      	adds	r3, #52	; 0x34
 800521a:	460a      	mov	r2, r1
 800521c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	4413      	add	r3, r2
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d006      	beq.n	8005238 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	3301      	adds	r3, #1
 800522e:	61fb      	str	r3, [r7, #28]
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	2b0f      	cmp	r3, #15
 8005234:	d9e9      	bls.n	800520a <prvInitialiseNewTask+0x4e>
 8005236:	e000      	b.n	800523a <prvInitialiseNewTask+0x7e>
		{
			break;
 8005238:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800523a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005244:	2b06      	cmp	r3, #6
 8005246:	d901      	bls.n	800524c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005248:	2306      	movs	r3, #6
 800524a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800524c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005250:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005254:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005256:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525a:	2200      	movs	r2, #0
 800525c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800525e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005260:	3304      	adds	r3, #4
 8005262:	4618      	mov	r0, r3
 8005264:	f7ff fe74 	bl	8004f50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526a:	3318      	adds	r3, #24
 800526c:	4618      	mov	r0, r3
 800526e:	f7ff fe6f 	bl	8004f50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005276:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527a:	f1c3 0207 	rsb	r2, r3, #7
 800527e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005280:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005286:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528a:	2200      	movs	r2, #0
 800528c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005292:	2200      	movs	r2, #0
 8005294:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529a:	334c      	adds	r3, #76	; 0x4c
 800529c:	224c      	movs	r2, #76	; 0x4c
 800529e:	2100      	movs	r1, #0
 80052a0:	4618      	mov	r0, r3
 80052a2:	f001 fa2b 	bl	80066fc <memset>
 80052a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a8:	4a0c      	ldr	r2, [pc, #48]	; (80052dc <prvInitialiseNewTask+0x120>)
 80052aa:	651a      	str	r2, [r3, #80]	; 0x50
 80052ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ae:	4a0c      	ldr	r2, [pc, #48]	; (80052e0 <prvInitialiseNewTask+0x124>)
 80052b0:	655a      	str	r2, [r3, #84]	; 0x54
 80052b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b4:	4a0b      	ldr	r2, [pc, #44]	; (80052e4 <prvInitialiseNewTask+0x128>)
 80052b6:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	68f9      	ldr	r1, [r7, #12]
 80052bc:	69b8      	ldr	r0, [r7, #24]
 80052be:	f000 fc2b 	bl	8005b18 <pxPortInitialiseStack>
 80052c2:	4602      	mov	r2, r0
 80052c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80052c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d002      	beq.n	80052d4 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80052ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052d4:	bf00      	nop
 80052d6:	3720      	adds	r7, #32
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	2000124c 	.word	0x2000124c
 80052e0:	200012b4 	.word	0x200012b4
 80052e4:	2000131c 	.word	0x2000131c

080052e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80052f0:	f000 fd40 	bl	8005d74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80052f4:	4b2a      	ldr	r3, [pc, #168]	; (80053a0 <prvAddNewTaskToReadyList+0xb8>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	3301      	adds	r3, #1
 80052fa:	4a29      	ldr	r2, [pc, #164]	; (80053a0 <prvAddNewTaskToReadyList+0xb8>)
 80052fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80052fe:	4b29      	ldr	r3, [pc, #164]	; (80053a4 <prvAddNewTaskToReadyList+0xbc>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d109      	bne.n	800531a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005306:	4a27      	ldr	r2, [pc, #156]	; (80053a4 <prvAddNewTaskToReadyList+0xbc>)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800530c:	4b24      	ldr	r3, [pc, #144]	; (80053a0 <prvAddNewTaskToReadyList+0xb8>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d110      	bne.n	8005336 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005314:	f000 fad2 	bl	80058bc <prvInitialiseTaskLists>
 8005318:	e00d      	b.n	8005336 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800531a:	4b23      	ldr	r3, [pc, #140]	; (80053a8 <prvAddNewTaskToReadyList+0xc0>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d109      	bne.n	8005336 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005322:	4b20      	ldr	r3, [pc, #128]	; (80053a4 <prvAddNewTaskToReadyList+0xbc>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532c:	429a      	cmp	r2, r3
 800532e:	d802      	bhi.n	8005336 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005330:	4a1c      	ldr	r2, [pc, #112]	; (80053a4 <prvAddNewTaskToReadyList+0xbc>)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005336:	4b1d      	ldr	r3, [pc, #116]	; (80053ac <prvAddNewTaskToReadyList+0xc4>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	3301      	adds	r3, #1
 800533c:	4a1b      	ldr	r2, [pc, #108]	; (80053ac <prvAddNewTaskToReadyList+0xc4>)
 800533e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005344:	2201      	movs	r2, #1
 8005346:	409a      	lsls	r2, r3
 8005348:	4b19      	ldr	r3, [pc, #100]	; (80053b0 <prvAddNewTaskToReadyList+0xc8>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4313      	orrs	r3, r2
 800534e:	4a18      	ldr	r2, [pc, #96]	; (80053b0 <prvAddNewTaskToReadyList+0xc8>)
 8005350:	6013      	str	r3, [r2, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005356:	4613      	mov	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	4a15      	ldr	r2, [pc, #84]	; (80053b4 <prvAddNewTaskToReadyList+0xcc>)
 8005360:	441a      	add	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	3304      	adds	r3, #4
 8005366:	4619      	mov	r1, r3
 8005368:	4610      	mov	r0, r2
 800536a:	f7ff fdfe 	bl	8004f6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800536e:	f000 fd31 	bl	8005dd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005372:	4b0d      	ldr	r3, [pc, #52]	; (80053a8 <prvAddNewTaskToReadyList+0xc0>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00e      	beq.n	8005398 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800537a:	4b0a      	ldr	r3, [pc, #40]	; (80053a4 <prvAddNewTaskToReadyList+0xbc>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005384:	429a      	cmp	r2, r3
 8005386:	d207      	bcs.n	8005398 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005388:	4b0b      	ldr	r3, [pc, #44]	; (80053b8 <prvAddNewTaskToReadyList+0xd0>)
 800538a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800538e:	601a      	str	r2, [r3, #0]
 8005390:	f3bf 8f4f 	dsb	sy
 8005394:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005398:	bf00      	nop
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	20000600 	.word	0x20000600
 80053a4:	20000500 	.word	0x20000500
 80053a8:	2000060c 	.word	0x2000060c
 80053ac:	2000061c 	.word	0x2000061c
 80053b0:	20000608 	.word	0x20000608
 80053b4:	20000504 	.word	0x20000504
 80053b8:	e000ed04 	.word	0xe000ed04

080053bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80053c4:	2300      	movs	r3, #0
 80053c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d017      	beq.n	80053fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80053ce:	4b13      	ldr	r3, [pc, #76]	; (800541c <vTaskDelay+0x60>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00a      	beq.n	80053ec <vTaskDelay+0x30>
	__asm volatile
 80053d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053da:	f383 8811 	msr	BASEPRI, r3
 80053de:	f3bf 8f6f 	isb	sy
 80053e2:	f3bf 8f4f 	dsb	sy
 80053e6:	60bb      	str	r3, [r7, #8]
}
 80053e8:	bf00      	nop
 80053ea:	e7fe      	b.n	80053ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80053ec:	f000 f884 	bl	80054f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80053f0:	2100      	movs	r1, #0
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 fb2a 	bl	8005a4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80053f8:	f000 f88c 	bl	8005514 <xTaskResumeAll>
 80053fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d107      	bne.n	8005414 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005404:	4b06      	ldr	r3, [pc, #24]	; (8005420 <vTaskDelay+0x64>)
 8005406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800540a:	601a      	str	r2, [r3, #0]
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005414:	bf00      	nop
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	20000628 	.word	0x20000628
 8005420:	e000ed04 	.word	0xe000ed04

08005424 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b08a      	sub	sp, #40	; 0x28
 8005428:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800542a:	2300      	movs	r3, #0
 800542c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800542e:	2300      	movs	r3, #0
 8005430:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005432:	463a      	mov	r2, r7
 8005434:	1d39      	adds	r1, r7, #4
 8005436:	f107 0308 	add.w	r3, r7, #8
 800543a:	4618      	mov	r0, r3
 800543c:	f7fa ff20 	bl	8000280 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005440:	6839      	ldr	r1, [r7, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	9202      	str	r2, [sp, #8]
 8005448:	9301      	str	r3, [sp, #4]
 800544a:	2300      	movs	r3, #0
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	2300      	movs	r3, #0
 8005450:	460a      	mov	r2, r1
 8005452:	4921      	ldr	r1, [pc, #132]	; (80054d8 <vTaskStartScheduler+0xb4>)
 8005454:	4821      	ldr	r0, [pc, #132]	; (80054dc <vTaskStartScheduler+0xb8>)
 8005456:	f7ff fe0f 	bl	8005078 <xTaskCreateStatic>
 800545a:	4603      	mov	r3, r0
 800545c:	4a20      	ldr	r2, [pc, #128]	; (80054e0 <vTaskStartScheduler+0xbc>)
 800545e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005460:	4b1f      	ldr	r3, [pc, #124]	; (80054e0 <vTaskStartScheduler+0xbc>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d002      	beq.n	800546e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005468:	2301      	movs	r3, #1
 800546a:	617b      	str	r3, [r7, #20]
 800546c:	e001      	b.n	8005472 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800546e:	2300      	movs	r3, #0
 8005470:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d11b      	bne.n	80054b0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547c:	f383 8811 	msr	BASEPRI, r3
 8005480:	f3bf 8f6f 	isb	sy
 8005484:	f3bf 8f4f 	dsb	sy
 8005488:	613b      	str	r3, [r7, #16]
}
 800548a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800548c:	4b15      	ldr	r3, [pc, #84]	; (80054e4 <vTaskStartScheduler+0xc0>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	334c      	adds	r3, #76	; 0x4c
 8005492:	4a15      	ldr	r2, [pc, #84]	; (80054e8 <vTaskStartScheduler+0xc4>)
 8005494:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005496:	4b15      	ldr	r3, [pc, #84]	; (80054ec <vTaskStartScheduler+0xc8>)
 8005498:	f04f 32ff 	mov.w	r2, #4294967295
 800549c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800549e:	4b14      	ldr	r3, [pc, #80]	; (80054f0 <vTaskStartScheduler+0xcc>)
 80054a0:	2201      	movs	r2, #1
 80054a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80054a4:	4b13      	ldr	r3, [pc, #76]	; (80054f4 <vTaskStartScheduler+0xd0>)
 80054a6:	2200      	movs	r2, #0
 80054a8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80054aa:	f000 fbc1 	bl	8005c30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80054ae:	e00e      	b.n	80054ce <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b6:	d10a      	bne.n	80054ce <vTaskStartScheduler+0xaa>
	__asm volatile
 80054b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054bc:	f383 8811 	msr	BASEPRI, r3
 80054c0:	f3bf 8f6f 	isb	sy
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	60fb      	str	r3, [r7, #12]
}
 80054ca:	bf00      	nop
 80054cc:	e7fe      	b.n	80054cc <vTaskStartScheduler+0xa8>
}
 80054ce:	bf00      	nop
 80054d0:	3718      	adds	r7, #24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	0800737c 	.word	0x0800737c
 80054dc:	0800588d 	.word	0x0800588d
 80054e0:	20000624 	.word	0x20000624
 80054e4:	20000500 	.word	0x20000500
 80054e8:	20000068 	.word	0x20000068
 80054ec:	20000620 	.word	0x20000620
 80054f0:	2000060c 	.word	0x2000060c
 80054f4:	20000604 	.word	0x20000604

080054f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80054f8:	b480      	push	{r7}
 80054fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80054fc:	4b04      	ldr	r3, [pc, #16]	; (8005510 <vTaskSuspendAll+0x18>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	3301      	adds	r3, #1
 8005502:	4a03      	ldr	r2, [pc, #12]	; (8005510 <vTaskSuspendAll+0x18>)
 8005504:	6013      	str	r3, [r2, #0]
}
 8005506:	bf00      	nop
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	20000628 	.word	0x20000628

08005514 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800551a:	2300      	movs	r3, #0
 800551c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800551e:	2300      	movs	r3, #0
 8005520:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005522:	4b41      	ldr	r3, [pc, #260]	; (8005628 <xTaskResumeAll+0x114>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10a      	bne.n	8005540 <xTaskResumeAll+0x2c>
	__asm volatile
 800552a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552e:	f383 8811 	msr	BASEPRI, r3
 8005532:	f3bf 8f6f 	isb	sy
 8005536:	f3bf 8f4f 	dsb	sy
 800553a:	603b      	str	r3, [r7, #0]
}
 800553c:	bf00      	nop
 800553e:	e7fe      	b.n	800553e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005540:	f000 fc18 	bl	8005d74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005544:	4b38      	ldr	r3, [pc, #224]	; (8005628 <xTaskResumeAll+0x114>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	3b01      	subs	r3, #1
 800554a:	4a37      	ldr	r2, [pc, #220]	; (8005628 <xTaskResumeAll+0x114>)
 800554c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800554e:	4b36      	ldr	r3, [pc, #216]	; (8005628 <xTaskResumeAll+0x114>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d161      	bne.n	800561a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005556:	4b35      	ldr	r3, [pc, #212]	; (800562c <xTaskResumeAll+0x118>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d05d      	beq.n	800561a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800555e:	e02e      	b.n	80055be <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005560:	4b33      	ldr	r3, [pc, #204]	; (8005630 <xTaskResumeAll+0x11c>)
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	3318      	adds	r3, #24
 800556c:	4618      	mov	r0, r3
 800556e:	f7ff fd59 	bl	8005024 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	3304      	adds	r3, #4
 8005576:	4618      	mov	r0, r3
 8005578:	f7ff fd54 	bl	8005024 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005580:	2201      	movs	r2, #1
 8005582:	409a      	lsls	r2, r3
 8005584:	4b2b      	ldr	r3, [pc, #172]	; (8005634 <xTaskResumeAll+0x120>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4313      	orrs	r3, r2
 800558a:	4a2a      	ldr	r2, [pc, #168]	; (8005634 <xTaskResumeAll+0x120>)
 800558c:	6013      	str	r3, [r2, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005592:	4613      	mov	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4413      	add	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4a27      	ldr	r2, [pc, #156]	; (8005638 <xTaskResumeAll+0x124>)
 800559c:	441a      	add	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	3304      	adds	r3, #4
 80055a2:	4619      	mov	r1, r3
 80055a4:	4610      	mov	r0, r2
 80055a6:	f7ff fce0 	bl	8004f6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ae:	4b23      	ldr	r3, [pc, #140]	; (800563c <xTaskResumeAll+0x128>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d302      	bcc.n	80055be <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80055b8:	4b21      	ldr	r3, [pc, #132]	; (8005640 <xTaskResumeAll+0x12c>)
 80055ba:	2201      	movs	r2, #1
 80055bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055be:	4b1c      	ldr	r3, [pc, #112]	; (8005630 <xTaskResumeAll+0x11c>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1cc      	bne.n	8005560 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80055cc:	f000 fa18 	bl	8005a00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80055d0:	4b1c      	ldr	r3, [pc, #112]	; (8005644 <xTaskResumeAll+0x130>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d010      	beq.n	80055fe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80055dc:	f000 f836 	bl	800564c <xTaskIncrementTick>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d002      	beq.n	80055ec <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80055e6:	4b16      	ldr	r3, [pc, #88]	; (8005640 <xTaskResumeAll+0x12c>)
 80055e8:	2201      	movs	r2, #1
 80055ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	3b01      	subs	r3, #1
 80055f0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1f1      	bne.n	80055dc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80055f8:	4b12      	ldr	r3, [pc, #72]	; (8005644 <xTaskResumeAll+0x130>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80055fe:	4b10      	ldr	r3, [pc, #64]	; (8005640 <xTaskResumeAll+0x12c>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d009      	beq.n	800561a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005606:	2301      	movs	r3, #1
 8005608:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800560a:	4b0f      	ldr	r3, [pc, #60]	; (8005648 <xTaskResumeAll+0x134>)
 800560c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005610:	601a      	str	r2, [r3, #0]
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800561a:	f000 fbdb 	bl	8005dd4 <vPortExitCritical>

	return xAlreadyYielded;
 800561e:	68bb      	ldr	r3, [r7, #8]
}
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	20000628 	.word	0x20000628
 800562c:	20000600 	.word	0x20000600
 8005630:	200005c0 	.word	0x200005c0
 8005634:	20000608 	.word	0x20000608
 8005638:	20000504 	.word	0x20000504
 800563c:	20000500 	.word	0x20000500
 8005640:	20000614 	.word	0x20000614
 8005644:	20000610 	.word	0x20000610
 8005648:	e000ed04 	.word	0xe000ed04

0800564c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005652:	2300      	movs	r3, #0
 8005654:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005656:	4b51      	ldr	r3, [pc, #324]	; (800579c <xTaskIncrementTick+0x150>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	f040 808d 	bne.w	800577a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005660:	4b4f      	ldr	r3, [pc, #316]	; (80057a0 <xTaskIncrementTick+0x154>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	3301      	adds	r3, #1
 8005666:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005668:	4a4d      	ldr	r2, [pc, #308]	; (80057a0 <xTaskIncrementTick+0x154>)
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d120      	bne.n	80056b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005674:	4b4b      	ldr	r3, [pc, #300]	; (80057a4 <xTaskIncrementTick+0x158>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00a      	beq.n	8005694 <xTaskIncrementTick+0x48>
	__asm volatile
 800567e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005682:	f383 8811 	msr	BASEPRI, r3
 8005686:	f3bf 8f6f 	isb	sy
 800568a:	f3bf 8f4f 	dsb	sy
 800568e:	603b      	str	r3, [r7, #0]
}
 8005690:	bf00      	nop
 8005692:	e7fe      	b.n	8005692 <xTaskIncrementTick+0x46>
 8005694:	4b43      	ldr	r3, [pc, #268]	; (80057a4 <xTaskIncrementTick+0x158>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	60fb      	str	r3, [r7, #12]
 800569a:	4b43      	ldr	r3, [pc, #268]	; (80057a8 <xTaskIncrementTick+0x15c>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a41      	ldr	r2, [pc, #260]	; (80057a4 <xTaskIncrementTick+0x158>)
 80056a0:	6013      	str	r3, [r2, #0]
 80056a2:	4a41      	ldr	r2, [pc, #260]	; (80057a8 <xTaskIncrementTick+0x15c>)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6013      	str	r3, [r2, #0]
 80056a8:	4b40      	ldr	r3, [pc, #256]	; (80057ac <xTaskIncrementTick+0x160>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	3301      	adds	r3, #1
 80056ae:	4a3f      	ldr	r2, [pc, #252]	; (80057ac <xTaskIncrementTick+0x160>)
 80056b0:	6013      	str	r3, [r2, #0]
 80056b2:	f000 f9a5 	bl	8005a00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056b6:	4b3e      	ldr	r3, [pc, #248]	; (80057b0 <xTaskIncrementTick+0x164>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d34d      	bcc.n	800575c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056c0:	4b38      	ldr	r3, [pc, #224]	; (80057a4 <xTaskIncrementTick+0x158>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <xTaskIncrementTick+0x82>
 80056ca:	2301      	movs	r3, #1
 80056cc:	e000      	b.n	80056d0 <xTaskIncrementTick+0x84>
 80056ce:	2300      	movs	r3, #0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d004      	beq.n	80056de <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056d4:	4b36      	ldr	r3, [pc, #216]	; (80057b0 <xTaskIncrementTick+0x164>)
 80056d6:	f04f 32ff 	mov.w	r2, #4294967295
 80056da:	601a      	str	r2, [r3, #0]
					break;
 80056dc:	e03e      	b.n	800575c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80056de:	4b31      	ldr	r3, [pc, #196]	; (80057a4 <xTaskIncrementTick+0x158>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d203      	bcs.n	80056fe <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80056f6:	4a2e      	ldr	r2, [pc, #184]	; (80057b0 <xTaskIncrementTick+0x164>)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6013      	str	r3, [r2, #0]
						break;
 80056fc:	e02e      	b.n	800575c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	3304      	adds	r3, #4
 8005702:	4618      	mov	r0, r3
 8005704:	f7ff fc8e 	bl	8005024 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570c:	2b00      	cmp	r3, #0
 800570e:	d004      	beq.n	800571a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	3318      	adds	r3, #24
 8005714:	4618      	mov	r0, r3
 8005716:	f7ff fc85 	bl	8005024 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571e:	2201      	movs	r2, #1
 8005720:	409a      	lsls	r2, r3
 8005722:	4b24      	ldr	r3, [pc, #144]	; (80057b4 <xTaskIncrementTick+0x168>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4313      	orrs	r3, r2
 8005728:	4a22      	ldr	r2, [pc, #136]	; (80057b4 <xTaskIncrementTick+0x168>)
 800572a:	6013      	str	r3, [r2, #0]
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005730:	4613      	mov	r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4413      	add	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4a1f      	ldr	r2, [pc, #124]	; (80057b8 <xTaskIncrementTick+0x16c>)
 800573a:	441a      	add	r2, r3
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	3304      	adds	r3, #4
 8005740:	4619      	mov	r1, r3
 8005742:	4610      	mov	r0, r2
 8005744:	f7ff fc11 	bl	8004f6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800574c:	4b1b      	ldr	r3, [pc, #108]	; (80057bc <xTaskIncrementTick+0x170>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005752:	429a      	cmp	r2, r3
 8005754:	d3b4      	bcc.n	80056c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005756:	2301      	movs	r3, #1
 8005758:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800575a:	e7b1      	b.n	80056c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800575c:	4b17      	ldr	r3, [pc, #92]	; (80057bc <xTaskIncrementTick+0x170>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005762:	4915      	ldr	r1, [pc, #84]	; (80057b8 <xTaskIncrementTick+0x16c>)
 8005764:	4613      	mov	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4413      	add	r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	440b      	add	r3, r1
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d907      	bls.n	8005784 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005774:	2301      	movs	r3, #1
 8005776:	617b      	str	r3, [r7, #20]
 8005778:	e004      	b.n	8005784 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800577a:	4b11      	ldr	r3, [pc, #68]	; (80057c0 <xTaskIncrementTick+0x174>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	3301      	adds	r3, #1
 8005780:	4a0f      	ldr	r2, [pc, #60]	; (80057c0 <xTaskIncrementTick+0x174>)
 8005782:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005784:	4b0f      	ldr	r3, [pc, #60]	; (80057c4 <xTaskIncrementTick+0x178>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d001      	beq.n	8005790 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800578c:	2301      	movs	r3, #1
 800578e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005790:	697b      	ldr	r3, [r7, #20]
}
 8005792:	4618      	mov	r0, r3
 8005794:	3718      	adds	r7, #24
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	20000628 	.word	0x20000628
 80057a0:	20000604 	.word	0x20000604
 80057a4:	200005b8 	.word	0x200005b8
 80057a8:	200005bc 	.word	0x200005bc
 80057ac:	20000618 	.word	0x20000618
 80057b0:	20000620 	.word	0x20000620
 80057b4:	20000608 	.word	0x20000608
 80057b8:	20000504 	.word	0x20000504
 80057bc:	20000500 	.word	0x20000500
 80057c0:	20000610 	.word	0x20000610
 80057c4:	20000614 	.word	0x20000614

080057c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80057c8:	b480      	push	{r7}
 80057ca:	b087      	sub	sp, #28
 80057cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057ce:	4b29      	ldr	r3, [pc, #164]	; (8005874 <vTaskSwitchContext+0xac>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80057d6:	4b28      	ldr	r3, [pc, #160]	; (8005878 <vTaskSwitchContext+0xb0>)
 80057d8:	2201      	movs	r2, #1
 80057da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80057dc:	e044      	b.n	8005868 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80057de:	4b26      	ldr	r3, [pc, #152]	; (8005878 <vTaskSwitchContext+0xb0>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80057e4:	4b25      	ldr	r3, [pc, #148]	; (800587c <vTaskSwitchContext+0xb4>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	fab3 f383 	clz	r3, r3
 80057f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80057f2:	7afb      	ldrb	r3, [r7, #11]
 80057f4:	f1c3 031f 	rsb	r3, r3, #31
 80057f8:	617b      	str	r3, [r7, #20]
 80057fa:	4921      	ldr	r1, [pc, #132]	; (8005880 <vTaskSwitchContext+0xb8>)
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	4613      	mov	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4413      	add	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	440b      	add	r3, r1
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10a      	bne.n	8005824 <vTaskSwitchContext+0x5c>
	__asm volatile
 800580e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005812:	f383 8811 	msr	BASEPRI, r3
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	607b      	str	r3, [r7, #4]
}
 8005820:	bf00      	nop
 8005822:	e7fe      	b.n	8005822 <vTaskSwitchContext+0x5a>
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	4613      	mov	r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4413      	add	r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4a14      	ldr	r2, [pc, #80]	; (8005880 <vTaskSwitchContext+0xb8>)
 8005830:	4413      	add	r3, r2
 8005832:	613b      	str	r3, [r7, #16]
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	605a      	str	r2, [r3, #4]
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	685a      	ldr	r2, [r3, #4]
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	3308      	adds	r3, #8
 8005846:	429a      	cmp	r2, r3
 8005848:	d104      	bne.n	8005854 <vTaskSwitchContext+0x8c>
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	605a      	str	r2, [r3, #4]
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	4a0a      	ldr	r2, [pc, #40]	; (8005884 <vTaskSwitchContext+0xbc>)
 800585c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800585e:	4b09      	ldr	r3, [pc, #36]	; (8005884 <vTaskSwitchContext+0xbc>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	334c      	adds	r3, #76	; 0x4c
 8005864:	4a08      	ldr	r2, [pc, #32]	; (8005888 <vTaskSwitchContext+0xc0>)
 8005866:	6013      	str	r3, [r2, #0]
}
 8005868:	bf00      	nop
 800586a:	371c      	adds	r7, #28
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	20000628 	.word	0x20000628
 8005878:	20000614 	.word	0x20000614
 800587c:	20000608 	.word	0x20000608
 8005880:	20000504 	.word	0x20000504
 8005884:	20000500 	.word	0x20000500
 8005888:	20000068 	.word	0x20000068

0800588c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005894:	f000 f852 	bl	800593c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005898:	4b06      	ldr	r3, [pc, #24]	; (80058b4 <prvIdleTask+0x28>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d9f9      	bls.n	8005894 <prvIdleTask+0x8>
			{
				taskYIELD();
 80058a0:	4b05      	ldr	r3, [pc, #20]	; (80058b8 <prvIdleTask+0x2c>)
 80058a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058a6:	601a      	str	r2, [r3, #0]
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80058b0:	e7f0      	b.n	8005894 <prvIdleTask+0x8>
 80058b2:	bf00      	nop
 80058b4:	20000504 	.word	0x20000504
 80058b8:	e000ed04 	.word	0xe000ed04

080058bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058c2:	2300      	movs	r3, #0
 80058c4:	607b      	str	r3, [r7, #4]
 80058c6:	e00c      	b.n	80058e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	4613      	mov	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4413      	add	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4a12      	ldr	r2, [pc, #72]	; (800591c <prvInitialiseTaskLists+0x60>)
 80058d4:	4413      	add	r3, r2
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7ff fb1a 	bl	8004f10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	3301      	adds	r3, #1
 80058e0:	607b      	str	r3, [r7, #4]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b06      	cmp	r3, #6
 80058e6:	d9ef      	bls.n	80058c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80058e8:	480d      	ldr	r0, [pc, #52]	; (8005920 <prvInitialiseTaskLists+0x64>)
 80058ea:	f7ff fb11 	bl	8004f10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80058ee:	480d      	ldr	r0, [pc, #52]	; (8005924 <prvInitialiseTaskLists+0x68>)
 80058f0:	f7ff fb0e 	bl	8004f10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80058f4:	480c      	ldr	r0, [pc, #48]	; (8005928 <prvInitialiseTaskLists+0x6c>)
 80058f6:	f7ff fb0b 	bl	8004f10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80058fa:	480c      	ldr	r0, [pc, #48]	; (800592c <prvInitialiseTaskLists+0x70>)
 80058fc:	f7ff fb08 	bl	8004f10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005900:	480b      	ldr	r0, [pc, #44]	; (8005930 <prvInitialiseTaskLists+0x74>)
 8005902:	f7ff fb05 	bl	8004f10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005906:	4b0b      	ldr	r3, [pc, #44]	; (8005934 <prvInitialiseTaskLists+0x78>)
 8005908:	4a05      	ldr	r2, [pc, #20]	; (8005920 <prvInitialiseTaskLists+0x64>)
 800590a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800590c:	4b0a      	ldr	r3, [pc, #40]	; (8005938 <prvInitialiseTaskLists+0x7c>)
 800590e:	4a05      	ldr	r2, [pc, #20]	; (8005924 <prvInitialiseTaskLists+0x68>)
 8005910:	601a      	str	r2, [r3, #0]
}
 8005912:	bf00      	nop
 8005914:	3708      	adds	r7, #8
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	20000504 	.word	0x20000504
 8005920:	20000590 	.word	0x20000590
 8005924:	200005a4 	.word	0x200005a4
 8005928:	200005c0 	.word	0x200005c0
 800592c:	200005d4 	.word	0x200005d4
 8005930:	200005ec 	.word	0x200005ec
 8005934:	200005b8 	.word	0x200005b8
 8005938:	200005bc 	.word	0x200005bc

0800593c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005942:	e019      	b.n	8005978 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005944:	f000 fa16 	bl	8005d74 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005948:	4b10      	ldr	r3, [pc, #64]	; (800598c <prvCheckTasksWaitingTermination+0x50>)
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	3304      	adds	r3, #4
 8005954:	4618      	mov	r0, r3
 8005956:	f7ff fb65 	bl	8005024 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800595a:	4b0d      	ldr	r3, [pc, #52]	; (8005990 <prvCheckTasksWaitingTermination+0x54>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	3b01      	subs	r3, #1
 8005960:	4a0b      	ldr	r2, [pc, #44]	; (8005990 <prvCheckTasksWaitingTermination+0x54>)
 8005962:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005964:	4b0b      	ldr	r3, [pc, #44]	; (8005994 <prvCheckTasksWaitingTermination+0x58>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	3b01      	subs	r3, #1
 800596a:	4a0a      	ldr	r2, [pc, #40]	; (8005994 <prvCheckTasksWaitingTermination+0x58>)
 800596c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800596e:	f000 fa31 	bl	8005dd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f810 	bl	8005998 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005978:	4b06      	ldr	r3, [pc, #24]	; (8005994 <prvCheckTasksWaitingTermination+0x58>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1e1      	bne.n	8005944 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005980:	bf00      	nop
 8005982:	bf00      	nop
 8005984:	3708      	adds	r7, #8
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	200005d4 	.word	0x200005d4
 8005990:	20000600 	.word	0x20000600
 8005994:	200005e8 	.word	0x200005e8

08005998 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	334c      	adds	r3, #76	; 0x4c
 80059a4:	4618      	mov	r0, r3
 80059a6:	f000 fec1 	bl	800672c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d108      	bne.n	80059c6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b8:	4618      	mov	r0, r3
 80059ba:	f000 fb81 	bl	80060c0 <vPortFree>
				vPortFree( pxTCB );
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 fb7e 	bl	80060c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80059c4:	e018      	b.n	80059f8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d103      	bne.n	80059d8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 fb75 	bl	80060c0 <vPortFree>
	}
 80059d6:	e00f      	b.n	80059f8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d00a      	beq.n	80059f8 <prvDeleteTCB+0x60>
	__asm volatile
 80059e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e6:	f383 8811 	msr	BASEPRI, r3
 80059ea:	f3bf 8f6f 	isb	sy
 80059ee:	f3bf 8f4f 	dsb	sy
 80059f2:	60fb      	str	r3, [r7, #12]
}
 80059f4:	bf00      	nop
 80059f6:	e7fe      	b.n	80059f6 <prvDeleteTCB+0x5e>
	}
 80059f8:	bf00      	nop
 80059fa:	3710      	adds	r7, #16
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a06:	4b0f      	ldr	r3, [pc, #60]	; (8005a44 <prvResetNextTaskUnblockTime+0x44>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d101      	bne.n	8005a14 <prvResetNextTaskUnblockTime+0x14>
 8005a10:	2301      	movs	r3, #1
 8005a12:	e000      	b.n	8005a16 <prvResetNextTaskUnblockTime+0x16>
 8005a14:	2300      	movs	r3, #0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d004      	beq.n	8005a24 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a1a:	4b0b      	ldr	r3, [pc, #44]	; (8005a48 <prvResetNextTaskUnblockTime+0x48>)
 8005a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a20:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a22:	e008      	b.n	8005a36 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005a24:	4b07      	ldr	r3, [pc, #28]	; (8005a44 <prvResetNextTaskUnblockTime+0x44>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	4a05      	ldr	r2, [pc, #20]	; (8005a48 <prvResetNextTaskUnblockTime+0x48>)
 8005a34:	6013      	str	r3, [r2, #0]
}
 8005a36:	bf00      	nop
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	200005b8 	.word	0x200005b8
 8005a48:	20000620 	.word	0x20000620

08005a4c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005a56:	4b29      	ldr	r3, [pc, #164]	; (8005afc <prvAddCurrentTaskToDelayedList+0xb0>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a5c:	4b28      	ldr	r3, [pc, #160]	; (8005b00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	3304      	adds	r3, #4
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7ff fade 	bl	8005024 <uxListRemove>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10b      	bne.n	8005a86 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005a6e:	4b24      	ldr	r3, [pc, #144]	; (8005b00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a74:	2201      	movs	r2, #1
 8005a76:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7a:	43da      	mvns	r2, r3
 8005a7c:	4b21      	ldr	r3, [pc, #132]	; (8005b04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4013      	ands	r3, r2
 8005a82:	4a20      	ldr	r2, [pc, #128]	; (8005b04 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005a84:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a8c:	d10a      	bne.n	8005aa4 <prvAddCurrentTaskToDelayedList+0x58>
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d007      	beq.n	8005aa4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a94:	4b1a      	ldr	r3, [pc, #104]	; (8005b00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	3304      	adds	r3, #4
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	481a      	ldr	r0, [pc, #104]	; (8005b08 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005a9e:	f7ff fa64 	bl	8004f6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005aa2:	e026      	b.n	8005af2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005aac:	4b14      	ldr	r3, [pc, #80]	; (8005b00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d209      	bcs.n	8005ad0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005abc:	4b13      	ldr	r3, [pc, #76]	; (8005b0c <prvAddCurrentTaskToDelayedList+0xc0>)
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	4b0f      	ldr	r3, [pc, #60]	; (8005b00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	3304      	adds	r3, #4
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	4610      	mov	r0, r2
 8005aca:	f7ff fa72 	bl	8004fb2 <vListInsert>
}
 8005ace:	e010      	b.n	8005af2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ad0:	4b0f      	ldr	r3, [pc, #60]	; (8005b10 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	4b0a      	ldr	r3, [pc, #40]	; (8005b00 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	3304      	adds	r3, #4
 8005ada:	4619      	mov	r1, r3
 8005adc:	4610      	mov	r0, r2
 8005ade:	f7ff fa68 	bl	8004fb2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ae2:	4b0c      	ldr	r3, [pc, #48]	; (8005b14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d202      	bcs.n	8005af2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005aec:	4a09      	ldr	r2, [pc, #36]	; (8005b14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	6013      	str	r3, [r2, #0]
}
 8005af2:	bf00      	nop
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	20000604 	.word	0x20000604
 8005b00:	20000500 	.word	0x20000500
 8005b04:	20000608 	.word	0x20000608
 8005b08:	200005ec 	.word	0x200005ec
 8005b0c:	200005bc 	.word	0x200005bc
 8005b10:	200005b8 	.word	0x200005b8
 8005b14:	20000620 	.word	0x20000620

08005b18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	3b04      	subs	r3, #4
 8005b28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	3b04      	subs	r3, #4
 8005b36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	f023 0201 	bic.w	r2, r3, #1
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	3b04      	subs	r3, #4
 8005b46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b48:	4a0c      	ldr	r2, [pc, #48]	; (8005b7c <pxPortInitialiseStack+0x64>)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	3b14      	subs	r3, #20
 8005b52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	3b04      	subs	r3, #4
 8005b5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f06f 0202 	mvn.w	r2, #2
 8005b66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	3b20      	subs	r3, #32
 8005b6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3714      	adds	r7, #20
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	08005b81 	.word	0x08005b81

08005b80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005b86:	2300      	movs	r3, #0
 8005b88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005b8a:	4b12      	ldr	r3, [pc, #72]	; (8005bd4 <prvTaskExitError+0x54>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b92:	d00a      	beq.n	8005baa <prvTaskExitError+0x2a>
	__asm volatile
 8005b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b98:	f383 8811 	msr	BASEPRI, r3
 8005b9c:	f3bf 8f6f 	isb	sy
 8005ba0:	f3bf 8f4f 	dsb	sy
 8005ba4:	60fb      	str	r3, [r7, #12]
}
 8005ba6:	bf00      	nop
 8005ba8:	e7fe      	b.n	8005ba8 <prvTaskExitError+0x28>
	__asm volatile
 8005baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bae:	f383 8811 	msr	BASEPRI, r3
 8005bb2:	f3bf 8f6f 	isb	sy
 8005bb6:	f3bf 8f4f 	dsb	sy
 8005bba:	60bb      	str	r3, [r7, #8]
}
 8005bbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005bbe:	bf00      	nop
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d0fc      	beq.n	8005bc0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005bc6:	bf00      	nop
 8005bc8:	bf00      	nop
 8005bca:	3714      	adds	r7, #20
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr
 8005bd4:	2000000c 	.word	0x2000000c
	...

08005be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005be0:	4b07      	ldr	r3, [pc, #28]	; (8005c00 <pxCurrentTCBConst2>)
 8005be2:	6819      	ldr	r1, [r3, #0]
 8005be4:	6808      	ldr	r0, [r1, #0]
 8005be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bea:	f380 8809 	msr	PSP, r0
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	f04f 0000 	mov.w	r0, #0
 8005bf6:	f380 8811 	msr	BASEPRI, r0
 8005bfa:	4770      	bx	lr
 8005bfc:	f3af 8000 	nop.w

08005c00 <pxCurrentTCBConst2>:
 8005c00:	20000500 	.word	0x20000500
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005c04:	bf00      	nop
 8005c06:	bf00      	nop

08005c08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005c08:	4808      	ldr	r0, [pc, #32]	; (8005c2c <prvPortStartFirstTask+0x24>)
 8005c0a:	6800      	ldr	r0, [r0, #0]
 8005c0c:	6800      	ldr	r0, [r0, #0]
 8005c0e:	f380 8808 	msr	MSP, r0
 8005c12:	f04f 0000 	mov.w	r0, #0
 8005c16:	f380 8814 	msr	CONTROL, r0
 8005c1a:	b662      	cpsie	i
 8005c1c:	b661      	cpsie	f
 8005c1e:	f3bf 8f4f 	dsb	sy
 8005c22:	f3bf 8f6f 	isb	sy
 8005c26:	df00      	svc	0
 8005c28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005c2a:	bf00      	nop
 8005c2c:	e000ed08 	.word	0xe000ed08

08005c30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005c36:	4b46      	ldr	r3, [pc, #280]	; (8005d50 <xPortStartScheduler+0x120>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a46      	ldr	r2, [pc, #280]	; (8005d54 <xPortStartScheduler+0x124>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d10a      	bne.n	8005c56 <xPortStartScheduler+0x26>
	__asm volatile
 8005c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c44:	f383 8811 	msr	BASEPRI, r3
 8005c48:	f3bf 8f6f 	isb	sy
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	613b      	str	r3, [r7, #16]
}
 8005c52:	bf00      	nop
 8005c54:	e7fe      	b.n	8005c54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005c56:	4b3e      	ldr	r3, [pc, #248]	; (8005d50 <xPortStartScheduler+0x120>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a3f      	ldr	r2, [pc, #252]	; (8005d58 <xPortStartScheduler+0x128>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d10a      	bne.n	8005c76 <xPortStartScheduler+0x46>
	__asm volatile
 8005c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	60fb      	str	r3, [r7, #12]
}
 8005c72:	bf00      	nop
 8005c74:	e7fe      	b.n	8005c74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005c76:	4b39      	ldr	r3, [pc, #228]	; (8005d5c <xPortStartScheduler+0x12c>)
 8005c78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	22ff      	movs	r2, #255	; 0xff
 8005c86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005c90:	78fb      	ldrb	r3, [r7, #3]
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005c98:	b2da      	uxtb	r2, r3
 8005c9a:	4b31      	ldr	r3, [pc, #196]	; (8005d60 <xPortStartScheduler+0x130>)
 8005c9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005c9e:	4b31      	ldr	r3, [pc, #196]	; (8005d64 <xPortStartScheduler+0x134>)
 8005ca0:	2207      	movs	r2, #7
 8005ca2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ca4:	e009      	b.n	8005cba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005ca6:	4b2f      	ldr	r3, [pc, #188]	; (8005d64 <xPortStartScheduler+0x134>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	3b01      	subs	r3, #1
 8005cac:	4a2d      	ldr	r2, [pc, #180]	; (8005d64 <xPortStartScheduler+0x134>)
 8005cae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005cb0:	78fb      	ldrb	r3, [r7, #3]
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	005b      	lsls	r3, r3, #1
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005cba:	78fb      	ldrb	r3, [r7, #3]
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc2:	2b80      	cmp	r3, #128	; 0x80
 8005cc4:	d0ef      	beq.n	8005ca6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005cc6:	4b27      	ldr	r3, [pc, #156]	; (8005d64 <xPortStartScheduler+0x134>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f1c3 0307 	rsb	r3, r3, #7
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	d00a      	beq.n	8005ce8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd6:	f383 8811 	msr	BASEPRI, r3
 8005cda:	f3bf 8f6f 	isb	sy
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	60bb      	str	r3, [r7, #8]
}
 8005ce4:	bf00      	nop
 8005ce6:	e7fe      	b.n	8005ce6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ce8:	4b1e      	ldr	r3, [pc, #120]	; (8005d64 <xPortStartScheduler+0x134>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	021b      	lsls	r3, r3, #8
 8005cee:	4a1d      	ldr	r2, [pc, #116]	; (8005d64 <xPortStartScheduler+0x134>)
 8005cf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005cf2:	4b1c      	ldr	r3, [pc, #112]	; (8005d64 <xPortStartScheduler+0x134>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005cfa:	4a1a      	ldr	r2, [pc, #104]	; (8005d64 <xPortStartScheduler+0x134>)
 8005cfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	b2da      	uxtb	r2, r3
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d06:	4b18      	ldr	r3, [pc, #96]	; (8005d68 <xPortStartScheduler+0x138>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a17      	ldr	r2, [pc, #92]	; (8005d68 <xPortStartScheduler+0x138>)
 8005d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005d12:	4b15      	ldr	r3, [pc, #84]	; (8005d68 <xPortStartScheduler+0x138>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a14      	ldr	r2, [pc, #80]	; (8005d68 <xPortStartScheduler+0x138>)
 8005d18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005d1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005d1e:	f000 f8dd 	bl	8005edc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005d22:	4b12      	ldr	r3, [pc, #72]	; (8005d6c <xPortStartScheduler+0x13c>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005d28:	f000 f8fc 	bl	8005f24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005d2c:	4b10      	ldr	r3, [pc, #64]	; (8005d70 <xPortStartScheduler+0x140>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a0f      	ldr	r2, [pc, #60]	; (8005d70 <xPortStartScheduler+0x140>)
 8005d32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005d36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005d38:	f7ff ff66 	bl	8005c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005d3c:	f7ff fd44 	bl	80057c8 <vTaskSwitchContext>
	prvTaskExitError();
 8005d40:	f7ff ff1e 	bl	8005b80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3718      	adds	r7, #24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	e000ed00 	.word	0xe000ed00
 8005d54:	410fc271 	.word	0x410fc271
 8005d58:	410fc270 	.word	0x410fc270
 8005d5c:	e000e400 	.word	0xe000e400
 8005d60:	2000062c 	.word	0x2000062c
 8005d64:	20000630 	.word	0x20000630
 8005d68:	e000ed20 	.word	0xe000ed20
 8005d6c:	2000000c 	.word	0x2000000c
 8005d70:	e000ef34 	.word	0xe000ef34

08005d74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
	__asm volatile
 8005d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7e:	f383 8811 	msr	BASEPRI, r3
 8005d82:	f3bf 8f6f 	isb	sy
 8005d86:	f3bf 8f4f 	dsb	sy
 8005d8a:	607b      	str	r3, [r7, #4]
}
 8005d8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005d8e:	4b0f      	ldr	r3, [pc, #60]	; (8005dcc <vPortEnterCritical+0x58>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	3301      	adds	r3, #1
 8005d94:	4a0d      	ldr	r2, [pc, #52]	; (8005dcc <vPortEnterCritical+0x58>)
 8005d96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005d98:	4b0c      	ldr	r3, [pc, #48]	; (8005dcc <vPortEnterCritical+0x58>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d10f      	bne.n	8005dc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005da0:	4b0b      	ldr	r3, [pc, #44]	; (8005dd0 <vPortEnterCritical+0x5c>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00a      	beq.n	8005dc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dae:	f383 8811 	msr	BASEPRI, r3
 8005db2:	f3bf 8f6f 	isb	sy
 8005db6:	f3bf 8f4f 	dsb	sy
 8005dba:	603b      	str	r3, [r7, #0]
}
 8005dbc:	bf00      	nop
 8005dbe:	e7fe      	b.n	8005dbe <vPortEnterCritical+0x4a>
	}
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr
 8005dcc:	2000000c 	.word	0x2000000c
 8005dd0:	e000ed04 	.word	0xe000ed04

08005dd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005dda:	4b12      	ldr	r3, [pc, #72]	; (8005e24 <vPortExitCritical+0x50>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10a      	bne.n	8005df8 <vPortExitCritical+0x24>
	__asm volatile
 8005de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de6:	f383 8811 	msr	BASEPRI, r3
 8005dea:	f3bf 8f6f 	isb	sy
 8005dee:	f3bf 8f4f 	dsb	sy
 8005df2:	607b      	str	r3, [r7, #4]
}
 8005df4:	bf00      	nop
 8005df6:	e7fe      	b.n	8005df6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005df8:	4b0a      	ldr	r3, [pc, #40]	; (8005e24 <vPortExitCritical+0x50>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	4a09      	ldr	r2, [pc, #36]	; (8005e24 <vPortExitCritical+0x50>)
 8005e00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e02:	4b08      	ldr	r3, [pc, #32]	; (8005e24 <vPortExitCritical+0x50>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d105      	bne.n	8005e16 <vPortExitCritical+0x42>
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005e14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005e16:	bf00      	nop
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	2000000c 	.word	0x2000000c
	...

08005e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005e30:	f3ef 8009 	mrs	r0, PSP
 8005e34:	f3bf 8f6f 	isb	sy
 8005e38:	4b15      	ldr	r3, [pc, #84]	; (8005e90 <pxCurrentTCBConst>)
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	f01e 0f10 	tst.w	lr, #16
 8005e40:	bf08      	it	eq
 8005e42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005e46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e4a:	6010      	str	r0, [r2, #0]
 8005e4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005e50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005e54:	f380 8811 	msr	BASEPRI, r0
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	f3bf 8f6f 	isb	sy
 8005e60:	f7ff fcb2 	bl	80057c8 <vTaskSwitchContext>
 8005e64:	f04f 0000 	mov.w	r0, #0
 8005e68:	f380 8811 	msr	BASEPRI, r0
 8005e6c:	bc09      	pop	{r0, r3}
 8005e6e:	6819      	ldr	r1, [r3, #0]
 8005e70:	6808      	ldr	r0, [r1, #0]
 8005e72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e76:	f01e 0f10 	tst.w	lr, #16
 8005e7a:	bf08      	it	eq
 8005e7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005e80:	f380 8809 	msr	PSP, r0
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	f3af 8000 	nop.w

08005e90 <pxCurrentTCBConst>:
 8005e90:	20000500 	.word	0x20000500
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005e94:	bf00      	nop
 8005e96:	bf00      	nop

08005e98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea2:	f383 8811 	msr	BASEPRI, r3
 8005ea6:	f3bf 8f6f 	isb	sy
 8005eaa:	f3bf 8f4f 	dsb	sy
 8005eae:	607b      	str	r3, [r7, #4]
}
 8005eb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005eb2:	f7ff fbcb 	bl	800564c <xTaskIncrementTick>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d003      	beq.n	8005ec4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005ebc:	4b06      	ldr	r3, [pc, #24]	; (8005ed8 <SysTick_Handler+0x40>)
 8005ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ec2:	601a      	str	r2, [r3, #0]
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	f383 8811 	msr	BASEPRI, r3
}
 8005ece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005ed0:	bf00      	nop
 8005ed2:	3708      	adds	r7, #8
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	e000ed04 	.word	0xe000ed04

08005edc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005edc:	b480      	push	{r7}
 8005ede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ee0:	4b0b      	ldr	r3, [pc, #44]	; (8005f10 <vPortSetupTimerInterrupt+0x34>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ee6:	4b0b      	ldr	r3, [pc, #44]	; (8005f14 <vPortSetupTimerInterrupt+0x38>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005eec:	4b0a      	ldr	r3, [pc, #40]	; (8005f18 <vPortSetupTimerInterrupt+0x3c>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a0a      	ldr	r2, [pc, #40]	; (8005f1c <vPortSetupTimerInterrupt+0x40>)
 8005ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef6:	099b      	lsrs	r3, r3, #6
 8005ef8:	4a09      	ldr	r2, [pc, #36]	; (8005f20 <vPortSetupTimerInterrupt+0x44>)
 8005efa:	3b01      	subs	r3, #1
 8005efc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005efe:	4b04      	ldr	r3, [pc, #16]	; (8005f10 <vPortSetupTimerInterrupt+0x34>)
 8005f00:	2207      	movs	r2, #7
 8005f02:	601a      	str	r2, [r3, #0]
}
 8005f04:	bf00      	nop
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	e000e010 	.word	0xe000e010
 8005f14:	e000e018 	.word	0xe000e018
 8005f18:	20000000 	.word	0x20000000
 8005f1c:	10624dd3 	.word	0x10624dd3
 8005f20:	e000e014 	.word	0xe000e014

08005f24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005f24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005f34 <vPortEnableVFP+0x10>
 8005f28:	6801      	ldr	r1, [r0, #0]
 8005f2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005f2e:	6001      	str	r1, [r0, #0]
 8005f30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005f32:	bf00      	nop
 8005f34:	e000ed88 	.word	0xe000ed88

08005f38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b08a      	sub	sp, #40	; 0x28
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005f40:	2300      	movs	r3, #0
 8005f42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005f44:	f7ff fad8 	bl	80054f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005f48:	4b58      	ldr	r3, [pc, #352]	; (80060ac <pvPortMalloc+0x174>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d101      	bne.n	8005f54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005f50:	f000 f910 	bl	8006174 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005f54:	4b56      	ldr	r3, [pc, #344]	; (80060b0 <pvPortMalloc+0x178>)
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f040 808e 	bne.w	800607e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d01d      	beq.n	8005fa4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005f68:	2208      	movs	r2, #8
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f003 0307 	and.w	r3, r3, #7
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d014      	beq.n	8005fa4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f023 0307 	bic.w	r3, r3, #7
 8005f80:	3308      	adds	r3, #8
 8005f82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f003 0307 	and.w	r3, r3, #7
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00a      	beq.n	8005fa4 <pvPortMalloc+0x6c>
	__asm volatile
 8005f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f92:	f383 8811 	msr	BASEPRI, r3
 8005f96:	f3bf 8f6f 	isb	sy
 8005f9a:	f3bf 8f4f 	dsb	sy
 8005f9e:	617b      	str	r3, [r7, #20]
}
 8005fa0:	bf00      	nop
 8005fa2:	e7fe      	b.n	8005fa2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d069      	beq.n	800607e <pvPortMalloc+0x146>
 8005faa:	4b42      	ldr	r3, [pc, #264]	; (80060b4 <pvPortMalloc+0x17c>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d864      	bhi.n	800607e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005fb4:	4b40      	ldr	r3, [pc, #256]	; (80060b8 <pvPortMalloc+0x180>)
 8005fb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005fb8:	4b3f      	ldr	r3, [pc, #252]	; (80060b8 <pvPortMalloc+0x180>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fbe:	e004      	b.n	8005fca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d903      	bls.n	8005fdc <pvPortMalloc+0xa4>
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1f1      	bne.n	8005fc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005fdc:	4b33      	ldr	r3, [pc, #204]	; (80060ac <pvPortMalloc+0x174>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d04b      	beq.n	800607e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2208      	movs	r2, #8
 8005fec:	4413      	add	r3, r2
 8005fee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	6a3b      	ldr	r3, [r7, #32]
 8005ff6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffa:	685a      	ldr	r2, [r3, #4]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	1ad2      	subs	r2, r2, r3
 8006000:	2308      	movs	r3, #8
 8006002:	005b      	lsls	r3, r3, #1
 8006004:	429a      	cmp	r2, r3
 8006006:	d91f      	bls.n	8006048 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4413      	add	r3, r2
 800600e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	f003 0307 	and.w	r3, r3, #7
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00a      	beq.n	8006030 <pvPortMalloc+0xf8>
	__asm volatile
 800601a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601e:	f383 8811 	msr	BASEPRI, r3
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	613b      	str	r3, [r7, #16]
}
 800602c:	bf00      	nop
 800602e:	e7fe      	b.n	800602e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006032:	685a      	ldr	r2, [r3, #4]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	1ad2      	subs	r2, r2, r3
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800603c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006042:	69b8      	ldr	r0, [r7, #24]
 8006044:	f000 f8f8 	bl	8006238 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006048:	4b1a      	ldr	r3, [pc, #104]	; (80060b4 <pvPortMalloc+0x17c>)
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	4a18      	ldr	r2, [pc, #96]	; (80060b4 <pvPortMalloc+0x17c>)
 8006054:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006056:	4b17      	ldr	r3, [pc, #92]	; (80060b4 <pvPortMalloc+0x17c>)
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	4b18      	ldr	r3, [pc, #96]	; (80060bc <pvPortMalloc+0x184>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	429a      	cmp	r2, r3
 8006060:	d203      	bcs.n	800606a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006062:	4b14      	ldr	r3, [pc, #80]	; (80060b4 <pvPortMalloc+0x17c>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a15      	ldr	r2, [pc, #84]	; (80060bc <pvPortMalloc+0x184>)
 8006068:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800606a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	4b10      	ldr	r3, [pc, #64]	; (80060b0 <pvPortMalloc+0x178>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	431a      	orrs	r2, r3
 8006074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006076:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607a:	2200      	movs	r2, #0
 800607c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800607e:	f7ff fa49 	bl	8005514 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	f003 0307 	and.w	r3, r3, #7
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00a      	beq.n	80060a2 <pvPortMalloc+0x16a>
	__asm volatile
 800608c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006090:	f383 8811 	msr	BASEPRI, r3
 8006094:	f3bf 8f6f 	isb	sy
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	60fb      	str	r3, [r7, #12]
}
 800609e:	bf00      	nop
 80060a0:	e7fe      	b.n	80060a0 <pvPortMalloc+0x168>
	return pvReturn;
 80060a2:	69fb      	ldr	r3, [r7, #28]
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3728      	adds	r7, #40	; 0x28
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	2000123c 	.word	0x2000123c
 80060b0:	20001248 	.word	0x20001248
 80060b4:	20001240 	.word	0x20001240
 80060b8:	20001234 	.word	0x20001234
 80060bc:	20001244 	.word	0x20001244

080060c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d048      	beq.n	8006164 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80060d2:	2308      	movs	r3, #8
 80060d4:	425b      	negs	r3, r3
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	4413      	add	r3, r2
 80060da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	685a      	ldr	r2, [r3, #4]
 80060e4:	4b21      	ldr	r3, [pc, #132]	; (800616c <vPortFree+0xac>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4013      	ands	r3, r2
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10a      	bne.n	8006104 <vPortFree+0x44>
	__asm volatile
 80060ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f2:	f383 8811 	msr	BASEPRI, r3
 80060f6:	f3bf 8f6f 	isb	sy
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	60fb      	str	r3, [r7, #12]
}
 8006100:	bf00      	nop
 8006102:	e7fe      	b.n	8006102 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00a      	beq.n	8006122 <vPortFree+0x62>
	__asm volatile
 800610c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006110:	f383 8811 	msr	BASEPRI, r3
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	60bb      	str	r3, [r7, #8]
}
 800611e:	bf00      	nop
 8006120:	e7fe      	b.n	8006120 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	685a      	ldr	r2, [r3, #4]
 8006126:	4b11      	ldr	r3, [pc, #68]	; (800616c <vPortFree+0xac>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4013      	ands	r3, r2
 800612c:	2b00      	cmp	r3, #0
 800612e:	d019      	beq.n	8006164 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d115      	bne.n	8006164 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	685a      	ldr	r2, [r3, #4]
 800613c:	4b0b      	ldr	r3, [pc, #44]	; (800616c <vPortFree+0xac>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	43db      	mvns	r3, r3
 8006142:	401a      	ands	r2, r3
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006148:	f7ff f9d6 	bl	80054f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	685a      	ldr	r2, [r3, #4]
 8006150:	4b07      	ldr	r3, [pc, #28]	; (8006170 <vPortFree+0xb0>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4413      	add	r3, r2
 8006156:	4a06      	ldr	r2, [pc, #24]	; (8006170 <vPortFree+0xb0>)
 8006158:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800615a:	6938      	ldr	r0, [r7, #16]
 800615c:	f000 f86c 	bl	8006238 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006160:	f7ff f9d8 	bl	8005514 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006164:	bf00      	nop
 8006166:	3718      	adds	r7, #24
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	20001248 	.word	0x20001248
 8006170:	20001240 	.word	0x20001240

08006174 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800617a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800617e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006180:	4b27      	ldr	r3, [pc, #156]	; (8006220 <prvHeapInit+0xac>)
 8006182:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f003 0307 	and.w	r3, r3, #7
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00c      	beq.n	80061a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	3307      	adds	r3, #7
 8006192:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f023 0307 	bic.w	r3, r3, #7
 800619a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	4a1f      	ldr	r2, [pc, #124]	; (8006220 <prvHeapInit+0xac>)
 80061a4:	4413      	add	r3, r2
 80061a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80061ac:	4a1d      	ldr	r2, [pc, #116]	; (8006224 <prvHeapInit+0xb0>)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80061b2:	4b1c      	ldr	r3, [pc, #112]	; (8006224 <prvHeapInit+0xb0>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	68ba      	ldr	r2, [r7, #8]
 80061bc:	4413      	add	r3, r2
 80061be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80061c0:	2208      	movs	r2, #8
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	1a9b      	subs	r3, r3, r2
 80061c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f023 0307 	bic.w	r3, r3, #7
 80061ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	4a15      	ldr	r2, [pc, #84]	; (8006228 <prvHeapInit+0xb4>)
 80061d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80061d6:	4b14      	ldr	r3, [pc, #80]	; (8006228 <prvHeapInit+0xb4>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2200      	movs	r2, #0
 80061dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80061de:	4b12      	ldr	r3, [pc, #72]	; (8006228 <prvHeapInit+0xb4>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2200      	movs	r2, #0
 80061e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	1ad2      	subs	r2, r2, r3
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80061f4:	4b0c      	ldr	r3, [pc, #48]	; (8006228 <prvHeapInit+0xb4>)
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	4a0a      	ldr	r2, [pc, #40]	; (800622c <prvHeapInit+0xb8>)
 8006202:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	4a09      	ldr	r2, [pc, #36]	; (8006230 <prvHeapInit+0xbc>)
 800620a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800620c:	4b09      	ldr	r3, [pc, #36]	; (8006234 <prvHeapInit+0xc0>)
 800620e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006212:	601a      	str	r2, [r3, #0]
}
 8006214:	bf00      	nop
 8006216:	3714      	adds	r7, #20
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr
 8006220:	20000634 	.word	0x20000634
 8006224:	20001234 	.word	0x20001234
 8006228:	2000123c 	.word	0x2000123c
 800622c:	20001244 	.word	0x20001244
 8006230:	20001240 	.word	0x20001240
 8006234:	20001248 	.word	0x20001248

08006238 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006240:	4b28      	ldr	r3, [pc, #160]	; (80062e4 <prvInsertBlockIntoFreeList+0xac>)
 8006242:	60fb      	str	r3, [r7, #12]
 8006244:	e002      	b.n	800624c <prvInsertBlockIntoFreeList+0x14>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	60fb      	str	r3, [r7, #12]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	429a      	cmp	r2, r3
 8006254:	d8f7      	bhi.n	8006246 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	4413      	add	r3, r2
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	429a      	cmp	r2, r3
 8006266:	d108      	bne.n	800627a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	441a      	add	r2, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	441a      	add	r2, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	429a      	cmp	r2, r3
 800628c:	d118      	bne.n	80062c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	4b15      	ldr	r3, [pc, #84]	; (80062e8 <prvInsertBlockIntoFreeList+0xb0>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	429a      	cmp	r2, r3
 8006298:	d00d      	beq.n	80062b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685a      	ldr	r2, [r3, #4]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	441a      	add	r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	601a      	str	r2, [r3, #0]
 80062b4:	e008      	b.n	80062c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80062b6:	4b0c      	ldr	r3, [pc, #48]	; (80062e8 <prvInsertBlockIntoFreeList+0xb0>)
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	601a      	str	r2, [r3, #0]
 80062be:	e003      	b.n	80062c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d002      	beq.n	80062d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062d6:	bf00      	nop
 80062d8:	3714      	adds	r7, #20
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	20001234 	.word	0x20001234
 80062e8:	2000123c 	.word	0x2000123c

080062ec <std>:
 80062ec:	2300      	movs	r3, #0
 80062ee:	b510      	push	{r4, lr}
 80062f0:	4604      	mov	r4, r0
 80062f2:	e9c0 3300 	strd	r3, r3, [r0]
 80062f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062fa:	6083      	str	r3, [r0, #8]
 80062fc:	8181      	strh	r1, [r0, #12]
 80062fe:	6643      	str	r3, [r0, #100]	; 0x64
 8006300:	81c2      	strh	r2, [r0, #14]
 8006302:	6183      	str	r3, [r0, #24]
 8006304:	4619      	mov	r1, r3
 8006306:	2208      	movs	r2, #8
 8006308:	305c      	adds	r0, #92	; 0x5c
 800630a:	f000 f9f7 	bl	80066fc <memset>
 800630e:	4b0d      	ldr	r3, [pc, #52]	; (8006344 <std+0x58>)
 8006310:	6263      	str	r3, [r4, #36]	; 0x24
 8006312:	4b0d      	ldr	r3, [pc, #52]	; (8006348 <std+0x5c>)
 8006314:	62a3      	str	r3, [r4, #40]	; 0x28
 8006316:	4b0d      	ldr	r3, [pc, #52]	; (800634c <std+0x60>)
 8006318:	62e3      	str	r3, [r4, #44]	; 0x2c
 800631a:	4b0d      	ldr	r3, [pc, #52]	; (8006350 <std+0x64>)
 800631c:	6323      	str	r3, [r4, #48]	; 0x30
 800631e:	4b0d      	ldr	r3, [pc, #52]	; (8006354 <std+0x68>)
 8006320:	6224      	str	r4, [r4, #32]
 8006322:	429c      	cmp	r4, r3
 8006324:	d006      	beq.n	8006334 <std+0x48>
 8006326:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800632a:	4294      	cmp	r4, r2
 800632c:	d002      	beq.n	8006334 <std+0x48>
 800632e:	33d0      	adds	r3, #208	; 0xd0
 8006330:	429c      	cmp	r4, r3
 8006332:	d105      	bne.n	8006340 <std+0x54>
 8006334:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800633c:	f000 baac 	b.w	8006898 <__retarget_lock_init_recursive>
 8006340:	bd10      	pop	{r4, pc}
 8006342:	bf00      	nop
 8006344:	0800654d 	.word	0x0800654d
 8006348:	0800656f 	.word	0x0800656f
 800634c:	080065a7 	.word	0x080065a7
 8006350:	080065cb 	.word	0x080065cb
 8006354:	2000124c 	.word	0x2000124c

08006358 <stdio_exit_handler>:
 8006358:	4a02      	ldr	r2, [pc, #8]	; (8006364 <stdio_exit_handler+0xc>)
 800635a:	4903      	ldr	r1, [pc, #12]	; (8006368 <stdio_exit_handler+0x10>)
 800635c:	4803      	ldr	r0, [pc, #12]	; (800636c <stdio_exit_handler+0x14>)
 800635e:	f000 b869 	b.w	8006434 <_fwalk_sglue>
 8006362:	bf00      	nop
 8006364:	20000010 	.word	0x20000010
 8006368:	08007145 	.word	0x08007145
 800636c:	2000001c 	.word	0x2000001c

08006370 <cleanup_stdio>:
 8006370:	6841      	ldr	r1, [r0, #4]
 8006372:	4b0c      	ldr	r3, [pc, #48]	; (80063a4 <cleanup_stdio+0x34>)
 8006374:	4299      	cmp	r1, r3
 8006376:	b510      	push	{r4, lr}
 8006378:	4604      	mov	r4, r0
 800637a:	d001      	beq.n	8006380 <cleanup_stdio+0x10>
 800637c:	f000 fee2 	bl	8007144 <_fflush_r>
 8006380:	68a1      	ldr	r1, [r4, #8]
 8006382:	4b09      	ldr	r3, [pc, #36]	; (80063a8 <cleanup_stdio+0x38>)
 8006384:	4299      	cmp	r1, r3
 8006386:	d002      	beq.n	800638e <cleanup_stdio+0x1e>
 8006388:	4620      	mov	r0, r4
 800638a:	f000 fedb 	bl	8007144 <_fflush_r>
 800638e:	68e1      	ldr	r1, [r4, #12]
 8006390:	4b06      	ldr	r3, [pc, #24]	; (80063ac <cleanup_stdio+0x3c>)
 8006392:	4299      	cmp	r1, r3
 8006394:	d004      	beq.n	80063a0 <cleanup_stdio+0x30>
 8006396:	4620      	mov	r0, r4
 8006398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800639c:	f000 bed2 	b.w	8007144 <_fflush_r>
 80063a0:	bd10      	pop	{r4, pc}
 80063a2:	bf00      	nop
 80063a4:	2000124c 	.word	0x2000124c
 80063a8:	200012b4 	.word	0x200012b4
 80063ac:	2000131c 	.word	0x2000131c

080063b0 <global_stdio_init.part.0>:
 80063b0:	b510      	push	{r4, lr}
 80063b2:	4b0b      	ldr	r3, [pc, #44]	; (80063e0 <global_stdio_init.part.0+0x30>)
 80063b4:	4c0b      	ldr	r4, [pc, #44]	; (80063e4 <global_stdio_init.part.0+0x34>)
 80063b6:	4a0c      	ldr	r2, [pc, #48]	; (80063e8 <global_stdio_init.part.0+0x38>)
 80063b8:	601a      	str	r2, [r3, #0]
 80063ba:	4620      	mov	r0, r4
 80063bc:	2200      	movs	r2, #0
 80063be:	2104      	movs	r1, #4
 80063c0:	f7ff ff94 	bl	80062ec <std>
 80063c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80063c8:	2201      	movs	r2, #1
 80063ca:	2109      	movs	r1, #9
 80063cc:	f7ff ff8e 	bl	80062ec <std>
 80063d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80063d4:	2202      	movs	r2, #2
 80063d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063da:	2112      	movs	r1, #18
 80063dc:	f7ff bf86 	b.w	80062ec <std>
 80063e0:	20001384 	.word	0x20001384
 80063e4:	2000124c 	.word	0x2000124c
 80063e8:	08006359 	.word	0x08006359

080063ec <__sfp_lock_acquire>:
 80063ec:	4801      	ldr	r0, [pc, #4]	; (80063f4 <__sfp_lock_acquire+0x8>)
 80063ee:	f000 ba54 	b.w	800689a <__retarget_lock_acquire_recursive>
 80063f2:	bf00      	nop
 80063f4:	2000138d 	.word	0x2000138d

080063f8 <__sfp_lock_release>:
 80063f8:	4801      	ldr	r0, [pc, #4]	; (8006400 <__sfp_lock_release+0x8>)
 80063fa:	f000 ba4f 	b.w	800689c <__retarget_lock_release_recursive>
 80063fe:	bf00      	nop
 8006400:	2000138d 	.word	0x2000138d

08006404 <__sinit>:
 8006404:	b510      	push	{r4, lr}
 8006406:	4604      	mov	r4, r0
 8006408:	f7ff fff0 	bl	80063ec <__sfp_lock_acquire>
 800640c:	6a23      	ldr	r3, [r4, #32]
 800640e:	b11b      	cbz	r3, 8006418 <__sinit+0x14>
 8006410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006414:	f7ff bff0 	b.w	80063f8 <__sfp_lock_release>
 8006418:	4b04      	ldr	r3, [pc, #16]	; (800642c <__sinit+0x28>)
 800641a:	6223      	str	r3, [r4, #32]
 800641c:	4b04      	ldr	r3, [pc, #16]	; (8006430 <__sinit+0x2c>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1f5      	bne.n	8006410 <__sinit+0xc>
 8006424:	f7ff ffc4 	bl	80063b0 <global_stdio_init.part.0>
 8006428:	e7f2      	b.n	8006410 <__sinit+0xc>
 800642a:	bf00      	nop
 800642c:	08006371 	.word	0x08006371
 8006430:	20001384 	.word	0x20001384

08006434 <_fwalk_sglue>:
 8006434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006438:	4607      	mov	r7, r0
 800643a:	4688      	mov	r8, r1
 800643c:	4614      	mov	r4, r2
 800643e:	2600      	movs	r6, #0
 8006440:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006444:	f1b9 0901 	subs.w	r9, r9, #1
 8006448:	d505      	bpl.n	8006456 <_fwalk_sglue+0x22>
 800644a:	6824      	ldr	r4, [r4, #0]
 800644c:	2c00      	cmp	r4, #0
 800644e:	d1f7      	bne.n	8006440 <_fwalk_sglue+0xc>
 8006450:	4630      	mov	r0, r6
 8006452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006456:	89ab      	ldrh	r3, [r5, #12]
 8006458:	2b01      	cmp	r3, #1
 800645a:	d907      	bls.n	800646c <_fwalk_sglue+0x38>
 800645c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006460:	3301      	adds	r3, #1
 8006462:	d003      	beq.n	800646c <_fwalk_sglue+0x38>
 8006464:	4629      	mov	r1, r5
 8006466:	4638      	mov	r0, r7
 8006468:	47c0      	blx	r8
 800646a:	4306      	orrs	r6, r0
 800646c:	3568      	adds	r5, #104	; 0x68
 800646e:	e7e9      	b.n	8006444 <_fwalk_sglue+0x10>

08006470 <iprintf>:
 8006470:	b40f      	push	{r0, r1, r2, r3}
 8006472:	b507      	push	{r0, r1, r2, lr}
 8006474:	4906      	ldr	r1, [pc, #24]	; (8006490 <iprintf+0x20>)
 8006476:	ab04      	add	r3, sp, #16
 8006478:	6808      	ldr	r0, [r1, #0]
 800647a:	f853 2b04 	ldr.w	r2, [r3], #4
 800647e:	6881      	ldr	r1, [r0, #8]
 8006480:	9301      	str	r3, [sp, #4]
 8006482:	f000 fb2f 	bl	8006ae4 <_vfiprintf_r>
 8006486:	b003      	add	sp, #12
 8006488:	f85d eb04 	ldr.w	lr, [sp], #4
 800648c:	b004      	add	sp, #16
 800648e:	4770      	bx	lr
 8006490:	20000068 	.word	0x20000068

08006494 <_puts_r>:
 8006494:	6a03      	ldr	r3, [r0, #32]
 8006496:	b570      	push	{r4, r5, r6, lr}
 8006498:	6884      	ldr	r4, [r0, #8]
 800649a:	4605      	mov	r5, r0
 800649c:	460e      	mov	r6, r1
 800649e:	b90b      	cbnz	r3, 80064a4 <_puts_r+0x10>
 80064a0:	f7ff ffb0 	bl	8006404 <__sinit>
 80064a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064a6:	07db      	lsls	r3, r3, #31
 80064a8:	d405      	bmi.n	80064b6 <_puts_r+0x22>
 80064aa:	89a3      	ldrh	r3, [r4, #12]
 80064ac:	0598      	lsls	r0, r3, #22
 80064ae:	d402      	bmi.n	80064b6 <_puts_r+0x22>
 80064b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064b2:	f000 f9f2 	bl	800689a <__retarget_lock_acquire_recursive>
 80064b6:	89a3      	ldrh	r3, [r4, #12]
 80064b8:	0719      	lsls	r1, r3, #28
 80064ba:	d513      	bpl.n	80064e4 <_puts_r+0x50>
 80064bc:	6923      	ldr	r3, [r4, #16]
 80064be:	b18b      	cbz	r3, 80064e4 <_puts_r+0x50>
 80064c0:	3e01      	subs	r6, #1
 80064c2:	68a3      	ldr	r3, [r4, #8]
 80064c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80064c8:	3b01      	subs	r3, #1
 80064ca:	60a3      	str	r3, [r4, #8]
 80064cc:	b9e9      	cbnz	r1, 800650a <_puts_r+0x76>
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	da2e      	bge.n	8006530 <_puts_r+0x9c>
 80064d2:	4622      	mov	r2, r4
 80064d4:	210a      	movs	r1, #10
 80064d6:	4628      	mov	r0, r5
 80064d8:	f000 f87b 	bl	80065d2 <__swbuf_r>
 80064dc:	3001      	adds	r0, #1
 80064de:	d007      	beq.n	80064f0 <_puts_r+0x5c>
 80064e0:	250a      	movs	r5, #10
 80064e2:	e007      	b.n	80064f4 <_puts_r+0x60>
 80064e4:	4621      	mov	r1, r4
 80064e6:	4628      	mov	r0, r5
 80064e8:	f000 f8b0 	bl	800664c <__swsetup_r>
 80064ec:	2800      	cmp	r0, #0
 80064ee:	d0e7      	beq.n	80064c0 <_puts_r+0x2c>
 80064f0:	f04f 35ff 	mov.w	r5, #4294967295
 80064f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064f6:	07da      	lsls	r2, r3, #31
 80064f8:	d405      	bmi.n	8006506 <_puts_r+0x72>
 80064fa:	89a3      	ldrh	r3, [r4, #12]
 80064fc:	059b      	lsls	r3, r3, #22
 80064fe:	d402      	bmi.n	8006506 <_puts_r+0x72>
 8006500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006502:	f000 f9cb 	bl	800689c <__retarget_lock_release_recursive>
 8006506:	4628      	mov	r0, r5
 8006508:	bd70      	pop	{r4, r5, r6, pc}
 800650a:	2b00      	cmp	r3, #0
 800650c:	da04      	bge.n	8006518 <_puts_r+0x84>
 800650e:	69a2      	ldr	r2, [r4, #24]
 8006510:	429a      	cmp	r2, r3
 8006512:	dc06      	bgt.n	8006522 <_puts_r+0x8e>
 8006514:	290a      	cmp	r1, #10
 8006516:	d004      	beq.n	8006522 <_puts_r+0x8e>
 8006518:	6823      	ldr	r3, [r4, #0]
 800651a:	1c5a      	adds	r2, r3, #1
 800651c:	6022      	str	r2, [r4, #0]
 800651e:	7019      	strb	r1, [r3, #0]
 8006520:	e7cf      	b.n	80064c2 <_puts_r+0x2e>
 8006522:	4622      	mov	r2, r4
 8006524:	4628      	mov	r0, r5
 8006526:	f000 f854 	bl	80065d2 <__swbuf_r>
 800652a:	3001      	adds	r0, #1
 800652c:	d1c9      	bne.n	80064c2 <_puts_r+0x2e>
 800652e:	e7df      	b.n	80064f0 <_puts_r+0x5c>
 8006530:	6823      	ldr	r3, [r4, #0]
 8006532:	250a      	movs	r5, #10
 8006534:	1c5a      	adds	r2, r3, #1
 8006536:	6022      	str	r2, [r4, #0]
 8006538:	701d      	strb	r5, [r3, #0]
 800653a:	e7db      	b.n	80064f4 <_puts_r+0x60>

0800653c <puts>:
 800653c:	4b02      	ldr	r3, [pc, #8]	; (8006548 <puts+0xc>)
 800653e:	4601      	mov	r1, r0
 8006540:	6818      	ldr	r0, [r3, #0]
 8006542:	f7ff bfa7 	b.w	8006494 <_puts_r>
 8006546:	bf00      	nop
 8006548:	20000068 	.word	0x20000068

0800654c <__sread>:
 800654c:	b510      	push	{r4, lr}
 800654e:	460c      	mov	r4, r1
 8006550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006554:	f000 f952 	bl	80067fc <_read_r>
 8006558:	2800      	cmp	r0, #0
 800655a:	bfab      	itete	ge
 800655c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800655e:	89a3      	ldrhlt	r3, [r4, #12]
 8006560:	181b      	addge	r3, r3, r0
 8006562:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006566:	bfac      	ite	ge
 8006568:	6563      	strge	r3, [r4, #84]	; 0x54
 800656a:	81a3      	strhlt	r3, [r4, #12]
 800656c:	bd10      	pop	{r4, pc}

0800656e <__swrite>:
 800656e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006572:	461f      	mov	r7, r3
 8006574:	898b      	ldrh	r3, [r1, #12]
 8006576:	05db      	lsls	r3, r3, #23
 8006578:	4605      	mov	r5, r0
 800657a:	460c      	mov	r4, r1
 800657c:	4616      	mov	r6, r2
 800657e:	d505      	bpl.n	800658c <__swrite+0x1e>
 8006580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006584:	2302      	movs	r3, #2
 8006586:	2200      	movs	r2, #0
 8006588:	f000 f926 	bl	80067d8 <_lseek_r>
 800658c:	89a3      	ldrh	r3, [r4, #12]
 800658e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006592:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006596:	81a3      	strh	r3, [r4, #12]
 8006598:	4632      	mov	r2, r6
 800659a:	463b      	mov	r3, r7
 800659c:	4628      	mov	r0, r5
 800659e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065a2:	f000 b93d 	b.w	8006820 <_write_r>

080065a6 <__sseek>:
 80065a6:	b510      	push	{r4, lr}
 80065a8:	460c      	mov	r4, r1
 80065aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065ae:	f000 f913 	bl	80067d8 <_lseek_r>
 80065b2:	1c43      	adds	r3, r0, #1
 80065b4:	89a3      	ldrh	r3, [r4, #12]
 80065b6:	bf15      	itete	ne
 80065b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80065ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80065be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80065c2:	81a3      	strheq	r3, [r4, #12]
 80065c4:	bf18      	it	ne
 80065c6:	81a3      	strhne	r3, [r4, #12]
 80065c8:	bd10      	pop	{r4, pc}

080065ca <__sclose>:
 80065ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065ce:	f000 b89d 	b.w	800670c <_close_r>

080065d2 <__swbuf_r>:
 80065d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065d4:	460e      	mov	r6, r1
 80065d6:	4614      	mov	r4, r2
 80065d8:	4605      	mov	r5, r0
 80065da:	b118      	cbz	r0, 80065e4 <__swbuf_r+0x12>
 80065dc:	6a03      	ldr	r3, [r0, #32]
 80065de:	b90b      	cbnz	r3, 80065e4 <__swbuf_r+0x12>
 80065e0:	f7ff ff10 	bl	8006404 <__sinit>
 80065e4:	69a3      	ldr	r3, [r4, #24]
 80065e6:	60a3      	str	r3, [r4, #8]
 80065e8:	89a3      	ldrh	r3, [r4, #12]
 80065ea:	071a      	lsls	r2, r3, #28
 80065ec:	d525      	bpl.n	800663a <__swbuf_r+0x68>
 80065ee:	6923      	ldr	r3, [r4, #16]
 80065f0:	b31b      	cbz	r3, 800663a <__swbuf_r+0x68>
 80065f2:	6823      	ldr	r3, [r4, #0]
 80065f4:	6922      	ldr	r2, [r4, #16]
 80065f6:	1a98      	subs	r0, r3, r2
 80065f8:	6963      	ldr	r3, [r4, #20]
 80065fa:	b2f6      	uxtb	r6, r6
 80065fc:	4283      	cmp	r3, r0
 80065fe:	4637      	mov	r7, r6
 8006600:	dc04      	bgt.n	800660c <__swbuf_r+0x3a>
 8006602:	4621      	mov	r1, r4
 8006604:	4628      	mov	r0, r5
 8006606:	f000 fd9d 	bl	8007144 <_fflush_r>
 800660a:	b9e0      	cbnz	r0, 8006646 <__swbuf_r+0x74>
 800660c:	68a3      	ldr	r3, [r4, #8]
 800660e:	3b01      	subs	r3, #1
 8006610:	60a3      	str	r3, [r4, #8]
 8006612:	6823      	ldr	r3, [r4, #0]
 8006614:	1c5a      	adds	r2, r3, #1
 8006616:	6022      	str	r2, [r4, #0]
 8006618:	701e      	strb	r6, [r3, #0]
 800661a:	6962      	ldr	r2, [r4, #20]
 800661c:	1c43      	adds	r3, r0, #1
 800661e:	429a      	cmp	r2, r3
 8006620:	d004      	beq.n	800662c <__swbuf_r+0x5a>
 8006622:	89a3      	ldrh	r3, [r4, #12]
 8006624:	07db      	lsls	r3, r3, #31
 8006626:	d506      	bpl.n	8006636 <__swbuf_r+0x64>
 8006628:	2e0a      	cmp	r6, #10
 800662a:	d104      	bne.n	8006636 <__swbuf_r+0x64>
 800662c:	4621      	mov	r1, r4
 800662e:	4628      	mov	r0, r5
 8006630:	f000 fd88 	bl	8007144 <_fflush_r>
 8006634:	b938      	cbnz	r0, 8006646 <__swbuf_r+0x74>
 8006636:	4638      	mov	r0, r7
 8006638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800663a:	4621      	mov	r1, r4
 800663c:	4628      	mov	r0, r5
 800663e:	f000 f805 	bl	800664c <__swsetup_r>
 8006642:	2800      	cmp	r0, #0
 8006644:	d0d5      	beq.n	80065f2 <__swbuf_r+0x20>
 8006646:	f04f 37ff 	mov.w	r7, #4294967295
 800664a:	e7f4      	b.n	8006636 <__swbuf_r+0x64>

0800664c <__swsetup_r>:
 800664c:	b538      	push	{r3, r4, r5, lr}
 800664e:	4b2a      	ldr	r3, [pc, #168]	; (80066f8 <__swsetup_r+0xac>)
 8006650:	4605      	mov	r5, r0
 8006652:	6818      	ldr	r0, [r3, #0]
 8006654:	460c      	mov	r4, r1
 8006656:	b118      	cbz	r0, 8006660 <__swsetup_r+0x14>
 8006658:	6a03      	ldr	r3, [r0, #32]
 800665a:	b90b      	cbnz	r3, 8006660 <__swsetup_r+0x14>
 800665c:	f7ff fed2 	bl	8006404 <__sinit>
 8006660:	89a3      	ldrh	r3, [r4, #12]
 8006662:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006666:	0718      	lsls	r0, r3, #28
 8006668:	d422      	bmi.n	80066b0 <__swsetup_r+0x64>
 800666a:	06d9      	lsls	r1, r3, #27
 800666c:	d407      	bmi.n	800667e <__swsetup_r+0x32>
 800666e:	2309      	movs	r3, #9
 8006670:	602b      	str	r3, [r5, #0]
 8006672:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006676:	81a3      	strh	r3, [r4, #12]
 8006678:	f04f 30ff 	mov.w	r0, #4294967295
 800667c:	e034      	b.n	80066e8 <__swsetup_r+0x9c>
 800667e:	0758      	lsls	r0, r3, #29
 8006680:	d512      	bpl.n	80066a8 <__swsetup_r+0x5c>
 8006682:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006684:	b141      	cbz	r1, 8006698 <__swsetup_r+0x4c>
 8006686:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800668a:	4299      	cmp	r1, r3
 800668c:	d002      	beq.n	8006694 <__swsetup_r+0x48>
 800668e:	4628      	mov	r0, r5
 8006690:	f000 f906 	bl	80068a0 <_free_r>
 8006694:	2300      	movs	r3, #0
 8006696:	6363      	str	r3, [r4, #52]	; 0x34
 8006698:	89a3      	ldrh	r3, [r4, #12]
 800669a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800669e:	81a3      	strh	r3, [r4, #12]
 80066a0:	2300      	movs	r3, #0
 80066a2:	6063      	str	r3, [r4, #4]
 80066a4:	6923      	ldr	r3, [r4, #16]
 80066a6:	6023      	str	r3, [r4, #0]
 80066a8:	89a3      	ldrh	r3, [r4, #12]
 80066aa:	f043 0308 	orr.w	r3, r3, #8
 80066ae:	81a3      	strh	r3, [r4, #12]
 80066b0:	6923      	ldr	r3, [r4, #16]
 80066b2:	b94b      	cbnz	r3, 80066c8 <__swsetup_r+0x7c>
 80066b4:	89a3      	ldrh	r3, [r4, #12]
 80066b6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80066ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066be:	d003      	beq.n	80066c8 <__swsetup_r+0x7c>
 80066c0:	4621      	mov	r1, r4
 80066c2:	4628      	mov	r0, r5
 80066c4:	f000 fd8c 	bl	80071e0 <__smakebuf_r>
 80066c8:	89a0      	ldrh	r0, [r4, #12]
 80066ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066ce:	f010 0301 	ands.w	r3, r0, #1
 80066d2:	d00a      	beq.n	80066ea <__swsetup_r+0x9e>
 80066d4:	2300      	movs	r3, #0
 80066d6:	60a3      	str	r3, [r4, #8]
 80066d8:	6963      	ldr	r3, [r4, #20]
 80066da:	425b      	negs	r3, r3
 80066dc:	61a3      	str	r3, [r4, #24]
 80066de:	6923      	ldr	r3, [r4, #16]
 80066e0:	b943      	cbnz	r3, 80066f4 <__swsetup_r+0xa8>
 80066e2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80066e6:	d1c4      	bne.n	8006672 <__swsetup_r+0x26>
 80066e8:	bd38      	pop	{r3, r4, r5, pc}
 80066ea:	0781      	lsls	r1, r0, #30
 80066ec:	bf58      	it	pl
 80066ee:	6963      	ldrpl	r3, [r4, #20]
 80066f0:	60a3      	str	r3, [r4, #8]
 80066f2:	e7f4      	b.n	80066de <__swsetup_r+0x92>
 80066f4:	2000      	movs	r0, #0
 80066f6:	e7f7      	b.n	80066e8 <__swsetup_r+0x9c>
 80066f8:	20000068 	.word	0x20000068

080066fc <memset>:
 80066fc:	4402      	add	r2, r0
 80066fe:	4603      	mov	r3, r0
 8006700:	4293      	cmp	r3, r2
 8006702:	d100      	bne.n	8006706 <memset+0xa>
 8006704:	4770      	bx	lr
 8006706:	f803 1b01 	strb.w	r1, [r3], #1
 800670a:	e7f9      	b.n	8006700 <memset+0x4>

0800670c <_close_r>:
 800670c:	b538      	push	{r3, r4, r5, lr}
 800670e:	4d06      	ldr	r5, [pc, #24]	; (8006728 <_close_r+0x1c>)
 8006710:	2300      	movs	r3, #0
 8006712:	4604      	mov	r4, r0
 8006714:	4608      	mov	r0, r1
 8006716:	602b      	str	r3, [r5, #0]
 8006718:	f7fa fa8b 	bl	8000c32 <_close>
 800671c:	1c43      	adds	r3, r0, #1
 800671e:	d102      	bne.n	8006726 <_close_r+0x1a>
 8006720:	682b      	ldr	r3, [r5, #0]
 8006722:	b103      	cbz	r3, 8006726 <_close_r+0x1a>
 8006724:	6023      	str	r3, [r4, #0]
 8006726:	bd38      	pop	{r3, r4, r5, pc}
 8006728:	20001388 	.word	0x20001388

0800672c <_reclaim_reent>:
 800672c:	4b29      	ldr	r3, [pc, #164]	; (80067d4 <_reclaim_reent+0xa8>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4283      	cmp	r3, r0
 8006732:	b570      	push	{r4, r5, r6, lr}
 8006734:	4604      	mov	r4, r0
 8006736:	d04b      	beq.n	80067d0 <_reclaim_reent+0xa4>
 8006738:	69c3      	ldr	r3, [r0, #28]
 800673a:	b143      	cbz	r3, 800674e <_reclaim_reent+0x22>
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d144      	bne.n	80067cc <_reclaim_reent+0xa0>
 8006742:	69e3      	ldr	r3, [r4, #28]
 8006744:	6819      	ldr	r1, [r3, #0]
 8006746:	b111      	cbz	r1, 800674e <_reclaim_reent+0x22>
 8006748:	4620      	mov	r0, r4
 800674a:	f000 f8a9 	bl	80068a0 <_free_r>
 800674e:	6961      	ldr	r1, [r4, #20]
 8006750:	b111      	cbz	r1, 8006758 <_reclaim_reent+0x2c>
 8006752:	4620      	mov	r0, r4
 8006754:	f000 f8a4 	bl	80068a0 <_free_r>
 8006758:	69e1      	ldr	r1, [r4, #28]
 800675a:	b111      	cbz	r1, 8006762 <_reclaim_reent+0x36>
 800675c:	4620      	mov	r0, r4
 800675e:	f000 f89f 	bl	80068a0 <_free_r>
 8006762:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006764:	b111      	cbz	r1, 800676c <_reclaim_reent+0x40>
 8006766:	4620      	mov	r0, r4
 8006768:	f000 f89a 	bl	80068a0 <_free_r>
 800676c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800676e:	b111      	cbz	r1, 8006776 <_reclaim_reent+0x4a>
 8006770:	4620      	mov	r0, r4
 8006772:	f000 f895 	bl	80068a0 <_free_r>
 8006776:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006778:	b111      	cbz	r1, 8006780 <_reclaim_reent+0x54>
 800677a:	4620      	mov	r0, r4
 800677c:	f000 f890 	bl	80068a0 <_free_r>
 8006780:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006782:	b111      	cbz	r1, 800678a <_reclaim_reent+0x5e>
 8006784:	4620      	mov	r0, r4
 8006786:	f000 f88b 	bl	80068a0 <_free_r>
 800678a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800678c:	b111      	cbz	r1, 8006794 <_reclaim_reent+0x68>
 800678e:	4620      	mov	r0, r4
 8006790:	f000 f886 	bl	80068a0 <_free_r>
 8006794:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006796:	b111      	cbz	r1, 800679e <_reclaim_reent+0x72>
 8006798:	4620      	mov	r0, r4
 800679a:	f000 f881 	bl	80068a0 <_free_r>
 800679e:	6a23      	ldr	r3, [r4, #32]
 80067a0:	b1b3      	cbz	r3, 80067d0 <_reclaim_reent+0xa4>
 80067a2:	4620      	mov	r0, r4
 80067a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80067a8:	4718      	bx	r3
 80067aa:	5949      	ldr	r1, [r1, r5]
 80067ac:	b941      	cbnz	r1, 80067c0 <_reclaim_reent+0x94>
 80067ae:	3504      	adds	r5, #4
 80067b0:	69e3      	ldr	r3, [r4, #28]
 80067b2:	2d80      	cmp	r5, #128	; 0x80
 80067b4:	68d9      	ldr	r1, [r3, #12]
 80067b6:	d1f8      	bne.n	80067aa <_reclaim_reent+0x7e>
 80067b8:	4620      	mov	r0, r4
 80067ba:	f000 f871 	bl	80068a0 <_free_r>
 80067be:	e7c0      	b.n	8006742 <_reclaim_reent+0x16>
 80067c0:	680e      	ldr	r6, [r1, #0]
 80067c2:	4620      	mov	r0, r4
 80067c4:	f000 f86c 	bl	80068a0 <_free_r>
 80067c8:	4631      	mov	r1, r6
 80067ca:	e7ef      	b.n	80067ac <_reclaim_reent+0x80>
 80067cc:	2500      	movs	r5, #0
 80067ce:	e7ef      	b.n	80067b0 <_reclaim_reent+0x84>
 80067d0:	bd70      	pop	{r4, r5, r6, pc}
 80067d2:	bf00      	nop
 80067d4:	20000068 	.word	0x20000068

080067d8 <_lseek_r>:
 80067d8:	b538      	push	{r3, r4, r5, lr}
 80067da:	4d07      	ldr	r5, [pc, #28]	; (80067f8 <_lseek_r+0x20>)
 80067dc:	4604      	mov	r4, r0
 80067de:	4608      	mov	r0, r1
 80067e0:	4611      	mov	r1, r2
 80067e2:	2200      	movs	r2, #0
 80067e4:	602a      	str	r2, [r5, #0]
 80067e6:	461a      	mov	r2, r3
 80067e8:	f7fa fa4a 	bl	8000c80 <_lseek>
 80067ec:	1c43      	adds	r3, r0, #1
 80067ee:	d102      	bne.n	80067f6 <_lseek_r+0x1e>
 80067f0:	682b      	ldr	r3, [r5, #0]
 80067f2:	b103      	cbz	r3, 80067f6 <_lseek_r+0x1e>
 80067f4:	6023      	str	r3, [r4, #0]
 80067f6:	bd38      	pop	{r3, r4, r5, pc}
 80067f8:	20001388 	.word	0x20001388

080067fc <_read_r>:
 80067fc:	b538      	push	{r3, r4, r5, lr}
 80067fe:	4d07      	ldr	r5, [pc, #28]	; (800681c <_read_r+0x20>)
 8006800:	4604      	mov	r4, r0
 8006802:	4608      	mov	r0, r1
 8006804:	4611      	mov	r1, r2
 8006806:	2200      	movs	r2, #0
 8006808:	602a      	str	r2, [r5, #0]
 800680a:	461a      	mov	r2, r3
 800680c:	f7fa f9f4 	bl	8000bf8 <_read>
 8006810:	1c43      	adds	r3, r0, #1
 8006812:	d102      	bne.n	800681a <_read_r+0x1e>
 8006814:	682b      	ldr	r3, [r5, #0]
 8006816:	b103      	cbz	r3, 800681a <_read_r+0x1e>
 8006818:	6023      	str	r3, [r4, #0]
 800681a:	bd38      	pop	{r3, r4, r5, pc}
 800681c:	20001388 	.word	0x20001388

08006820 <_write_r>:
 8006820:	b538      	push	{r3, r4, r5, lr}
 8006822:	4d07      	ldr	r5, [pc, #28]	; (8006840 <_write_r+0x20>)
 8006824:	4604      	mov	r4, r0
 8006826:	4608      	mov	r0, r1
 8006828:	4611      	mov	r1, r2
 800682a:	2200      	movs	r2, #0
 800682c:	602a      	str	r2, [r5, #0]
 800682e:	461a      	mov	r2, r3
 8006830:	f7f9 fd67 	bl	8000302 <_write>
 8006834:	1c43      	adds	r3, r0, #1
 8006836:	d102      	bne.n	800683e <_write_r+0x1e>
 8006838:	682b      	ldr	r3, [r5, #0]
 800683a:	b103      	cbz	r3, 800683e <_write_r+0x1e>
 800683c:	6023      	str	r3, [r4, #0]
 800683e:	bd38      	pop	{r3, r4, r5, pc}
 8006840:	20001388 	.word	0x20001388

08006844 <__errno>:
 8006844:	4b01      	ldr	r3, [pc, #4]	; (800684c <__errno+0x8>)
 8006846:	6818      	ldr	r0, [r3, #0]
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	20000068 	.word	0x20000068

08006850 <__libc_init_array>:
 8006850:	b570      	push	{r4, r5, r6, lr}
 8006852:	4d0d      	ldr	r5, [pc, #52]	; (8006888 <__libc_init_array+0x38>)
 8006854:	4c0d      	ldr	r4, [pc, #52]	; (800688c <__libc_init_array+0x3c>)
 8006856:	1b64      	subs	r4, r4, r5
 8006858:	10a4      	asrs	r4, r4, #2
 800685a:	2600      	movs	r6, #0
 800685c:	42a6      	cmp	r6, r4
 800685e:	d109      	bne.n	8006874 <__libc_init_array+0x24>
 8006860:	4d0b      	ldr	r5, [pc, #44]	; (8006890 <__libc_init_array+0x40>)
 8006862:	4c0c      	ldr	r4, [pc, #48]	; (8006894 <__libc_init_array+0x44>)
 8006864:	f000 fd2a 	bl	80072bc <_init>
 8006868:	1b64      	subs	r4, r4, r5
 800686a:	10a4      	asrs	r4, r4, #2
 800686c:	2600      	movs	r6, #0
 800686e:	42a6      	cmp	r6, r4
 8006870:	d105      	bne.n	800687e <__libc_init_array+0x2e>
 8006872:	bd70      	pop	{r4, r5, r6, pc}
 8006874:	f855 3b04 	ldr.w	r3, [r5], #4
 8006878:	4798      	blx	r3
 800687a:	3601      	adds	r6, #1
 800687c:	e7ee      	b.n	800685c <__libc_init_array+0xc>
 800687e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006882:	4798      	blx	r3
 8006884:	3601      	adds	r6, #1
 8006886:	e7f2      	b.n	800686e <__libc_init_array+0x1e>
 8006888:	080073f0 	.word	0x080073f0
 800688c:	080073f0 	.word	0x080073f0
 8006890:	080073f0 	.word	0x080073f0
 8006894:	080073f4 	.word	0x080073f4

08006898 <__retarget_lock_init_recursive>:
 8006898:	4770      	bx	lr

0800689a <__retarget_lock_acquire_recursive>:
 800689a:	4770      	bx	lr

0800689c <__retarget_lock_release_recursive>:
 800689c:	4770      	bx	lr
	...

080068a0 <_free_r>:
 80068a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068a2:	2900      	cmp	r1, #0
 80068a4:	d044      	beq.n	8006930 <_free_r+0x90>
 80068a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068aa:	9001      	str	r0, [sp, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f1a1 0404 	sub.w	r4, r1, #4
 80068b2:	bfb8      	it	lt
 80068b4:	18e4      	addlt	r4, r4, r3
 80068b6:	f000 f8df 	bl	8006a78 <__malloc_lock>
 80068ba:	4a1e      	ldr	r2, [pc, #120]	; (8006934 <_free_r+0x94>)
 80068bc:	9801      	ldr	r0, [sp, #4]
 80068be:	6813      	ldr	r3, [r2, #0]
 80068c0:	b933      	cbnz	r3, 80068d0 <_free_r+0x30>
 80068c2:	6063      	str	r3, [r4, #4]
 80068c4:	6014      	str	r4, [r2, #0]
 80068c6:	b003      	add	sp, #12
 80068c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068cc:	f000 b8da 	b.w	8006a84 <__malloc_unlock>
 80068d0:	42a3      	cmp	r3, r4
 80068d2:	d908      	bls.n	80068e6 <_free_r+0x46>
 80068d4:	6825      	ldr	r5, [r4, #0]
 80068d6:	1961      	adds	r1, r4, r5
 80068d8:	428b      	cmp	r3, r1
 80068da:	bf01      	itttt	eq
 80068dc:	6819      	ldreq	r1, [r3, #0]
 80068de:	685b      	ldreq	r3, [r3, #4]
 80068e0:	1949      	addeq	r1, r1, r5
 80068e2:	6021      	streq	r1, [r4, #0]
 80068e4:	e7ed      	b.n	80068c2 <_free_r+0x22>
 80068e6:	461a      	mov	r2, r3
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	b10b      	cbz	r3, 80068f0 <_free_r+0x50>
 80068ec:	42a3      	cmp	r3, r4
 80068ee:	d9fa      	bls.n	80068e6 <_free_r+0x46>
 80068f0:	6811      	ldr	r1, [r2, #0]
 80068f2:	1855      	adds	r5, r2, r1
 80068f4:	42a5      	cmp	r5, r4
 80068f6:	d10b      	bne.n	8006910 <_free_r+0x70>
 80068f8:	6824      	ldr	r4, [r4, #0]
 80068fa:	4421      	add	r1, r4
 80068fc:	1854      	adds	r4, r2, r1
 80068fe:	42a3      	cmp	r3, r4
 8006900:	6011      	str	r1, [r2, #0]
 8006902:	d1e0      	bne.n	80068c6 <_free_r+0x26>
 8006904:	681c      	ldr	r4, [r3, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	6053      	str	r3, [r2, #4]
 800690a:	440c      	add	r4, r1
 800690c:	6014      	str	r4, [r2, #0]
 800690e:	e7da      	b.n	80068c6 <_free_r+0x26>
 8006910:	d902      	bls.n	8006918 <_free_r+0x78>
 8006912:	230c      	movs	r3, #12
 8006914:	6003      	str	r3, [r0, #0]
 8006916:	e7d6      	b.n	80068c6 <_free_r+0x26>
 8006918:	6825      	ldr	r5, [r4, #0]
 800691a:	1961      	adds	r1, r4, r5
 800691c:	428b      	cmp	r3, r1
 800691e:	bf04      	itt	eq
 8006920:	6819      	ldreq	r1, [r3, #0]
 8006922:	685b      	ldreq	r3, [r3, #4]
 8006924:	6063      	str	r3, [r4, #4]
 8006926:	bf04      	itt	eq
 8006928:	1949      	addeq	r1, r1, r5
 800692a:	6021      	streq	r1, [r4, #0]
 800692c:	6054      	str	r4, [r2, #4]
 800692e:	e7ca      	b.n	80068c6 <_free_r+0x26>
 8006930:	b003      	add	sp, #12
 8006932:	bd30      	pop	{r4, r5, pc}
 8006934:	20001390 	.word	0x20001390

08006938 <sbrk_aligned>:
 8006938:	b570      	push	{r4, r5, r6, lr}
 800693a:	4e0e      	ldr	r6, [pc, #56]	; (8006974 <sbrk_aligned+0x3c>)
 800693c:	460c      	mov	r4, r1
 800693e:	6831      	ldr	r1, [r6, #0]
 8006940:	4605      	mov	r5, r0
 8006942:	b911      	cbnz	r1, 800694a <sbrk_aligned+0x12>
 8006944:	f000 fcaa 	bl	800729c <_sbrk_r>
 8006948:	6030      	str	r0, [r6, #0]
 800694a:	4621      	mov	r1, r4
 800694c:	4628      	mov	r0, r5
 800694e:	f000 fca5 	bl	800729c <_sbrk_r>
 8006952:	1c43      	adds	r3, r0, #1
 8006954:	d00a      	beq.n	800696c <sbrk_aligned+0x34>
 8006956:	1cc4      	adds	r4, r0, #3
 8006958:	f024 0403 	bic.w	r4, r4, #3
 800695c:	42a0      	cmp	r0, r4
 800695e:	d007      	beq.n	8006970 <sbrk_aligned+0x38>
 8006960:	1a21      	subs	r1, r4, r0
 8006962:	4628      	mov	r0, r5
 8006964:	f000 fc9a 	bl	800729c <_sbrk_r>
 8006968:	3001      	adds	r0, #1
 800696a:	d101      	bne.n	8006970 <sbrk_aligned+0x38>
 800696c:	f04f 34ff 	mov.w	r4, #4294967295
 8006970:	4620      	mov	r0, r4
 8006972:	bd70      	pop	{r4, r5, r6, pc}
 8006974:	20001394 	.word	0x20001394

08006978 <_malloc_r>:
 8006978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800697c:	1ccd      	adds	r5, r1, #3
 800697e:	f025 0503 	bic.w	r5, r5, #3
 8006982:	3508      	adds	r5, #8
 8006984:	2d0c      	cmp	r5, #12
 8006986:	bf38      	it	cc
 8006988:	250c      	movcc	r5, #12
 800698a:	2d00      	cmp	r5, #0
 800698c:	4607      	mov	r7, r0
 800698e:	db01      	blt.n	8006994 <_malloc_r+0x1c>
 8006990:	42a9      	cmp	r1, r5
 8006992:	d905      	bls.n	80069a0 <_malloc_r+0x28>
 8006994:	230c      	movs	r3, #12
 8006996:	603b      	str	r3, [r7, #0]
 8006998:	2600      	movs	r6, #0
 800699a:	4630      	mov	r0, r6
 800699c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006a74 <_malloc_r+0xfc>
 80069a4:	f000 f868 	bl	8006a78 <__malloc_lock>
 80069a8:	f8d8 3000 	ldr.w	r3, [r8]
 80069ac:	461c      	mov	r4, r3
 80069ae:	bb5c      	cbnz	r4, 8006a08 <_malloc_r+0x90>
 80069b0:	4629      	mov	r1, r5
 80069b2:	4638      	mov	r0, r7
 80069b4:	f7ff ffc0 	bl	8006938 <sbrk_aligned>
 80069b8:	1c43      	adds	r3, r0, #1
 80069ba:	4604      	mov	r4, r0
 80069bc:	d155      	bne.n	8006a6a <_malloc_r+0xf2>
 80069be:	f8d8 4000 	ldr.w	r4, [r8]
 80069c2:	4626      	mov	r6, r4
 80069c4:	2e00      	cmp	r6, #0
 80069c6:	d145      	bne.n	8006a54 <_malloc_r+0xdc>
 80069c8:	2c00      	cmp	r4, #0
 80069ca:	d048      	beq.n	8006a5e <_malloc_r+0xe6>
 80069cc:	6823      	ldr	r3, [r4, #0]
 80069ce:	4631      	mov	r1, r6
 80069d0:	4638      	mov	r0, r7
 80069d2:	eb04 0903 	add.w	r9, r4, r3
 80069d6:	f000 fc61 	bl	800729c <_sbrk_r>
 80069da:	4581      	cmp	r9, r0
 80069dc:	d13f      	bne.n	8006a5e <_malloc_r+0xe6>
 80069de:	6821      	ldr	r1, [r4, #0]
 80069e0:	1a6d      	subs	r5, r5, r1
 80069e2:	4629      	mov	r1, r5
 80069e4:	4638      	mov	r0, r7
 80069e6:	f7ff ffa7 	bl	8006938 <sbrk_aligned>
 80069ea:	3001      	adds	r0, #1
 80069ec:	d037      	beq.n	8006a5e <_malloc_r+0xe6>
 80069ee:	6823      	ldr	r3, [r4, #0]
 80069f0:	442b      	add	r3, r5
 80069f2:	6023      	str	r3, [r4, #0]
 80069f4:	f8d8 3000 	ldr.w	r3, [r8]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d038      	beq.n	8006a6e <_malloc_r+0xf6>
 80069fc:	685a      	ldr	r2, [r3, #4]
 80069fe:	42a2      	cmp	r2, r4
 8006a00:	d12b      	bne.n	8006a5a <_malloc_r+0xe2>
 8006a02:	2200      	movs	r2, #0
 8006a04:	605a      	str	r2, [r3, #4]
 8006a06:	e00f      	b.n	8006a28 <_malloc_r+0xb0>
 8006a08:	6822      	ldr	r2, [r4, #0]
 8006a0a:	1b52      	subs	r2, r2, r5
 8006a0c:	d41f      	bmi.n	8006a4e <_malloc_r+0xd6>
 8006a0e:	2a0b      	cmp	r2, #11
 8006a10:	d917      	bls.n	8006a42 <_malloc_r+0xca>
 8006a12:	1961      	adds	r1, r4, r5
 8006a14:	42a3      	cmp	r3, r4
 8006a16:	6025      	str	r5, [r4, #0]
 8006a18:	bf18      	it	ne
 8006a1a:	6059      	strne	r1, [r3, #4]
 8006a1c:	6863      	ldr	r3, [r4, #4]
 8006a1e:	bf08      	it	eq
 8006a20:	f8c8 1000 	streq.w	r1, [r8]
 8006a24:	5162      	str	r2, [r4, r5]
 8006a26:	604b      	str	r3, [r1, #4]
 8006a28:	4638      	mov	r0, r7
 8006a2a:	f104 060b 	add.w	r6, r4, #11
 8006a2e:	f000 f829 	bl	8006a84 <__malloc_unlock>
 8006a32:	f026 0607 	bic.w	r6, r6, #7
 8006a36:	1d23      	adds	r3, r4, #4
 8006a38:	1af2      	subs	r2, r6, r3
 8006a3a:	d0ae      	beq.n	800699a <_malloc_r+0x22>
 8006a3c:	1b9b      	subs	r3, r3, r6
 8006a3e:	50a3      	str	r3, [r4, r2]
 8006a40:	e7ab      	b.n	800699a <_malloc_r+0x22>
 8006a42:	42a3      	cmp	r3, r4
 8006a44:	6862      	ldr	r2, [r4, #4]
 8006a46:	d1dd      	bne.n	8006a04 <_malloc_r+0x8c>
 8006a48:	f8c8 2000 	str.w	r2, [r8]
 8006a4c:	e7ec      	b.n	8006a28 <_malloc_r+0xb0>
 8006a4e:	4623      	mov	r3, r4
 8006a50:	6864      	ldr	r4, [r4, #4]
 8006a52:	e7ac      	b.n	80069ae <_malloc_r+0x36>
 8006a54:	4634      	mov	r4, r6
 8006a56:	6876      	ldr	r6, [r6, #4]
 8006a58:	e7b4      	b.n	80069c4 <_malloc_r+0x4c>
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	e7cc      	b.n	80069f8 <_malloc_r+0x80>
 8006a5e:	230c      	movs	r3, #12
 8006a60:	603b      	str	r3, [r7, #0]
 8006a62:	4638      	mov	r0, r7
 8006a64:	f000 f80e 	bl	8006a84 <__malloc_unlock>
 8006a68:	e797      	b.n	800699a <_malloc_r+0x22>
 8006a6a:	6025      	str	r5, [r4, #0]
 8006a6c:	e7dc      	b.n	8006a28 <_malloc_r+0xb0>
 8006a6e:	605b      	str	r3, [r3, #4]
 8006a70:	deff      	udf	#255	; 0xff
 8006a72:	bf00      	nop
 8006a74:	20001390 	.word	0x20001390

08006a78 <__malloc_lock>:
 8006a78:	4801      	ldr	r0, [pc, #4]	; (8006a80 <__malloc_lock+0x8>)
 8006a7a:	f7ff bf0e 	b.w	800689a <__retarget_lock_acquire_recursive>
 8006a7e:	bf00      	nop
 8006a80:	2000138c 	.word	0x2000138c

08006a84 <__malloc_unlock>:
 8006a84:	4801      	ldr	r0, [pc, #4]	; (8006a8c <__malloc_unlock+0x8>)
 8006a86:	f7ff bf09 	b.w	800689c <__retarget_lock_release_recursive>
 8006a8a:	bf00      	nop
 8006a8c:	2000138c 	.word	0x2000138c

08006a90 <__sfputc_r>:
 8006a90:	6893      	ldr	r3, [r2, #8]
 8006a92:	3b01      	subs	r3, #1
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	b410      	push	{r4}
 8006a98:	6093      	str	r3, [r2, #8]
 8006a9a:	da08      	bge.n	8006aae <__sfputc_r+0x1e>
 8006a9c:	6994      	ldr	r4, [r2, #24]
 8006a9e:	42a3      	cmp	r3, r4
 8006aa0:	db01      	blt.n	8006aa6 <__sfputc_r+0x16>
 8006aa2:	290a      	cmp	r1, #10
 8006aa4:	d103      	bne.n	8006aae <__sfputc_r+0x1e>
 8006aa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006aaa:	f7ff bd92 	b.w	80065d2 <__swbuf_r>
 8006aae:	6813      	ldr	r3, [r2, #0]
 8006ab0:	1c58      	adds	r0, r3, #1
 8006ab2:	6010      	str	r0, [r2, #0]
 8006ab4:	7019      	strb	r1, [r3, #0]
 8006ab6:	4608      	mov	r0, r1
 8006ab8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <__sfputs_r>:
 8006abe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ac0:	4606      	mov	r6, r0
 8006ac2:	460f      	mov	r7, r1
 8006ac4:	4614      	mov	r4, r2
 8006ac6:	18d5      	adds	r5, r2, r3
 8006ac8:	42ac      	cmp	r4, r5
 8006aca:	d101      	bne.n	8006ad0 <__sfputs_r+0x12>
 8006acc:	2000      	movs	r0, #0
 8006ace:	e007      	b.n	8006ae0 <__sfputs_r+0x22>
 8006ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ad4:	463a      	mov	r2, r7
 8006ad6:	4630      	mov	r0, r6
 8006ad8:	f7ff ffda 	bl	8006a90 <__sfputc_r>
 8006adc:	1c43      	adds	r3, r0, #1
 8006ade:	d1f3      	bne.n	8006ac8 <__sfputs_r+0xa>
 8006ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ae4 <_vfiprintf_r>:
 8006ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae8:	460d      	mov	r5, r1
 8006aea:	b09d      	sub	sp, #116	; 0x74
 8006aec:	4614      	mov	r4, r2
 8006aee:	4698      	mov	r8, r3
 8006af0:	4606      	mov	r6, r0
 8006af2:	b118      	cbz	r0, 8006afc <_vfiprintf_r+0x18>
 8006af4:	6a03      	ldr	r3, [r0, #32]
 8006af6:	b90b      	cbnz	r3, 8006afc <_vfiprintf_r+0x18>
 8006af8:	f7ff fc84 	bl	8006404 <__sinit>
 8006afc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006afe:	07d9      	lsls	r1, r3, #31
 8006b00:	d405      	bmi.n	8006b0e <_vfiprintf_r+0x2a>
 8006b02:	89ab      	ldrh	r3, [r5, #12]
 8006b04:	059a      	lsls	r2, r3, #22
 8006b06:	d402      	bmi.n	8006b0e <_vfiprintf_r+0x2a>
 8006b08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b0a:	f7ff fec6 	bl	800689a <__retarget_lock_acquire_recursive>
 8006b0e:	89ab      	ldrh	r3, [r5, #12]
 8006b10:	071b      	lsls	r3, r3, #28
 8006b12:	d501      	bpl.n	8006b18 <_vfiprintf_r+0x34>
 8006b14:	692b      	ldr	r3, [r5, #16]
 8006b16:	b99b      	cbnz	r3, 8006b40 <_vfiprintf_r+0x5c>
 8006b18:	4629      	mov	r1, r5
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	f7ff fd96 	bl	800664c <__swsetup_r>
 8006b20:	b170      	cbz	r0, 8006b40 <_vfiprintf_r+0x5c>
 8006b22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b24:	07dc      	lsls	r4, r3, #31
 8006b26:	d504      	bpl.n	8006b32 <_vfiprintf_r+0x4e>
 8006b28:	f04f 30ff 	mov.w	r0, #4294967295
 8006b2c:	b01d      	add	sp, #116	; 0x74
 8006b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b32:	89ab      	ldrh	r3, [r5, #12]
 8006b34:	0598      	lsls	r0, r3, #22
 8006b36:	d4f7      	bmi.n	8006b28 <_vfiprintf_r+0x44>
 8006b38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b3a:	f7ff feaf 	bl	800689c <__retarget_lock_release_recursive>
 8006b3e:	e7f3      	b.n	8006b28 <_vfiprintf_r+0x44>
 8006b40:	2300      	movs	r3, #0
 8006b42:	9309      	str	r3, [sp, #36]	; 0x24
 8006b44:	2320      	movs	r3, #32
 8006b46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b4e:	2330      	movs	r3, #48	; 0x30
 8006b50:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006d04 <_vfiprintf_r+0x220>
 8006b54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b58:	f04f 0901 	mov.w	r9, #1
 8006b5c:	4623      	mov	r3, r4
 8006b5e:	469a      	mov	sl, r3
 8006b60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b64:	b10a      	cbz	r2, 8006b6a <_vfiprintf_r+0x86>
 8006b66:	2a25      	cmp	r2, #37	; 0x25
 8006b68:	d1f9      	bne.n	8006b5e <_vfiprintf_r+0x7a>
 8006b6a:	ebba 0b04 	subs.w	fp, sl, r4
 8006b6e:	d00b      	beq.n	8006b88 <_vfiprintf_r+0xa4>
 8006b70:	465b      	mov	r3, fp
 8006b72:	4622      	mov	r2, r4
 8006b74:	4629      	mov	r1, r5
 8006b76:	4630      	mov	r0, r6
 8006b78:	f7ff ffa1 	bl	8006abe <__sfputs_r>
 8006b7c:	3001      	adds	r0, #1
 8006b7e:	f000 80a9 	beq.w	8006cd4 <_vfiprintf_r+0x1f0>
 8006b82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b84:	445a      	add	r2, fp
 8006b86:	9209      	str	r2, [sp, #36]	; 0x24
 8006b88:	f89a 3000 	ldrb.w	r3, [sl]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f000 80a1 	beq.w	8006cd4 <_vfiprintf_r+0x1f0>
 8006b92:	2300      	movs	r3, #0
 8006b94:	f04f 32ff 	mov.w	r2, #4294967295
 8006b98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b9c:	f10a 0a01 	add.w	sl, sl, #1
 8006ba0:	9304      	str	r3, [sp, #16]
 8006ba2:	9307      	str	r3, [sp, #28]
 8006ba4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ba8:	931a      	str	r3, [sp, #104]	; 0x68
 8006baa:	4654      	mov	r4, sl
 8006bac:	2205      	movs	r2, #5
 8006bae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bb2:	4854      	ldr	r0, [pc, #336]	; (8006d04 <_vfiprintf_r+0x220>)
 8006bb4:	f7f9 fb14 	bl	80001e0 <memchr>
 8006bb8:	9a04      	ldr	r2, [sp, #16]
 8006bba:	b9d8      	cbnz	r0, 8006bf4 <_vfiprintf_r+0x110>
 8006bbc:	06d1      	lsls	r1, r2, #27
 8006bbe:	bf44      	itt	mi
 8006bc0:	2320      	movmi	r3, #32
 8006bc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bc6:	0713      	lsls	r3, r2, #28
 8006bc8:	bf44      	itt	mi
 8006bca:	232b      	movmi	r3, #43	; 0x2b
 8006bcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bd0:	f89a 3000 	ldrb.w	r3, [sl]
 8006bd4:	2b2a      	cmp	r3, #42	; 0x2a
 8006bd6:	d015      	beq.n	8006c04 <_vfiprintf_r+0x120>
 8006bd8:	9a07      	ldr	r2, [sp, #28]
 8006bda:	4654      	mov	r4, sl
 8006bdc:	2000      	movs	r0, #0
 8006bde:	f04f 0c0a 	mov.w	ip, #10
 8006be2:	4621      	mov	r1, r4
 8006be4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006be8:	3b30      	subs	r3, #48	; 0x30
 8006bea:	2b09      	cmp	r3, #9
 8006bec:	d94d      	bls.n	8006c8a <_vfiprintf_r+0x1a6>
 8006bee:	b1b0      	cbz	r0, 8006c1e <_vfiprintf_r+0x13a>
 8006bf0:	9207      	str	r2, [sp, #28]
 8006bf2:	e014      	b.n	8006c1e <_vfiprintf_r+0x13a>
 8006bf4:	eba0 0308 	sub.w	r3, r0, r8
 8006bf8:	fa09 f303 	lsl.w	r3, r9, r3
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	9304      	str	r3, [sp, #16]
 8006c00:	46a2      	mov	sl, r4
 8006c02:	e7d2      	b.n	8006baa <_vfiprintf_r+0xc6>
 8006c04:	9b03      	ldr	r3, [sp, #12]
 8006c06:	1d19      	adds	r1, r3, #4
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	9103      	str	r1, [sp, #12]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	bfbb      	ittet	lt
 8006c10:	425b      	neglt	r3, r3
 8006c12:	f042 0202 	orrlt.w	r2, r2, #2
 8006c16:	9307      	strge	r3, [sp, #28]
 8006c18:	9307      	strlt	r3, [sp, #28]
 8006c1a:	bfb8      	it	lt
 8006c1c:	9204      	strlt	r2, [sp, #16]
 8006c1e:	7823      	ldrb	r3, [r4, #0]
 8006c20:	2b2e      	cmp	r3, #46	; 0x2e
 8006c22:	d10c      	bne.n	8006c3e <_vfiprintf_r+0x15a>
 8006c24:	7863      	ldrb	r3, [r4, #1]
 8006c26:	2b2a      	cmp	r3, #42	; 0x2a
 8006c28:	d134      	bne.n	8006c94 <_vfiprintf_r+0x1b0>
 8006c2a:	9b03      	ldr	r3, [sp, #12]
 8006c2c:	1d1a      	adds	r2, r3, #4
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	9203      	str	r2, [sp, #12]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	bfb8      	it	lt
 8006c36:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c3a:	3402      	adds	r4, #2
 8006c3c:	9305      	str	r3, [sp, #20]
 8006c3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006d14 <_vfiprintf_r+0x230>
 8006c42:	7821      	ldrb	r1, [r4, #0]
 8006c44:	2203      	movs	r2, #3
 8006c46:	4650      	mov	r0, sl
 8006c48:	f7f9 faca 	bl	80001e0 <memchr>
 8006c4c:	b138      	cbz	r0, 8006c5e <_vfiprintf_r+0x17a>
 8006c4e:	9b04      	ldr	r3, [sp, #16]
 8006c50:	eba0 000a 	sub.w	r0, r0, sl
 8006c54:	2240      	movs	r2, #64	; 0x40
 8006c56:	4082      	lsls	r2, r0
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	3401      	adds	r4, #1
 8006c5c:	9304      	str	r3, [sp, #16]
 8006c5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c62:	4829      	ldr	r0, [pc, #164]	; (8006d08 <_vfiprintf_r+0x224>)
 8006c64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c68:	2206      	movs	r2, #6
 8006c6a:	f7f9 fab9 	bl	80001e0 <memchr>
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	d03f      	beq.n	8006cf2 <_vfiprintf_r+0x20e>
 8006c72:	4b26      	ldr	r3, [pc, #152]	; (8006d0c <_vfiprintf_r+0x228>)
 8006c74:	bb1b      	cbnz	r3, 8006cbe <_vfiprintf_r+0x1da>
 8006c76:	9b03      	ldr	r3, [sp, #12]
 8006c78:	3307      	adds	r3, #7
 8006c7a:	f023 0307 	bic.w	r3, r3, #7
 8006c7e:	3308      	adds	r3, #8
 8006c80:	9303      	str	r3, [sp, #12]
 8006c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c84:	443b      	add	r3, r7
 8006c86:	9309      	str	r3, [sp, #36]	; 0x24
 8006c88:	e768      	b.n	8006b5c <_vfiprintf_r+0x78>
 8006c8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c8e:	460c      	mov	r4, r1
 8006c90:	2001      	movs	r0, #1
 8006c92:	e7a6      	b.n	8006be2 <_vfiprintf_r+0xfe>
 8006c94:	2300      	movs	r3, #0
 8006c96:	3401      	adds	r4, #1
 8006c98:	9305      	str	r3, [sp, #20]
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	f04f 0c0a 	mov.w	ip, #10
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ca6:	3a30      	subs	r2, #48	; 0x30
 8006ca8:	2a09      	cmp	r2, #9
 8006caa:	d903      	bls.n	8006cb4 <_vfiprintf_r+0x1d0>
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d0c6      	beq.n	8006c3e <_vfiprintf_r+0x15a>
 8006cb0:	9105      	str	r1, [sp, #20]
 8006cb2:	e7c4      	b.n	8006c3e <_vfiprintf_r+0x15a>
 8006cb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cb8:	4604      	mov	r4, r0
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e7f0      	b.n	8006ca0 <_vfiprintf_r+0x1bc>
 8006cbe:	ab03      	add	r3, sp, #12
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	462a      	mov	r2, r5
 8006cc4:	4b12      	ldr	r3, [pc, #72]	; (8006d10 <_vfiprintf_r+0x22c>)
 8006cc6:	a904      	add	r1, sp, #16
 8006cc8:	4630      	mov	r0, r6
 8006cca:	f3af 8000 	nop.w
 8006cce:	4607      	mov	r7, r0
 8006cd0:	1c78      	adds	r0, r7, #1
 8006cd2:	d1d6      	bne.n	8006c82 <_vfiprintf_r+0x19e>
 8006cd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006cd6:	07d9      	lsls	r1, r3, #31
 8006cd8:	d405      	bmi.n	8006ce6 <_vfiprintf_r+0x202>
 8006cda:	89ab      	ldrh	r3, [r5, #12]
 8006cdc:	059a      	lsls	r2, r3, #22
 8006cde:	d402      	bmi.n	8006ce6 <_vfiprintf_r+0x202>
 8006ce0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ce2:	f7ff fddb 	bl	800689c <__retarget_lock_release_recursive>
 8006ce6:	89ab      	ldrh	r3, [r5, #12]
 8006ce8:	065b      	lsls	r3, r3, #25
 8006cea:	f53f af1d 	bmi.w	8006b28 <_vfiprintf_r+0x44>
 8006cee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cf0:	e71c      	b.n	8006b2c <_vfiprintf_r+0x48>
 8006cf2:	ab03      	add	r3, sp, #12
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	462a      	mov	r2, r5
 8006cf8:	4b05      	ldr	r3, [pc, #20]	; (8006d10 <_vfiprintf_r+0x22c>)
 8006cfa:	a904      	add	r1, sp, #16
 8006cfc:	4630      	mov	r0, r6
 8006cfe:	f000 f879 	bl	8006df4 <_printf_i>
 8006d02:	e7e4      	b.n	8006cce <_vfiprintf_r+0x1ea>
 8006d04:	080073bc 	.word	0x080073bc
 8006d08:	080073c6 	.word	0x080073c6
 8006d0c:	00000000 	.word	0x00000000
 8006d10:	08006abf 	.word	0x08006abf
 8006d14:	080073c2 	.word	0x080073c2

08006d18 <_printf_common>:
 8006d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d1c:	4616      	mov	r6, r2
 8006d1e:	4699      	mov	r9, r3
 8006d20:	688a      	ldr	r2, [r1, #8]
 8006d22:	690b      	ldr	r3, [r1, #16]
 8006d24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	bfb8      	it	lt
 8006d2c:	4613      	movlt	r3, r2
 8006d2e:	6033      	str	r3, [r6, #0]
 8006d30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d34:	4607      	mov	r7, r0
 8006d36:	460c      	mov	r4, r1
 8006d38:	b10a      	cbz	r2, 8006d3e <_printf_common+0x26>
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	6033      	str	r3, [r6, #0]
 8006d3e:	6823      	ldr	r3, [r4, #0]
 8006d40:	0699      	lsls	r1, r3, #26
 8006d42:	bf42      	ittt	mi
 8006d44:	6833      	ldrmi	r3, [r6, #0]
 8006d46:	3302      	addmi	r3, #2
 8006d48:	6033      	strmi	r3, [r6, #0]
 8006d4a:	6825      	ldr	r5, [r4, #0]
 8006d4c:	f015 0506 	ands.w	r5, r5, #6
 8006d50:	d106      	bne.n	8006d60 <_printf_common+0x48>
 8006d52:	f104 0a19 	add.w	sl, r4, #25
 8006d56:	68e3      	ldr	r3, [r4, #12]
 8006d58:	6832      	ldr	r2, [r6, #0]
 8006d5a:	1a9b      	subs	r3, r3, r2
 8006d5c:	42ab      	cmp	r3, r5
 8006d5e:	dc26      	bgt.n	8006dae <_printf_common+0x96>
 8006d60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d64:	1e13      	subs	r3, r2, #0
 8006d66:	6822      	ldr	r2, [r4, #0]
 8006d68:	bf18      	it	ne
 8006d6a:	2301      	movne	r3, #1
 8006d6c:	0692      	lsls	r2, r2, #26
 8006d6e:	d42b      	bmi.n	8006dc8 <_printf_common+0xb0>
 8006d70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d74:	4649      	mov	r1, r9
 8006d76:	4638      	mov	r0, r7
 8006d78:	47c0      	blx	r8
 8006d7a:	3001      	adds	r0, #1
 8006d7c:	d01e      	beq.n	8006dbc <_printf_common+0xa4>
 8006d7e:	6823      	ldr	r3, [r4, #0]
 8006d80:	6922      	ldr	r2, [r4, #16]
 8006d82:	f003 0306 	and.w	r3, r3, #6
 8006d86:	2b04      	cmp	r3, #4
 8006d88:	bf02      	ittt	eq
 8006d8a:	68e5      	ldreq	r5, [r4, #12]
 8006d8c:	6833      	ldreq	r3, [r6, #0]
 8006d8e:	1aed      	subeq	r5, r5, r3
 8006d90:	68a3      	ldr	r3, [r4, #8]
 8006d92:	bf0c      	ite	eq
 8006d94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d98:	2500      	movne	r5, #0
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	bfc4      	itt	gt
 8006d9e:	1a9b      	subgt	r3, r3, r2
 8006da0:	18ed      	addgt	r5, r5, r3
 8006da2:	2600      	movs	r6, #0
 8006da4:	341a      	adds	r4, #26
 8006da6:	42b5      	cmp	r5, r6
 8006da8:	d11a      	bne.n	8006de0 <_printf_common+0xc8>
 8006daa:	2000      	movs	r0, #0
 8006dac:	e008      	b.n	8006dc0 <_printf_common+0xa8>
 8006dae:	2301      	movs	r3, #1
 8006db0:	4652      	mov	r2, sl
 8006db2:	4649      	mov	r1, r9
 8006db4:	4638      	mov	r0, r7
 8006db6:	47c0      	blx	r8
 8006db8:	3001      	adds	r0, #1
 8006dba:	d103      	bne.n	8006dc4 <_printf_common+0xac>
 8006dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dc4:	3501      	adds	r5, #1
 8006dc6:	e7c6      	b.n	8006d56 <_printf_common+0x3e>
 8006dc8:	18e1      	adds	r1, r4, r3
 8006dca:	1c5a      	adds	r2, r3, #1
 8006dcc:	2030      	movs	r0, #48	; 0x30
 8006dce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006dd2:	4422      	add	r2, r4
 8006dd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006dd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ddc:	3302      	adds	r3, #2
 8006dde:	e7c7      	b.n	8006d70 <_printf_common+0x58>
 8006de0:	2301      	movs	r3, #1
 8006de2:	4622      	mov	r2, r4
 8006de4:	4649      	mov	r1, r9
 8006de6:	4638      	mov	r0, r7
 8006de8:	47c0      	blx	r8
 8006dea:	3001      	adds	r0, #1
 8006dec:	d0e6      	beq.n	8006dbc <_printf_common+0xa4>
 8006dee:	3601      	adds	r6, #1
 8006df0:	e7d9      	b.n	8006da6 <_printf_common+0x8e>
	...

08006df4 <_printf_i>:
 8006df4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006df8:	7e0f      	ldrb	r7, [r1, #24]
 8006dfa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006dfc:	2f78      	cmp	r7, #120	; 0x78
 8006dfe:	4691      	mov	r9, r2
 8006e00:	4680      	mov	r8, r0
 8006e02:	460c      	mov	r4, r1
 8006e04:	469a      	mov	sl, r3
 8006e06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e0a:	d807      	bhi.n	8006e1c <_printf_i+0x28>
 8006e0c:	2f62      	cmp	r7, #98	; 0x62
 8006e0e:	d80a      	bhi.n	8006e26 <_printf_i+0x32>
 8006e10:	2f00      	cmp	r7, #0
 8006e12:	f000 80d4 	beq.w	8006fbe <_printf_i+0x1ca>
 8006e16:	2f58      	cmp	r7, #88	; 0x58
 8006e18:	f000 80c0 	beq.w	8006f9c <_printf_i+0x1a8>
 8006e1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e24:	e03a      	b.n	8006e9c <_printf_i+0xa8>
 8006e26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e2a:	2b15      	cmp	r3, #21
 8006e2c:	d8f6      	bhi.n	8006e1c <_printf_i+0x28>
 8006e2e:	a101      	add	r1, pc, #4	; (adr r1, 8006e34 <_printf_i+0x40>)
 8006e30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e34:	08006e8d 	.word	0x08006e8d
 8006e38:	08006ea1 	.word	0x08006ea1
 8006e3c:	08006e1d 	.word	0x08006e1d
 8006e40:	08006e1d 	.word	0x08006e1d
 8006e44:	08006e1d 	.word	0x08006e1d
 8006e48:	08006e1d 	.word	0x08006e1d
 8006e4c:	08006ea1 	.word	0x08006ea1
 8006e50:	08006e1d 	.word	0x08006e1d
 8006e54:	08006e1d 	.word	0x08006e1d
 8006e58:	08006e1d 	.word	0x08006e1d
 8006e5c:	08006e1d 	.word	0x08006e1d
 8006e60:	08006fa5 	.word	0x08006fa5
 8006e64:	08006ecd 	.word	0x08006ecd
 8006e68:	08006f5f 	.word	0x08006f5f
 8006e6c:	08006e1d 	.word	0x08006e1d
 8006e70:	08006e1d 	.word	0x08006e1d
 8006e74:	08006fc7 	.word	0x08006fc7
 8006e78:	08006e1d 	.word	0x08006e1d
 8006e7c:	08006ecd 	.word	0x08006ecd
 8006e80:	08006e1d 	.word	0x08006e1d
 8006e84:	08006e1d 	.word	0x08006e1d
 8006e88:	08006f67 	.word	0x08006f67
 8006e8c:	682b      	ldr	r3, [r5, #0]
 8006e8e:	1d1a      	adds	r2, r3, #4
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	602a      	str	r2, [r5, #0]
 8006e94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e09f      	b.n	8006fe0 <_printf_i+0x1ec>
 8006ea0:	6820      	ldr	r0, [r4, #0]
 8006ea2:	682b      	ldr	r3, [r5, #0]
 8006ea4:	0607      	lsls	r7, r0, #24
 8006ea6:	f103 0104 	add.w	r1, r3, #4
 8006eaa:	6029      	str	r1, [r5, #0]
 8006eac:	d501      	bpl.n	8006eb2 <_printf_i+0xbe>
 8006eae:	681e      	ldr	r6, [r3, #0]
 8006eb0:	e003      	b.n	8006eba <_printf_i+0xc6>
 8006eb2:	0646      	lsls	r6, r0, #25
 8006eb4:	d5fb      	bpl.n	8006eae <_printf_i+0xba>
 8006eb6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006eba:	2e00      	cmp	r6, #0
 8006ebc:	da03      	bge.n	8006ec6 <_printf_i+0xd2>
 8006ebe:	232d      	movs	r3, #45	; 0x2d
 8006ec0:	4276      	negs	r6, r6
 8006ec2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ec6:	485a      	ldr	r0, [pc, #360]	; (8007030 <_printf_i+0x23c>)
 8006ec8:	230a      	movs	r3, #10
 8006eca:	e012      	b.n	8006ef2 <_printf_i+0xfe>
 8006ecc:	682b      	ldr	r3, [r5, #0]
 8006ece:	6820      	ldr	r0, [r4, #0]
 8006ed0:	1d19      	adds	r1, r3, #4
 8006ed2:	6029      	str	r1, [r5, #0]
 8006ed4:	0605      	lsls	r5, r0, #24
 8006ed6:	d501      	bpl.n	8006edc <_printf_i+0xe8>
 8006ed8:	681e      	ldr	r6, [r3, #0]
 8006eda:	e002      	b.n	8006ee2 <_printf_i+0xee>
 8006edc:	0641      	lsls	r1, r0, #25
 8006ede:	d5fb      	bpl.n	8006ed8 <_printf_i+0xe4>
 8006ee0:	881e      	ldrh	r6, [r3, #0]
 8006ee2:	4853      	ldr	r0, [pc, #332]	; (8007030 <_printf_i+0x23c>)
 8006ee4:	2f6f      	cmp	r7, #111	; 0x6f
 8006ee6:	bf0c      	ite	eq
 8006ee8:	2308      	moveq	r3, #8
 8006eea:	230a      	movne	r3, #10
 8006eec:	2100      	movs	r1, #0
 8006eee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ef2:	6865      	ldr	r5, [r4, #4]
 8006ef4:	60a5      	str	r5, [r4, #8]
 8006ef6:	2d00      	cmp	r5, #0
 8006ef8:	bfa2      	ittt	ge
 8006efa:	6821      	ldrge	r1, [r4, #0]
 8006efc:	f021 0104 	bicge.w	r1, r1, #4
 8006f00:	6021      	strge	r1, [r4, #0]
 8006f02:	b90e      	cbnz	r6, 8006f08 <_printf_i+0x114>
 8006f04:	2d00      	cmp	r5, #0
 8006f06:	d04b      	beq.n	8006fa0 <_printf_i+0x1ac>
 8006f08:	4615      	mov	r5, r2
 8006f0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f0e:	fb03 6711 	mls	r7, r3, r1, r6
 8006f12:	5dc7      	ldrb	r7, [r0, r7]
 8006f14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f18:	4637      	mov	r7, r6
 8006f1a:	42bb      	cmp	r3, r7
 8006f1c:	460e      	mov	r6, r1
 8006f1e:	d9f4      	bls.n	8006f0a <_printf_i+0x116>
 8006f20:	2b08      	cmp	r3, #8
 8006f22:	d10b      	bne.n	8006f3c <_printf_i+0x148>
 8006f24:	6823      	ldr	r3, [r4, #0]
 8006f26:	07de      	lsls	r6, r3, #31
 8006f28:	d508      	bpl.n	8006f3c <_printf_i+0x148>
 8006f2a:	6923      	ldr	r3, [r4, #16]
 8006f2c:	6861      	ldr	r1, [r4, #4]
 8006f2e:	4299      	cmp	r1, r3
 8006f30:	bfde      	ittt	le
 8006f32:	2330      	movle	r3, #48	; 0x30
 8006f34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f3c:	1b52      	subs	r2, r2, r5
 8006f3e:	6122      	str	r2, [r4, #16]
 8006f40:	f8cd a000 	str.w	sl, [sp]
 8006f44:	464b      	mov	r3, r9
 8006f46:	aa03      	add	r2, sp, #12
 8006f48:	4621      	mov	r1, r4
 8006f4a:	4640      	mov	r0, r8
 8006f4c:	f7ff fee4 	bl	8006d18 <_printf_common>
 8006f50:	3001      	adds	r0, #1
 8006f52:	d14a      	bne.n	8006fea <_printf_i+0x1f6>
 8006f54:	f04f 30ff 	mov.w	r0, #4294967295
 8006f58:	b004      	add	sp, #16
 8006f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f5e:	6823      	ldr	r3, [r4, #0]
 8006f60:	f043 0320 	orr.w	r3, r3, #32
 8006f64:	6023      	str	r3, [r4, #0]
 8006f66:	4833      	ldr	r0, [pc, #204]	; (8007034 <_printf_i+0x240>)
 8006f68:	2778      	movs	r7, #120	; 0x78
 8006f6a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f6e:	6823      	ldr	r3, [r4, #0]
 8006f70:	6829      	ldr	r1, [r5, #0]
 8006f72:	061f      	lsls	r7, r3, #24
 8006f74:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f78:	d402      	bmi.n	8006f80 <_printf_i+0x18c>
 8006f7a:	065f      	lsls	r7, r3, #25
 8006f7c:	bf48      	it	mi
 8006f7e:	b2b6      	uxthmi	r6, r6
 8006f80:	07df      	lsls	r7, r3, #31
 8006f82:	bf48      	it	mi
 8006f84:	f043 0320 	orrmi.w	r3, r3, #32
 8006f88:	6029      	str	r1, [r5, #0]
 8006f8a:	bf48      	it	mi
 8006f8c:	6023      	strmi	r3, [r4, #0]
 8006f8e:	b91e      	cbnz	r6, 8006f98 <_printf_i+0x1a4>
 8006f90:	6823      	ldr	r3, [r4, #0]
 8006f92:	f023 0320 	bic.w	r3, r3, #32
 8006f96:	6023      	str	r3, [r4, #0]
 8006f98:	2310      	movs	r3, #16
 8006f9a:	e7a7      	b.n	8006eec <_printf_i+0xf8>
 8006f9c:	4824      	ldr	r0, [pc, #144]	; (8007030 <_printf_i+0x23c>)
 8006f9e:	e7e4      	b.n	8006f6a <_printf_i+0x176>
 8006fa0:	4615      	mov	r5, r2
 8006fa2:	e7bd      	b.n	8006f20 <_printf_i+0x12c>
 8006fa4:	682b      	ldr	r3, [r5, #0]
 8006fa6:	6826      	ldr	r6, [r4, #0]
 8006fa8:	6961      	ldr	r1, [r4, #20]
 8006faa:	1d18      	adds	r0, r3, #4
 8006fac:	6028      	str	r0, [r5, #0]
 8006fae:	0635      	lsls	r5, r6, #24
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	d501      	bpl.n	8006fb8 <_printf_i+0x1c4>
 8006fb4:	6019      	str	r1, [r3, #0]
 8006fb6:	e002      	b.n	8006fbe <_printf_i+0x1ca>
 8006fb8:	0670      	lsls	r0, r6, #25
 8006fba:	d5fb      	bpl.n	8006fb4 <_printf_i+0x1c0>
 8006fbc:	8019      	strh	r1, [r3, #0]
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	6123      	str	r3, [r4, #16]
 8006fc2:	4615      	mov	r5, r2
 8006fc4:	e7bc      	b.n	8006f40 <_printf_i+0x14c>
 8006fc6:	682b      	ldr	r3, [r5, #0]
 8006fc8:	1d1a      	adds	r2, r3, #4
 8006fca:	602a      	str	r2, [r5, #0]
 8006fcc:	681d      	ldr	r5, [r3, #0]
 8006fce:	6862      	ldr	r2, [r4, #4]
 8006fd0:	2100      	movs	r1, #0
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	f7f9 f904 	bl	80001e0 <memchr>
 8006fd8:	b108      	cbz	r0, 8006fde <_printf_i+0x1ea>
 8006fda:	1b40      	subs	r0, r0, r5
 8006fdc:	6060      	str	r0, [r4, #4]
 8006fde:	6863      	ldr	r3, [r4, #4]
 8006fe0:	6123      	str	r3, [r4, #16]
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fe8:	e7aa      	b.n	8006f40 <_printf_i+0x14c>
 8006fea:	6923      	ldr	r3, [r4, #16]
 8006fec:	462a      	mov	r2, r5
 8006fee:	4649      	mov	r1, r9
 8006ff0:	4640      	mov	r0, r8
 8006ff2:	47d0      	blx	sl
 8006ff4:	3001      	adds	r0, #1
 8006ff6:	d0ad      	beq.n	8006f54 <_printf_i+0x160>
 8006ff8:	6823      	ldr	r3, [r4, #0]
 8006ffa:	079b      	lsls	r3, r3, #30
 8006ffc:	d413      	bmi.n	8007026 <_printf_i+0x232>
 8006ffe:	68e0      	ldr	r0, [r4, #12]
 8007000:	9b03      	ldr	r3, [sp, #12]
 8007002:	4298      	cmp	r0, r3
 8007004:	bfb8      	it	lt
 8007006:	4618      	movlt	r0, r3
 8007008:	e7a6      	b.n	8006f58 <_printf_i+0x164>
 800700a:	2301      	movs	r3, #1
 800700c:	4632      	mov	r2, r6
 800700e:	4649      	mov	r1, r9
 8007010:	4640      	mov	r0, r8
 8007012:	47d0      	blx	sl
 8007014:	3001      	adds	r0, #1
 8007016:	d09d      	beq.n	8006f54 <_printf_i+0x160>
 8007018:	3501      	adds	r5, #1
 800701a:	68e3      	ldr	r3, [r4, #12]
 800701c:	9903      	ldr	r1, [sp, #12]
 800701e:	1a5b      	subs	r3, r3, r1
 8007020:	42ab      	cmp	r3, r5
 8007022:	dcf2      	bgt.n	800700a <_printf_i+0x216>
 8007024:	e7eb      	b.n	8006ffe <_printf_i+0x20a>
 8007026:	2500      	movs	r5, #0
 8007028:	f104 0619 	add.w	r6, r4, #25
 800702c:	e7f5      	b.n	800701a <_printf_i+0x226>
 800702e:	bf00      	nop
 8007030:	080073cd 	.word	0x080073cd
 8007034:	080073de 	.word	0x080073de

08007038 <__sflush_r>:
 8007038:	898a      	ldrh	r2, [r1, #12]
 800703a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800703e:	4605      	mov	r5, r0
 8007040:	0710      	lsls	r0, r2, #28
 8007042:	460c      	mov	r4, r1
 8007044:	d458      	bmi.n	80070f8 <__sflush_r+0xc0>
 8007046:	684b      	ldr	r3, [r1, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	dc05      	bgt.n	8007058 <__sflush_r+0x20>
 800704c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800704e:	2b00      	cmp	r3, #0
 8007050:	dc02      	bgt.n	8007058 <__sflush_r+0x20>
 8007052:	2000      	movs	r0, #0
 8007054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007058:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800705a:	2e00      	cmp	r6, #0
 800705c:	d0f9      	beq.n	8007052 <__sflush_r+0x1a>
 800705e:	2300      	movs	r3, #0
 8007060:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007064:	682f      	ldr	r7, [r5, #0]
 8007066:	6a21      	ldr	r1, [r4, #32]
 8007068:	602b      	str	r3, [r5, #0]
 800706a:	d032      	beq.n	80070d2 <__sflush_r+0x9a>
 800706c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800706e:	89a3      	ldrh	r3, [r4, #12]
 8007070:	075a      	lsls	r2, r3, #29
 8007072:	d505      	bpl.n	8007080 <__sflush_r+0x48>
 8007074:	6863      	ldr	r3, [r4, #4]
 8007076:	1ac0      	subs	r0, r0, r3
 8007078:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800707a:	b10b      	cbz	r3, 8007080 <__sflush_r+0x48>
 800707c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800707e:	1ac0      	subs	r0, r0, r3
 8007080:	2300      	movs	r3, #0
 8007082:	4602      	mov	r2, r0
 8007084:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007086:	6a21      	ldr	r1, [r4, #32]
 8007088:	4628      	mov	r0, r5
 800708a:	47b0      	blx	r6
 800708c:	1c43      	adds	r3, r0, #1
 800708e:	89a3      	ldrh	r3, [r4, #12]
 8007090:	d106      	bne.n	80070a0 <__sflush_r+0x68>
 8007092:	6829      	ldr	r1, [r5, #0]
 8007094:	291d      	cmp	r1, #29
 8007096:	d82b      	bhi.n	80070f0 <__sflush_r+0xb8>
 8007098:	4a29      	ldr	r2, [pc, #164]	; (8007140 <__sflush_r+0x108>)
 800709a:	410a      	asrs	r2, r1
 800709c:	07d6      	lsls	r6, r2, #31
 800709e:	d427      	bmi.n	80070f0 <__sflush_r+0xb8>
 80070a0:	2200      	movs	r2, #0
 80070a2:	6062      	str	r2, [r4, #4]
 80070a4:	04d9      	lsls	r1, r3, #19
 80070a6:	6922      	ldr	r2, [r4, #16]
 80070a8:	6022      	str	r2, [r4, #0]
 80070aa:	d504      	bpl.n	80070b6 <__sflush_r+0x7e>
 80070ac:	1c42      	adds	r2, r0, #1
 80070ae:	d101      	bne.n	80070b4 <__sflush_r+0x7c>
 80070b0:	682b      	ldr	r3, [r5, #0]
 80070b2:	b903      	cbnz	r3, 80070b6 <__sflush_r+0x7e>
 80070b4:	6560      	str	r0, [r4, #84]	; 0x54
 80070b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070b8:	602f      	str	r7, [r5, #0]
 80070ba:	2900      	cmp	r1, #0
 80070bc:	d0c9      	beq.n	8007052 <__sflush_r+0x1a>
 80070be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070c2:	4299      	cmp	r1, r3
 80070c4:	d002      	beq.n	80070cc <__sflush_r+0x94>
 80070c6:	4628      	mov	r0, r5
 80070c8:	f7ff fbea 	bl	80068a0 <_free_r>
 80070cc:	2000      	movs	r0, #0
 80070ce:	6360      	str	r0, [r4, #52]	; 0x34
 80070d0:	e7c0      	b.n	8007054 <__sflush_r+0x1c>
 80070d2:	2301      	movs	r3, #1
 80070d4:	4628      	mov	r0, r5
 80070d6:	47b0      	blx	r6
 80070d8:	1c41      	adds	r1, r0, #1
 80070da:	d1c8      	bne.n	800706e <__sflush_r+0x36>
 80070dc:	682b      	ldr	r3, [r5, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d0c5      	beq.n	800706e <__sflush_r+0x36>
 80070e2:	2b1d      	cmp	r3, #29
 80070e4:	d001      	beq.n	80070ea <__sflush_r+0xb2>
 80070e6:	2b16      	cmp	r3, #22
 80070e8:	d101      	bne.n	80070ee <__sflush_r+0xb6>
 80070ea:	602f      	str	r7, [r5, #0]
 80070ec:	e7b1      	b.n	8007052 <__sflush_r+0x1a>
 80070ee:	89a3      	ldrh	r3, [r4, #12]
 80070f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070f4:	81a3      	strh	r3, [r4, #12]
 80070f6:	e7ad      	b.n	8007054 <__sflush_r+0x1c>
 80070f8:	690f      	ldr	r7, [r1, #16]
 80070fa:	2f00      	cmp	r7, #0
 80070fc:	d0a9      	beq.n	8007052 <__sflush_r+0x1a>
 80070fe:	0793      	lsls	r3, r2, #30
 8007100:	680e      	ldr	r6, [r1, #0]
 8007102:	bf08      	it	eq
 8007104:	694b      	ldreq	r3, [r1, #20]
 8007106:	600f      	str	r7, [r1, #0]
 8007108:	bf18      	it	ne
 800710a:	2300      	movne	r3, #0
 800710c:	eba6 0807 	sub.w	r8, r6, r7
 8007110:	608b      	str	r3, [r1, #8]
 8007112:	f1b8 0f00 	cmp.w	r8, #0
 8007116:	dd9c      	ble.n	8007052 <__sflush_r+0x1a>
 8007118:	6a21      	ldr	r1, [r4, #32]
 800711a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800711c:	4643      	mov	r3, r8
 800711e:	463a      	mov	r2, r7
 8007120:	4628      	mov	r0, r5
 8007122:	47b0      	blx	r6
 8007124:	2800      	cmp	r0, #0
 8007126:	dc06      	bgt.n	8007136 <__sflush_r+0xfe>
 8007128:	89a3      	ldrh	r3, [r4, #12]
 800712a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800712e:	81a3      	strh	r3, [r4, #12]
 8007130:	f04f 30ff 	mov.w	r0, #4294967295
 8007134:	e78e      	b.n	8007054 <__sflush_r+0x1c>
 8007136:	4407      	add	r7, r0
 8007138:	eba8 0800 	sub.w	r8, r8, r0
 800713c:	e7e9      	b.n	8007112 <__sflush_r+0xda>
 800713e:	bf00      	nop
 8007140:	dfbffffe 	.word	0xdfbffffe

08007144 <_fflush_r>:
 8007144:	b538      	push	{r3, r4, r5, lr}
 8007146:	690b      	ldr	r3, [r1, #16]
 8007148:	4605      	mov	r5, r0
 800714a:	460c      	mov	r4, r1
 800714c:	b913      	cbnz	r3, 8007154 <_fflush_r+0x10>
 800714e:	2500      	movs	r5, #0
 8007150:	4628      	mov	r0, r5
 8007152:	bd38      	pop	{r3, r4, r5, pc}
 8007154:	b118      	cbz	r0, 800715e <_fflush_r+0x1a>
 8007156:	6a03      	ldr	r3, [r0, #32]
 8007158:	b90b      	cbnz	r3, 800715e <_fflush_r+0x1a>
 800715a:	f7ff f953 	bl	8006404 <__sinit>
 800715e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d0f3      	beq.n	800714e <_fflush_r+0xa>
 8007166:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007168:	07d0      	lsls	r0, r2, #31
 800716a:	d404      	bmi.n	8007176 <_fflush_r+0x32>
 800716c:	0599      	lsls	r1, r3, #22
 800716e:	d402      	bmi.n	8007176 <_fflush_r+0x32>
 8007170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007172:	f7ff fb92 	bl	800689a <__retarget_lock_acquire_recursive>
 8007176:	4628      	mov	r0, r5
 8007178:	4621      	mov	r1, r4
 800717a:	f7ff ff5d 	bl	8007038 <__sflush_r>
 800717e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007180:	07da      	lsls	r2, r3, #31
 8007182:	4605      	mov	r5, r0
 8007184:	d4e4      	bmi.n	8007150 <_fflush_r+0xc>
 8007186:	89a3      	ldrh	r3, [r4, #12]
 8007188:	059b      	lsls	r3, r3, #22
 800718a:	d4e1      	bmi.n	8007150 <_fflush_r+0xc>
 800718c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800718e:	f7ff fb85 	bl	800689c <__retarget_lock_release_recursive>
 8007192:	e7dd      	b.n	8007150 <_fflush_r+0xc>

08007194 <__swhatbuf_r>:
 8007194:	b570      	push	{r4, r5, r6, lr}
 8007196:	460c      	mov	r4, r1
 8007198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800719c:	2900      	cmp	r1, #0
 800719e:	b096      	sub	sp, #88	; 0x58
 80071a0:	4615      	mov	r5, r2
 80071a2:	461e      	mov	r6, r3
 80071a4:	da0d      	bge.n	80071c2 <__swhatbuf_r+0x2e>
 80071a6:	89a3      	ldrh	r3, [r4, #12]
 80071a8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80071ac:	f04f 0100 	mov.w	r1, #0
 80071b0:	bf0c      	ite	eq
 80071b2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80071b6:	2340      	movne	r3, #64	; 0x40
 80071b8:	2000      	movs	r0, #0
 80071ba:	6031      	str	r1, [r6, #0]
 80071bc:	602b      	str	r3, [r5, #0]
 80071be:	b016      	add	sp, #88	; 0x58
 80071c0:	bd70      	pop	{r4, r5, r6, pc}
 80071c2:	466a      	mov	r2, sp
 80071c4:	f000 f848 	bl	8007258 <_fstat_r>
 80071c8:	2800      	cmp	r0, #0
 80071ca:	dbec      	blt.n	80071a6 <__swhatbuf_r+0x12>
 80071cc:	9901      	ldr	r1, [sp, #4]
 80071ce:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80071d2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80071d6:	4259      	negs	r1, r3
 80071d8:	4159      	adcs	r1, r3
 80071da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071de:	e7eb      	b.n	80071b8 <__swhatbuf_r+0x24>

080071e0 <__smakebuf_r>:
 80071e0:	898b      	ldrh	r3, [r1, #12]
 80071e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80071e4:	079d      	lsls	r5, r3, #30
 80071e6:	4606      	mov	r6, r0
 80071e8:	460c      	mov	r4, r1
 80071ea:	d507      	bpl.n	80071fc <__smakebuf_r+0x1c>
 80071ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80071f0:	6023      	str	r3, [r4, #0]
 80071f2:	6123      	str	r3, [r4, #16]
 80071f4:	2301      	movs	r3, #1
 80071f6:	6163      	str	r3, [r4, #20]
 80071f8:	b002      	add	sp, #8
 80071fa:	bd70      	pop	{r4, r5, r6, pc}
 80071fc:	ab01      	add	r3, sp, #4
 80071fe:	466a      	mov	r2, sp
 8007200:	f7ff ffc8 	bl	8007194 <__swhatbuf_r>
 8007204:	9900      	ldr	r1, [sp, #0]
 8007206:	4605      	mov	r5, r0
 8007208:	4630      	mov	r0, r6
 800720a:	f7ff fbb5 	bl	8006978 <_malloc_r>
 800720e:	b948      	cbnz	r0, 8007224 <__smakebuf_r+0x44>
 8007210:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007214:	059a      	lsls	r2, r3, #22
 8007216:	d4ef      	bmi.n	80071f8 <__smakebuf_r+0x18>
 8007218:	f023 0303 	bic.w	r3, r3, #3
 800721c:	f043 0302 	orr.w	r3, r3, #2
 8007220:	81a3      	strh	r3, [r4, #12]
 8007222:	e7e3      	b.n	80071ec <__smakebuf_r+0xc>
 8007224:	89a3      	ldrh	r3, [r4, #12]
 8007226:	6020      	str	r0, [r4, #0]
 8007228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800722c:	81a3      	strh	r3, [r4, #12]
 800722e:	9b00      	ldr	r3, [sp, #0]
 8007230:	6163      	str	r3, [r4, #20]
 8007232:	9b01      	ldr	r3, [sp, #4]
 8007234:	6120      	str	r0, [r4, #16]
 8007236:	b15b      	cbz	r3, 8007250 <__smakebuf_r+0x70>
 8007238:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800723c:	4630      	mov	r0, r6
 800723e:	f000 f81d 	bl	800727c <_isatty_r>
 8007242:	b128      	cbz	r0, 8007250 <__smakebuf_r+0x70>
 8007244:	89a3      	ldrh	r3, [r4, #12]
 8007246:	f023 0303 	bic.w	r3, r3, #3
 800724a:	f043 0301 	orr.w	r3, r3, #1
 800724e:	81a3      	strh	r3, [r4, #12]
 8007250:	89a3      	ldrh	r3, [r4, #12]
 8007252:	431d      	orrs	r5, r3
 8007254:	81a5      	strh	r5, [r4, #12]
 8007256:	e7cf      	b.n	80071f8 <__smakebuf_r+0x18>

08007258 <_fstat_r>:
 8007258:	b538      	push	{r3, r4, r5, lr}
 800725a:	4d07      	ldr	r5, [pc, #28]	; (8007278 <_fstat_r+0x20>)
 800725c:	2300      	movs	r3, #0
 800725e:	4604      	mov	r4, r0
 8007260:	4608      	mov	r0, r1
 8007262:	4611      	mov	r1, r2
 8007264:	602b      	str	r3, [r5, #0]
 8007266:	f7f9 fcf0 	bl	8000c4a <_fstat>
 800726a:	1c43      	adds	r3, r0, #1
 800726c:	d102      	bne.n	8007274 <_fstat_r+0x1c>
 800726e:	682b      	ldr	r3, [r5, #0]
 8007270:	b103      	cbz	r3, 8007274 <_fstat_r+0x1c>
 8007272:	6023      	str	r3, [r4, #0]
 8007274:	bd38      	pop	{r3, r4, r5, pc}
 8007276:	bf00      	nop
 8007278:	20001388 	.word	0x20001388

0800727c <_isatty_r>:
 800727c:	b538      	push	{r3, r4, r5, lr}
 800727e:	4d06      	ldr	r5, [pc, #24]	; (8007298 <_isatty_r+0x1c>)
 8007280:	2300      	movs	r3, #0
 8007282:	4604      	mov	r4, r0
 8007284:	4608      	mov	r0, r1
 8007286:	602b      	str	r3, [r5, #0]
 8007288:	f7f9 fcef 	bl	8000c6a <_isatty>
 800728c:	1c43      	adds	r3, r0, #1
 800728e:	d102      	bne.n	8007296 <_isatty_r+0x1a>
 8007290:	682b      	ldr	r3, [r5, #0]
 8007292:	b103      	cbz	r3, 8007296 <_isatty_r+0x1a>
 8007294:	6023      	str	r3, [r4, #0]
 8007296:	bd38      	pop	{r3, r4, r5, pc}
 8007298:	20001388 	.word	0x20001388

0800729c <_sbrk_r>:
 800729c:	b538      	push	{r3, r4, r5, lr}
 800729e:	4d06      	ldr	r5, [pc, #24]	; (80072b8 <_sbrk_r+0x1c>)
 80072a0:	2300      	movs	r3, #0
 80072a2:	4604      	mov	r4, r0
 80072a4:	4608      	mov	r0, r1
 80072a6:	602b      	str	r3, [r5, #0]
 80072a8:	f7f9 fcf8 	bl	8000c9c <_sbrk>
 80072ac:	1c43      	adds	r3, r0, #1
 80072ae:	d102      	bne.n	80072b6 <_sbrk_r+0x1a>
 80072b0:	682b      	ldr	r3, [r5, #0]
 80072b2:	b103      	cbz	r3, 80072b6 <_sbrk_r+0x1a>
 80072b4:	6023      	str	r3, [r4, #0]
 80072b6:	bd38      	pop	{r3, r4, r5, pc}
 80072b8:	20001388 	.word	0x20001388

080072bc <_init>:
 80072bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072be:	bf00      	nop
 80072c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072c2:	bc08      	pop	{r3}
 80072c4:	469e      	mov	lr, r3
 80072c6:	4770      	bx	lr

080072c8 <_fini>:
 80072c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ca:	bf00      	nop
 80072cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ce:	bc08      	pop	{r3}
 80072d0:	469e      	mov	lr, r3
 80072d2:	4770      	bx	lr
