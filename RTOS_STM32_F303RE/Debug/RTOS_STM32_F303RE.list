
RTOS_STM32_F303RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a364  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  0800a504  0800a504  0001a504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6a0  0800a6a0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  0800a6a0  0800a6a0  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a6a0  0800a6a0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6a0  0800a6a0  0001a6a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6a4  0800a6a4  0001a6a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800a6a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          0000191c  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001998  20001998  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e63d  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004117  00000000  00000000  0003e72c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001908  00000000  00000000  00042848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000138d  00000000  00000000  00044150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024eeb  00000000  00000000  000454dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001fa74  00000000  00000000  0006a3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000df951  00000000  00000000  00089e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007244  00000000  00000000  00169790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000083  00000000  00000000  001709d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a4ec 	.word	0x0800a4ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	0800a4ec 	.word	0x0800a4ec

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	4a07      	ldr	r2, [pc, #28]	; (80002ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000290:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000292:	68bb      	ldr	r3, [r7, #8]
 8000294:	4a06      	ldr	r2, [pc, #24]	; (80002b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000296:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2280      	movs	r2, #128	; 0x80
 800029c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	20000098 	.word	0x20000098
 80002b0:	20000138 	.word	0x20000138

080002b4 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	60f8      	str	r0, [r7, #12]
 80002bc:	60b9      	str	r1, [r7, #8]
 80002be:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	4a07      	ldr	r2, [pc, #28]	; (80002e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80002c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80002c6:	68bb      	ldr	r3, [r7, #8]
 80002c8:	4a06      	ldr	r2, [pc, #24]	; (80002e4 <vApplicationGetTimerTaskMemory+0x30>)
 80002ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002d2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80002d4:	bf00      	nop
 80002d6:	3714      	adds	r7, #20
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr
 80002e0:	20000338 	.word	0x20000338
 80002e4:	200003d8 	.word	0x200003d8

080002e8 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4603      	mov	r3, r0
 80002f0:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80002f2:	4a38      	ldr	r2, [pc, #224]	; (80003d4 <HD44780_Init+0xec>)
 80002f4:	79fb      	ldrb	r3, [r7, #7]
 80002f6:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80002f8:	4b37      	ldr	r3, [pc, #220]	; (80003d8 <HD44780_Init+0xf0>)
 80002fa:	2208      	movs	r2, #8
 80002fc:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80002fe:	4b37      	ldr	r3, [pc, #220]	; (80003dc <HD44780_Init+0xf4>)
 8000300:	2200      	movs	r2, #0
 8000302:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000304:	4b33      	ldr	r3, [pc, #204]	; (80003d4 <HD44780_Init+0xec>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	2b01      	cmp	r3, #1
 800030a:	d907      	bls.n	800031c <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 800030c:	4b33      	ldr	r3, [pc, #204]	; (80003dc <HD44780_Init+0xf4>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	f043 0308 	orr.w	r3, r3, #8
 8000314:	b2da      	uxtb	r2, r3
 8000316:	4b31      	ldr	r3, [pc, #196]	; (80003dc <HD44780_Init+0xf4>)
 8000318:	701a      	strb	r2, [r3, #0]
 800031a:	e006      	b.n	800032a <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 800031c:	4b2f      	ldr	r3, [pc, #188]	; (80003dc <HD44780_Init+0xf4>)
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	f043 0304 	orr.w	r3, r3, #4
 8000324:	b2da      	uxtb	r2, r3
 8000326:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <HD44780_Init+0xf4>)
 8000328:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800032a:	f000 f985 	bl	8000638 <DelayInit>
  HAL_Delay(50);
 800032e:	2032      	movs	r0, #50	; 0x32
 8000330:	f001 f844 	bl	80013bc <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000334:	4b28      	ldr	r3, [pc, #160]	; (80003d8 <HD44780_Init+0xf0>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	4618      	mov	r0, r3
 800033a:	f000 f943 	bl	80005c4 <ExpanderWrite>
  HAL_Delay(1000);
 800033e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000342:	f001 f83b 	bl	80013bc <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000346:	2030      	movs	r0, #48	; 0x30
 8000348:	f000 f92b 	bl	80005a2 <Write4Bits>
  DelayUS(4500);
 800034c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000350:	f000 f99c 	bl	800068c <DelayUS>

  Write4Bits(0x03 << 4);
 8000354:	2030      	movs	r0, #48	; 0x30
 8000356:	f000 f924 	bl	80005a2 <Write4Bits>
  DelayUS(4500);
 800035a:	f241 1094 	movw	r0, #4500	; 0x1194
 800035e:	f000 f995 	bl	800068c <DelayUS>

  Write4Bits(0x03 << 4);
 8000362:	2030      	movs	r0, #48	; 0x30
 8000364:	f000 f91d 	bl	80005a2 <Write4Bits>
  DelayUS(4500);
 8000368:	f241 1094 	movw	r0, #4500	; 0x1194
 800036c:	f000 f98e 	bl	800068c <DelayUS>

  Write4Bits(0x02 << 4);
 8000370:	2020      	movs	r0, #32
 8000372:	f000 f916 	bl	80005a2 <Write4Bits>
  DelayUS(100);
 8000376:	2064      	movs	r0, #100	; 0x64
 8000378:	f000 f988 	bl	800068c <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 800037c:	4b17      	ldr	r3, [pc, #92]	; (80003dc <HD44780_Init+0xf4>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	f043 0320 	orr.w	r3, r3, #32
 8000384:	b2db      	uxtb	r3, r3
 8000386:	4618      	mov	r0, r3
 8000388:	f000 f8ce 	bl	8000528 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800038c:	4b14      	ldr	r3, [pc, #80]	; (80003e0 <HD44780_Init+0xf8>)
 800038e:	2204      	movs	r2, #4
 8000390:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000392:	f000 f875 	bl	8000480 <HD44780_Display>
  HD44780_Clear();
 8000396:	f000 f82b 	bl	80003f0 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800039a:	4b12      	ldr	r3, [pc, #72]	; (80003e4 <HD44780_Init+0xfc>)
 800039c:	2202      	movs	r2, #2
 800039e:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80003a0:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <HD44780_Init+0xfc>)
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	f043 0304 	orr.w	r3, r3, #4
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	4618      	mov	r0, r3
 80003ac:	f000 f8bc 	bl	8000528 <SendCommand>
  DelayUS(4500);
 80003b0:	f241 1094 	movw	r0, #4500	; 0x1194
 80003b4:	f000 f96a 	bl	800068c <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80003b8:	490b      	ldr	r1, [pc, #44]	; (80003e8 <HD44780_Init+0x100>)
 80003ba:	2000      	movs	r0, #0
 80003bc:	f000 f876 	bl	80004ac <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80003c0:	490a      	ldr	r1, [pc, #40]	; (80003ec <HD44780_Init+0x104>)
 80003c2:	2001      	movs	r0, #1
 80003c4:	f000 f872 	bl	80004ac <HD44780_CreateSpecialChar>

  HD44780_Home();
 80003c8:	f000 f81d 	bl	8000406 <HD44780_Home>
}
 80003cc:	bf00      	nop
 80003ce:	3708      	adds	r7, #8
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	200007db 	.word	0x200007db
 80003d8:	200007dc 	.word	0x200007dc
 80003dc:	200007d8 	.word	0x200007d8
 80003e0:	200007d9 	.word	0x200007d9
 80003e4:	200007da 	.word	0x200007da
 80003e8:	20000000 	.word	0x20000000
 80003ec:	20000008 	.word	0x20000008

080003f0 <HD44780_Clear>:

void HD44780_Clear()
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80003f4:	2001      	movs	r0, #1
 80003f6:	f000 f897 	bl	8000528 <SendCommand>
  DelayUS(2000);
 80003fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003fe:	f000 f945 	bl	800068c <DelayUS>
}
 8000402:	bf00      	nop
 8000404:	bd80      	pop	{r7, pc}

08000406 <HD44780_Home>:

void HD44780_Home()
{
 8000406:	b580      	push	{r7, lr}
 8000408:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800040a:	2002      	movs	r0, #2
 800040c:	f000 f88c 	bl	8000528 <SendCommand>
  DelayUS(2000);
 8000410:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000414:	f000 f93a 	bl	800068c <DelayUS>
}
 8000418:	bf00      	nop
 800041a:	bd80      	pop	{r7, pc}

0800041c <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 800041c:	b590      	push	{r4, r7, lr}
 800041e:	b087      	sub	sp, #28
 8000420:	af00      	add	r7, sp, #0
 8000422:	4603      	mov	r3, r0
 8000424:	460a      	mov	r2, r1
 8000426:	71fb      	strb	r3, [r7, #7]
 8000428:	4613      	mov	r3, r2
 800042a:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 800042c:	4b12      	ldr	r3, [pc, #72]	; (8000478 <HD44780_SetCursor+0x5c>)
 800042e:	f107 0408 	add.w	r4, r7, #8
 8000432:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000434:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000438:	4b10      	ldr	r3, [pc, #64]	; (800047c <HD44780_SetCursor+0x60>)
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	79ba      	ldrb	r2, [r7, #6]
 800043e:	429a      	cmp	r2, r3
 8000440:	d303      	bcc.n	800044a <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000442:	4b0e      	ldr	r3, [pc, #56]	; (800047c <HD44780_SetCursor+0x60>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	3b01      	subs	r3, #1
 8000448:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800044a:	79bb      	ldrb	r3, [r7, #6]
 800044c:	009b      	lsls	r3, r3, #2
 800044e:	3318      	adds	r3, #24
 8000450:	443b      	add	r3, r7
 8000452:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000456:	b2da      	uxtb	r2, r3
 8000458:	79fb      	ldrb	r3, [r7, #7]
 800045a:	4413      	add	r3, r2
 800045c:	b2db      	uxtb	r3, r3
 800045e:	b25b      	sxtb	r3, r3
 8000460:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000464:	b25b      	sxtb	r3, r3
 8000466:	b2db      	uxtb	r3, r3
 8000468:	4618      	mov	r0, r3
 800046a:	f000 f85d 	bl	8000528 <SendCommand>
}
 800046e:	bf00      	nop
 8000470:	371c      	adds	r7, #28
 8000472:	46bd      	mov	sp, r7
 8000474:	bd90      	pop	{r4, r7, pc}
 8000476:	bf00      	nop
 8000478:	0800a504 	.word	0x0800a504
 800047c:	200007db 	.word	0x200007db

08000480 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000484:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <HD44780_Display+0x28>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	f043 0304 	orr.w	r3, r3, #4
 800048c:	b2da      	uxtb	r2, r3
 800048e:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <HD44780_Display+0x28>)
 8000490:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000492:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <HD44780_Display+0x28>)
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	f043 0308 	orr.w	r3, r3, #8
 800049a:	b2db      	uxtb	r3, r3
 800049c:	4618      	mov	r0, r3
 800049e:	f000 f843 	bl	8000528 <SendCommand>
}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	200007d9 	.word	0x200007d9

080004ac <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b084      	sub	sp, #16
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	4603      	mov	r3, r0
 80004b4:	6039      	str	r1, [r7, #0]
 80004b6:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80004b8:	79fb      	ldrb	r3, [r7, #7]
 80004ba:	f003 0307 	and.w	r3, r3, #7
 80004be:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	00db      	lsls	r3, r3, #3
 80004c4:	b25b      	sxtb	r3, r3
 80004c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004ca:	b25b      	sxtb	r3, r3
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	4618      	mov	r0, r3
 80004d0:	f000 f82a 	bl	8000528 <SendCommand>
  for (int i=0; i<8; i++)
 80004d4:	2300      	movs	r3, #0
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	e009      	b.n	80004ee <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	683a      	ldr	r2, [r7, #0]
 80004de:	4413      	add	r3, r2
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	4618      	mov	r0, r3
 80004e4:	f000 f82e 	bl	8000544 <SendChar>
  for (int i=0; i<8; i++)
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	3301      	adds	r3, #1
 80004ec:	60fb      	str	r3, [r7, #12]
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	2b07      	cmp	r3, #7
 80004f2:	ddf2      	ble.n	80004da <HD44780_CreateSpecialChar+0x2e>
  }
}
 80004f4:	bf00      	nop
 80004f6:	bf00      	nop
 80004f8:	3710      	adds	r7, #16
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80004fe:	b580      	push	{r7, lr}
 8000500:	b082      	sub	sp, #8
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000506:	e006      	b.n	8000516 <HD44780_PrintStr+0x18>
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	1c5a      	adds	r2, r3, #1
 800050c:	607a      	str	r2, [r7, #4]
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	4618      	mov	r0, r3
 8000512:	f000 f817 	bl	8000544 <SendChar>
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d1f4      	bne.n	8000508 <HD44780_PrintStr+0xa>
}
 800051e:	bf00      	nop
 8000520:	bf00      	nop
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f000 f812 	bl	8000560 <Send>
}
 800053c:	bf00      	nop
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	2101      	movs	r1, #1
 8000552:	4618      	mov	r0, r3
 8000554:	f000 f804 	bl	8000560 <Send>
}
 8000558:	bf00      	nop
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}

08000560 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	460a      	mov	r2, r1
 800056a:	71fb      	strb	r3, [r7, #7]
 800056c:	4613      	mov	r3, r2
 800056e:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	f023 030f 	bic.w	r3, r3, #15
 8000576:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	011b      	lsls	r3, r3, #4
 800057c:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800057e:	7bfa      	ldrb	r2, [r7, #15]
 8000580:	79bb      	ldrb	r3, [r7, #6]
 8000582:	4313      	orrs	r3, r2
 8000584:	b2db      	uxtb	r3, r3
 8000586:	4618      	mov	r0, r3
 8000588:	f000 f80b 	bl	80005a2 <Write4Bits>
  Write4Bits((lownib)|mode);
 800058c:	7bba      	ldrb	r2, [r7, #14]
 800058e:	79bb      	ldrb	r3, [r7, #6]
 8000590:	4313      	orrs	r3, r2
 8000592:	b2db      	uxtb	r3, r3
 8000594:	4618      	mov	r0, r3
 8000596:	f000 f804 	bl	80005a2 <Write4Bits>
}
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b082      	sub	sp, #8
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	4603      	mov	r3, r0
 80005aa:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 f808 	bl	80005c4 <ExpanderWrite>
  PulseEnable(value);
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 f820 	bl	80005fc <PulseEnable>
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af02      	add	r7, sp, #8
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <ExpanderWrite+0x30>)
 80005d0:	781a      	ldrb	r2, [r3, #0]
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80005da:	f107 020f 	add.w	r2, r7, #15
 80005de:	230a      	movs	r3, #10
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2301      	movs	r3, #1
 80005e4:	214e      	movs	r1, #78	; 0x4e
 80005e6:	4804      	ldr	r0, [pc, #16]	; (80005f8 <ExpanderWrite+0x34>)
 80005e8:	f002 f9f4 	bl	80029d4 <HAL_I2C_Master_Transmit>
}
 80005ec:	bf00      	nop
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	200007dc 	.word	0x200007dc
 80005f8:	20000830 	.word	0x20000830

080005fc <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	b2db      	uxtb	r3, r3
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff ffd8 	bl	80005c4 <ExpanderWrite>
  DelayUS(20);
 8000614:	2014      	movs	r0, #20
 8000616:	f000 f839 	bl	800068c <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	f023 0304 	bic.w	r3, r3, #4
 8000620:	b2db      	uxtb	r3, r3
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff ffce 	bl	80005c4 <ExpanderWrite>
  DelayUS(20);
 8000628:	2014      	movs	r0, #20
 800062a:	f000 f82f 	bl	800068c <DelayUS>
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <DelayInit>:

static void DelayInit(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 800063c:	4b11      	ldr	r3, [pc, #68]	; (8000684 <DelayInit+0x4c>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	4a10      	ldr	r2, [pc, #64]	; (8000684 <DelayInit+0x4c>)
 8000642:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000646:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000648:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <DelayInit+0x4c>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	4a0d      	ldr	r2, [pc, #52]	; (8000684 <DelayInit+0x4c>)
 800064e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000652:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <DelayInit+0x50>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a0b      	ldr	r2, [pc, #44]	; (8000688 <DelayInit+0x50>)
 800065a:	f023 0301 	bic.w	r3, r3, #1
 800065e:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <DelayInit+0x50>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a08      	ldr	r2, [pc, #32]	; (8000688 <DelayInit+0x50>)
 8000666:	f043 0301 	orr.w	r3, r3, #1
 800066a:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <DelayInit+0x50>)
 800066e:	2200      	movs	r2, #0
 8000670:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000672:	bf00      	nop
  __ASM volatile ("NOP");
 8000674:	bf00      	nop
  __ASM volatile ("NOP");
 8000676:	bf00      	nop
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000edf0 	.word	0xe000edf0
 8000688:	e0001000 	.word	0xe0001000

0800068c <DelayUS>:

static void DelayUS(uint32_t us) {
 800068c:	b480      	push	{r7}
 800068e:	b087      	sub	sp, #28
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000694:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <DelayUS+0x44>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a0e      	ldr	r2, [pc, #56]	; (80006d4 <DelayUS+0x48>)
 800069a:	fba2 2303 	umull	r2, r3, r2, r3
 800069e:	0c9a      	lsrs	r2, r3, #18
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	fb02 f303 	mul.w	r3, r2, r3
 80006a6:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80006a8:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <DelayUS+0x4c>)
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80006ae:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <DelayUS+0x4c>)
 80006b0:	685a      	ldr	r2, [r3, #4]
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	697a      	ldr	r2, [r7, #20]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d8f6      	bhi.n	80006ae <DelayUS+0x22>
}
 80006c0:	bf00      	nop
 80006c2:	bf00      	nop
 80006c4:	371c      	adds	r7, #28
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	20000010 	.word	0x20000010
 80006d4:	431bde83 	.word	0x431bde83
 80006d8:	e0001000 	.word	0xe0001000

080006dc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006e8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80006ec:	f003 0301 	and.w	r3, r3, #1
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d013      	beq.n	800071c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80006f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006f8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80006fc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000700:	2b00      	cmp	r3, #0
 8000702:	d00b      	beq.n	800071c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000704:	e000      	b.n	8000708 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000706:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000708:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d0f9      	beq.n	8000706 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000712:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	b2d2      	uxtb	r2, r2
 800071a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800071c:	687b      	ldr	r3, [r7, #4]
}
 800071e:	4618      	mov	r0, r3
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 800072a:	b580      	push	{r7, lr}
 800072c:	b086      	sub	sp, #24
 800072e:	af00      	add	r7, sp, #0
 8000730:	60f8      	str	r0, [r7, #12]
 8000732:	60b9      	str	r1, [r7, #8]
 8000734:	607a      	str	r2, [r7, #4]
	/* Write code that is used by puts and printf */
	int i = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
	for(i=0; i<len; i++)
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]
 800073e:	e009      	b.n	8000754 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	1c5a      	adds	r2, r3, #1
 8000744:	60ba      	str	r2, [r7, #8]
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff ffc7 	bl	80006dc <ITM_SendChar>
	for(i=0; i<len; i++)
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	3301      	adds	r3, #1
 8000752:	617b      	str	r3, [r7, #20]
 8000754:	697a      	ldr	r2, [r7, #20]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	429a      	cmp	r2, r3
 800075a:	dbf1      	blt.n	8000740 <_write+0x16>

	return len;
 800075c:	687b      	ldr	r3, [r7, #4]
}
 800075e:	4618      	mov	r0, r3
 8000760:	3718      	adds	r7, #24
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000768:	b5b0      	push	{r4, r5, r7, lr}
 800076a:	b0a2      	sub	sp, #136	; 0x88
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076e:	f000 fdef 	bl	8001350 <HAL_Init>

  /* USER CODE BEGIN Init */
  HD44780_Init(2);
 8000772:	2002      	movs	r0, #2
 8000774:	f7ff fdb8 	bl	80002e8 <HD44780_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000778:	f000 f890 	bl	800089c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077c:	f000 fa12 	bl	8000ba4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000780:	f000 f9e0 	bl	8000b44 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8000784:	f000 f8f2 	bl	800096c <MX_ADC2_Init>
  MX_I2C1_Init();
 8000788:	f000 f94e 	bl	8000a28 <MX_I2C1_Init>
  MX_TIM3_Init();
 800078c:	f000 f98c 	bl	8000aa8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  printf("starting....\n");
 8000790:	4836      	ldr	r0, [pc, #216]	; (800086c <main+0x104>)
 8000792:	f008 fe13 	bl	80093bc <puts>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySemAlarm */
  osSemaphoreDef(myBinarySemAlarm);
 8000796:	2300      	movs	r3, #0
 8000798:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800079c:	2300      	movs	r3, #0
 800079e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  myBinarySemAlarmHandle = osSemaphoreCreate(osSemaphore(myBinarySemAlarm), 1);
 80007a2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80007a6:	2101      	movs	r1, #1
 80007a8:	4618      	mov	r0, r3
 80007aa:	f005 fc5f 	bl	800606c <osSemaphoreCreate>
 80007ae:	4603      	mov	r3, r0
 80007b0:	4a2f      	ldr	r2, [pc, #188]	; (8000870 <main+0x108>)
 80007b2:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 16, uint16_t);
 80007b4:	4b2f      	ldr	r3, [pc, #188]	; (8000874 <main+0x10c>)
 80007b6:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80007ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 80007c0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f005 fd06 	bl	80061d8 <osMessageCreate>
 80007cc:	4603      	mov	r3, r0
 80007ce:	4a2a      	ldr	r2, [pc, #168]	; (8000878 <main+0x110>)
 80007d0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, Task1_init, osPriorityNormal, 0, 128);
 80007d2:	4b2a      	ldr	r3, [pc, #168]	; (800087c <main+0x114>)
 80007d4:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80007d8:	461d      	mov	r5, r3
 80007da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 80007e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007ea:	2100      	movs	r1, #0
 80007ec:	4618      	mov	r0, r3
 80007ee:	f005 fbdd 	bl	8005fac <osThreadCreate>
 80007f2:	4603      	mov	r3, r0
 80007f4:	4a22      	ldr	r2, [pc, #136]	; (8000880 <main+0x118>)
 80007f6:	6013      	str	r3, [r2, #0]

  /* definition and creation of LCD */
  osThreadDef(LCD, StartLCD, osPriorityNormal, 0, 128);
 80007f8:	4b22      	ldr	r3, [pc, #136]	; (8000884 <main+0x11c>)
 80007fa:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80007fe:	461d      	mov	r5, r3
 8000800:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000804:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000808:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LCDHandle = osThreadCreate(osThread(LCD), NULL);
 800080c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f005 fbca 	bl	8005fac <osThreadCreate>
 8000818:	4603      	mov	r3, r0
 800081a:	4a1b      	ldr	r2, [pc, #108]	; (8000888 <main+0x120>)
 800081c:	6013      	str	r3, [r2, #0]

  /* definition and creation of WaterSensor */
  osThreadDef(WaterSensor, StartWaterSensor, osPriorityNormal, 0, 128);
 800081e:	4b1b      	ldr	r3, [pc, #108]	; (800088c <main+0x124>)
 8000820:	f107 041c 	add.w	r4, r7, #28
 8000824:	461d      	mov	r5, r3
 8000826:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000828:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800082a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800082e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  WaterSensorHandle = osThreadCreate(osThread(WaterSensor), NULL);
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	2100      	movs	r1, #0
 8000838:	4618      	mov	r0, r3
 800083a:	f005 fbb7 	bl	8005fac <osThreadCreate>
 800083e:	4603      	mov	r3, r0
 8000840:	4a13      	ldr	r2, [pc, #76]	; (8000890 <main+0x128>)
 8000842:	6013      	str	r3, [r2, #0]

  /* definition and creation of AlarmLED */
  osThreadDef(AlarmLED, StartAlarmLED, osPriorityNormal, 0, 128);
 8000844:	4b13      	ldr	r3, [pc, #76]	; (8000894 <main+0x12c>)
 8000846:	463c      	mov	r4, r7
 8000848:	461d      	mov	r5, r3
 800084a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800084c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800084e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000852:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AlarmLEDHandle = osThreadCreate(osThread(AlarmLED), NULL);
 8000856:	463b      	mov	r3, r7
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f005 fba6 	bl	8005fac <osThreadCreate>
 8000860:	4603      	mov	r3, r0
 8000862:	4a0d      	ldr	r2, [pc, #52]	; (8000898 <main+0x130>)
 8000864:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000866:	f005 fb9a 	bl	8005f9e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800086a:	e7fe      	b.n	800086a <main+0x102>
 800086c:	0800a514 	.word	0x0800a514
 8000870:	2000096c 	.word	0x2000096c
 8000874:	0800a524 	.word	0x0800a524
 8000878:	20000968 	.word	0x20000968
 800087c:	0800a53c 	.word	0x0800a53c
 8000880:	20000958 	.word	0x20000958
 8000884:	0800a55c 	.word	0x0800a55c
 8000888:	2000095c 	.word	0x2000095c
 800088c:	0800a584 	.word	0x0800a584
 8000890:	20000960 	.word	0x20000960
 8000894:	0800a5ac 	.word	0x0800a5ac
 8000898:	20000964 	.word	0x20000964

0800089c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b0a6      	sub	sp, #152	; 0x98
 80008a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80008a6:	2228      	movs	r2, #40	; 0x28
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f008 fe86 	bl	80095bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2258      	movs	r2, #88	; 0x58
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f008 fe78 	bl	80095bc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008cc:	2302      	movs	r3, #2
 80008ce:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d0:	2301      	movs	r3, #1
 80008d2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008d4:	2310      	movs	r3, #16
 80008d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008da:	2302      	movs	r3, #2
 80008dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008e8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80008fa:	4618      	mov	r0, r3
 80008fc:	f002 fc06 	bl	800310c <HAL_RCC_OscConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000906:	f000 fabd 	bl	8000e84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090a:	230f      	movs	r3, #15
 800090c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800090e:	2302      	movs	r3, #2
 8000910:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800091a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000920:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000924:	2102      	movs	r1, #2
 8000926:	4618      	mov	r0, r3
 8000928:	f003 fc44 	bl	80041b4 <HAL_RCC_ClockConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000932:	f000 faa7 	bl	8000e84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <SystemClock_Config+0xcc>)
 8000938:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800093e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000948:	2300      	movs	r3, #0
 800094a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	4618      	mov	r0, r3
 8000950:	f003 fe98 	bl	8004684 <HAL_RCCEx_PeriphCLKConfig>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800095a:	f000 fa93 	bl	8000e84 <Error_Handler>
  }
}
 800095e:	bf00      	nop
 8000960:	3798      	adds	r7, #152	; 0x98
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	002000a2 	.word	0x002000a2

0800096c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000972:	463b      	mov	r3, r7
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
 8000980:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000982:	4b27      	ldr	r3, [pc, #156]	; (8000a20 <MX_ADC2_Init+0xb4>)
 8000984:	4a27      	ldr	r2, [pc, #156]	; (8000a24 <MX_ADC2_Init+0xb8>)
 8000986:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000988:	4b25      	ldr	r3, [pc, #148]	; (8000a20 <MX_ADC2_Init+0xb4>)
 800098a:	2200      	movs	r2, #0
 800098c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800098e:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <MX_ADC2_Init+0xb4>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000994:	4b22      	ldr	r3, [pc, #136]	; (8000a20 <MX_ADC2_Init+0xb4>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800099a:	4b21      	ldr	r3, [pc, #132]	; (8000a20 <MX_ADC2_Init+0xb4>)
 800099c:	2200      	movs	r2, #0
 800099e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80009a0:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <MX_ADC2_Init+0xb4>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009a8:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <MX_ADC2_Init+0xb4>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009ae:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <MX_ADC2_Init+0xb4>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009b4:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <MX_ADC2_Init+0xb4>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80009ba:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <MX_ADC2_Init+0xb4>)
 80009bc:	2201      	movs	r2, #1
 80009be:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80009c0:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <MX_ADC2_Init+0xb4>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <MX_ADC2_Init+0xb4>)
 80009ca:	2204      	movs	r2, #4
 80009cc:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_ADC2_Init+0xb4>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <MX_ADC2_Init+0xb4>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80009da:	4811      	ldr	r0, [pc, #68]	; (8000a20 <MX_ADC2_Init+0xb4>)
 80009dc:	f000 fd12 	bl	8001404 <HAL_ADC_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 80009e6:	f000 fa4d 	bl	8000e84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009ea:	2301      	movs	r3, #1
 80009ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009ee:	2301      	movs	r3, #1
 80009f0:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009f6:	2300      	movs	r3, #0
 80009f8:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a02:	463b      	mov	r3, r7
 8000a04:	4619      	mov	r1, r3
 8000a06:	4806      	ldr	r0, [pc, #24]	; (8000a20 <MX_ADC2_Init+0xb4>)
 8000a08:	f001 f91c 	bl	8001c44 <HAL_ADC_ConfigChannel>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000a12:	f000 fa37 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200007e0 	.word	0x200007e0
 8000a24:	50000100 	.word	0x50000100

08000a28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <MX_I2C1_Init+0x74>)
 8000a2e:	4a1c      	ldr	r2, [pc, #112]	; (8000aa0 <MX_I2C1_Init+0x78>)
 8000a30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000a32:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <MX_I2C1_Init+0x74>)
 8000a34:	4a1b      	ldr	r2, [pc, #108]	; (8000aa4 <MX_I2C1_Init+0x7c>)
 8000a36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a38:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <MX_I2C1_Init+0x74>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a3e:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <MX_I2C1_Init+0x74>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a44:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <MX_I2C1_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a4a:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <MX_I2C1_Init+0x74>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a50:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <MX_I2C1_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_I2C1_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_I2C1_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a62:	480e      	ldr	r0, [pc, #56]	; (8000a9c <MX_I2C1_Init+0x74>)
 8000a64:	f001 ff26 	bl	80028b4 <HAL_I2C_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a6e:	f000 fa09 	bl	8000e84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a72:	2100      	movs	r1, #0
 8000a74:	4809      	ldr	r0, [pc, #36]	; (8000a9c <MX_I2C1_Init+0x74>)
 8000a76:	f002 fab1 	bl	8002fdc <HAL_I2CEx_ConfigAnalogFilter>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a80:	f000 fa00 	bl	8000e84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a84:	2100      	movs	r1, #0
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_I2C1_Init+0x74>)
 8000a88:	f002 faf3 	bl	8003072 <HAL_I2CEx_ConfigDigitalFilter>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a92:	f000 f9f7 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000830 	.word	0x20000830
 8000aa0:	40005400 	.word	0x40005400
 8000aa4:	2000090e 	.word	0x2000090e

08000aa8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aae:	f107 0310 	add.w	r3, r7, #16
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ac6:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <MX_TIM3_Init+0x94>)
 8000ac8:	4a1d      	ldr	r2, [pc, #116]	; (8000b40 <MX_TIM3_Init+0x98>)
 8000aca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8000acc:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <MX_TIM3_Init+0x94>)
 8000ace:	2248      	movs	r2, #72	; 0x48
 8000ad0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad2:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <MX_TIM3_Init+0x94>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ad8:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <MX_TIM3_Init+0x94>)
 8000ada:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ade:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae0:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <MX_TIM3_Init+0x94>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <MX_TIM3_Init+0x94>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000aec:	4813      	ldr	r0, [pc, #76]	; (8000b3c <MX_TIM3_Init+0x94>)
 8000aee:	f003 ffe7 	bl	8004ac0 <HAL_TIM_Base_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000af8:	f000 f9c4 	bl	8000e84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b00:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b02:	f107 0310 	add.w	r3, r7, #16
 8000b06:	4619      	mov	r1, r3
 8000b08:	480c      	ldr	r0, [pc, #48]	; (8000b3c <MX_TIM3_Init+0x94>)
 8000b0a:	f004 f9c0 	bl	8004e8e <HAL_TIM_ConfigClockSource>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000b14:	f000 f9b6 	bl	8000e84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	4619      	mov	r1, r3
 8000b24:	4805      	ldr	r0, [pc, #20]	; (8000b3c <MX_TIM3_Init+0x94>)
 8000b26:	f004 fbdb 	bl	80052e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000b30:	f000 f9a8 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	3720      	adds	r7, #32
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000884 	.word	0x20000884
 8000b40:	40000400 	.word	0x40000400

08000b44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b4a:	4a15      	ldr	r2, [pc, #84]	; (8000ba0 <MX_USART2_UART_Init+0x5c>)
 8000b4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b4e:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b7a:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b88:	f004 fc54 	bl	8005434 <HAL_UART_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b92:	f000 f977 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	200008d0 	.word	0x200008d0
 8000ba0:	40004400 	.word	0x40004400

08000ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bba:	4b2c      	ldr	r3, [pc, #176]	; (8000c6c <MX_GPIO_Init+0xc8>)
 8000bbc:	695b      	ldr	r3, [r3, #20]
 8000bbe:	4a2b      	ldr	r2, [pc, #172]	; (8000c6c <MX_GPIO_Init+0xc8>)
 8000bc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000bc4:	6153      	str	r3, [r2, #20]
 8000bc6:	4b29      	ldr	r3, [pc, #164]	; (8000c6c <MX_GPIO_Init+0xc8>)
 8000bc8:	695b      	ldr	r3, [r3, #20]
 8000bca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bd2:	4b26      	ldr	r3, [pc, #152]	; (8000c6c <MX_GPIO_Init+0xc8>)
 8000bd4:	695b      	ldr	r3, [r3, #20]
 8000bd6:	4a25      	ldr	r2, [pc, #148]	; (8000c6c <MX_GPIO_Init+0xc8>)
 8000bd8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bdc:	6153      	str	r3, [r2, #20]
 8000bde:	4b23      	ldr	r3, [pc, #140]	; (8000c6c <MX_GPIO_Init+0xc8>)
 8000be0:	695b      	ldr	r3, [r3, #20]
 8000be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	4b20      	ldr	r3, [pc, #128]	; (8000c6c <MX_GPIO_Init+0xc8>)
 8000bec:	695b      	ldr	r3, [r3, #20]
 8000bee:	4a1f      	ldr	r2, [pc, #124]	; (8000c6c <MX_GPIO_Init+0xc8>)
 8000bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf4:	6153      	str	r3, [r2, #20]
 8000bf6:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <MX_GPIO_Init+0xc8>)
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <MX_GPIO_Init+0xc8>)
 8000c04:	695b      	ldr	r3, [r3, #20]
 8000c06:	4a19      	ldr	r2, [pc, #100]	; (8000c6c <MX_GPIO_Init+0xc8>)
 8000c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c0c:	6153      	str	r3, [r2, #20]
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <MX_GPIO_Init+0xc8>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|ALARM_LED_Pin, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000c20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c24:	f001 fe2e 	bl	8002884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c2e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	480c      	ldr	r0, [pc, #48]	; (8000c70 <MX_GPIO_Init+0xcc>)
 8000c40:	f001 fc96 	bl	8002570 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin ALARM_LED_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|ALARM_LED_Pin;
 8000c44:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8000c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c60:	f001 fc86 	bl	8002570 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c64:	bf00      	nop
 8000c66:	3728      	adds	r7, #40	; 0x28
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	48000800 	.word	0x48000800

08000c74 <Task1_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task1_init */
void Task1_init(void const * argument)
{
 8000c74:	b590      	push	{r4, r7, lr}
 8000c76:	b08b      	sub	sp, #44	; 0x2c
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	uint8_t receivedData;
  /* Infinite loop */
  for(;;)
  {

	  printf("Checking");
 8000c7c:	4821      	ldr	r0, [pc, #132]	; (8000d04 <Task1_init+0x90>)
 8000c7e:	f008 fb37 	bl	80092f0 <iprintf>

	  if(HAL_UART_Receive(&huart2, &receivedData, 1, 100) == HAL_OK)
 8000c82:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8000c86:	2364      	movs	r3, #100	; 0x64
 8000c88:	2201      	movs	r2, #1
 8000c8a:	481f      	ldr	r0, [pc, #124]	; (8000d08 <Task1_init+0x94>)
 8000c8c:	f004 fcaa 	bl	80055e4 <HAL_UART_Receive>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d131      	bne.n	8000cfa <Task1_init+0x86>
	  {
		  uint8_t message1[] = "Diode is ON\r\n";
 8000c96:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <Task1_init+0x98>)
 8000c98:	f107 0418 	add.w	r4, r7, #24
 8000c9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c9e:	c407      	stmia	r4!, {r0, r1, r2}
 8000ca0:	8023      	strh	r3, [r4, #0]
		  uint8_t message2[] = "Diode is OFF\r\n";
 8000ca2:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <Task1_init+0x9c>)
 8000ca4:	f107 0408 	add.w	r4, r7, #8
 8000ca8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000caa:	c407      	stmia	r4!, {r0, r1, r2}
 8000cac:	8023      	strh	r3, [r4, #0]
 8000cae:	3402      	adds	r4, #2
 8000cb0:	0c1b      	lsrs	r3, r3, #16
 8000cb2:	7023      	strb	r3, [r4, #0]
		  //HAL_UART_Transmit(&huart2, message, sizeof(message), 500);
		  if(receivedData == 'e')
 8000cb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cb8:	2b65      	cmp	r3, #101	; 0x65
 8000cba:	d10d      	bne.n	8000cd8 <Task1_init+0x64>
			{
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2120      	movs	r1, #32
 8000cc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc4:	f001 fdde 	bl	8002884 <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart2, message1, sizeof(message1), 200);
 8000cc8:	f107 0118 	add.w	r1, r7, #24
 8000ccc:	23c8      	movs	r3, #200	; 0xc8
 8000cce:	220e      	movs	r2, #14
 8000cd0:	480d      	ldr	r0, [pc, #52]	; (8000d08 <Task1_init+0x94>)
 8000cd2:	f004 fbfd 	bl	80054d0 <HAL_UART_Transmit>
 8000cd6:	e010      	b.n	8000cfa <Task1_init+0x86>
			}else if(receivedData == 'd')
 8000cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cdc:	2b64      	cmp	r3, #100	; 0x64
 8000cde:	d10c      	bne.n	8000cfa <Task1_init+0x86>
			{
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2120      	movs	r1, #32
 8000ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce8:	f001 fdcc 	bl	8002884 <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart2, message2, sizeof(message2), 200);
 8000cec:	f107 0108 	add.w	r1, r7, #8
 8000cf0:	23c8      	movs	r3, #200	; 0xc8
 8000cf2:	220f      	movs	r2, #15
 8000cf4:	4804      	ldr	r0, [pc, #16]	; (8000d08 <Task1_init+0x94>)
 8000cf6:	f004 fbeb 	bl	80054d0 <HAL_UART_Transmit>
				//dl_kom = sizeof(komunikat);
			}
	  }
	  //uint8_t text[] = "text from TASK1\r\n";
	  //HAL_UART_Transmit(&huart2, text, sizeof(text), 500);
	  osDelay(500);
 8000cfa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cfe:	f005 f9a1 	bl	8006044 <osDelay>
	  printf("Checking");
 8000d02:	e7bb      	b.n	8000c7c <Task1_init+0x8>
 8000d04:	0800a5c8 	.word	0x0800a5c8
 8000d08:	200008d0 	.word	0x200008d0
 8000d0c:	0800a5d4 	.word	0x0800a5d4
 8000d10:	0800a5e4 	.word	0x0800a5e4

08000d14 <StartLCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLCD */
void StartLCD(void const * argument)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	uint16_t receivedRaw;
	char lcd_msg[10];
  /* Infinite loop */
  for(;;)
  {
	xQueueReceive(myQueue01Handle, &receivedRaw, portMAX_DELAY);
 8000d1c:	4b1d      	ldr	r3, [pc, #116]	; (8000d94 <StartLCD+0x80>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f107 0116 	add.w	r1, r7, #22
 8000d24:	f04f 32ff 	mov.w	r2, #4294967295
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f005 fe91 	bl	8006a50 <xQueueReceive>
	sprintf(lcd_msg, "%hu", receivedRaw);
 8000d2e:	8afb      	ldrh	r3, [r7, #22]
 8000d30:	461a      	mov	r2, r3
 8000d32:	f107 030c 	add.w	r3, r7, #12
 8000d36:	4918      	ldr	r1, [pc, #96]	; (8000d98 <StartLCD+0x84>)
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f008 fb47 	bl	80093cc <siprintf>
    HD44780_Clear();
 8000d3e:	f7ff fb57 	bl	80003f0 <HD44780_Clear>
    HD44780_SetCursor(0,0);
 8000d42:	2100      	movs	r1, #0
 8000d44:	2000      	movs	r0, #0
 8000d46:	f7ff fb69 	bl	800041c <HD44780_SetCursor>
    HD44780_PrintStr("Water sensor:");
 8000d4a:	4814      	ldr	r0, [pc, #80]	; (8000d9c <StartLCD+0x88>)
 8000d4c:	f7ff fbd7 	bl	80004fe <HD44780_PrintStr>
    HD44780_SetCursor(0,1);
 8000d50:	2101      	movs	r1, #1
 8000d52:	2000      	movs	r0, #0
 8000d54:	f7ff fb62 	bl	800041c <HD44780_SetCursor>
    HD44780_PrintStr(lcd_msg);
 8000d58:	f107 030c 	add.w	r3, r7, #12
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fbce 	bl	80004fe <HD44780_PrintStr>
    HD44780_SetCursor(5,1);
 8000d62:	2101      	movs	r1, #1
 8000d64:	2005      	movs	r0, #5
 8000d66:	f7ff fb59 	bl	800041c <HD44780_SetCursor>
    if(receivedRaw>1000){
 8000d6a:	8afb      	ldrh	r3, [r7, #22]
 8000d6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d70:	d908      	bls.n	8000d84 <StartLCD+0x70>
    	HD44780_PrintStr("Woda obecna");
 8000d72:	480b      	ldr	r0, [pc, #44]	; (8000da0 <StartLCD+0x8c>)
 8000d74:	f7ff fbc3 	bl	80004fe <HD44780_PrintStr>
    	osSemaphoreRelease(myBinarySemAlarmHandle);
 8000d78:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <StartLCD+0x90>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f005 f9f5 	bl	800616c <osSemaphoreRelease>
 8000d82:	e002      	b.n	8000d8a <StartLCD+0x76>
    }
    else{
    	HD44780_PrintStr("Sucho");
 8000d84:	4808      	ldr	r0, [pc, #32]	; (8000da8 <StartLCD+0x94>)
 8000d86:	f7ff fbba 	bl	80004fe <HD44780_PrintStr>
    }
    osDelay(300);
 8000d8a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d8e:	f005 f959 	bl	8006044 <osDelay>
	xQueueReceive(myQueue01Handle, &receivedRaw, portMAX_DELAY);
 8000d92:	e7c3      	b.n	8000d1c <StartLCD+0x8>
 8000d94:	20000968 	.word	0x20000968
 8000d98:	0800a5f4 	.word	0x0800a5f4
 8000d9c:	0800a5f8 	.word	0x0800a5f8
 8000da0:	0800a608 	.word	0x0800a608
 8000da4:	2000096c 	.word	0x2000096c
 8000da8:	0800a614 	.word	0x0800a614

08000dac <StartWaterSensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWaterSensor */
void StartWaterSensor(void const * argument)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	uint16_t raw;
  /* Infinite loop */
  for(;;)
  {

    HAL_ADC_Start(&hadc2);
 8000db4:	480d      	ldr	r0, [pc, #52]	; (8000dec <StartWaterSensor+0x40>)
 8000db6:	f000 fd1f 	bl	80017f8 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8000dba:	f04f 31ff 	mov.w	r1, #4294967295
 8000dbe:	480b      	ldr	r0, [pc, #44]	; (8000dec <StartWaterSensor+0x40>)
 8000dc0:	f000 fe30 	bl	8001a24 <HAL_ADC_PollForConversion>
    raw = HAL_ADC_GetValue(&hadc2);
 8000dc4:	4809      	ldr	r0, [pc, #36]	; (8000dec <StartWaterSensor+0x40>)
 8000dc6:	f000 ff2f 	bl	8001c28 <HAL_ADC_GetValue>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	81fb      	strh	r3, [r7, #14]

    // Wyślij wartość "raw" do kolejki
    xQueueSend(myQueue01Handle, &raw, portMAX_DELAY);
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <StartWaterSensor+0x44>)
 8000dd2:	6818      	ldr	r0, [r3, #0]
 8000dd4:	f107 010e 	add.w	r1, r7, #14
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f04f 32ff 	mov.w	r2, #4294967295
 8000dde:	f005 fc13 	bl	8006608 <xQueueGenericSend>


    osDelay(300);
 8000de2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000de6:	f005 f92d 	bl	8006044 <osDelay>
    HAL_ADC_Start(&hadc2);
 8000dea:	e7e3      	b.n	8000db4 <StartWaterSensor+0x8>
 8000dec:	200007e0 	.word	0x200007e0
 8000df0:	20000968 	.word	0x20000968

08000df4 <StartAlarmLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAlarmLED */
void StartAlarmLED(void const * argument)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	uint16_t receivedRaw;
  /* Infinite loop */
  for(;;)
  {

	osSemaphoreWait(myBinarySemAlarmHandle, osWaitForever);
 8000dfc:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <StartAlarmLED+0x64>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f04f 31ff 	mov.w	r1, #4294967295
 8000e04:	4618      	mov	r0, r3
 8000e06:	f005 f963 	bl	80060d0 <osSemaphoreWait>

	xQueueReceive(myQueue01Handle, &receivedRaw, portMAX_DELAY);
 8000e0a:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <StartAlarmLED+0x68>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f107 010e 	add.w	r1, r7, #14
 8000e12:	f04f 32ff 	mov.w	r2, #4294967295
 8000e16:	4618      	mov	r0, r3
 8000e18:	f005 fe1a 	bl	8006a50 <xQueueReceive>

    if(receivedRaw>1000){
 8000e1c:	89fb      	ldrh	r3, [r7, #14]
 8000e1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e22:	d907      	bls.n	8000e34 <StartAlarmLED+0x40>
    	HAL_GPIO_WritePin(ALARM_LED_GPIO_Port, ALARM_LED_Pin, GPIO_PIN_SET);
 8000e24:	2201      	movs	r2, #1
 8000e26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2e:	f001 fd29 	bl	8002884 <HAL_GPIO_WritePin>
 8000e32:	e006      	b.n	8000e42 <StartAlarmLED+0x4e>
    }
    else{
    	HAL_GPIO_WritePin(ALARM_LED_GPIO_Port, ALARM_LED_Pin, GPIO_PIN_RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3e:	f001 fd21 	bl	8002884 <HAL_GPIO_WritePin>
    }
    osSemaphoreRelease(myBinarySemAlarmHandle);
 8000e42:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <StartAlarmLED+0x64>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f005 f990 	bl	800616c <osSemaphoreRelease>
    osDelay(300);
 8000e4c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000e50:	f005 f8f8 	bl	8006044 <osDelay>
	osSemaphoreWait(myBinarySemAlarmHandle, osWaitForever);
 8000e54:	e7d2      	b.n	8000dfc <StartAlarmLED+0x8>
 8000e56:	bf00      	nop
 8000e58:	2000096c 	.word	0x2000096c
 8000e5c:	20000968 	.word	0x20000968

08000e60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d101      	bne.n	8000e76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e72:	f000 fa83 	bl	800137c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40012c00 	.word	0x40012c00

08000e84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e88:	b672      	cpsid	i
}
 8000e8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <Error_Handler+0x8>
	...

08000e90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e96:	4b11      	ldr	r3, [pc, #68]	; (8000edc <HAL_MspInit+0x4c>)
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	4a10      	ldr	r2, [pc, #64]	; (8000edc <HAL_MspInit+0x4c>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6193      	str	r3, [r2, #24]
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <HAL_MspInit+0x4c>)
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <HAL_MspInit+0x4c>)
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	; (8000edc <HAL_MspInit+0x4c>)
 8000eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb8:	61d3      	str	r3, [r2, #28]
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <HAL_MspInit+0x4c>)
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	210f      	movs	r1, #15
 8000eca:	f06f 0001 	mvn.w	r0, #1
 8000ece:	f001 fb25 	bl	800251c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40021000 	.word	0x40021000

08000ee0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	; 0x28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a15      	ldr	r2, [pc, #84]	; (8000f54 <HAL_ADC_MspInit+0x74>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d124      	bne.n	8000f4c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <HAL_ADC_MspInit+0x78>)
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	4a14      	ldr	r2, [pc, #80]	; (8000f58 <HAL_ADC_MspInit+0x78>)
 8000f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f0c:	6153      	str	r3, [r2, #20]
 8000f0e:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <HAL_ADC_MspInit+0x78>)
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <HAL_ADC_MspInit+0x78>)
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	4a0e      	ldr	r2, [pc, #56]	; (8000f58 <HAL_ADC_MspInit+0x78>)
 8000f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f24:	6153      	str	r3, [r2, #20]
 8000f26:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <HAL_ADC_MspInit+0x78>)
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA4     ------> ADC2_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f32:	2310      	movs	r3, #16
 8000f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f36:	2303      	movs	r3, #3
 8000f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f48:	f001 fb12 	bl	8002570 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000f4c:	bf00      	nop
 8000f4e:	3728      	adds	r7, #40	; 0x28
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	50000100 	.word	0x50000100
 8000f58:	40021000 	.word	0x40021000

08000f5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	; 0x28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a17      	ldr	r2, [pc, #92]	; (8000fd8 <HAL_I2C_MspInit+0x7c>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d128      	bne.n	8000fd0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7e:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <HAL_I2C_MspInit+0x80>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	4a16      	ldr	r2, [pc, #88]	; (8000fdc <HAL_I2C_MspInit+0x80>)
 8000f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f88:	6153      	str	r3, [r2, #20]
 8000f8a:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <HAL_I2C_MspInit+0x80>)
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f9c:	2312      	movs	r3, #18
 8000f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fa8:	2304      	movs	r3, #4
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <HAL_I2C_MspInit+0x84>)
 8000fb4:	f001 fadc 	bl	8002570 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <HAL_I2C_MspInit+0x80>)
 8000fba:	69db      	ldr	r3, [r3, #28]
 8000fbc:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <HAL_I2C_MspInit+0x80>)
 8000fbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fc2:	61d3      	str	r3, [r2, #28]
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <HAL_I2C_MspInit+0x80>)
 8000fc6:	69db      	ldr	r3, [r3, #28]
 8000fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fd0:	bf00      	nop
 8000fd2:	3728      	adds	r7, #40	; 0x28
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40005400 	.word	0x40005400
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	48000400 	.word	0x48000400

08000fe4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a0a      	ldr	r2, [pc, #40]	; (800101c <HAL_TIM_Base_MspInit+0x38>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d10b      	bne.n	800100e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <HAL_TIM_Base_MspInit+0x3c>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	4a09      	ldr	r2, [pc, #36]	; (8001020 <HAL_TIM_Base_MspInit+0x3c>)
 8000ffc:	f043 0302 	orr.w	r3, r3, #2
 8001000:	61d3      	str	r3, [r2, #28]
 8001002:	4b07      	ldr	r3, [pc, #28]	; (8001020 <HAL_TIM_Base_MspInit+0x3c>)
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800100e:	bf00      	nop
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40000400 	.word	0x40000400
 8001020:	40021000 	.word	0x40021000

08001024 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	; 0x28
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a17      	ldr	r2, [pc, #92]	; (80010a0 <HAL_UART_MspInit+0x7c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d128      	bne.n	8001098 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001046:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <HAL_UART_MspInit+0x80>)
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	4a16      	ldr	r2, [pc, #88]	; (80010a4 <HAL_UART_MspInit+0x80>)
 800104c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001050:	61d3      	str	r3, [r2, #28]
 8001052:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <HAL_UART_MspInit+0x80>)
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <HAL_UART_MspInit+0x80>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	4a10      	ldr	r2, [pc, #64]	; (80010a4 <HAL_UART_MspInit+0x80>)
 8001064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001068:	6153      	str	r3, [r2, #20]
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <HAL_UART_MspInit+0x80>)
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001076:	230c      	movs	r3, #12
 8001078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001086:	2307      	movs	r3, #7
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001094:	f001 fa6c 	bl	8002570 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001098:	bf00      	nop
 800109a:	3728      	adds	r7, #40	; 0x28
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40004400 	.word	0x40004400
 80010a4:	40021000 	.word	0x40021000

080010a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08c      	sub	sp, #48	; 0x30
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80010b4:	2300      	movs	r3, #0
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80010b8:	4b2e      	ldr	r3, [pc, #184]	; (8001174 <HAL_InitTick+0xcc>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	4a2d      	ldr	r2, [pc, #180]	; (8001174 <HAL_InitTick+0xcc>)
 80010be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010c2:	6193      	str	r3, [r2, #24]
 80010c4:	4b2b      	ldr	r3, [pc, #172]	; (8001174 <HAL_InitTick+0xcc>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010d0:	f107 020c 	add.w	r2, r7, #12
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	4611      	mov	r1, r2
 80010da:	4618      	mov	r0, r3
 80010dc:	f003 faa0 	bl	8004620 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80010e0:	f003 fa7c 	bl	80045dc <HAL_RCC_GetPCLK2Freq>
 80010e4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e8:	4a23      	ldr	r2, [pc, #140]	; (8001178 <HAL_InitTick+0xd0>)
 80010ea:	fba2 2303 	umull	r2, r3, r2, r3
 80010ee:	0c9b      	lsrs	r3, r3, #18
 80010f0:	3b01      	subs	r3, #1
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80010f4:	4b21      	ldr	r3, [pc, #132]	; (800117c <HAL_InitTick+0xd4>)
 80010f6:	4a22      	ldr	r2, [pc, #136]	; (8001180 <HAL_InitTick+0xd8>)
 80010f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80010fa:	4b20      	ldr	r3, [pc, #128]	; (800117c <HAL_InitTick+0xd4>)
 80010fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001100:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001102:	4a1e      	ldr	r2, [pc, #120]	; (800117c <HAL_InitTick+0xd4>)
 8001104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001106:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001108:	4b1c      	ldr	r3, [pc, #112]	; (800117c <HAL_InitTick+0xd4>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800110e:	4b1b      	ldr	r3, [pc, #108]	; (800117c <HAL_InitTick+0xd4>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001114:	4b19      	ldr	r3, [pc, #100]	; (800117c <HAL_InitTick+0xd4>)
 8001116:	2200      	movs	r2, #0
 8001118:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800111a:	4818      	ldr	r0, [pc, #96]	; (800117c <HAL_InitTick+0xd4>)
 800111c:	f003 fcd0 	bl	8004ac0 <HAL_TIM_Base_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001126:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800112a:	2b00      	cmp	r3, #0
 800112c:	d11b      	bne.n	8001166 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800112e:	4813      	ldr	r0, [pc, #76]	; (800117c <HAL_InitTick+0xd4>)
 8001130:	f003 fd1e 	bl	8004b70 <HAL_TIM_Base_Start_IT>
 8001134:	4603      	mov	r3, r0
 8001136:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800113a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800113e:	2b00      	cmp	r3, #0
 8001140:	d111      	bne.n	8001166 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001142:	2019      	movs	r0, #25
 8001144:	f001 fa06 	bl	8002554 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b0f      	cmp	r3, #15
 800114c:	d808      	bhi.n	8001160 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 800114e:	2200      	movs	r2, #0
 8001150:	6879      	ldr	r1, [r7, #4]
 8001152:	2019      	movs	r0, #25
 8001154:	f001 f9e2 	bl	800251c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001158:	4a0a      	ldr	r2, [pc, #40]	; (8001184 <HAL_InitTick+0xdc>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	e002      	b.n	8001166 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001166:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800116a:	4618      	mov	r0, r3
 800116c:	3730      	adds	r7, #48	; 0x30
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40021000 	.word	0x40021000
 8001178:	431bde83 	.word	0x431bde83
 800117c:	20000970 	.word	0x20000970
 8001180:	40012c00 	.word	0x40012c00
 8001184:	20000014 	.word	0x20000014

08001188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800118c:	e7fe      	b.n	800118c <NMI_Handler+0x4>

0800118e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001192:	e7fe      	b.n	8001192 <HardFault_Handler+0x4>

08001194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <MemManage_Handler+0x4>

0800119a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800119e:	e7fe      	b.n	800119e <BusFault_Handler+0x4>

080011a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <UsageFault_Handler+0x4>

080011a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011b8:	4802      	ldr	r0, [pc, #8]	; (80011c4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80011ba:	f003 fd49 	bl	8004c50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000970 	.word	0x20000970

080011c8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	e00a      	b.n	80011f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011da:	f3af 8000 	nop.w
 80011de:	4601      	mov	r1, r0
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	1c5a      	adds	r2, r3, #1
 80011e4:	60ba      	str	r2, [r7, #8]
 80011e6:	b2ca      	uxtb	r2, r1
 80011e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	3301      	adds	r3, #1
 80011ee:	617b      	str	r3, [r7, #20]
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	dbf0      	blt.n	80011da <_read+0x12>
  }

  return len;
 80011f8:	687b      	ldr	r3, [r7, #4]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001202:	b480      	push	{r7}
 8001204:	b083      	sub	sp, #12
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800120a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800120e:	4618      	mov	r0, r3
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800122a:	605a      	str	r2, [r3, #4]
  return 0;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <_isatty>:

int _isatty(int file)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001242:	2301      	movs	r3, #1
}
 8001244:	4618      	mov	r0, r3
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
	...

0800126c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001274:	4a14      	ldr	r2, [pc, #80]	; (80012c8 <_sbrk+0x5c>)
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <_sbrk+0x60>)
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001280:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <_sbrk+0x64>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d102      	bne.n	800128e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001288:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <_sbrk+0x64>)
 800128a:	4a12      	ldr	r2, [pc, #72]	; (80012d4 <_sbrk+0x68>)
 800128c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800128e:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <_sbrk+0x64>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4413      	add	r3, r2
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	429a      	cmp	r2, r3
 800129a:	d207      	bcs.n	80012ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800129c:	f008 fa32 	bl	8009704 <__errno>
 80012a0:	4603      	mov	r3, r0
 80012a2:	220c      	movs	r2, #12
 80012a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295
 80012aa:	e009      	b.n	80012c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <_sbrk+0x64>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012b2:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <_sbrk+0x64>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	4a05      	ldr	r2, [pc, #20]	; (80012d0 <_sbrk+0x64>)
 80012bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012be:	68fb      	ldr	r3, [r7, #12]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20010000 	.word	0x20010000
 80012cc:	00000400 	.word	0x00000400
 80012d0:	200009bc 	.word	0x200009bc
 80012d4:	20001998 	.word	0x20001998

080012d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <SystemInit+0x20>)
 80012de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012e2:	4a05      	ldr	r2, [pc, #20]	; (80012f8 <SystemInit+0x20>)
 80012e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001334 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001300:	f7ff ffea 	bl	80012d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001304:	480c      	ldr	r0, [pc, #48]	; (8001338 <LoopForever+0x6>)
  ldr r1, =_edata
 8001306:	490d      	ldr	r1, [pc, #52]	; (800133c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001308:	4a0d      	ldr	r2, [pc, #52]	; (8001340 <LoopForever+0xe>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800130c:	e002      	b.n	8001314 <LoopCopyDataInit>

0800130e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001312:	3304      	adds	r3, #4

08001314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001318:	d3f9      	bcc.n	800130e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131a:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <LoopForever+0x12>)
  ldr r4, =_ebss
 800131c:	4c0a      	ldr	r4, [pc, #40]	; (8001348 <LoopForever+0x16>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001320:	e001      	b.n	8001326 <LoopFillZerobss>

08001322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001324:	3204      	adds	r2, #4

08001326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001328:	d3fb      	bcc.n	8001322 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800132a:	f008 f9f1 	bl	8009710 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800132e:	f7ff fa1b 	bl	8000768 <main>

08001332 <LoopForever>:

LoopForever:
    b LoopForever
 8001332:	e7fe      	b.n	8001332 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001334:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800133c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001340:	0800a6a8 	.word	0x0800a6a8
  ldr r2, =_sbss
 8001344:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001348:	20001998 	.word	0x20001998

0800134c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800134c:	e7fe      	b.n	800134c <ADC1_2_IRQHandler>
	...

08001350 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <HAL_Init+0x28>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a07      	ldr	r2, [pc, #28]	; (8001378 <HAL_Init+0x28>)
 800135a:	f043 0310 	orr.w	r3, r3, #16
 800135e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001360:	2003      	movs	r0, #3
 8001362:	f001 f8d0 	bl	8002506 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001366:	200f      	movs	r0, #15
 8001368:	f7ff fe9e 	bl	80010a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800136c:	f7ff fd90 	bl	8000e90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40022000 	.word	0x40022000

0800137c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_IncTick+0x20>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	461a      	mov	r2, r3
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_IncTick+0x24>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4413      	add	r3, r2
 800138c:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <HAL_IncTick+0x24>)
 800138e:	6013      	str	r3, [r2, #0]
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20000018 	.word	0x20000018
 80013a0:	200009c0 	.word	0x200009c0

080013a4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return uwTick;  
 80013a8:	4b03      	ldr	r3, [pc, #12]	; (80013b8 <HAL_GetTick+0x14>)
 80013aa:	681b      	ldr	r3, [r3, #0]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	200009c0 	.word	0x200009c0

080013bc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c4:	f7ff ffee 	bl	80013a4 <HAL_GetTick>
 80013c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d4:	d005      	beq.n	80013e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <HAL_Delay+0x44>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	461a      	mov	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4413      	add	r3, r2
 80013e0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80013e2:	bf00      	nop
 80013e4:	f7ff ffde 	bl	80013a4 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d8f7      	bhi.n	80013e4 <HAL_Delay+0x28>
  {
  }
}
 80013f4:	bf00      	nop
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000018 	.word	0x20000018

08001404 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b09a      	sub	sp, #104	; 0x68
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800140c:	2300      	movs	r3, #0
 800140e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001412:	2300      	movs	r3, #0
 8001414:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001416:	2300      	movs	r3, #0
 8001418:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d101      	bne.n	8001424 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e1e3      	b.n	80017ec <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	f003 0310 	and.w	r3, r3, #16
 8001432:	2b00      	cmp	r3, #0
 8001434:	d176      	bne.n	8001524 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	2b00      	cmp	r3, #0
 800143c:	d152      	bne.n	80014e4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff fd41 	bl	8000ee0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d13b      	bne.n	80014e4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f000 ff37 	bl	80022e0 <ADC_Disable>
 8001472:	4603      	mov	r3, r0
 8001474:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147c:	f003 0310 	and.w	r3, r3, #16
 8001480:	2b00      	cmp	r3, #0
 8001482:	d12f      	bne.n	80014e4 <HAL_ADC_Init+0xe0>
 8001484:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001488:	2b00      	cmp	r3, #0
 800148a:	d12b      	bne.n	80014e4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001494:	f023 0302 	bic.w	r3, r3, #2
 8001498:	f043 0202 	orr.w	r2, r3, #2
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014ae:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014be:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014c0:	4b92      	ldr	r3, [pc, #584]	; (800170c <HAL_ADC_Init+0x308>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a92      	ldr	r2, [pc, #584]	; (8001710 <HAL_ADC_Init+0x30c>)
 80014c6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ca:	0c9a      	lsrs	r2, r3, #18
 80014cc:	4613      	mov	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014d6:	e002      	b.n	80014de <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	3b01      	subs	r3, #1
 80014dc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1f9      	bne.n	80014d8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d007      	beq.n	8001502 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80014fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001500:	d110      	bne.n	8001524 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	f023 0312 	bic.w	r3, r3, #18
 800150a:	f043 0210 	orr.w	r2, r3, #16
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	f043 0201 	orr.w	r2, r3, #1
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	f003 0310 	and.w	r3, r3, #16
 800152c:	2b00      	cmp	r3, #0
 800152e:	f040 8150 	bne.w	80017d2 <HAL_ADC_Init+0x3ce>
 8001532:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001536:	2b00      	cmp	r3, #0
 8001538:	f040 814b 	bne.w	80017d2 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001546:	2b00      	cmp	r3, #0
 8001548:	f040 8143 	bne.w	80017d2 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001554:	f043 0202 	orr.w	r2, r3, #2
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001564:	d004      	beq.n	8001570 <HAL_ADC_Init+0x16c>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a6a      	ldr	r2, [pc, #424]	; (8001714 <HAL_ADC_Init+0x310>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d101      	bne.n	8001574 <HAL_ADC_Init+0x170>
 8001570:	4b69      	ldr	r3, [pc, #420]	; (8001718 <HAL_ADC_Init+0x314>)
 8001572:	e000      	b.n	8001576 <HAL_ADC_Init+0x172>
 8001574:	4b69      	ldr	r3, [pc, #420]	; (800171c <HAL_ADC_Init+0x318>)
 8001576:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001580:	d102      	bne.n	8001588 <HAL_ADC_Init+0x184>
 8001582:	4b64      	ldr	r3, [pc, #400]	; (8001714 <HAL_ADC_Init+0x310>)
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	e01a      	b.n	80015be <HAL_ADC_Init+0x1ba>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a61      	ldr	r2, [pc, #388]	; (8001714 <HAL_ADC_Init+0x310>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d103      	bne.n	800159a <HAL_ADC_Init+0x196>
 8001592:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	e011      	b.n	80015be <HAL_ADC_Init+0x1ba>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a60      	ldr	r2, [pc, #384]	; (8001720 <HAL_ADC_Init+0x31c>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d102      	bne.n	80015aa <HAL_ADC_Init+0x1a6>
 80015a4:	4b5f      	ldr	r3, [pc, #380]	; (8001724 <HAL_ADC_Init+0x320>)
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	e009      	b.n	80015be <HAL_ADC_Init+0x1ba>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a5d      	ldr	r2, [pc, #372]	; (8001724 <HAL_ADC_Init+0x320>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d102      	bne.n	80015ba <HAL_ADC_Init+0x1b6>
 80015b4:	4b5a      	ldr	r3, [pc, #360]	; (8001720 <HAL_ADC_Init+0x31c>)
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	e001      	b.n	80015be <HAL_ADC_Init+0x1ba>
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d108      	bne.n	80015de <HAL_ADC_Init+0x1da>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d101      	bne.n	80015de <HAL_ADC_Init+0x1da>
 80015da:	2301      	movs	r3, #1
 80015dc:	e000      	b.n	80015e0 <HAL_ADC_Init+0x1dc>
 80015de:	2300      	movs	r3, #0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d11c      	bne.n	800161e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80015e4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d010      	beq.n	800160c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 0303 	and.w	r3, r3, #3
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d107      	bne.n	8001606 <HAL_ADC_Init+0x202>
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d101      	bne.n	8001606 <HAL_ADC_Init+0x202>
 8001602:	2301      	movs	r3, #1
 8001604:	e000      	b.n	8001608 <HAL_ADC_Init+0x204>
 8001606:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001608:	2b00      	cmp	r3, #0
 800160a:	d108      	bne.n	800161e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800160c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	431a      	orrs	r2, r3
 800161a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800161c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	7e5b      	ldrb	r3, [r3, #25]
 8001622:	035b      	lsls	r3, r3, #13
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001628:	2a01      	cmp	r2, #1
 800162a:	d002      	beq.n	8001632 <HAL_ADC_Init+0x22e>
 800162c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001630:	e000      	b.n	8001634 <HAL_ADC_Init+0x230>
 8001632:	2200      	movs	r2, #0
 8001634:	431a      	orrs	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	4313      	orrs	r3, r2
 8001642:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001644:	4313      	orrs	r3, r2
 8001646:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d11b      	bne.n	800168a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	7e5b      	ldrb	r3, [r3, #25]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d109      	bne.n	800166e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165e:	3b01      	subs	r3, #1
 8001660:	045a      	lsls	r2, r3, #17
 8001662:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001664:	4313      	orrs	r3, r2
 8001666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800166a:	663b      	str	r3, [r7, #96]	; 0x60
 800166c:	e00d      	b.n	800168a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001676:	f043 0220 	orr.w	r2, r3, #32
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	f043 0201 	orr.w	r2, r3, #1
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168e:	2b01      	cmp	r3, #1
 8001690:	d054      	beq.n	800173c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a22      	ldr	r2, [pc, #136]	; (8001720 <HAL_ADC_Init+0x31c>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d004      	beq.n	80016a6 <HAL_ADC_Init+0x2a2>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a20      	ldr	r2, [pc, #128]	; (8001724 <HAL_ADC_Init+0x320>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d140      	bne.n	8001728 <HAL_ADC_Init+0x324>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016aa:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80016ae:	d02a      	beq.n	8001706 <HAL_ADC_Init+0x302>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016b8:	d022      	beq.n	8001700 <HAL_ADC_Init+0x2fc>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016be:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80016c2:	d01a      	beq.n	80016fa <HAL_ADC_Init+0x2f6>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c8:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80016cc:	d012      	beq.n	80016f4 <HAL_ADC_Init+0x2f0>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d2:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80016d6:	d00a      	beq.n	80016ee <HAL_ADC_Init+0x2ea>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016dc:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80016e0:	d002      	beq.n	80016e8 <HAL_ADC_Init+0x2e4>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e6:	e023      	b.n	8001730 <HAL_ADC_Init+0x32c>
 80016e8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80016ec:	e020      	b.n	8001730 <HAL_ADC_Init+0x32c>
 80016ee:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80016f2:	e01d      	b.n	8001730 <HAL_ADC_Init+0x32c>
 80016f4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80016f8:	e01a      	b.n	8001730 <HAL_ADC_Init+0x32c>
 80016fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016fe:	e017      	b.n	8001730 <HAL_ADC_Init+0x32c>
 8001700:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001704:	e014      	b.n	8001730 <HAL_ADC_Init+0x32c>
 8001706:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800170a:	e011      	b.n	8001730 <HAL_ADC_Init+0x32c>
 800170c:	20000010 	.word	0x20000010
 8001710:	431bde83 	.word	0x431bde83
 8001714:	50000100 	.word	0x50000100
 8001718:	50000300 	.word	0x50000300
 800171c:	50000700 	.word	0x50000700
 8001720:	50000400 	.word	0x50000400
 8001724:	50000500 	.word	0x50000500
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001734:	4313      	orrs	r3, r2
 8001736:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001738:	4313      	orrs	r3, r2
 800173a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 030c 	and.w	r3, r3, #12
 8001746:	2b00      	cmp	r3, #0
 8001748:	d114      	bne.n	8001774 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6812      	ldr	r2, [r2, #0]
 8001754:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001758:	f023 0302 	bic.w	r3, r3, #2
 800175c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	7e1b      	ldrb	r3, [r3, #24]
 8001762:	039a      	lsls	r2, r3, #14
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4313      	orrs	r3, r2
 800176e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001770:	4313      	orrs	r3, r2
 8001772:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	68da      	ldr	r2, [r3, #12]
 800177a:	4b1e      	ldr	r3, [pc, #120]	; (80017f4 <HAL_ADC_Init+0x3f0>)
 800177c:	4013      	ands	r3, r2
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6812      	ldr	r2, [r2, #0]
 8001782:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001784:	430b      	orrs	r3, r1
 8001786:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d10c      	bne.n	80017aa <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f023 010f 	bic.w	r1, r3, #15
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	1e5a      	subs	r2, r3, #1
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	430a      	orrs	r2, r1
 80017a6:	631a      	str	r2, [r3, #48]	; 0x30
 80017a8:	e007      	b.n	80017ba <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 020f 	bic.w	r2, r2, #15
 80017b8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	f023 0303 	bic.w	r3, r3, #3
 80017c8:	f043 0201 	orr.w	r2, r3, #1
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	641a      	str	r2, [r3, #64]	; 0x40
 80017d0:	e00a      	b.n	80017e8 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	f023 0312 	bic.w	r3, r3, #18
 80017da:	f043 0210 	orr.w	r2, r3, #16
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80017e2:	2301      	movs	r3, #1
 80017e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80017e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3768      	adds	r7, #104	; 0x68
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	fff0c007 	.word	0xfff0c007

080017f8 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001800:	2300      	movs	r3, #0
 8001802:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	2b00      	cmp	r3, #0
 8001810:	f040 80f9 	bne.w	8001a06 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800181a:	2b01      	cmp	r3, #1
 800181c:	d101      	bne.n	8001822 <HAL_ADC_Start+0x2a>
 800181e:	2302      	movs	r3, #2
 8001820:	e0f4      	b.n	8001a0c <HAL_ADC_Start+0x214>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2201      	movs	r2, #1
 8001826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 fcf4 	bl	8002218 <ADC_Enable>
 8001830:	4603      	mov	r3, r0
 8001832:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001834:	7bfb      	ldrb	r3, [r7, #15]
 8001836:	2b00      	cmp	r3, #0
 8001838:	f040 80e0 	bne.w	80019fc <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001844:	f023 0301 	bic.w	r3, r3, #1
 8001848:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001858:	d004      	beq.n	8001864 <HAL_ADC_Start+0x6c>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a6d      	ldr	r2, [pc, #436]	; (8001a14 <HAL_ADC_Start+0x21c>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d106      	bne.n	8001872 <HAL_ADC_Start+0x7a>
 8001864:	4b6c      	ldr	r3, [pc, #432]	; (8001a18 <HAL_ADC_Start+0x220>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f003 031f 	and.w	r3, r3, #31
 800186c:	2b00      	cmp	r3, #0
 800186e:	d010      	beq.n	8001892 <HAL_ADC_Start+0x9a>
 8001870:	e005      	b.n	800187e <HAL_ADC_Start+0x86>
 8001872:	4b6a      	ldr	r3, [pc, #424]	; (8001a1c <HAL_ADC_Start+0x224>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 031f 	and.w	r3, r3, #31
 800187a:	2b00      	cmp	r3, #0
 800187c:	d009      	beq.n	8001892 <HAL_ADC_Start+0x9a>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001886:	d004      	beq.n	8001892 <HAL_ADC_Start+0x9a>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a64      	ldr	r2, [pc, #400]	; (8001a20 <HAL_ADC_Start+0x228>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d115      	bne.n	80018be <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d036      	beq.n	800191a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80018bc:	e02d      	b.n	800191a <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018d2:	d004      	beq.n	80018de <HAL_ADC_Start+0xe6>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a4e      	ldr	r2, [pc, #312]	; (8001a14 <HAL_ADC_Start+0x21c>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d10a      	bne.n	80018f4 <HAL_ADC_Start+0xfc>
 80018de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	bf14      	ite	ne
 80018ec:	2301      	movne	r3, #1
 80018ee:	2300      	moveq	r3, #0
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	e008      	b.n	8001906 <HAL_ADC_Start+0x10e>
 80018f4:	4b4a      	ldr	r3, [pc, #296]	; (8001a20 <HAL_ADC_Start+0x228>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	bf14      	ite	ne
 8001900:	2301      	movne	r3, #1
 8001902:	2300      	moveq	r3, #0
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d007      	beq.n	800191a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001912:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001926:	d106      	bne.n	8001936 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192c:	f023 0206 	bic.w	r2, r3, #6
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	645a      	str	r2, [r3, #68]	; 0x44
 8001934:	e002      	b.n	800193c <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	221c      	movs	r2, #28
 800194a:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001954:	d004      	beq.n	8001960 <HAL_ADC_Start+0x168>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a2e      	ldr	r2, [pc, #184]	; (8001a14 <HAL_ADC_Start+0x21c>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d106      	bne.n	800196e <HAL_ADC_Start+0x176>
 8001960:	4b2d      	ldr	r3, [pc, #180]	; (8001a18 <HAL_ADC_Start+0x220>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 031f 	and.w	r3, r3, #31
 8001968:	2b00      	cmp	r3, #0
 800196a:	d03e      	beq.n	80019ea <HAL_ADC_Start+0x1f2>
 800196c:	e005      	b.n	800197a <HAL_ADC_Start+0x182>
 800196e:	4b2b      	ldr	r3, [pc, #172]	; (8001a1c <HAL_ADC_Start+0x224>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 031f 	and.w	r3, r3, #31
 8001976:	2b00      	cmp	r3, #0
 8001978:	d037      	beq.n	80019ea <HAL_ADC_Start+0x1f2>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001982:	d004      	beq.n	800198e <HAL_ADC_Start+0x196>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a22      	ldr	r2, [pc, #136]	; (8001a14 <HAL_ADC_Start+0x21c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d106      	bne.n	800199c <HAL_ADC_Start+0x1a4>
 800198e:	4b22      	ldr	r3, [pc, #136]	; (8001a18 <HAL_ADC_Start+0x220>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f003 031f 	and.w	r3, r3, #31
 8001996:	2b05      	cmp	r3, #5
 8001998:	d027      	beq.n	80019ea <HAL_ADC_Start+0x1f2>
 800199a:	e005      	b.n	80019a8 <HAL_ADC_Start+0x1b0>
 800199c:	4b1f      	ldr	r3, [pc, #124]	; (8001a1c <HAL_ADC_Start+0x224>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 031f 	and.w	r3, r3, #31
 80019a4:	2b05      	cmp	r3, #5
 80019a6:	d020      	beq.n	80019ea <HAL_ADC_Start+0x1f2>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019b0:	d004      	beq.n	80019bc <HAL_ADC_Start+0x1c4>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a17      	ldr	r2, [pc, #92]	; (8001a14 <HAL_ADC_Start+0x21c>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d106      	bne.n	80019ca <HAL_ADC_Start+0x1d2>
 80019bc:	4b16      	ldr	r3, [pc, #88]	; (8001a18 <HAL_ADC_Start+0x220>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 031f 	and.w	r3, r3, #31
 80019c4:	2b09      	cmp	r3, #9
 80019c6:	d010      	beq.n	80019ea <HAL_ADC_Start+0x1f2>
 80019c8:	e005      	b.n	80019d6 <HAL_ADC_Start+0x1de>
 80019ca:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <HAL_ADC_Start+0x224>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 031f 	and.w	r3, r3, #31
 80019d2:	2b09      	cmp	r3, #9
 80019d4:	d009      	beq.n	80019ea <HAL_ADC_Start+0x1f2>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019de:	d004      	beq.n	80019ea <HAL_ADC_Start+0x1f2>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a0e      	ldr	r2, [pc, #56]	; (8001a20 <HAL_ADC_Start+0x228>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d10f      	bne.n	8001a0a <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f042 0204 	orr.w	r2, r2, #4
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	e006      	b.n	8001a0a <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001a04:	e001      	b.n	8001a0a <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a06:	2302      	movs	r3, #2
 8001a08:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	50000100 	.word	0x50000100
 8001a18:	50000300 	.word	0x50000300
 8001a1c:	50000700 	.word	0x50000700
 8001a20:	50000400 	.word	0x50000400

08001a24 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	2b08      	cmp	r3, #8
 8001a38:	d102      	bne.n	8001a40 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001a3a:	2308      	movs	r3, #8
 8001a3c:	617b      	str	r3, [r7, #20]
 8001a3e:	e03a      	b.n	8001ab6 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a48:	d004      	beq.n	8001a54 <HAL_ADC_PollForConversion+0x30>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a72      	ldr	r2, [pc, #456]	; (8001c18 <HAL_ADC_PollForConversion+0x1f4>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d101      	bne.n	8001a58 <HAL_ADC_PollForConversion+0x34>
 8001a54:	4b71      	ldr	r3, [pc, #452]	; (8001c1c <HAL_ADC_PollForConversion+0x1f8>)
 8001a56:	e000      	b.n	8001a5a <HAL_ADC_PollForConversion+0x36>
 8001a58:	4b71      	ldr	r3, [pc, #452]	; (8001c20 <HAL_ADC_PollForConversion+0x1fc>)
 8001a5a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 031f 	and.w	r3, r3, #31
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d112      	bne.n	8001a8e <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d11d      	bne.n	8001ab2 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	f043 0220 	orr.w	r2, r3, #32
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e0bf      	b.n	8001c0e <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d00b      	beq.n	8001ab2 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	f043 0220 	orr.w	r2, r3, #32
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e0ad      	b.n	8001c0e <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001ab2:	230c      	movs	r3, #12
 8001ab4:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001abe:	d004      	beq.n	8001aca <HAL_ADC_PollForConversion+0xa6>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a54      	ldr	r2, [pc, #336]	; (8001c18 <HAL_ADC_PollForConversion+0x1f4>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d106      	bne.n	8001ad8 <HAL_ADC_PollForConversion+0xb4>
 8001aca:	4b54      	ldr	r3, [pc, #336]	; (8001c1c <HAL_ADC_PollForConversion+0x1f8>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 031f 	and.w	r3, r3, #31
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d010      	beq.n	8001af8 <HAL_ADC_PollForConversion+0xd4>
 8001ad6:	e005      	b.n	8001ae4 <HAL_ADC_PollForConversion+0xc0>
 8001ad8:	4b51      	ldr	r3, [pc, #324]	; (8001c20 <HAL_ADC_PollForConversion+0x1fc>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 031f 	and.w	r3, r3, #31
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d009      	beq.n	8001af8 <HAL_ADC_PollForConversion+0xd4>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001aec:	d004      	beq.n	8001af8 <HAL_ADC_PollForConversion+0xd4>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a4c      	ldr	r2, [pc, #304]	; (8001c24 <HAL_ADC_PollForConversion+0x200>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d104      	bne.n	8001b02 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	e00f      	b.n	8001b22 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b0a:	d004      	beq.n	8001b16 <HAL_ADC_PollForConversion+0xf2>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a41      	ldr	r2, [pc, #260]	; (8001c18 <HAL_ADC_PollForConversion+0x1f4>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d102      	bne.n	8001b1c <HAL_ADC_PollForConversion+0xf8>
 8001b16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b1a:	e000      	b.n	8001b1e <HAL_ADC_PollForConversion+0xfa>
 8001b1c:	4b41      	ldr	r3, [pc, #260]	; (8001c24 <HAL_ADC_PollForConversion+0x200>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001b22:	f7ff fc3f 	bl	80013a4 <HAL_GetTick>
 8001b26:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001b28:	e021      	b.n	8001b6e <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b30:	d01d      	beq.n	8001b6e <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d007      	beq.n	8001b48 <HAL_ADC_PollForConversion+0x124>
 8001b38:	f7ff fc34 	bl	80013a4 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d212      	bcs.n	8001b6e <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	4013      	ands	r3, r2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10b      	bne.n	8001b6e <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	f043 0204 	orr.w	r2, r3, #4
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e04f      	b.n	8001c0e <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	4013      	ands	r3, r2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d0d6      	beq.n	8001b2a <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b80:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d131      	bne.n	8001bfa <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d12c      	bne.n	8001bfa <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b08      	cmp	r3, #8
 8001bac:	d125      	bne.n	8001bfa <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d112      	bne.n	8001be2 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d112      	bne.n	8001bfa <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	f043 0201 	orr.w	r2, r3, #1
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	641a      	str	r2, [r3, #64]	; 0x40
 8001be0:	e00b      	b.n	8001bfa <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	f043 0220 	orr.w	r2, r3, #32
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf2:	f043 0201 	orr.w	r2, r3, #1
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d103      	bne.n	8001c0c <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	50000100 	.word	0x50000100
 8001c1c:	50000300 	.word	0x50000300
 8001c20:	50000700 	.word	0x50000700
 8001c24:	50000400 	.word	0x50000400

08001c28 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
	...

08001c44 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b09b      	sub	sp, #108	; 0x6c
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001c54:	2300      	movs	r3, #0
 8001c56:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d101      	bne.n	8001c66 <HAL_ADC_ConfigChannel+0x22>
 8001c62:	2302      	movs	r3, #2
 8001c64:	e2c8      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x5b4>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f040 82ac 	bne.w	80021d6 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	d81c      	bhi.n	8001cc0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	4613      	mov	r3, r2
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	4413      	add	r3, r2
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	461a      	mov	r2, r3
 8001c9a:	231f      	movs	r3, #31
 8001c9c:	4093      	lsls	r3, r2
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	4019      	ands	r1, r3
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	6818      	ldr	r0, [r3, #0]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	4613      	mov	r3, r2
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4413      	add	r3, r2
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	fa00 f203 	lsl.w	r2, r0, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	631a      	str	r2, [r3, #48]	; 0x30
 8001cbe:	e063      	b.n	8001d88 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	2b09      	cmp	r3, #9
 8001cc6:	d81e      	bhi.n	8001d06 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	4413      	add	r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	3b1e      	subs	r3, #30
 8001cdc:	221f      	movs	r2, #31
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	4019      	ands	r1, r3
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	6818      	ldr	r0, [r3, #0]
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	4413      	add	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	3b1e      	subs	r3, #30
 8001cf8:	fa00 f203 	lsl.w	r2, r0, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	430a      	orrs	r2, r1
 8001d02:	635a      	str	r2, [r3, #52]	; 0x34
 8001d04:	e040      	b.n	8001d88 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b0e      	cmp	r3, #14
 8001d0c:	d81e      	bhi.n	8001d4c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	4413      	add	r3, r2
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	3b3c      	subs	r3, #60	; 0x3c
 8001d22:	221f      	movs	r2, #31
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	4019      	ands	r1, r3
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	6818      	ldr	r0, [r3, #0]
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	4613      	mov	r3, r2
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	4413      	add	r3, r2
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	3b3c      	subs	r3, #60	; 0x3c
 8001d3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	639a      	str	r2, [r3, #56]	; 0x38
 8001d4a:	e01d      	b.n	8001d88 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	4613      	mov	r3, r2
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	4413      	add	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	3b5a      	subs	r3, #90	; 0x5a
 8001d60:	221f      	movs	r2, #31
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43db      	mvns	r3, r3
 8001d68:	4019      	ands	r1, r3
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	6818      	ldr	r0, [r3, #0]
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	4613      	mov	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4413      	add	r3, r2
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	3b5a      	subs	r3, #90	; 0x5a
 8001d7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 030c 	and.w	r3, r3, #12
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f040 80e5 	bne.w	8001f62 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b09      	cmp	r3, #9
 8001d9e:	d91c      	bls.n	8001dda <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6999      	ldr	r1, [r3, #24]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	4613      	mov	r3, r2
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	4413      	add	r3, r2
 8001db0:	3b1e      	subs	r3, #30
 8001db2:	2207      	movs	r2, #7
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	4019      	ands	r1, r3
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	6898      	ldr	r0, [r3, #8]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	4413      	add	r3, r2
 8001dca:	3b1e      	subs	r3, #30
 8001dcc:	fa00 f203 	lsl.w	r2, r0, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	619a      	str	r2, [r3, #24]
 8001dd8:	e019      	b.n	8001e0e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6959      	ldr	r1, [r3, #20]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4613      	mov	r3, r2
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4413      	add	r3, r2
 8001dea:	2207      	movs	r2, #7
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	4019      	ands	r1, r3
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	6898      	ldr	r0, [r3, #8]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	4413      	add	r3, r2
 8001e02:	fa00 f203 	lsl.w	r2, r0, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	695a      	ldr	r2, [r3, #20]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	08db      	lsrs	r3, r3, #3
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	2b03      	cmp	r3, #3
 8001e2e:	d84f      	bhi.n	8001ed0 <HAL_ADC_ConfigChannel+0x28c>
 8001e30:	a201      	add	r2, pc, #4	; (adr r2, 8001e38 <HAL_ADC_ConfigChannel+0x1f4>)
 8001e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e36:	bf00      	nop
 8001e38:	08001e49 	.word	0x08001e49
 8001e3c:	08001e6b 	.word	0x08001e6b
 8001e40:	08001e8d 	.word	0x08001e8d
 8001e44:	08001eaf 	.word	0x08001eaf
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e4e:	4b99      	ldr	r3, [pc, #612]	; (80020b4 <HAL_ADC_ConfigChannel+0x470>)
 8001e50:	4013      	ands	r3, r2
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	6812      	ldr	r2, [r2, #0]
 8001e56:	0691      	lsls	r1, r2, #26
 8001e58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e66:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e68:	e07b      	b.n	8001f62 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e70:	4b90      	ldr	r3, [pc, #576]	; (80020b4 <HAL_ADC_ConfigChannel+0x470>)
 8001e72:	4013      	ands	r3, r2
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	6812      	ldr	r2, [r2, #0]
 8001e78:	0691      	lsls	r1, r2, #26
 8001e7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e88:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e8a:	e06a      	b.n	8001f62 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001e92:	4b88      	ldr	r3, [pc, #544]	; (80020b4 <HAL_ADC_ConfigChannel+0x470>)
 8001e94:	4013      	ands	r3, r2
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	6812      	ldr	r2, [r2, #0]
 8001e9a:	0691      	lsls	r1, r2, #26
 8001e9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001eaa:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001eac:	e059      	b.n	8001f62 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001eb4:	4b7f      	ldr	r3, [pc, #508]	; (80020b4 <HAL_ADC_ConfigChannel+0x470>)
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	6812      	ldr	r2, [r2, #0]
 8001ebc:	0691      	lsls	r1, r2, #26
 8001ebe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ecc:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ece:	e048      	b.n	8001f62 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ed6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	069b      	lsls	r3, r3, #26
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d107      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ef2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001efa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	069b      	lsls	r3, r3, #26
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d107      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f16:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	069b      	lsls	r3, r3, #26
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d107      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f3a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	069b      	lsls	r3, r3, #26
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d107      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f5e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001f60:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d108      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x33e>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d101      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x33e>
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e000      	b.n	8001f84 <HAL_ADC_ConfigChannel+0x340>
 8001f82:	2300      	movs	r3, #0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f040 8131 	bne.w	80021ec <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d00f      	beq.n	8001fb2 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43da      	mvns	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	400a      	ands	r2, r1
 8001fac:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001fb0:	e049      	b.n	8002046 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	409a      	lsls	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b09      	cmp	r3, #9
 8001fd2:	d91c      	bls.n	800200e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6999      	ldr	r1, [r3, #24]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	4413      	add	r3, r2
 8001fe4:	3b1b      	subs	r3, #27
 8001fe6:	2207      	movs	r2, #7
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	4019      	ands	r1, r3
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	6898      	ldr	r0, [r3, #8]
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	4413      	add	r3, r2
 8001ffe:	3b1b      	subs	r3, #27
 8002000:	fa00 f203 	lsl.w	r2, r0, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	619a      	str	r2, [r3, #24]
 800200c:	e01b      	b.n	8002046 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6959      	ldr	r1, [r3, #20]
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	1c5a      	adds	r2, r3, #1
 800201a:	4613      	mov	r3, r2
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	4413      	add	r3, r2
 8002020:	2207      	movs	r2, #7
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43db      	mvns	r3, r3
 8002028:	4019      	ands	r1, r3
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	6898      	ldr	r0, [r3, #8]
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	4613      	mov	r3, r2
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	4413      	add	r3, r2
 800203a:	fa00 f203 	lsl.w	r2, r0, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	430a      	orrs	r2, r1
 8002044:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800204e:	d004      	beq.n	800205a <HAL_ADC_ConfigChannel+0x416>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a18      	ldr	r2, [pc, #96]	; (80020b8 <HAL_ADC_ConfigChannel+0x474>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d101      	bne.n	800205e <HAL_ADC_ConfigChannel+0x41a>
 800205a:	4b18      	ldr	r3, [pc, #96]	; (80020bc <HAL_ADC_ConfigChannel+0x478>)
 800205c:	e000      	b.n	8002060 <HAL_ADC_ConfigChannel+0x41c>
 800205e:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <HAL_ADC_ConfigChannel+0x47c>)
 8002060:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2b10      	cmp	r3, #16
 8002068:	d105      	bne.n	8002076 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800206a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002072:	2b00      	cmp	r3, #0
 8002074:	d015      	beq.n	80020a2 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800207a:	2b11      	cmp	r3, #17
 800207c:	d105      	bne.n	800208a <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800207e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00b      	beq.n	80020a2 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800208e:	2b12      	cmp	r3, #18
 8002090:	f040 80ac 	bne.w	80021ec <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002094:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800209c:	2b00      	cmp	r3, #0
 800209e:	f040 80a5 	bne.w	80021ec <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020aa:	d10b      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x480>
 80020ac:	4b02      	ldr	r3, [pc, #8]	; (80020b8 <HAL_ADC_ConfigChannel+0x474>)
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	e023      	b.n	80020fa <HAL_ADC_ConfigChannel+0x4b6>
 80020b2:	bf00      	nop
 80020b4:	83fff000 	.word	0x83fff000
 80020b8:	50000100 	.word	0x50000100
 80020bc:	50000300 	.word	0x50000300
 80020c0:	50000700 	.word	0x50000700
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a4e      	ldr	r2, [pc, #312]	; (8002204 <HAL_ADC_ConfigChannel+0x5c0>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d103      	bne.n	80020d6 <HAL_ADC_ConfigChannel+0x492>
 80020ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	e011      	b.n	80020fa <HAL_ADC_ConfigChannel+0x4b6>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a4b      	ldr	r2, [pc, #300]	; (8002208 <HAL_ADC_ConfigChannel+0x5c4>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d102      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x4a2>
 80020e0:	4b4a      	ldr	r3, [pc, #296]	; (800220c <HAL_ADC_ConfigChannel+0x5c8>)
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	e009      	b.n	80020fa <HAL_ADC_ConfigChannel+0x4b6>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a48      	ldr	r2, [pc, #288]	; (800220c <HAL_ADC_ConfigChannel+0x5c8>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d102      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x4b2>
 80020f0:	4b45      	ldr	r3, [pc, #276]	; (8002208 <HAL_ADC_ConfigChannel+0x5c4>)
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	e001      	b.n	80020fa <HAL_ADC_ConfigChannel+0x4b6>
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	2b01      	cmp	r3, #1
 8002106:	d108      	bne.n	800211a <HAL_ADC_ConfigChannel+0x4d6>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b01      	cmp	r3, #1
 8002114:	d101      	bne.n	800211a <HAL_ADC_ConfigChannel+0x4d6>
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <HAL_ADC_ConfigChannel+0x4d8>
 800211a:	2300      	movs	r3, #0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d150      	bne.n	80021c2 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002120:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002122:	2b00      	cmp	r3, #0
 8002124:	d010      	beq.n	8002148 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	2b01      	cmp	r3, #1
 8002130:	d107      	bne.n	8002142 <HAL_ADC_ConfigChannel+0x4fe>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b01      	cmp	r3, #1
 800213c:	d101      	bne.n	8002142 <HAL_ADC_ConfigChannel+0x4fe>
 800213e:	2301      	movs	r3, #1
 8002140:	e000      	b.n	8002144 <HAL_ADC_ConfigChannel+0x500>
 8002142:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002144:	2b00      	cmp	r3, #0
 8002146:	d13c      	bne.n	80021c2 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b10      	cmp	r3, #16
 800214e:	d11d      	bne.n	800218c <HAL_ADC_ConfigChannel+0x548>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002158:	d118      	bne.n	800218c <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800215a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002162:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002164:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002166:	4b2a      	ldr	r3, [pc, #168]	; (8002210 <HAL_ADC_ConfigChannel+0x5cc>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a2a      	ldr	r2, [pc, #168]	; (8002214 <HAL_ADC_ConfigChannel+0x5d0>)
 800216c:	fba2 2303 	umull	r2, r3, r2, r3
 8002170:	0c9a      	lsrs	r2, r3, #18
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800217c:	e002      	b.n	8002184 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	3b01      	subs	r3, #1
 8002182:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f9      	bne.n	800217e <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800218a:	e02e      	b.n	80021ea <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b11      	cmp	r3, #17
 8002192:	d10b      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x568>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800219c:	d106      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800219e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80021a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021a8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021aa:	e01e      	b.n	80021ea <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b12      	cmp	r3, #18
 80021b2:	d11a      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80021b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80021bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021be:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021c0:	e013      	b.n	80021ea <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f043 0220 	orr.w	r2, r3, #32
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80021d4:	e00a      	b.n	80021ec <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	f043 0220 	orr.w	r2, r3, #32
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80021e8:	e000      	b.n	80021ec <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021ea:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80021f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	376c      	adds	r7, #108	; 0x6c
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	50000100 	.word	0x50000100
 8002208:	50000400 	.word	0x50000400
 800220c:	50000500 	.word	0x50000500
 8002210:	20000010 	.word	0x20000010
 8002214:	431bde83 	.word	0x431bde83

08002218 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002220:	2300      	movs	r3, #0
 8002222:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	2b01      	cmp	r3, #1
 8002230:	d108      	bne.n	8002244 <ADC_Enable+0x2c>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b01      	cmp	r3, #1
 800223e:	d101      	bne.n	8002244 <ADC_Enable+0x2c>
 8002240:	2301      	movs	r3, #1
 8002242:	e000      	b.n	8002246 <ADC_Enable+0x2e>
 8002244:	2300      	movs	r3, #0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d143      	bne.n	80022d2 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	4b22      	ldr	r3, [pc, #136]	; (80022dc <ADC_Enable+0xc4>)
 8002252:	4013      	ands	r3, r2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00d      	beq.n	8002274 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225c:	f043 0210 	orr.w	r2, r3, #16
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002268:	f043 0201 	orr.w	r2, r3, #1
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e02f      	b.n	80022d4 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 0201 	orr.w	r2, r2, #1
 8002282:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002284:	f7ff f88e 	bl	80013a4 <HAL_GetTick>
 8002288:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800228a:	e01b      	b.n	80022c4 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800228c:	f7ff f88a 	bl	80013a4 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d914      	bls.n	80022c4 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d00d      	beq.n	80022c4 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	f043 0210 	orr.w	r2, r3, #16
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b8:	f043 0201 	orr.w	r2, r3, #1
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e007      	b.n	80022d4 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d1dc      	bne.n	800228c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	8000003f 	.word	0x8000003f

080022e0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d108      	bne.n	800230c <ADC_Disable+0x2c>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b01      	cmp	r3, #1
 8002306:	d101      	bne.n	800230c <ADC_Disable+0x2c>
 8002308:	2301      	movs	r3, #1
 800230a:	e000      	b.n	800230e <ADC_Disable+0x2e>
 800230c:	2300      	movs	r3, #0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d047      	beq.n	80023a2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 030d 	and.w	r3, r3, #13
 800231c:	2b01      	cmp	r3, #1
 800231e:	d10f      	bne.n	8002340 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 0202 	orr.w	r2, r2, #2
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2203      	movs	r2, #3
 8002336:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002338:	f7ff f834 	bl	80013a4 <HAL_GetTick>
 800233c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800233e:	e029      	b.n	8002394 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	f043 0210 	orr.w	r2, r3, #16
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002350:	f043 0201 	orr.w	r2, r3, #1
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e023      	b.n	80023a4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800235c:	f7ff f822 	bl	80013a4 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d914      	bls.n	8002394 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	2b01      	cmp	r3, #1
 8002376:	d10d      	bne.n	8002394 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	f043 0210 	orr.w	r2, r3, #16
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002388:	f043 0201 	orr.w	r2, r3, #1
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e007      	b.n	80023a4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d0dc      	beq.n	800235c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <__NVIC_SetPriorityGrouping>:
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023bc:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <__NVIC_SetPriorityGrouping+0x44>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023c8:	4013      	ands	r3, r2
 80023ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023de:	4a04      	ldr	r2, [pc, #16]	; (80023f0 <__NVIC_SetPriorityGrouping+0x44>)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	60d3      	str	r3, [r2, #12]
}
 80023e4:	bf00      	nop
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <__NVIC_GetPriorityGrouping>:
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023f8:	4b04      	ldr	r3, [pc, #16]	; (800240c <__NVIC_GetPriorityGrouping+0x18>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	0a1b      	lsrs	r3, r3, #8
 80023fe:	f003 0307 	and.w	r3, r3, #7
}
 8002402:	4618      	mov	r0, r3
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <__NVIC_EnableIRQ>:
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	2b00      	cmp	r3, #0
 8002420:	db0b      	blt.n	800243a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	f003 021f 	and.w	r2, r3, #31
 8002428:	4907      	ldr	r1, [pc, #28]	; (8002448 <__NVIC_EnableIRQ+0x38>)
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	095b      	lsrs	r3, r3, #5
 8002430:	2001      	movs	r0, #1
 8002432:	fa00 f202 	lsl.w	r2, r0, r2
 8002436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	e000e100 	.word	0xe000e100

0800244c <__NVIC_SetPriority>:
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	6039      	str	r1, [r7, #0]
 8002456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245c:	2b00      	cmp	r3, #0
 800245e:	db0a      	blt.n	8002476 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	b2da      	uxtb	r2, r3
 8002464:	490c      	ldr	r1, [pc, #48]	; (8002498 <__NVIC_SetPriority+0x4c>)
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	0112      	lsls	r2, r2, #4
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	440b      	add	r3, r1
 8002470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002474:	e00a      	b.n	800248c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	b2da      	uxtb	r2, r3
 800247a:	4908      	ldr	r1, [pc, #32]	; (800249c <__NVIC_SetPriority+0x50>)
 800247c:	79fb      	ldrb	r3, [r7, #7]
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	3b04      	subs	r3, #4
 8002484:	0112      	lsls	r2, r2, #4
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	440b      	add	r3, r1
 800248a:	761a      	strb	r2, [r3, #24]
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	e000e100 	.word	0xe000e100
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <NVIC_EncodePriority>:
{
 80024a0:	b480      	push	{r7}
 80024a2:	b089      	sub	sp, #36	; 0x24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f1c3 0307 	rsb	r3, r3, #7
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	bf28      	it	cs
 80024be:	2304      	movcs	r3, #4
 80024c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	3304      	adds	r3, #4
 80024c6:	2b06      	cmp	r3, #6
 80024c8:	d902      	bls.n	80024d0 <NVIC_EncodePriority+0x30>
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	3b03      	subs	r3, #3
 80024ce:	e000      	b.n	80024d2 <NVIC_EncodePriority+0x32>
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d4:	f04f 32ff 	mov.w	r2, #4294967295
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43da      	mvns	r2, r3
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	401a      	ands	r2, r3
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024e8:	f04f 31ff 	mov.w	r1, #4294967295
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	fa01 f303 	lsl.w	r3, r1, r3
 80024f2:	43d9      	mvns	r1, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f8:	4313      	orrs	r3, r2
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3724      	adds	r7, #36	; 0x24
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff ff4c 	bl	80023ac <__NVIC_SetPriorityGrouping>
}
 8002514:	bf00      	nop
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
 8002528:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800252e:	f7ff ff61 	bl	80023f4 <__NVIC_GetPriorityGrouping>
 8002532:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	68b9      	ldr	r1, [r7, #8]
 8002538:	6978      	ldr	r0, [r7, #20]
 800253a:	f7ff ffb1 	bl	80024a0 <NVIC_EncodePriority>
 800253e:	4602      	mov	r2, r0
 8002540:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002544:	4611      	mov	r1, r2
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff ff80 	bl	800244c <__NVIC_SetPriority>
}
 800254c:	bf00      	nop
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800255e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff ff54 	bl	8002410 <__NVIC_EnableIRQ>
}
 8002568:	bf00      	nop
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002570:	b480      	push	{r7}
 8002572:	b087      	sub	sp, #28
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800257e:	e160      	b.n	8002842 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	2101      	movs	r1, #1
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	fa01 f303 	lsl.w	r3, r1, r3
 800258c:	4013      	ands	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2b00      	cmp	r3, #0
 8002594:	f000 8152 	beq.w	800283c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f003 0303 	and.w	r3, r3, #3
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d005      	beq.n	80025b0 <HAL_GPIO_Init+0x40>
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d130      	bne.n	8002612 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	2203      	movs	r2, #3
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	4013      	ands	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025e6:	2201      	movs	r2, #1
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43db      	mvns	r3, r3
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	4013      	ands	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	091b      	lsrs	r3, r3, #4
 80025fc:	f003 0201 	and.w	r2, r3, #1
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	4313      	orrs	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	2b03      	cmp	r3, #3
 800261c:	d017      	beq.n	800264e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	2203      	movs	r2, #3
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43db      	mvns	r3, r3
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	4013      	ands	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	4313      	orrs	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d123      	bne.n	80026a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	08da      	lsrs	r2, r3, #3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	3208      	adds	r2, #8
 8002662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002666:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	220f      	movs	r2, #15
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43db      	mvns	r3, r3
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	4013      	ands	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	691a      	ldr	r2, [r3, #16]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	4313      	orrs	r3, r2
 8002692:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	08da      	lsrs	r2, r3, #3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3208      	adds	r2, #8
 800269c:	6939      	ldr	r1, [r7, #16]
 800269e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	2203      	movs	r2, #3
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43db      	mvns	r3, r3
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4013      	ands	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f003 0203 	and.w	r2, r3, #3
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 80ac 	beq.w	800283c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026e4:	4b5e      	ldr	r3, [pc, #376]	; (8002860 <HAL_GPIO_Init+0x2f0>)
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	4a5d      	ldr	r2, [pc, #372]	; (8002860 <HAL_GPIO_Init+0x2f0>)
 80026ea:	f043 0301 	orr.w	r3, r3, #1
 80026ee:	6193      	str	r3, [r2, #24]
 80026f0:	4b5b      	ldr	r3, [pc, #364]	; (8002860 <HAL_GPIO_Init+0x2f0>)
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	60bb      	str	r3, [r7, #8]
 80026fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026fc:	4a59      	ldr	r2, [pc, #356]	; (8002864 <HAL_GPIO_Init+0x2f4>)
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	089b      	lsrs	r3, r3, #2
 8002702:	3302      	adds	r3, #2
 8002704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002708:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	220f      	movs	r2, #15
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	4013      	ands	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002726:	d025      	beq.n	8002774 <HAL_GPIO_Init+0x204>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a4f      	ldr	r2, [pc, #316]	; (8002868 <HAL_GPIO_Init+0x2f8>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d01f      	beq.n	8002770 <HAL_GPIO_Init+0x200>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a4e      	ldr	r2, [pc, #312]	; (800286c <HAL_GPIO_Init+0x2fc>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d019      	beq.n	800276c <HAL_GPIO_Init+0x1fc>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a4d      	ldr	r2, [pc, #308]	; (8002870 <HAL_GPIO_Init+0x300>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d013      	beq.n	8002768 <HAL_GPIO_Init+0x1f8>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a4c      	ldr	r2, [pc, #304]	; (8002874 <HAL_GPIO_Init+0x304>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d00d      	beq.n	8002764 <HAL_GPIO_Init+0x1f4>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a4b      	ldr	r2, [pc, #300]	; (8002878 <HAL_GPIO_Init+0x308>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d007      	beq.n	8002760 <HAL_GPIO_Init+0x1f0>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a4a      	ldr	r2, [pc, #296]	; (800287c <HAL_GPIO_Init+0x30c>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d101      	bne.n	800275c <HAL_GPIO_Init+0x1ec>
 8002758:	2306      	movs	r3, #6
 800275a:	e00c      	b.n	8002776 <HAL_GPIO_Init+0x206>
 800275c:	2307      	movs	r3, #7
 800275e:	e00a      	b.n	8002776 <HAL_GPIO_Init+0x206>
 8002760:	2305      	movs	r3, #5
 8002762:	e008      	b.n	8002776 <HAL_GPIO_Init+0x206>
 8002764:	2304      	movs	r3, #4
 8002766:	e006      	b.n	8002776 <HAL_GPIO_Init+0x206>
 8002768:	2303      	movs	r3, #3
 800276a:	e004      	b.n	8002776 <HAL_GPIO_Init+0x206>
 800276c:	2302      	movs	r3, #2
 800276e:	e002      	b.n	8002776 <HAL_GPIO_Init+0x206>
 8002770:	2301      	movs	r3, #1
 8002772:	e000      	b.n	8002776 <HAL_GPIO_Init+0x206>
 8002774:	2300      	movs	r3, #0
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	f002 0203 	and.w	r2, r2, #3
 800277c:	0092      	lsls	r2, r2, #2
 800277e:	4093      	lsls	r3, r2
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	4313      	orrs	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002786:	4937      	ldr	r1, [pc, #220]	; (8002864 <HAL_GPIO_Init+0x2f4>)
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	089b      	lsrs	r3, r3, #2
 800278c:	3302      	adds	r3, #2
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002794:	4b3a      	ldr	r3, [pc, #232]	; (8002880 <HAL_GPIO_Init+0x310>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	43db      	mvns	r3, r3
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4013      	ands	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80027b8:	4a31      	ldr	r2, [pc, #196]	; (8002880 <HAL_GPIO_Init+0x310>)
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027be:	4b30      	ldr	r3, [pc, #192]	; (8002880 <HAL_GPIO_Init+0x310>)
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	43db      	mvns	r3, r3
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	4013      	ands	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4313      	orrs	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80027e2:	4a27      	ldr	r2, [pc, #156]	; (8002880 <HAL_GPIO_Init+0x310>)
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027e8:	4b25      	ldr	r3, [pc, #148]	; (8002880 <HAL_GPIO_Init+0x310>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	43db      	mvns	r3, r3
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4013      	ands	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	4313      	orrs	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800280c:	4a1c      	ldr	r2, [pc, #112]	; (8002880 <HAL_GPIO_Init+0x310>)
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002812:	4b1b      	ldr	r3, [pc, #108]	; (8002880 <HAL_GPIO_Init+0x310>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	43db      	mvns	r3, r3
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4013      	ands	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4313      	orrs	r3, r2
 8002834:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002836:	4a12      	ldr	r2, [pc, #72]	; (8002880 <HAL_GPIO_Init+0x310>)
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	3301      	adds	r3, #1
 8002840:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	fa22 f303 	lsr.w	r3, r2, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	f47f ae97 	bne.w	8002580 <HAL_GPIO_Init+0x10>
  }
}
 8002852:	bf00      	nop
 8002854:	bf00      	nop
 8002856:	371c      	adds	r7, #28
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	40021000 	.word	0x40021000
 8002864:	40010000 	.word	0x40010000
 8002868:	48000400 	.word	0x48000400
 800286c:	48000800 	.word	0x48000800
 8002870:	48000c00 	.word	0x48000c00
 8002874:	48001000 	.word	0x48001000
 8002878:	48001400 	.word	0x48001400
 800287c:	48001800 	.word	0x48001800
 8002880:	40010400 	.word	0x40010400

08002884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	807b      	strh	r3, [r7, #2]
 8002890:	4613      	mov	r3, r2
 8002892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002894:	787b      	ldrb	r3, [r7, #1]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800289a:	887a      	ldrh	r2, [r7, #2]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028a0:	e002      	b.n	80028a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028a2:	887a      	ldrh	r2, [r7, #2]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e081      	b.n	80029ca <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d106      	bne.n	80028e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7fe fb3e 	bl	8000f5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2224      	movs	r2, #36	; 0x24
 80028e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0201 	bic.w	r2, r2, #1
 80028f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002904:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002914:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d107      	bne.n	800292e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800292a:	609a      	str	r2, [r3, #8]
 800292c:	e006      	b.n	800293c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800293a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	2b02      	cmp	r3, #2
 8002942:	d104      	bne.n	800294e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800294c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800295c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002960:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68da      	ldr	r2, [r3, #12]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002970:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691a      	ldr	r2, [r3, #16]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	430a      	orrs	r2, r1
 800298a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	69d9      	ldr	r1, [r3, #28]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a1a      	ldr	r2, [r3, #32]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0201 	orr.w	r2, r2, #1
 80029aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2220      	movs	r2, #32
 80029b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
	...

080029d4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b088      	sub	sp, #32
 80029d8:	af02      	add	r7, sp, #8
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	607a      	str	r2, [r7, #4]
 80029de:	461a      	mov	r2, r3
 80029e0:	460b      	mov	r3, r1
 80029e2:	817b      	strh	r3, [r7, #10]
 80029e4:	4613      	mov	r3, r2
 80029e6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b20      	cmp	r3, #32
 80029f2:	f040 80da 	bne.w	8002baa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d101      	bne.n	8002a04 <HAL_I2C_Master_Transmit+0x30>
 8002a00:	2302      	movs	r3, #2
 8002a02:	e0d3      	b.n	8002bac <HAL_I2C_Master_Transmit+0x1d8>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a0c:	f7fe fcca 	bl	80013a4 <HAL_GetTick>
 8002a10:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	2319      	movs	r3, #25
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 f8f0 	bl	8002c04 <I2C_WaitOnFlagUntilTimeout>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e0be      	b.n	8002bac <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2221      	movs	r2, #33	; 0x21
 8002a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2210      	movs	r2, #16
 8002a3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	893a      	ldrh	r2, [r7, #8]
 8002a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	2bff      	cmp	r3, #255	; 0xff
 8002a5e:	d90e      	bls.n	8002a7e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	22ff      	movs	r2, #255	; 0xff
 8002a64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	8979      	ldrh	r1, [r7, #10]
 8002a6e:	4b51      	ldr	r3, [pc, #324]	; (8002bb4 <HAL_I2C_Master_Transmit+0x1e0>)
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 fa7e 	bl	8002f78 <I2C_TransferConfig>
 8002a7c:	e06c      	b.n	8002b58 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	8979      	ldrh	r1, [r7, #10]
 8002a90:	4b48      	ldr	r3, [pc, #288]	; (8002bb4 <HAL_I2C_Master_Transmit+0x1e0>)
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 fa6d 	bl	8002f78 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002a9e:	e05b      	b.n	8002b58 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	6a39      	ldr	r1, [r7, #32]
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 f8fc 	bl	8002ca2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e07b      	b.n	8002bac <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	781a      	ldrb	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac4:	1c5a      	adds	r2, r3, #1
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002adc:	3b01      	subs	r3, #1
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d034      	beq.n	8002b58 <HAL_I2C_Master_Transmit+0x184>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d130      	bne.n	8002b58 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	2200      	movs	r2, #0
 8002afe:	2180      	movs	r1, #128	; 0x80
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 f87f 	bl	8002c04 <I2C_WaitOnFlagUntilTimeout>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e04d      	b.n	8002bac <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	2bff      	cmp	r3, #255	; 0xff
 8002b18:	d90e      	bls.n	8002b38 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	22ff      	movs	r2, #255	; 0xff
 8002b1e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	8979      	ldrh	r1, [r7, #10]
 8002b28:	2300      	movs	r3, #0
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 fa21 	bl	8002f78 <I2C_TransferConfig>
 8002b36:	e00f      	b.n	8002b58 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	8979      	ldrh	r1, [r7, #10]
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 fa10 	bl	8002f78 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d19e      	bne.n	8002aa0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	6a39      	ldr	r1, [r7, #32]
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 f8e2 	bl	8002d30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e01a      	b.n	8002bac <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6859      	ldr	r1, [r3, #4]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <HAL_I2C_Master_Transmit+0x1e4>)
 8002b8a:	400b      	ands	r3, r1
 8002b8c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2220      	movs	r2, #32
 8002b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	e000      	b.n	8002bac <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002baa:	2302      	movs	r3, #2
  }
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	80002000 	.word	0x80002000
 8002bb8:	fe00e800 	.word	0xfe00e800

08002bbc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d103      	bne.n	8002bda <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d007      	beq.n	8002bf8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699a      	ldr	r2, [r3, #24]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0201 	orr.w	r2, r2, #1
 8002bf6:	619a      	str	r2, [r3, #24]
  }
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	603b      	str	r3, [r7, #0]
 8002c10:	4613      	mov	r3, r2
 8002c12:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c14:	e031      	b.n	8002c7a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1c:	d02d      	beq.n	8002c7a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c1e:	f7fe fbc1 	bl	80013a4 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d302      	bcc.n	8002c34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d122      	bne.n	8002c7a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	699a      	ldr	r2, [r3, #24]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	bf0c      	ite	eq
 8002c44:	2301      	moveq	r3, #1
 8002c46:	2300      	movne	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d113      	bne.n	8002c7a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	f043 0220 	orr.w	r2, r3, #32
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e00f      	b.n	8002c9a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	699a      	ldr	r2, [r3, #24]
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	4013      	ands	r3, r2
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	bf0c      	ite	eq
 8002c8a:	2301      	moveq	r3, #1
 8002c8c:	2300      	movne	r3, #0
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	461a      	mov	r2, r3
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d0be      	beq.n	8002c16 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b084      	sub	sp, #16
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	60f8      	str	r0, [r7, #12]
 8002caa:	60b9      	str	r1, [r7, #8]
 8002cac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cae:	e033      	b.n	8002d18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	68b9      	ldr	r1, [r7, #8]
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 f87f 	bl	8002db8 <I2C_IsErrorOccurred>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e031      	b.n	8002d28 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cca:	d025      	beq.n	8002d18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ccc:	f7fe fb6a 	bl	80013a4 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d302      	bcc.n	8002ce2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d11a      	bne.n	8002d18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d013      	beq.n	8002d18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf4:	f043 0220 	orr.w	r2, r3, #32
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e007      	b.n	8002d28 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d1c4      	bne.n	8002cb0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d3c:	e02f      	b.n	8002d9e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	68b9      	ldr	r1, [r7, #8]
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 f838 	bl	8002db8 <I2C_IsErrorOccurred>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e02d      	b.n	8002dae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d52:	f7fe fb27 	bl	80013a4 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d302      	bcc.n	8002d68 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d11a      	bne.n	8002d9e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	f003 0320 	and.w	r3, r3, #32
 8002d72:	2b20      	cmp	r3, #32
 8002d74:	d013      	beq.n	8002d9e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7a:	f043 0220 	orr.w	r2, r3, #32
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2220      	movs	r2, #32
 8002d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e007      	b.n	8002dae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	f003 0320 	and.w	r3, r3, #32
 8002da8:	2b20      	cmp	r3, #32
 8002daa:	d1c8      	bne.n	8002d3e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08a      	sub	sp, #40	; 0x28
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	f003 0310 	and.w	r3, r3, #16
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d068      	beq.n	8002eb6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2210      	movs	r2, #16
 8002dea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002dec:	e049      	b.n	8002e82 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df4:	d045      	beq.n	8002e82 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002df6:	f7fe fad5 	bl	80013a4 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d302      	bcc.n	8002e0c <I2C_IsErrorOccurred+0x54>
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d13a      	bne.n	8002e82 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e16:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e1e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e2e:	d121      	bne.n	8002e74 <I2C_IsErrorOccurred+0xbc>
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e36:	d01d      	beq.n	8002e74 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002e38:	7cfb      	ldrb	r3, [r7, #19]
 8002e3a:	2b20      	cmp	r3, #32
 8002e3c:	d01a      	beq.n	8002e74 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e4c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e4e:	f7fe faa9 	bl	80013a4 <HAL_GetTick>
 8002e52:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e54:	e00e      	b.n	8002e74 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e56:	f7fe faa5 	bl	80013a4 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b19      	cmp	r3, #25
 8002e62:	d907      	bls.n	8002e74 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	f043 0320 	orr.w	r3, r3, #32
 8002e6a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002e72:	e006      	b.n	8002e82 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	f003 0320 	and.w	r3, r3, #32
 8002e7e:	2b20      	cmp	r3, #32
 8002e80:	d1e9      	bne.n	8002e56 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	f003 0320 	and.w	r3, r3, #32
 8002e8c:	2b20      	cmp	r3, #32
 8002e8e:	d003      	beq.n	8002e98 <I2C_IsErrorOccurred+0xe0>
 8002e90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0aa      	beq.n	8002dee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002e98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d103      	bne.n	8002ea8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	f043 0304 	orr.w	r3, r3, #4
 8002eae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00b      	beq.n	8002ee0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ed8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00b      	beq.n	8002f02 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	f043 0308 	orr.w	r3, r3, #8
 8002ef0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002efa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00b      	beq.n	8002f24 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	f043 0302 	orr.w	r3, r3, #2
 8002f12:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002f24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d01c      	beq.n	8002f66 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f7ff fe45 	bl	8002bbc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6859      	ldr	r1, [r3, #4]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	4b0d      	ldr	r3, [pc, #52]	; (8002f74 <I2C_IsErrorOccurred+0x1bc>)
 8002f3e:	400b      	ands	r3, r1
 8002f40:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f46:	6a3b      	ldr	r3, [r7, #32]
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2220      	movs	r2, #32
 8002f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002f66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3728      	adds	r7, #40	; 0x28
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	fe00e800 	.word	0xfe00e800

08002f78 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b087      	sub	sp, #28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	607b      	str	r3, [r7, #4]
 8002f82:	460b      	mov	r3, r1
 8002f84:	817b      	strh	r3, [r7, #10]
 8002f86:	4613      	mov	r3, r2
 8002f88:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f8a:	897b      	ldrh	r3, [r7, #10]
 8002f8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f90:	7a7b      	ldrb	r3, [r7, #9]
 8002f92:	041b      	lsls	r3, r3, #16
 8002f94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f98:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002fa6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	0d5b      	lsrs	r3, r3, #21
 8002fb2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002fb6:	4b08      	ldr	r3, [pc, #32]	; (8002fd8 <I2C_TransferConfig+0x60>)
 8002fb8:	430b      	orrs	r3, r1
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	ea02 0103 	and.w	r1, r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002fca:	bf00      	nop
 8002fcc:	371c      	adds	r7, #28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	03ff63ff 	.word	0x03ff63ff

08002fdc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b20      	cmp	r3, #32
 8002ff0:	d138      	bne.n	8003064 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e032      	b.n	8003066 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2224      	movs	r2, #36	; 0x24
 800300c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0201 	bic.w	r2, r2, #1
 800301e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800302e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6819      	ldr	r1, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 0201 	orr.w	r2, r2, #1
 800304e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	e000      	b.n	8003066 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003064:	2302      	movs	r3, #2
  }
}
 8003066:	4618      	mov	r0, r3
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003072:	b480      	push	{r7}
 8003074:	b085      	sub	sp, #20
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b20      	cmp	r3, #32
 8003086:	d139      	bne.n	80030fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800308e:	2b01      	cmp	r3, #1
 8003090:	d101      	bne.n	8003096 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003092:	2302      	movs	r3, #2
 8003094:	e033      	b.n	80030fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2224      	movs	r2, #36	; 0x24
 80030a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 0201 	bic.w	r2, r2, #1
 80030b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	021b      	lsls	r3, r3, #8
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0201 	orr.w	r2, r2, #1
 80030e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030f8:	2300      	movs	r3, #0
 80030fa:	e000      	b.n	80030fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030fc:	2302      	movs	r3, #2
  }
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
	...

0800310c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003112:	af00      	add	r7, sp, #0
 8003114:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003118:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800311c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800311e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003122:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d102      	bne.n	8003132 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	f001 b83a 	b.w	80041a6 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003132:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003136:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 816f 	beq.w	8003426 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003148:	4bb5      	ldr	r3, [pc, #724]	; (8003420 <HAL_RCC_OscConfig+0x314>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f003 030c 	and.w	r3, r3, #12
 8003150:	2b04      	cmp	r3, #4
 8003152:	d00c      	beq.n	800316e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003154:	4bb2      	ldr	r3, [pc, #712]	; (8003420 <HAL_RCC_OscConfig+0x314>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f003 030c 	and.w	r3, r3, #12
 800315c:	2b08      	cmp	r3, #8
 800315e:	d15c      	bne.n	800321a <HAL_RCC_OscConfig+0x10e>
 8003160:	4baf      	ldr	r3, [pc, #700]	; (8003420 <HAL_RCC_OscConfig+0x314>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800316c:	d155      	bne.n	800321a <HAL_RCC_OscConfig+0x10e>
 800316e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003172:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003176:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800317a:	fa93 f3a3 	rbit	r3, r3
 800317e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003182:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003186:	fab3 f383 	clz	r3, r3
 800318a:	b2db      	uxtb	r3, r3
 800318c:	095b      	lsrs	r3, r3, #5
 800318e:	b2db      	uxtb	r3, r3
 8003190:	f043 0301 	orr.w	r3, r3, #1
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b01      	cmp	r3, #1
 8003198:	d102      	bne.n	80031a0 <HAL_RCC_OscConfig+0x94>
 800319a:	4ba1      	ldr	r3, [pc, #644]	; (8003420 <HAL_RCC_OscConfig+0x314>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	e015      	b.n	80031cc <HAL_RCC_OscConfig+0xc0>
 80031a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031a4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80031ac:	fa93 f3a3 	rbit	r3, r3
 80031b0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80031b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031b8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80031bc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80031c0:	fa93 f3a3 	rbit	r3, r3
 80031c4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80031c8:	4b95      	ldr	r3, [pc, #596]	; (8003420 <HAL_RCC_OscConfig+0x314>)
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031d0:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80031d4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80031d8:	fa92 f2a2 	rbit	r2, r2
 80031dc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80031e0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80031e4:	fab2 f282 	clz	r2, r2
 80031e8:	b2d2      	uxtb	r2, r2
 80031ea:	f042 0220 	orr.w	r2, r2, #32
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	f002 021f 	and.w	r2, r2, #31
 80031f4:	2101      	movs	r1, #1
 80031f6:	fa01 f202 	lsl.w	r2, r1, r2
 80031fa:	4013      	ands	r3, r2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 8111 	beq.w	8003424 <HAL_RCC_OscConfig+0x318>
 8003202:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003206:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	f040 8108 	bne.w	8003424 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	f000 bfc6 	b.w	80041a6 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800321a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800321e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800322a:	d106      	bne.n	800323a <HAL_RCC_OscConfig+0x12e>
 800322c:	4b7c      	ldr	r3, [pc, #496]	; (8003420 <HAL_RCC_OscConfig+0x314>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a7b      	ldr	r2, [pc, #492]	; (8003420 <HAL_RCC_OscConfig+0x314>)
 8003232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003236:	6013      	str	r3, [r2, #0]
 8003238:	e036      	b.n	80032a8 <HAL_RCC_OscConfig+0x19c>
 800323a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800323e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10c      	bne.n	8003264 <HAL_RCC_OscConfig+0x158>
 800324a:	4b75      	ldr	r3, [pc, #468]	; (8003420 <HAL_RCC_OscConfig+0x314>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a74      	ldr	r2, [pc, #464]	; (8003420 <HAL_RCC_OscConfig+0x314>)
 8003250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	4b72      	ldr	r3, [pc, #456]	; (8003420 <HAL_RCC_OscConfig+0x314>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a71      	ldr	r2, [pc, #452]	; (8003420 <HAL_RCC_OscConfig+0x314>)
 800325c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	e021      	b.n	80032a8 <HAL_RCC_OscConfig+0x19c>
 8003264:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003268:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003274:	d10c      	bne.n	8003290 <HAL_RCC_OscConfig+0x184>
 8003276:	4b6a      	ldr	r3, [pc, #424]	; (8003420 <HAL_RCC_OscConfig+0x314>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a69      	ldr	r2, [pc, #420]	; (8003420 <HAL_RCC_OscConfig+0x314>)
 800327c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	4b67      	ldr	r3, [pc, #412]	; (8003420 <HAL_RCC_OscConfig+0x314>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a66      	ldr	r2, [pc, #408]	; (8003420 <HAL_RCC_OscConfig+0x314>)
 8003288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	e00b      	b.n	80032a8 <HAL_RCC_OscConfig+0x19c>
 8003290:	4b63      	ldr	r3, [pc, #396]	; (8003420 <HAL_RCC_OscConfig+0x314>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a62      	ldr	r2, [pc, #392]	; (8003420 <HAL_RCC_OscConfig+0x314>)
 8003296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800329a:	6013      	str	r3, [r2, #0]
 800329c:	4b60      	ldr	r3, [pc, #384]	; (8003420 <HAL_RCC_OscConfig+0x314>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a5f      	ldr	r2, [pc, #380]	; (8003420 <HAL_RCC_OscConfig+0x314>)
 80032a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032a6:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d059      	beq.n	800336c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b8:	f7fe f874 	bl	80013a4 <HAL_GetTick>
 80032bc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c0:	e00a      	b.n	80032d8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032c2:	f7fe f86f 	bl	80013a4 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b64      	cmp	r3, #100	; 0x64
 80032d0:	d902      	bls.n	80032d8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	f000 bf67 	b.w	80041a6 <HAL_RCC_OscConfig+0x109a>
 80032d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032dc:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80032e4:	fa93 f3a3 	rbit	r3, r3
 80032e8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80032ec:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f0:	fab3 f383 	clz	r3, r3
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	095b      	lsrs	r3, r3, #5
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	f043 0301 	orr.w	r3, r3, #1
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b01      	cmp	r3, #1
 8003302:	d102      	bne.n	800330a <HAL_RCC_OscConfig+0x1fe>
 8003304:	4b46      	ldr	r3, [pc, #280]	; (8003420 <HAL_RCC_OscConfig+0x314>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	e015      	b.n	8003336 <HAL_RCC_OscConfig+0x22a>
 800330a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800330e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003312:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003316:	fa93 f3a3 	rbit	r3, r3
 800331a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800331e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003322:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003326:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800332a:	fa93 f3a3 	rbit	r3, r3
 800332e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003332:	4b3b      	ldr	r3, [pc, #236]	; (8003420 <HAL_RCC_OscConfig+0x314>)
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800333a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800333e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003342:	fa92 f2a2 	rbit	r2, r2
 8003346:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800334a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800334e:	fab2 f282 	clz	r2, r2
 8003352:	b2d2      	uxtb	r2, r2
 8003354:	f042 0220 	orr.w	r2, r2, #32
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	f002 021f 	and.w	r2, r2, #31
 800335e:	2101      	movs	r1, #1
 8003360:	fa01 f202 	lsl.w	r2, r1, r2
 8003364:	4013      	ands	r3, r2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0ab      	beq.n	80032c2 <HAL_RCC_OscConfig+0x1b6>
 800336a:	e05c      	b.n	8003426 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336c:	f7fe f81a 	bl	80013a4 <HAL_GetTick>
 8003370:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003374:	e00a      	b.n	800338c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003376:	f7fe f815 	bl	80013a4 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b64      	cmp	r3, #100	; 0x64
 8003384:	d902      	bls.n	800338c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	f000 bf0d 	b.w	80041a6 <HAL_RCC_OscConfig+0x109a>
 800338c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003390:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003394:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003398:	fa93 f3a3 	rbit	r3, r3
 800339c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80033a0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a4:	fab3 f383 	clz	r3, r3
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	095b      	lsrs	r3, r3, #5
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	f043 0301 	orr.w	r3, r3, #1
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d102      	bne.n	80033be <HAL_RCC_OscConfig+0x2b2>
 80033b8:	4b19      	ldr	r3, [pc, #100]	; (8003420 <HAL_RCC_OscConfig+0x314>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	e015      	b.n	80033ea <HAL_RCC_OscConfig+0x2de>
 80033be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033c2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80033ca:	fa93 f3a3 	rbit	r3, r3
 80033ce:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80033d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033d6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80033da:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80033de:	fa93 f3a3 	rbit	r3, r3
 80033e2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80033e6:	4b0e      	ldr	r3, [pc, #56]	; (8003420 <HAL_RCC_OscConfig+0x314>)
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033ee:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80033f2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80033f6:	fa92 f2a2 	rbit	r2, r2
 80033fa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80033fe:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003402:	fab2 f282 	clz	r2, r2
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	f042 0220 	orr.w	r2, r2, #32
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	f002 021f 	and.w	r2, r2, #31
 8003412:	2101      	movs	r1, #1
 8003414:	fa01 f202 	lsl.w	r2, r1, r2
 8003418:	4013      	ands	r3, r2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1ab      	bne.n	8003376 <HAL_RCC_OscConfig+0x26a>
 800341e:	e002      	b.n	8003426 <HAL_RCC_OscConfig+0x31a>
 8003420:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003426:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800342a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 817f 	beq.w	800373a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800343c:	4ba7      	ldr	r3, [pc, #668]	; (80036dc <HAL_RCC_OscConfig+0x5d0>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 030c 	and.w	r3, r3, #12
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00c      	beq.n	8003462 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003448:	4ba4      	ldr	r3, [pc, #656]	; (80036dc <HAL_RCC_OscConfig+0x5d0>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f003 030c 	and.w	r3, r3, #12
 8003450:	2b08      	cmp	r3, #8
 8003452:	d173      	bne.n	800353c <HAL_RCC_OscConfig+0x430>
 8003454:	4ba1      	ldr	r3, [pc, #644]	; (80036dc <HAL_RCC_OscConfig+0x5d0>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800345c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003460:	d16c      	bne.n	800353c <HAL_RCC_OscConfig+0x430>
 8003462:	2302      	movs	r3, #2
 8003464:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003468:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800346c:	fa93 f3a3 	rbit	r3, r3
 8003470:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003474:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003478:	fab3 f383 	clz	r3, r3
 800347c:	b2db      	uxtb	r3, r3
 800347e:	095b      	lsrs	r3, r3, #5
 8003480:	b2db      	uxtb	r3, r3
 8003482:	f043 0301 	orr.w	r3, r3, #1
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b01      	cmp	r3, #1
 800348a:	d102      	bne.n	8003492 <HAL_RCC_OscConfig+0x386>
 800348c:	4b93      	ldr	r3, [pc, #588]	; (80036dc <HAL_RCC_OscConfig+0x5d0>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	e013      	b.n	80034ba <HAL_RCC_OscConfig+0x3ae>
 8003492:	2302      	movs	r3, #2
 8003494:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003498:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800349c:	fa93 f3a3 	rbit	r3, r3
 80034a0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80034a4:	2302      	movs	r3, #2
 80034a6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80034aa:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80034ae:	fa93 f3a3 	rbit	r3, r3
 80034b2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80034b6:	4b89      	ldr	r3, [pc, #548]	; (80036dc <HAL_RCC_OscConfig+0x5d0>)
 80034b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ba:	2202      	movs	r2, #2
 80034bc:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80034c0:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80034c4:	fa92 f2a2 	rbit	r2, r2
 80034c8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80034cc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80034d0:	fab2 f282 	clz	r2, r2
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	f042 0220 	orr.w	r2, r2, #32
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	f002 021f 	and.w	r2, r2, #31
 80034e0:	2101      	movs	r1, #1
 80034e2:	fa01 f202 	lsl.w	r2, r1, r2
 80034e6:	4013      	ands	r3, r2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <HAL_RCC_OscConfig+0x3f6>
 80034ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d002      	beq.n	8003502 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	f000 be52 	b.w	80041a6 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003502:	4b76      	ldr	r3, [pc, #472]	; (80036dc <HAL_RCC_OscConfig+0x5d0>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800350a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800350e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	21f8      	movs	r1, #248	; 0xf8
 8003518:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003520:	fa91 f1a1 	rbit	r1, r1
 8003524:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003528:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800352c:	fab1 f181 	clz	r1, r1
 8003530:	b2c9      	uxtb	r1, r1
 8003532:	408b      	lsls	r3, r1
 8003534:	4969      	ldr	r1, [pc, #420]	; (80036dc <HAL_RCC_OscConfig+0x5d0>)
 8003536:	4313      	orrs	r3, r2
 8003538:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800353a:	e0fe      	b.n	800373a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800353c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003540:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 8088 	beq.w	800365e <HAL_RCC_OscConfig+0x552>
 800354e:	2301      	movs	r3, #1
 8003550:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003554:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003558:	fa93 f3a3 	rbit	r3, r3
 800355c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003560:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003564:	fab3 f383 	clz	r3, r3
 8003568:	b2db      	uxtb	r3, r3
 800356a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800356e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	461a      	mov	r2, r3
 8003576:	2301      	movs	r3, #1
 8003578:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357a:	f7fd ff13 	bl	80013a4 <HAL_GetTick>
 800357e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003582:	e00a      	b.n	800359a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003584:	f7fd ff0e 	bl	80013a4 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d902      	bls.n	800359a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	f000 be06 	b.w	80041a6 <HAL_RCC_OscConfig+0x109a>
 800359a:	2302      	movs	r3, #2
 800359c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80035a4:	fa93 f3a3 	rbit	r3, r3
 80035a8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80035ac:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b0:	fab3 f383 	clz	r3, r3
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	095b      	lsrs	r3, r3, #5
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	f043 0301 	orr.w	r3, r3, #1
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d102      	bne.n	80035ca <HAL_RCC_OscConfig+0x4be>
 80035c4:	4b45      	ldr	r3, [pc, #276]	; (80036dc <HAL_RCC_OscConfig+0x5d0>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	e013      	b.n	80035f2 <HAL_RCC_OscConfig+0x4e6>
 80035ca:	2302      	movs	r3, #2
 80035cc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80035d4:	fa93 f3a3 	rbit	r3, r3
 80035d8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80035dc:	2302      	movs	r3, #2
 80035de:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80035e2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80035e6:	fa93 f3a3 	rbit	r3, r3
 80035ea:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80035ee:	4b3b      	ldr	r3, [pc, #236]	; (80036dc <HAL_RCC_OscConfig+0x5d0>)
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	2202      	movs	r2, #2
 80035f4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80035f8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80035fc:	fa92 f2a2 	rbit	r2, r2
 8003600:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003604:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003608:	fab2 f282 	clz	r2, r2
 800360c:	b2d2      	uxtb	r2, r2
 800360e:	f042 0220 	orr.w	r2, r2, #32
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	f002 021f 	and.w	r2, r2, #31
 8003618:	2101      	movs	r1, #1
 800361a:	fa01 f202 	lsl.w	r2, r1, r2
 800361e:	4013      	ands	r3, r2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0af      	beq.n	8003584 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003624:	4b2d      	ldr	r3, [pc, #180]	; (80036dc <HAL_RCC_OscConfig+0x5d0>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800362c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003630:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	21f8      	movs	r1, #248	; 0xf8
 800363a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003642:	fa91 f1a1 	rbit	r1, r1
 8003646:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800364a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800364e:	fab1 f181 	clz	r1, r1
 8003652:	b2c9      	uxtb	r1, r1
 8003654:	408b      	lsls	r3, r1
 8003656:	4921      	ldr	r1, [pc, #132]	; (80036dc <HAL_RCC_OscConfig+0x5d0>)
 8003658:	4313      	orrs	r3, r2
 800365a:	600b      	str	r3, [r1, #0]
 800365c:	e06d      	b.n	800373a <HAL_RCC_OscConfig+0x62e>
 800365e:	2301      	movs	r3, #1
 8003660:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003664:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003668:	fa93 f3a3 	rbit	r3, r3
 800366c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003670:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003674:	fab3 f383 	clz	r3, r3
 8003678:	b2db      	uxtb	r3, r3
 800367a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800367e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	461a      	mov	r2, r3
 8003686:	2300      	movs	r3, #0
 8003688:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368a:	f7fd fe8b 	bl	80013a4 <HAL_GetTick>
 800368e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003692:	e00a      	b.n	80036aa <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003694:	f7fd fe86 	bl	80013a4 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d902      	bls.n	80036aa <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	f000 bd7e 	b.w	80041a6 <HAL_RCC_OscConfig+0x109a>
 80036aa:	2302      	movs	r3, #2
 80036ac:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80036b4:	fa93 f3a3 	rbit	r3, r3
 80036b8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80036bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036c0:	fab3 f383 	clz	r3, r3
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	095b      	lsrs	r3, r3, #5
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	f043 0301 	orr.w	r3, r3, #1
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d105      	bne.n	80036e0 <HAL_RCC_OscConfig+0x5d4>
 80036d4:	4b01      	ldr	r3, [pc, #4]	; (80036dc <HAL_RCC_OscConfig+0x5d0>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	e016      	b.n	8003708 <HAL_RCC_OscConfig+0x5fc>
 80036da:	bf00      	nop
 80036dc:	40021000 	.word	0x40021000
 80036e0:	2302      	movs	r3, #2
 80036e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80036ea:	fa93 f3a3 	rbit	r3, r3
 80036ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80036f2:	2302      	movs	r3, #2
 80036f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80036f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80036fc:	fa93 f3a3 	rbit	r3, r3
 8003700:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003704:	4bbf      	ldr	r3, [pc, #764]	; (8003a04 <HAL_RCC_OscConfig+0x8f8>)
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	2202      	movs	r2, #2
 800370a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800370e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003712:	fa92 f2a2 	rbit	r2, r2
 8003716:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800371a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800371e:	fab2 f282 	clz	r2, r2
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	f042 0220 	orr.w	r2, r2, #32
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	f002 021f 	and.w	r2, r2, #31
 800372e:	2101      	movs	r1, #1
 8003730:	fa01 f202 	lsl.w	r2, r1, r2
 8003734:	4013      	ands	r3, r2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1ac      	bne.n	8003694 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800373a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800373e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0308 	and.w	r3, r3, #8
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 8113 	beq.w	8003976 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003750:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003754:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d07c      	beq.n	800385a <HAL_RCC_OscConfig+0x74e>
 8003760:	2301      	movs	r3, #1
 8003762:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800376a:	fa93 f3a3 	rbit	r3, r3
 800376e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003772:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003776:	fab3 f383 	clz	r3, r3
 800377a:	b2db      	uxtb	r3, r3
 800377c:	461a      	mov	r2, r3
 800377e:	4ba2      	ldr	r3, [pc, #648]	; (8003a08 <HAL_RCC_OscConfig+0x8fc>)
 8003780:	4413      	add	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	461a      	mov	r2, r3
 8003786:	2301      	movs	r3, #1
 8003788:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800378a:	f7fd fe0b 	bl	80013a4 <HAL_GetTick>
 800378e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003792:	e00a      	b.n	80037aa <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003794:	f7fd fe06 	bl	80013a4 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d902      	bls.n	80037aa <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	f000 bcfe 	b.w	80041a6 <HAL_RCC_OscConfig+0x109a>
 80037aa:	2302      	movs	r3, #2
 80037ac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037b4:	fa93 f2a3 	rbit	r2, r3
 80037b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037bc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80037ca:	2202      	movs	r2, #2
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	fa93 f2a3 	rbit	r2, r3
 80037dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80037ee:	2202      	movs	r2, #2
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	fa93 f2a3 	rbit	r2, r3
 8003800:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003804:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003808:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800380a:	4b7e      	ldr	r3, [pc, #504]	; (8003a04 <HAL_RCC_OscConfig+0x8f8>)
 800380c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800380e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003812:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003816:	2102      	movs	r1, #2
 8003818:	6019      	str	r1, [r3, #0]
 800381a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800381e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	fa93 f1a3 	rbit	r1, r3
 8003828:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800382c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003830:	6019      	str	r1, [r3, #0]
  return result;
 8003832:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003836:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	fab3 f383 	clz	r3, r3
 8003840:	b2db      	uxtb	r3, r3
 8003842:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003846:	b2db      	uxtb	r3, r3
 8003848:	f003 031f 	and.w	r3, r3, #31
 800384c:	2101      	movs	r1, #1
 800384e:	fa01 f303 	lsl.w	r3, r1, r3
 8003852:	4013      	ands	r3, r2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d09d      	beq.n	8003794 <HAL_RCC_OscConfig+0x688>
 8003858:	e08d      	b.n	8003976 <HAL_RCC_OscConfig+0x86a>
 800385a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800385e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003862:	2201      	movs	r2, #1
 8003864:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003866:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800386a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	fa93 f2a3 	rbit	r2, r3
 8003874:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003878:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800387c:	601a      	str	r2, [r3, #0]
  return result;
 800387e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003882:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003886:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003888:	fab3 f383 	clz	r3, r3
 800388c:	b2db      	uxtb	r3, r3
 800388e:	461a      	mov	r2, r3
 8003890:	4b5d      	ldr	r3, [pc, #372]	; (8003a08 <HAL_RCC_OscConfig+0x8fc>)
 8003892:	4413      	add	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	461a      	mov	r2, r3
 8003898:	2300      	movs	r3, #0
 800389a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800389c:	f7fd fd82 	bl	80013a4 <HAL_GetTick>
 80038a0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038a4:	e00a      	b.n	80038bc <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038a6:	f7fd fd7d 	bl	80013a4 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d902      	bls.n	80038bc <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	f000 bc75 	b.w	80041a6 <HAL_RCC_OscConfig+0x109a>
 80038bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038c0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80038c4:	2202      	movs	r2, #2
 80038c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038cc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	fa93 f2a3 	rbit	r2, r3
 80038d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038da:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80038e8:	2202      	movs	r2, #2
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	fa93 f2a3 	rbit	r2, r3
 80038fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003908:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800390c:	2202      	movs	r2, #2
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003914:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	fa93 f2a3 	rbit	r2, r3
 800391e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003922:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003926:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003928:	4b36      	ldr	r3, [pc, #216]	; (8003a04 <HAL_RCC_OscConfig+0x8f8>)
 800392a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800392c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003930:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003934:	2102      	movs	r1, #2
 8003936:	6019      	str	r1, [r3, #0]
 8003938:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800393c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	fa93 f1a3 	rbit	r1, r3
 8003946:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800394a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800394e:	6019      	str	r1, [r3, #0]
  return result;
 8003950:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003954:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	fab3 f383 	clz	r3, r3
 800395e:	b2db      	uxtb	r3, r3
 8003960:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003964:	b2db      	uxtb	r3, r3
 8003966:	f003 031f 	and.w	r3, r3, #31
 800396a:	2101      	movs	r1, #1
 800396c:	fa01 f303 	lsl.w	r3, r1, r3
 8003970:	4013      	ands	r3, r2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d197      	bne.n	80038a6 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003976:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800397a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0304 	and.w	r3, r3, #4
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 81a5 	beq.w	8003cd6 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800398c:	2300      	movs	r3, #0
 800398e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003992:	4b1c      	ldr	r3, [pc, #112]	; (8003a04 <HAL_RCC_OscConfig+0x8f8>)
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d116      	bne.n	80039cc <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800399e:	4b19      	ldr	r3, [pc, #100]	; (8003a04 <HAL_RCC_OscConfig+0x8f8>)
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	4a18      	ldr	r2, [pc, #96]	; (8003a04 <HAL_RCC_OscConfig+0x8f8>)
 80039a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a8:	61d3      	str	r3, [r2, #28]
 80039aa:	4b16      	ldr	r3, [pc, #88]	; (8003a04 <HAL_RCC_OscConfig+0x8f8>)
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80039b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039c4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80039c6:	2301      	movs	r3, #1
 80039c8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039cc:	4b0f      	ldr	r3, [pc, #60]	; (8003a0c <HAL_RCC_OscConfig+0x900>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d121      	bne.n	8003a1c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039d8:	4b0c      	ldr	r3, [pc, #48]	; (8003a0c <HAL_RCC_OscConfig+0x900>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a0b      	ldr	r2, [pc, #44]	; (8003a0c <HAL_RCC_OscConfig+0x900>)
 80039de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039e4:	f7fd fcde 	bl	80013a4 <HAL_GetTick>
 80039e8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ec:	e010      	b.n	8003a10 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ee:	f7fd fcd9 	bl	80013a4 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b64      	cmp	r3, #100	; 0x64
 80039fc:	d908      	bls.n	8003a10 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e3d1      	b.n	80041a6 <HAL_RCC_OscConfig+0x109a>
 8003a02:	bf00      	nop
 8003a04:	40021000 	.word	0x40021000
 8003a08:	10908120 	.word	0x10908120
 8003a0c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a10:	4b8d      	ldr	r3, [pc, #564]	; (8003c48 <HAL_RCC_OscConfig+0xb3c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0e8      	beq.n	80039ee <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a20:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d106      	bne.n	8003a3a <HAL_RCC_OscConfig+0x92e>
 8003a2c:	4b87      	ldr	r3, [pc, #540]	; (8003c4c <HAL_RCC_OscConfig+0xb40>)
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	4a86      	ldr	r2, [pc, #536]	; (8003c4c <HAL_RCC_OscConfig+0xb40>)
 8003a32:	f043 0301 	orr.w	r3, r3, #1
 8003a36:	6213      	str	r3, [r2, #32]
 8003a38:	e035      	b.n	8003aa6 <HAL_RCC_OscConfig+0x99a>
 8003a3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a3e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10c      	bne.n	8003a64 <HAL_RCC_OscConfig+0x958>
 8003a4a:	4b80      	ldr	r3, [pc, #512]	; (8003c4c <HAL_RCC_OscConfig+0xb40>)
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	4a7f      	ldr	r2, [pc, #508]	; (8003c4c <HAL_RCC_OscConfig+0xb40>)
 8003a50:	f023 0301 	bic.w	r3, r3, #1
 8003a54:	6213      	str	r3, [r2, #32]
 8003a56:	4b7d      	ldr	r3, [pc, #500]	; (8003c4c <HAL_RCC_OscConfig+0xb40>)
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	4a7c      	ldr	r2, [pc, #496]	; (8003c4c <HAL_RCC_OscConfig+0xb40>)
 8003a5c:	f023 0304 	bic.w	r3, r3, #4
 8003a60:	6213      	str	r3, [r2, #32]
 8003a62:	e020      	b.n	8003aa6 <HAL_RCC_OscConfig+0x99a>
 8003a64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a68:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	2b05      	cmp	r3, #5
 8003a72:	d10c      	bne.n	8003a8e <HAL_RCC_OscConfig+0x982>
 8003a74:	4b75      	ldr	r3, [pc, #468]	; (8003c4c <HAL_RCC_OscConfig+0xb40>)
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	4a74      	ldr	r2, [pc, #464]	; (8003c4c <HAL_RCC_OscConfig+0xb40>)
 8003a7a:	f043 0304 	orr.w	r3, r3, #4
 8003a7e:	6213      	str	r3, [r2, #32]
 8003a80:	4b72      	ldr	r3, [pc, #456]	; (8003c4c <HAL_RCC_OscConfig+0xb40>)
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	4a71      	ldr	r2, [pc, #452]	; (8003c4c <HAL_RCC_OscConfig+0xb40>)
 8003a86:	f043 0301 	orr.w	r3, r3, #1
 8003a8a:	6213      	str	r3, [r2, #32]
 8003a8c:	e00b      	b.n	8003aa6 <HAL_RCC_OscConfig+0x99a>
 8003a8e:	4b6f      	ldr	r3, [pc, #444]	; (8003c4c <HAL_RCC_OscConfig+0xb40>)
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	4a6e      	ldr	r2, [pc, #440]	; (8003c4c <HAL_RCC_OscConfig+0xb40>)
 8003a94:	f023 0301 	bic.w	r3, r3, #1
 8003a98:	6213      	str	r3, [r2, #32]
 8003a9a:	4b6c      	ldr	r3, [pc, #432]	; (8003c4c <HAL_RCC_OscConfig+0xb40>)
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	4a6b      	ldr	r2, [pc, #428]	; (8003c4c <HAL_RCC_OscConfig+0xb40>)
 8003aa0:	f023 0304 	bic.w	r3, r3, #4
 8003aa4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003aa6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aaa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 8081 	beq.w	8003bba <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ab8:	f7fd fc74 	bl	80013a4 <HAL_GetTick>
 8003abc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac0:	e00b      	b.n	8003ada <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ac2:	f7fd fc6f 	bl	80013a4 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e365      	b.n	80041a6 <HAL_RCC_OscConfig+0x109a>
 8003ada:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ade:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aea:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	fa93 f2a3 	rbit	r2, r3
 8003af4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003af8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b02:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003b06:	2202      	movs	r2, #2
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b0e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	fa93 f2a3 	rbit	r2, r3
 8003b18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b1c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003b20:	601a      	str	r2, [r3, #0]
  return result;
 8003b22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b26:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003b2a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b2c:	fab3 f383 	clz	r3, r3
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	095b      	lsrs	r3, r3, #5
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	f043 0302 	orr.w	r3, r3, #2
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d102      	bne.n	8003b46 <HAL_RCC_OscConfig+0xa3a>
 8003b40:	4b42      	ldr	r3, [pc, #264]	; (8003c4c <HAL_RCC_OscConfig+0xb40>)
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	e013      	b.n	8003b6e <HAL_RCC_OscConfig+0xa62>
 8003b46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b4a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003b4e:	2202      	movs	r2, #2
 8003b50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b56:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	fa93 f2a3 	rbit	r2, r3
 8003b60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b64:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	4b38      	ldr	r3, [pc, #224]	; (8003c4c <HAL_RCC_OscConfig+0xb40>)
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b72:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003b76:	2102      	movs	r1, #2
 8003b78:	6011      	str	r1, [r2, #0]
 8003b7a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b7e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003b82:	6812      	ldr	r2, [r2, #0]
 8003b84:	fa92 f1a2 	rbit	r1, r2
 8003b88:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b8c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003b90:	6011      	str	r1, [r2, #0]
  return result;
 8003b92:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b96:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003b9a:	6812      	ldr	r2, [r2, #0]
 8003b9c:	fab2 f282 	clz	r2, r2
 8003ba0:	b2d2      	uxtb	r2, r2
 8003ba2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ba6:	b2d2      	uxtb	r2, r2
 8003ba8:	f002 021f 	and.w	r2, r2, #31
 8003bac:	2101      	movs	r1, #1
 8003bae:	fa01 f202 	lsl.w	r2, r1, r2
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d084      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x9b6>
 8003bb8:	e083      	b.n	8003cc2 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bba:	f7fd fbf3 	bl	80013a4 <HAL_GetTick>
 8003bbe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc2:	e00b      	b.n	8003bdc <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bc4:	f7fd fbee 	bl	80013a4 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e2e4      	b.n	80041a6 <HAL_RCC_OscConfig+0x109a>
 8003bdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003be0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003be4:	2202      	movs	r2, #2
 8003be6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bec:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	fa93 f2a3 	rbit	r2, r3
 8003bf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bfa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c04:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003c08:	2202      	movs	r2, #2
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c10:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	fa93 f2a3 	rbit	r2, r3
 8003c1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c1e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003c22:	601a      	str	r2, [r3, #0]
  return result;
 8003c24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c28:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003c2c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c2e:	fab3 f383 	clz	r3, r3
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	095b      	lsrs	r3, r3, #5
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	f043 0302 	orr.w	r3, r3, #2
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d106      	bne.n	8003c50 <HAL_RCC_OscConfig+0xb44>
 8003c42:	4b02      	ldr	r3, [pc, #8]	; (8003c4c <HAL_RCC_OscConfig+0xb40>)
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	e017      	b.n	8003c78 <HAL_RCC_OscConfig+0xb6c>
 8003c48:	40007000 	.word	0x40007000
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c54:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003c58:	2202      	movs	r2, #2
 8003c5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c60:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	fa93 f2a3 	rbit	r2, r3
 8003c6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c6e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	4bb3      	ldr	r3, [pc, #716]	; (8003f44 <HAL_RCC_OscConfig+0xe38>)
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c7c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003c80:	2102      	movs	r1, #2
 8003c82:	6011      	str	r1, [r2, #0]
 8003c84:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c88:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003c8c:	6812      	ldr	r2, [r2, #0]
 8003c8e:	fa92 f1a2 	rbit	r1, r2
 8003c92:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c96:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003c9a:	6011      	str	r1, [r2, #0]
  return result;
 8003c9c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ca0:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003ca4:	6812      	ldr	r2, [r2, #0]
 8003ca6:	fab2 f282 	clz	r2, r2
 8003caa:	b2d2      	uxtb	r2, r2
 8003cac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	f002 021f 	and.w	r2, r2, #31
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d180      	bne.n	8003bc4 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003cc2:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d105      	bne.n	8003cd6 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cca:	4b9e      	ldr	r3, [pc, #632]	; (8003f44 <HAL_RCC_OscConfig+0xe38>)
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	4a9d      	ldr	r2, [pc, #628]	; (8003f44 <HAL_RCC_OscConfig+0xe38>)
 8003cd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cd4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cda:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 825e 	beq.w	80041a4 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ce8:	4b96      	ldr	r3, [pc, #600]	; (8003f44 <HAL_RCC_OscConfig+0xe38>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f003 030c 	and.w	r3, r3, #12
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	f000 821f 	beq.w	8004134 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cfa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	f040 8170 	bne.w	8003fe8 <HAL_RCC_OscConfig+0xedc>
 8003d08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d0c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003d10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d1a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	fa93 f2a3 	rbit	r2, r3
 8003d24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d28:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003d2c:	601a      	str	r2, [r3, #0]
  return result;
 8003d2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d32:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003d36:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d38:	fab3 f383 	clz	r3, r3
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d42:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	461a      	mov	r2, r3
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4e:	f7fd fb29 	bl	80013a4 <HAL_GetTick>
 8003d52:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d56:	e009      	b.n	8003d6c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d58:	f7fd fb24 	bl	80013a4 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e21c      	b.n	80041a6 <HAL_RCC_OscConfig+0x109a>
 8003d6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d70:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003d74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d7e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	fa93 f2a3 	rbit	r2, r3
 8003d88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d8c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003d90:	601a      	str	r2, [r3, #0]
  return result;
 8003d92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d96:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003d9a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d9c:	fab3 f383 	clz	r3, r3
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	095b      	lsrs	r3, r3, #5
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	f043 0301 	orr.w	r3, r3, #1
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d102      	bne.n	8003db6 <HAL_RCC_OscConfig+0xcaa>
 8003db0:	4b64      	ldr	r3, [pc, #400]	; (8003f44 <HAL_RCC_OscConfig+0xe38>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	e027      	b.n	8003e06 <HAL_RCC_OscConfig+0xcfa>
 8003db6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dba:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003dbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dc8:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	fa93 f2a3 	rbit	r2, r3
 8003dd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dd6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003de0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003de4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003de8:	601a      	str	r2, [r3, #0]
 8003dea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dee:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	fa93 f2a3 	rbit	r2, r3
 8003df8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dfc:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003e00:	601a      	str	r2, [r3, #0]
 8003e02:	4b50      	ldr	r3, [pc, #320]	; (8003f44 <HAL_RCC_OscConfig+0xe38>)
 8003e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e06:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e0a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003e0e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003e12:	6011      	str	r1, [r2, #0]
 8003e14:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e18:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003e1c:	6812      	ldr	r2, [r2, #0]
 8003e1e:	fa92 f1a2 	rbit	r1, r2
 8003e22:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e26:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003e2a:	6011      	str	r1, [r2, #0]
  return result;
 8003e2c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e30:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003e34:	6812      	ldr	r2, [r2, #0]
 8003e36:	fab2 f282 	clz	r2, r2
 8003e3a:	b2d2      	uxtb	r2, r2
 8003e3c:	f042 0220 	orr.w	r2, r2, #32
 8003e40:	b2d2      	uxtb	r2, r2
 8003e42:	f002 021f 	and.w	r2, r2, #31
 8003e46:	2101      	movs	r1, #1
 8003e48:	fa01 f202 	lsl.w	r2, r1, r2
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d182      	bne.n	8003d58 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e52:	4b3c      	ldr	r3, [pc, #240]	; (8003f44 <HAL_RCC_OscConfig+0xe38>)
 8003e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e56:	f023 020f 	bic.w	r2, r3, #15
 8003e5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e5e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	4937      	ldr	r1, [pc, #220]	; (8003f44 <HAL_RCC_OscConfig+0xe38>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003e6c:	4b35      	ldr	r3, [pc, #212]	; (8003f44 <HAL_RCC_OscConfig+0xe38>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003e74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e78:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6a19      	ldr	r1, [r3, #32]
 8003e80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e84:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	69db      	ldr	r3, [r3, #28]
 8003e8c:	430b      	orrs	r3, r1
 8003e8e:	492d      	ldr	r1, [pc, #180]	; (8003f44 <HAL_RCC_OscConfig+0xe38>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	604b      	str	r3, [r1, #4]
 8003e94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e98:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003e9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ea0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ea6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	fa93 f2a3 	rbit	r2, r3
 8003eb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eb4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003eb8:	601a      	str	r2, [r3, #0]
  return result;
 8003eba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ebe:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003ec2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ec4:	fab3 f383 	clz	r3, r3
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ece:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eda:	f7fd fa63 	bl	80013a4 <HAL_GetTick>
 8003ede:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ee2:	e009      	b.n	8003ef8 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ee4:	f7fd fa5e 	bl	80013a4 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e156      	b.n	80041a6 <HAL_RCC_OscConfig+0x109a>
 8003ef8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003efc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003f00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f0a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	fa93 f2a3 	rbit	r2, r3
 8003f14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f18:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003f1c:	601a      	str	r2, [r3, #0]
  return result;
 8003f1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f22:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003f26:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f28:	fab3 f383 	clz	r3, r3
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	095b      	lsrs	r3, r3, #5
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	f043 0301 	orr.w	r3, r3, #1
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d105      	bne.n	8003f48 <HAL_RCC_OscConfig+0xe3c>
 8003f3c:	4b01      	ldr	r3, [pc, #4]	; (8003f44 <HAL_RCC_OscConfig+0xe38>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	e02a      	b.n	8003f98 <HAL_RCC_OscConfig+0xe8c>
 8003f42:	bf00      	nop
 8003f44:	40021000 	.word	0x40021000
 8003f48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f4c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003f50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f5a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	fa93 f2a3 	rbit	r2, r3
 8003f64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f68:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f72:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003f76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f80:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	fa93 f2a3 	rbit	r2, r3
 8003f8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f8e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	4b86      	ldr	r3, [pc, #536]	; (80041b0 <HAL_RCC_OscConfig+0x10a4>)
 8003f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f98:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f9c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003fa0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003fa4:	6011      	str	r1, [r2, #0]
 8003fa6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003faa:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003fae:	6812      	ldr	r2, [r2, #0]
 8003fb0:	fa92 f1a2 	rbit	r1, r2
 8003fb4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003fb8:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003fbc:	6011      	str	r1, [r2, #0]
  return result;
 8003fbe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003fc2:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003fc6:	6812      	ldr	r2, [r2, #0]
 8003fc8:	fab2 f282 	clz	r2, r2
 8003fcc:	b2d2      	uxtb	r2, r2
 8003fce:	f042 0220 	orr.w	r2, r2, #32
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	f002 021f 	and.w	r2, r2, #31
 8003fd8:	2101      	movs	r1, #1
 8003fda:	fa01 f202 	lsl.w	r2, r1, r2
 8003fde:	4013      	ands	r3, r2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f43f af7f 	beq.w	8003ee4 <HAL_RCC_OscConfig+0xdd8>
 8003fe6:	e0dd      	b.n	80041a4 <HAL_RCC_OscConfig+0x1098>
 8003fe8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fec:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003ff0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ff4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ffa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	fa93 f2a3 	rbit	r2, r3
 8004004:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004008:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800400c:	601a      	str	r2, [r3, #0]
  return result;
 800400e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004012:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004016:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004018:	fab3 f383 	clz	r3, r3
 800401c:	b2db      	uxtb	r3, r3
 800401e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004022:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	461a      	mov	r2, r3
 800402a:	2300      	movs	r3, #0
 800402c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402e:	f7fd f9b9 	bl	80013a4 <HAL_GetTick>
 8004032:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004036:	e009      	b.n	800404c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004038:	f7fd f9b4 	bl	80013a4 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e0ac      	b.n	80041a6 <HAL_RCC_OscConfig+0x109a>
 800404c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004050:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004054:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004058:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800405e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	fa93 f2a3 	rbit	r2, r3
 8004068:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800406c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004070:	601a      	str	r2, [r3, #0]
  return result;
 8004072:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004076:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800407a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800407c:	fab3 f383 	clz	r3, r3
 8004080:	b2db      	uxtb	r3, r3
 8004082:	095b      	lsrs	r3, r3, #5
 8004084:	b2db      	uxtb	r3, r3
 8004086:	f043 0301 	orr.w	r3, r3, #1
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b01      	cmp	r3, #1
 800408e:	d102      	bne.n	8004096 <HAL_RCC_OscConfig+0xf8a>
 8004090:	4b47      	ldr	r3, [pc, #284]	; (80041b0 <HAL_RCC_OscConfig+0x10a4>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	e027      	b.n	80040e6 <HAL_RCC_OscConfig+0xfda>
 8004096:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800409a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800409e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040a8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	fa93 f2a3 	rbit	r2, r3
 80040b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040b6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040c0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80040c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040ce:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	fa93 f2a3 	rbit	r2, r3
 80040d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040dc:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	4b33      	ldr	r3, [pc, #204]	; (80041b0 <HAL_RCC_OscConfig+0x10a4>)
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80040ea:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80040ee:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80040f2:	6011      	str	r1, [r2, #0]
 80040f4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80040f8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80040fc:	6812      	ldr	r2, [r2, #0]
 80040fe:	fa92 f1a2 	rbit	r1, r2
 8004102:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004106:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800410a:	6011      	str	r1, [r2, #0]
  return result;
 800410c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004110:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004114:	6812      	ldr	r2, [r2, #0]
 8004116:	fab2 f282 	clz	r2, r2
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	f042 0220 	orr.w	r2, r2, #32
 8004120:	b2d2      	uxtb	r2, r2
 8004122:	f002 021f 	and.w	r2, r2, #31
 8004126:	2101      	movs	r1, #1
 8004128:	fa01 f202 	lsl.w	r2, r1, r2
 800412c:	4013      	ands	r3, r2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d182      	bne.n	8004038 <HAL_RCC_OscConfig+0xf2c>
 8004132:	e037      	b.n	80041a4 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004134:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004138:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d101      	bne.n	8004148 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e02e      	b.n	80041a6 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004148:	4b19      	ldr	r3, [pc, #100]	; (80041b0 <HAL_RCC_OscConfig+0x10a4>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004150:	4b17      	ldr	r3, [pc, #92]	; (80041b0 <HAL_RCC_OscConfig+0x10a4>)
 8004152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004154:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004158:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800415c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004160:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004164:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	69db      	ldr	r3, [r3, #28]
 800416c:	429a      	cmp	r2, r3
 800416e:	d117      	bne.n	80041a0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004170:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004174:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004178:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800417c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004184:	429a      	cmp	r2, r3
 8004186:	d10b      	bne.n	80041a0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004188:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800418c:	f003 020f 	and.w	r2, r3, #15
 8004190:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004194:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800419c:	429a      	cmp	r2, r3
 800419e:	d001      	beq.n	80041a4 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e000      	b.n	80041a6 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40021000 	.word	0x40021000

080041b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b09e      	sub	sp, #120	; 0x78
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80041be:	2300      	movs	r3, #0
 80041c0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e162      	b.n	8004492 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041cc:	4b90      	ldr	r3, [pc, #576]	; (8004410 <HAL_RCC_ClockConfig+0x25c>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0307 	and.w	r3, r3, #7
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d910      	bls.n	80041fc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041da:	4b8d      	ldr	r3, [pc, #564]	; (8004410 <HAL_RCC_ClockConfig+0x25c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f023 0207 	bic.w	r2, r3, #7
 80041e2:	498b      	ldr	r1, [pc, #556]	; (8004410 <HAL_RCC_ClockConfig+0x25c>)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ea:	4b89      	ldr	r3, [pc, #548]	; (8004410 <HAL_RCC_ClockConfig+0x25c>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d001      	beq.n	80041fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e14a      	b.n	8004492 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d008      	beq.n	800421a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004208:	4b82      	ldr	r3, [pc, #520]	; (8004414 <HAL_RCC_ClockConfig+0x260>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	497f      	ldr	r1, [pc, #508]	; (8004414 <HAL_RCC_ClockConfig+0x260>)
 8004216:	4313      	orrs	r3, r2
 8004218:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 80dc 	beq.w	80043e0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d13c      	bne.n	80042aa <HAL_RCC_ClockConfig+0xf6>
 8004230:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004234:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004236:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004238:	fa93 f3a3 	rbit	r3, r3
 800423c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800423e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004240:	fab3 f383 	clz	r3, r3
 8004244:	b2db      	uxtb	r3, r3
 8004246:	095b      	lsrs	r3, r3, #5
 8004248:	b2db      	uxtb	r3, r3
 800424a:	f043 0301 	orr.w	r3, r3, #1
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b01      	cmp	r3, #1
 8004252:	d102      	bne.n	800425a <HAL_RCC_ClockConfig+0xa6>
 8004254:	4b6f      	ldr	r3, [pc, #444]	; (8004414 <HAL_RCC_ClockConfig+0x260>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	e00f      	b.n	800427a <HAL_RCC_ClockConfig+0xc6>
 800425a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800425e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004260:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004262:	fa93 f3a3 	rbit	r3, r3
 8004266:	667b      	str	r3, [r7, #100]	; 0x64
 8004268:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800426c:	663b      	str	r3, [r7, #96]	; 0x60
 800426e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004270:	fa93 f3a3 	rbit	r3, r3
 8004274:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004276:	4b67      	ldr	r3, [pc, #412]	; (8004414 <HAL_RCC_ClockConfig+0x260>)
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800427e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004280:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004282:	fa92 f2a2 	rbit	r2, r2
 8004286:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004288:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800428a:	fab2 f282 	clz	r2, r2
 800428e:	b2d2      	uxtb	r2, r2
 8004290:	f042 0220 	orr.w	r2, r2, #32
 8004294:	b2d2      	uxtb	r2, r2
 8004296:	f002 021f 	and.w	r2, r2, #31
 800429a:	2101      	movs	r1, #1
 800429c:	fa01 f202 	lsl.w	r2, r1, r2
 80042a0:	4013      	ands	r3, r2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d17b      	bne.n	800439e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e0f3      	b.n	8004492 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d13c      	bne.n	800432c <HAL_RCC_ClockConfig+0x178>
 80042b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042b6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042ba:	fa93 f3a3 	rbit	r3, r3
 80042be:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80042c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042c2:	fab3 f383 	clz	r3, r3
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	095b      	lsrs	r3, r3, #5
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	f043 0301 	orr.w	r3, r3, #1
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d102      	bne.n	80042dc <HAL_RCC_ClockConfig+0x128>
 80042d6:	4b4f      	ldr	r3, [pc, #316]	; (8004414 <HAL_RCC_ClockConfig+0x260>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	e00f      	b.n	80042fc <HAL_RCC_ClockConfig+0x148>
 80042dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042e0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042e4:	fa93 f3a3 	rbit	r3, r3
 80042e8:	647b      	str	r3, [r7, #68]	; 0x44
 80042ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042ee:	643b      	str	r3, [r7, #64]	; 0x40
 80042f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042f2:	fa93 f3a3 	rbit	r3, r3
 80042f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042f8:	4b46      	ldr	r3, [pc, #280]	; (8004414 <HAL_RCC_ClockConfig+0x260>)
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004300:	63ba      	str	r2, [r7, #56]	; 0x38
 8004302:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004304:	fa92 f2a2 	rbit	r2, r2
 8004308:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800430a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800430c:	fab2 f282 	clz	r2, r2
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	f042 0220 	orr.w	r2, r2, #32
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	f002 021f 	and.w	r2, r2, #31
 800431c:	2101      	movs	r1, #1
 800431e:	fa01 f202 	lsl.w	r2, r1, r2
 8004322:	4013      	ands	r3, r2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d13a      	bne.n	800439e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e0b2      	b.n	8004492 <HAL_RCC_ClockConfig+0x2de>
 800432c:	2302      	movs	r3, #2
 800432e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004332:	fa93 f3a3 	rbit	r3, r3
 8004336:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800433a:	fab3 f383 	clz	r3, r3
 800433e:	b2db      	uxtb	r3, r3
 8004340:	095b      	lsrs	r3, r3, #5
 8004342:	b2db      	uxtb	r3, r3
 8004344:	f043 0301 	orr.w	r3, r3, #1
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b01      	cmp	r3, #1
 800434c:	d102      	bne.n	8004354 <HAL_RCC_ClockConfig+0x1a0>
 800434e:	4b31      	ldr	r3, [pc, #196]	; (8004414 <HAL_RCC_ClockConfig+0x260>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	e00d      	b.n	8004370 <HAL_RCC_ClockConfig+0x1bc>
 8004354:	2302      	movs	r3, #2
 8004356:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435a:	fa93 f3a3 	rbit	r3, r3
 800435e:	627b      	str	r3, [r7, #36]	; 0x24
 8004360:	2302      	movs	r3, #2
 8004362:	623b      	str	r3, [r7, #32]
 8004364:	6a3b      	ldr	r3, [r7, #32]
 8004366:	fa93 f3a3 	rbit	r3, r3
 800436a:	61fb      	str	r3, [r7, #28]
 800436c:	4b29      	ldr	r3, [pc, #164]	; (8004414 <HAL_RCC_ClockConfig+0x260>)
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	2202      	movs	r2, #2
 8004372:	61ba      	str	r2, [r7, #24]
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	fa92 f2a2 	rbit	r2, r2
 800437a:	617a      	str	r2, [r7, #20]
  return result;
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	fab2 f282 	clz	r2, r2
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	f042 0220 	orr.w	r2, r2, #32
 8004388:	b2d2      	uxtb	r2, r2
 800438a:	f002 021f 	and.w	r2, r2, #31
 800438e:	2101      	movs	r1, #1
 8004390:	fa01 f202 	lsl.w	r2, r1, r2
 8004394:	4013      	ands	r3, r2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e079      	b.n	8004492 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800439e:	4b1d      	ldr	r3, [pc, #116]	; (8004414 <HAL_RCC_ClockConfig+0x260>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f023 0203 	bic.w	r2, r3, #3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	491a      	ldr	r1, [pc, #104]	; (8004414 <HAL_RCC_ClockConfig+0x260>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043b0:	f7fc fff8 	bl	80013a4 <HAL_GetTick>
 80043b4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043b6:	e00a      	b.n	80043ce <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043b8:	f7fc fff4 	bl	80013a4 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e061      	b.n	8004492 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ce:	4b11      	ldr	r3, [pc, #68]	; (8004414 <HAL_RCC_ClockConfig+0x260>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f003 020c 	and.w	r2, r3, #12
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	429a      	cmp	r2, r3
 80043de:	d1eb      	bne.n	80043b8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043e0:	4b0b      	ldr	r3, [pc, #44]	; (8004410 <HAL_RCC_ClockConfig+0x25c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d214      	bcs.n	8004418 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ee:	4b08      	ldr	r3, [pc, #32]	; (8004410 <HAL_RCC_ClockConfig+0x25c>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f023 0207 	bic.w	r2, r3, #7
 80043f6:	4906      	ldr	r1, [pc, #24]	; (8004410 <HAL_RCC_ClockConfig+0x25c>)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043fe:	4b04      	ldr	r3, [pc, #16]	; (8004410 <HAL_RCC_ClockConfig+0x25c>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	429a      	cmp	r2, r3
 800440a:	d005      	beq.n	8004418 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e040      	b.n	8004492 <HAL_RCC_ClockConfig+0x2de>
 8004410:	40022000 	.word	0x40022000
 8004414:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	d008      	beq.n	8004436 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004424:	4b1d      	ldr	r3, [pc, #116]	; (800449c <HAL_RCC_ClockConfig+0x2e8>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	491a      	ldr	r1, [pc, #104]	; (800449c <HAL_RCC_ClockConfig+0x2e8>)
 8004432:	4313      	orrs	r3, r2
 8004434:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0308 	and.w	r3, r3, #8
 800443e:	2b00      	cmp	r3, #0
 8004440:	d009      	beq.n	8004456 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004442:	4b16      	ldr	r3, [pc, #88]	; (800449c <HAL_RCC_ClockConfig+0x2e8>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	4912      	ldr	r1, [pc, #72]	; (800449c <HAL_RCC_ClockConfig+0x2e8>)
 8004452:	4313      	orrs	r3, r2
 8004454:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004456:	f000 f829 	bl	80044ac <HAL_RCC_GetSysClockFreq>
 800445a:	4601      	mov	r1, r0
 800445c:	4b0f      	ldr	r3, [pc, #60]	; (800449c <HAL_RCC_ClockConfig+0x2e8>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004464:	22f0      	movs	r2, #240	; 0xf0
 8004466:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	fa92 f2a2 	rbit	r2, r2
 800446e:	60fa      	str	r2, [r7, #12]
  return result;
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	fab2 f282 	clz	r2, r2
 8004476:	b2d2      	uxtb	r2, r2
 8004478:	40d3      	lsrs	r3, r2
 800447a:	4a09      	ldr	r2, [pc, #36]	; (80044a0 <HAL_RCC_ClockConfig+0x2ec>)
 800447c:	5cd3      	ldrb	r3, [r2, r3]
 800447e:	fa21 f303 	lsr.w	r3, r1, r3
 8004482:	4a08      	ldr	r2, [pc, #32]	; (80044a4 <HAL_RCC_ClockConfig+0x2f0>)
 8004484:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004486:	4b08      	ldr	r3, [pc, #32]	; (80044a8 <HAL_RCC_ClockConfig+0x2f4>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4618      	mov	r0, r3
 800448c:	f7fc fe0c 	bl	80010a8 <HAL_InitTick>
  
  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3778      	adds	r7, #120	; 0x78
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	40021000 	.word	0x40021000
 80044a0:	0800a634 	.word	0x0800a634
 80044a4:	20000010 	.word	0x20000010
 80044a8:	20000014 	.word	0x20000014

080044ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b08b      	sub	sp, #44	; 0x2c
 80044b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	61fb      	str	r3, [r7, #28]
 80044b6:	2300      	movs	r3, #0
 80044b8:	61bb      	str	r3, [r7, #24]
 80044ba:	2300      	movs	r3, #0
 80044bc:	627b      	str	r3, [r7, #36]	; 0x24
 80044be:	2300      	movs	r3, #0
 80044c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80044c2:	2300      	movs	r3, #0
 80044c4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80044c6:	4b2a      	ldr	r3, [pc, #168]	; (8004570 <HAL_RCC_GetSysClockFreq+0xc4>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	f003 030c 	and.w	r3, r3, #12
 80044d2:	2b04      	cmp	r3, #4
 80044d4:	d002      	beq.n	80044dc <HAL_RCC_GetSysClockFreq+0x30>
 80044d6:	2b08      	cmp	r3, #8
 80044d8:	d003      	beq.n	80044e2 <HAL_RCC_GetSysClockFreq+0x36>
 80044da:	e03f      	b.n	800455c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044dc:	4b25      	ldr	r3, [pc, #148]	; (8004574 <HAL_RCC_GetSysClockFreq+0xc8>)
 80044de:	623b      	str	r3, [r7, #32]
      break;
 80044e0:	e03f      	b.n	8004562 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80044e8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80044ec:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	fa92 f2a2 	rbit	r2, r2
 80044f4:	607a      	str	r2, [r7, #4]
  return result;
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	fab2 f282 	clz	r2, r2
 80044fc:	b2d2      	uxtb	r2, r2
 80044fe:	40d3      	lsrs	r3, r2
 8004500:	4a1d      	ldr	r2, [pc, #116]	; (8004578 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004502:	5cd3      	ldrb	r3, [r2, r3]
 8004504:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004506:	4b1a      	ldr	r3, [pc, #104]	; (8004570 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450a:	f003 030f 	and.w	r3, r3, #15
 800450e:	220f      	movs	r2, #15
 8004510:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	fa92 f2a2 	rbit	r2, r2
 8004518:	60fa      	str	r2, [r7, #12]
  return result;
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	fab2 f282 	clz	r2, r2
 8004520:	b2d2      	uxtb	r2, r2
 8004522:	40d3      	lsrs	r3, r2
 8004524:	4a15      	ldr	r2, [pc, #84]	; (800457c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004526:	5cd3      	ldrb	r3, [r2, r3]
 8004528:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d008      	beq.n	8004546 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004534:	4a0f      	ldr	r2, [pc, #60]	; (8004574 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	fbb2 f2f3 	udiv	r2, r2, r3
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	fb02 f303 	mul.w	r3, r2, r3
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
 8004544:	e007      	b.n	8004556 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004546:	4a0b      	ldr	r2, [pc, #44]	; (8004574 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	fbb2 f2f3 	udiv	r2, r2, r3
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	fb02 f303 	mul.w	r3, r2, r3
 8004554:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	623b      	str	r3, [r7, #32]
      break;
 800455a:	e002      	b.n	8004562 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800455c:	4b05      	ldr	r3, [pc, #20]	; (8004574 <HAL_RCC_GetSysClockFreq+0xc8>)
 800455e:	623b      	str	r3, [r7, #32]
      break;
 8004560:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004562:	6a3b      	ldr	r3, [r7, #32]
}
 8004564:	4618      	mov	r0, r3
 8004566:	372c      	adds	r7, #44	; 0x2c
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	40021000 	.word	0x40021000
 8004574:	007a1200 	.word	0x007a1200
 8004578:	0800a64c 	.word	0x0800a64c
 800457c:	0800a65c 	.word	0x0800a65c

08004580 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004584:	4b03      	ldr	r3, [pc, #12]	; (8004594 <HAL_RCC_GetHCLKFreq+0x14>)
 8004586:	681b      	ldr	r3, [r3, #0]
}
 8004588:	4618      	mov	r0, r3
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	20000010 	.word	0x20000010

08004598 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800459e:	f7ff ffef 	bl	8004580 <HAL_RCC_GetHCLKFreq>
 80045a2:	4601      	mov	r1, r0
 80045a4:	4b0b      	ldr	r3, [pc, #44]	; (80045d4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045ac:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80045b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	fa92 f2a2 	rbit	r2, r2
 80045b8:	603a      	str	r2, [r7, #0]
  return result;
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	fab2 f282 	clz	r2, r2
 80045c0:	b2d2      	uxtb	r2, r2
 80045c2:	40d3      	lsrs	r3, r2
 80045c4:	4a04      	ldr	r2, [pc, #16]	; (80045d8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80045c6:	5cd3      	ldrb	r3, [r2, r3]
 80045c8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80045cc:	4618      	mov	r0, r3
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	40021000 	.word	0x40021000
 80045d8:	0800a644 	.word	0x0800a644

080045dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80045e2:	f7ff ffcd 	bl	8004580 <HAL_RCC_GetHCLKFreq>
 80045e6:	4601      	mov	r1, r0
 80045e8:	4b0b      	ldr	r3, [pc, #44]	; (8004618 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80045f0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80045f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	fa92 f2a2 	rbit	r2, r2
 80045fc:	603a      	str	r2, [r7, #0]
  return result;
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	fab2 f282 	clz	r2, r2
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	40d3      	lsrs	r3, r2
 8004608:	4a04      	ldr	r2, [pc, #16]	; (800461c <HAL_RCC_GetPCLK2Freq+0x40>)
 800460a:	5cd3      	ldrb	r3, [r2, r3]
 800460c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004610:	4618      	mov	r0, r3
 8004612:	3708      	adds	r7, #8
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	40021000 	.word	0x40021000
 800461c:	0800a644 	.word	0x0800a644

08004620 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	220f      	movs	r2, #15
 800462e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004630:	4b12      	ldr	r3, [pc, #72]	; (800467c <HAL_RCC_GetClockConfig+0x5c>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f003 0203 	and.w	r2, r3, #3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800463c:	4b0f      	ldr	r3, [pc, #60]	; (800467c <HAL_RCC_GetClockConfig+0x5c>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8004648:	4b0c      	ldr	r3, [pc, #48]	; (800467c <HAL_RCC_GetClockConfig+0x5c>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004654:	4b09      	ldr	r3, [pc, #36]	; (800467c <HAL_RCC_GetClockConfig+0x5c>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	08db      	lsrs	r3, r3, #3
 800465a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8004662:	4b07      	ldr	r3, [pc, #28]	; (8004680 <HAL_RCC_GetClockConfig+0x60>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0207 	and.w	r2, r3, #7
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	601a      	str	r2, [r3, #0]
}
 800466e:	bf00      	nop
 8004670:	370c      	adds	r7, #12
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	40021000 	.word	0x40021000
 8004680:	40022000 	.word	0x40022000

08004684 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b092      	sub	sp, #72	; 0x48
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004694:	2300      	movs	r3, #0
 8004696:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 80d4 	beq.w	8004850 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046a8:	4b4e      	ldr	r3, [pc, #312]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10e      	bne.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046b4:	4b4b      	ldr	r3, [pc, #300]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	4a4a      	ldr	r2, [pc, #296]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046be:	61d3      	str	r3, [r2, #28]
 80046c0:	4b48      	ldr	r3, [pc, #288]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046c2:	69db      	ldr	r3, [r3, #28]
 80046c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c8:	60bb      	str	r3, [r7, #8]
 80046ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046cc:	2301      	movs	r3, #1
 80046ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d2:	4b45      	ldr	r3, [pc, #276]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d118      	bne.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046de:	4b42      	ldr	r3, [pc, #264]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a41      	ldr	r2, [pc, #260]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ea:	f7fc fe5b 	bl	80013a4 <HAL_GetTick>
 80046ee:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f0:	e008      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046f2:	f7fc fe57 	bl	80013a4 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b64      	cmp	r3, #100	; 0x64
 80046fe:	d901      	bls.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e1d6      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004704:	4b38      	ldr	r3, [pc, #224]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0f0      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004710:	4b34      	ldr	r3, [pc, #208]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004718:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800471a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 8084 	beq.w	800482a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800472a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800472c:	429a      	cmp	r2, r3
 800472e:	d07c      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004730:	4b2c      	ldr	r3, [pc, #176]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004738:	63fb      	str	r3, [r7, #60]	; 0x3c
 800473a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800473e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004742:	fa93 f3a3 	rbit	r3, r3
 8004746:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800474a:	fab3 f383 	clz	r3, r3
 800474e:	b2db      	uxtb	r3, r3
 8004750:	461a      	mov	r2, r3
 8004752:	4b26      	ldr	r3, [pc, #152]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004754:	4413      	add	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	461a      	mov	r2, r3
 800475a:	2301      	movs	r3, #1
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004762:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004766:	fa93 f3a3 	rbit	r3, r3
 800476a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800476c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800476e:	fab3 f383 	clz	r3, r3
 8004772:	b2db      	uxtb	r3, r3
 8004774:	461a      	mov	r2, r3
 8004776:	4b1d      	ldr	r3, [pc, #116]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004778:	4413      	add	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	461a      	mov	r2, r3
 800477e:	2300      	movs	r3, #0
 8004780:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004782:	4a18      	ldr	r2, [pc, #96]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004786:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d04b      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004792:	f7fc fe07 	bl	80013a4 <HAL_GetTick>
 8004796:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004798:	e00a      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800479a:	f7fc fe03 	bl	80013a4 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d901      	bls.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e180      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80047b0:	2302      	movs	r3, #2
 80047b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b6:	fa93 f3a3 	rbit	r3, r3
 80047ba:	627b      	str	r3, [r7, #36]	; 0x24
 80047bc:	2302      	movs	r3, #2
 80047be:	623b      	str	r3, [r7, #32]
 80047c0:	6a3b      	ldr	r3, [r7, #32]
 80047c2:	fa93 f3a3 	rbit	r3, r3
 80047c6:	61fb      	str	r3, [r7, #28]
  return result;
 80047c8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ca:	fab3 f383 	clz	r3, r3
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	095b      	lsrs	r3, r3, #5
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	f043 0302 	orr.w	r3, r3, #2
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d108      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80047de:	4b01      	ldr	r3, [pc, #4]	; (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	e00d      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80047e4:	40021000 	.word	0x40021000
 80047e8:	40007000 	.word	0x40007000
 80047ec:	10908100 	.word	0x10908100
 80047f0:	2302      	movs	r3, #2
 80047f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	fa93 f3a3 	rbit	r3, r3
 80047fa:	617b      	str	r3, [r7, #20]
 80047fc:	4b9a      	ldr	r3, [pc, #616]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	2202      	movs	r2, #2
 8004802:	613a      	str	r2, [r7, #16]
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	fa92 f2a2 	rbit	r2, r2
 800480a:	60fa      	str	r2, [r7, #12]
  return result;
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	fab2 f282 	clz	r2, r2
 8004812:	b2d2      	uxtb	r2, r2
 8004814:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004818:	b2d2      	uxtb	r2, r2
 800481a:	f002 021f 	and.w	r2, r2, #31
 800481e:	2101      	movs	r1, #1
 8004820:	fa01 f202 	lsl.w	r2, r1, r2
 8004824:	4013      	ands	r3, r2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0b7      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800482a:	4b8f      	ldr	r3, [pc, #572]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	498c      	ldr	r1, [pc, #560]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004838:	4313      	orrs	r3, r2
 800483a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800483c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004840:	2b01      	cmp	r3, #1
 8004842:	d105      	bne.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004844:	4b88      	ldr	r3, [pc, #544]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004846:	69db      	ldr	r3, [r3, #28]
 8004848:	4a87      	ldr	r2, [pc, #540]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800484a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800484e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b00      	cmp	r3, #0
 800485a:	d008      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800485c:	4b82      	ldr	r3, [pc, #520]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800485e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004860:	f023 0203 	bic.w	r2, r3, #3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	497f      	ldr	r1, [pc, #508]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800486a:	4313      	orrs	r3, r2
 800486c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d008      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800487a:	4b7b      	ldr	r3, [pc, #492]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800487c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	4978      	ldr	r1, [pc, #480]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004888:	4313      	orrs	r3, r2
 800488a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b00      	cmp	r3, #0
 8004896:	d008      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004898:	4b73      	ldr	r3, [pc, #460]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800489a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	4970      	ldr	r1, [pc, #448]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0320 	and.w	r3, r3, #32
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d008      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048b6:	4b6c      	ldr	r3, [pc, #432]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ba:	f023 0210 	bic.w	r2, r3, #16
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	4969      	ldr	r1, [pc, #420]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d008      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80048d4:	4b64      	ldr	r3, [pc, #400]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e0:	4961      	ldr	r1, [pc, #388]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d008      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048f2:	4b5d      	ldr	r3, [pc, #372]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f6:	f023 0220 	bic.w	r2, r3, #32
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	495a      	ldr	r1, [pc, #360]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004900:	4313      	orrs	r3, r2
 8004902:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d008      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004910:	4b55      	ldr	r3, [pc, #340]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004914:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	4952      	ldr	r1, [pc, #328]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800491e:	4313      	orrs	r3, r2
 8004920:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0308 	and.w	r3, r3, #8
 800492a:	2b00      	cmp	r3, #0
 800492c:	d008      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800492e:	4b4e      	ldr	r3, [pc, #312]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004932:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	494b      	ldr	r1, [pc, #300]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800493c:	4313      	orrs	r3, r2
 800493e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0310 	and.w	r3, r3, #16
 8004948:	2b00      	cmp	r3, #0
 800494a:	d008      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800494c:	4b46      	ldr	r3, [pc, #280]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800494e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004950:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	4943      	ldr	r1, [pc, #268]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800495a:	4313      	orrs	r3, r2
 800495c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004966:	2b00      	cmp	r3, #0
 8004968:	d008      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800496a:	4b3f      	ldr	r3, [pc, #252]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004976:	493c      	ldr	r1, [pc, #240]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004978:	4313      	orrs	r3, r2
 800497a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004984:	2b00      	cmp	r3, #0
 8004986:	d008      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004988:	4b37      	ldr	r3, [pc, #220]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800498a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004994:	4934      	ldr	r1, [pc, #208]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004996:	4313      	orrs	r3, r2
 8004998:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d008      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80049a6:	4b30      	ldr	r3, [pc, #192]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049aa:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b2:	492d      	ldr	r1, [pc, #180]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d008      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80049c4:	4b28      	ldr	r3, [pc, #160]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d0:	4925      	ldr	r1, [pc, #148]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d008      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80049e2:	4b21      	ldr	r3, [pc, #132]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	491e      	ldr	r1, [pc, #120]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d008      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004a00:	4b19      	ldr	r3, [pc, #100]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a04:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0c:	4916      	ldr	r1, [pc, #88]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d008      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004a1e:	4b12      	ldr	r3, [pc, #72]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a22:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a2a:	490f      	ldr	r1, [pc, #60]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d008      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004a3c:	4b0a      	ldr	r3, [pc, #40]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a40:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a48:	4907      	ldr	r1, [pc, #28]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00c      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004a5a:	4b03      	ldr	r3, [pc, #12]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	e002      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004a66:	bf00      	nop
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a6e:	4913      	ldr	r1, [pc, #76]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d008      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004a80:	4b0e      	ldr	r3, [pc, #56]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a84:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a8c:	490b      	ldr	r1, [pc, #44]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d008      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004a9e:	4b07      	ldr	r3, [pc, #28]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aaa:	4904      	ldr	r1, [pc, #16]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3748      	adds	r7, #72	; 0x48
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	40021000 	.word	0x40021000

08004ac0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e049      	b.n	8004b66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d106      	bne.n	8004aec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7fc fa7c 	bl	8000fe4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	3304      	adds	r3, #4
 8004afc:	4619      	mov	r1, r3
 8004afe:	4610      	mov	r0, r2
 8004b00:	f000 fab6 	bl	8005070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
	...

08004b70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d001      	beq.n	8004b88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e04f      	b.n	8004c28 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68da      	ldr	r2, [r3, #12]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f042 0201 	orr.w	r2, r2, #1
 8004b9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a23      	ldr	r2, [pc, #140]	; (8004c34 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d01d      	beq.n	8004be6 <HAL_TIM_Base_Start_IT+0x76>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb2:	d018      	beq.n	8004be6 <HAL_TIM_Base_Start_IT+0x76>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a1f      	ldr	r2, [pc, #124]	; (8004c38 <HAL_TIM_Base_Start_IT+0xc8>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d013      	beq.n	8004be6 <HAL_TIM_Base_Start_IT+0x76>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a1e      	ldr	r2, [pc, #120]	; (8004c3c <HAL_TIM_Base_Start_IT+0xcc>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d00e      	beq.n	8004be6 <HAL_TIM_Base_Start_IT+0x76>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a1c      	ldr	r2, [pc, #112]	; (8004c40 <HAL_TIM_Base_Start_IT+0xd0>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d009      	beq.n	8004be6 <HAL_TIM_Base_Start_IT+0x76>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a1b      	ldr	r2, [pc, #108]	; (8004c44 <HAL_TIM_Base_Start_IT+0xd4>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d004      	beq.n	8004be6 <HAL_TIM_Base_Start_IT+0x76>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a19      	ldr	r2, [pc, #100]	; (8004c48 <HAL_TIM_Base_Start_IT+0xd8>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d115      	bne.n	8004c12 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689a      	ldr	r2, [r3, #8]
 8004bec:	4b17      	ldr	r3, [pc, #92]	; (8004c4c <HAL_TIM_Base_Start_IT+0xdc>)
 8004bee:	4013      	ands	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2b06      	cmp	r3, #6
 8004bf6:	d015      	beq.n	8004c24 <HAL_TIM_Base_Start_IT+0xb4>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bfe:	d011      	beq.n	8004c24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f042 0201 	orr.w	r2, r2, #1
 8004c0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c10:	e008      	b.n	8004c24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f042 0201 	orr.w	r2, r2, #1
 8004c20:	601a      	str	r2, [r3, #0]
 8004c22:	e000      	b.n	8004c26 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	40012c00 	.word	0x40012c00
 8004c38:	40000400 	.word	0x40000400
 8004c3c:	40000800 	.word	0x40000800
 8004c40:	40013400 	.word	0x40013400
 8004c44:	40014000 	.word	0x40014000
 8004c48:	40015000 	.word	0x40015000
 8004c4c:	00010007 	.word	0x00010007

08004c50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d122      	bne.n	8004cac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d11b      	bne.n	8004cac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f06f 0202 	mvn.w	r2, #2
 8004c7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	f003 0303 	and.w	r3, r3, #3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f9ce 	bl	8005034 <HAL_TIM_IC_CaptureCallback>
 8004c98:	e005      	b.n	8004ca6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f9c0 	bl	8005020 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 f9d1 	bl	8005048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	f003 0304 	and.w	r3, r3, #4
 8004cb6:	2b04      	cmp	r3, #4
 8004cb8:	d122      	bne.n	8004d00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f003 0304 	and.w	r3, r3, #4
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	d11b      	bne.n	8004d00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f06f 0204 	mvn.w	r2, #4
 8004cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f9a4 	bl	8005034 <HAL_TIM_IC_CaptureCallback>
 8004cec:	e005      	b.n	8004cfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f996 	bl	8005020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 f9a7 	bl	8005048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	f003 0308 	and.w	r3, r3, #8
 8004d0a:	2b08      	cmp	r3, #8
 8004d0c:	d122      	bne.n	8004d54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f003 0308 	and.w	r3, r3, #8
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d11b      	bne.n	8004d54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f06f 0208 	mvn.w	r2, #8
 8004d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2204      	movs	r2, #4
 8004d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	f003 0303 	and.w	r3, r3, #3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f97a 	bl	8005034 <HAL_TIM_IC_CaptureCallback>
 8004d40:	e005      	b.n	8004d4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f96c 	bl	8005020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 f97d 	bl	8005048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	f003 0310 	and.w	r3, r3, #16
 8004d5e:	2b10      	cmp	r3, #16
 8004d60:	d122      	bne.n	8004da8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f003 0310 	and.w	r3, r3, #16
 8004d6c:	2b10      	cmp	r3, #16
 8004d6e:	d11b      	bne.n	8004da8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f06f 0210 	mvn.w	r2, #16
 8004d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2208      	movs	r2, #8
 8004d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f950 	bl	8005034 <HAL_TIM_IC_CaptureCallback>
 8004d94:	e005      	b.n	8004da2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f942 	bl	8005020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 f953 	bl	8005048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d10e      	bne.n	8004dd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d107      	bne.n	8004dd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f06f 0201 	mvn.w	r2, #1
 8004dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7fc f846 	bl	8000e60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dde:	2b80      	cmp	r3, #128	; 0x80
 8004de0:	d10e      	bne.n	8004e00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dec:	2b80      	cmp	r3, #128	; 0x80
 8004dee:	d107      	bne.n	8004e00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 fb06 	bl	800540c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e0e:	d10e      	bne.n	8004e2e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e1a:	2b80      	cmp	r3, #128	; 0x80
 8004e1c:	d107      	bne.n	8004e2e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 faf9 	bl	8005420 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e38:	2b40      	cmp	r3, #64	; 0x40
 8004e3a:	d10e      	bne.n	8004e5a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e46:	2b40      	cmp	r3, #64	; 0x40
 8004e48:	d107      	bne.n	8004e5a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f901 	bl	800505c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	f003 0320 	and.w	r3, r3, #32
 8004e64:	2b20      	cmp	r3, #32
 8004e66:	d10e      	bne.n	8004e86 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	f003 0320 	and.w	r3, r3, #32
 8004e72:	2b20      	cmp	r3, #32
 8004e74:	d107      	bne.n	8004e86 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f06f 0220 	mvn.w	r2, #32
 8004e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 fab9 	bl	80053f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e86:	bf00      	nop
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b084      	sub	sp, #16
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
 8004e96:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d101      	bne.n	8004eaa <HAL_TIM_ConfigClockSource+0x1c>
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	e0b6      	b.n	8005018 <HAL_TIM_ConfigClockSource+0x18a>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2202      	movs	r2, #2
 8004eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ec8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ecc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ed4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ee6:	d03e      	beq.n	8004f66 <HAL_TIM_ConfigClockSource+0xd8>
 8004ee8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eec:	f200 8087 	bhi.w	8004ffe <HAL_TIM_ConfigClockSource+0x170>
 8004ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ef4:	f000 8086 	beq.w	8005004 <HAL_TIM_ConfigClockSource+0x176>
 8004ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004efc:	d87f      	bhi.n	8004ffe <HAL_TIM_ConfigClockSource+0x170>
 8004efe:	2b70      	cmp	r3, #112	; 0x70
 8004f00:	d01a      	beq.n	8004f38 <HAL_TIM_ConfigClockSource+0xaa>
 8004f02:	2b70      	cmp	r3, #112	; 0x70
 8004f04:	d87b      	bhi.n	8004ffe <HAL_TIM_ConfigClockSource+0x170>
 8004f06:	2b60      	cmp	r3, #96	; 0x60
 8004f08:	d050      	beq.n	8004fac <HAL_TIM_ConfigClockSource+0x11e>
 8004f0a:	2b60      	cmp	r3, #96	; 0x60
 8004f0c:	d877      	bhi.n	8004ffe <HAL_TIM_ConfigClockSource+0x170>
 8004f0e:	2b50      	cmp	r3, #80	; 0x50
 8004f10:	d03c      	beq.n	8004f8c <HAL_TIM_ConfigClockSource+0xfe>
 8004f12:	2b50      	cmp	r3, #80	; 0x50
 8004f14:	d873      	bhi.n	8004ffe <HAL_TIM_ConfigClockSource+0x170>
 8004f16:	2b40      	cmp	r3, #64	; 0x40
 8004f18:	d058      	beq.n	8004fcc <HAL_TIM_ConfigClockSource+0x13e>
 8004f1a:	2b40      	cmp	r3, #64	; 0x40
 8004f1c:	d86f      	bhi.n	8004ffe <HAL_TIM_ConfigClockSource+0x170>
 8004f1e:	2b30      	cmp	r3, #48	; 0x30
 8004f20:	d064      	beq.n	8004fec <HAL_TIM_ConfigClockSource+0x15e>
 8004f22:	2b30      	cmp	r3, #48	; 0x30
 8004f24:	d86b      	bhi.n	8004ffe <HAL_TIM_ConfigClockSource+0x170>
 8004f26:	2b20      	cmp	r3, #32
 8004f28:	d060      	beq.n	8004fec <HAL_TIM_ConfigClockSource+0x15e>
 8004f2a:	2b20      	cmp	r3, #32
 8004f2c:	d867      	bhi.n	8004ffe <HAL_TIM_ConfigClockSource+0x170>
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d05c      	beq.n	8004fec <HAL_TIM_ConfigClockSource+0x15e>
 8004f32:	2b10      	cmp	r3, #16
 8004f34:	d05a      	beq.n	8004fec <HAL_TIM_ConfigClockSource+0x15e>
 8004f36:	e062      	b.n	8004ffe <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f48:	f000 f9aa 	bl	80052a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f5a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	609a      	str	r2, [r3, #8]
      break;
 8004f64:	e04f      	b.n	8005006 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f76:	f000 f993 	bl	80052a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	689a      	ldr	r2, [r3, #8]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f88:	609a      	str	r2, [r3, #8]
      break;
 8004f8a:	e03c      	b.n	8005006 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f98:	461a      	mov	r2, r3
 8004f9a:	f000 f907 	bl	80051ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2150      	movs	r1, #80	; 0x50
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f000 f960 	bl	800526a <TIM_ITRx_SetConfig>
      break;
 8004faa:	e02c      	b.n	8005006 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fb8:	461a      	mov	r2, r3
 8004fba:	f000 f926 	bl	800520a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2160      	movs	r1, #96	; 0x60
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f000 f950 	bl	800526a <TIM_ITRx_SetConfig>
      break;
 8004fca:	e01c      	b.n	8005006 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fd8:	461a      	mov	r2, r3
 8004fda:	f000 f8e7 	bl	80051ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2140      	movs	r1, #64	; 0x40
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f000 f940 	bl	800526a <TIM_ITRx_SetConfig>
      break;
 8004fea:	e00c      	b.n	8005006 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	f000 f937 	bl	800526a <TIM_ITRx_SetConfig>
      break;
 8004ffc:	e003      	b.n	8005006 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	73fb      	strb	r3, [r7, #15]
      break;
 8005002:	e000      	b.n	8005006 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005004:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005016:	7bfb      	ldrb	r3, [r7, #15]
}
 8005018:	4618      	mov	r0, r3
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005050:	bf00      	nop
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005064:	bf00      	nop
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a42      	ldr	r2, [pc, #264]	; (800518c <TIM_Base_SetConfig+0x11c>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d013      	beq.n	80050b0 <TIM_Base_SetConfig+0x40>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800508e:	d00f      	beq.n	80050b0 <TIM_Base_SetConfig+0x40>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a3f      	ldr	r2, [pc, #252]	; (8005190 <TIM_Base_SetConfig+0x120>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d00b      	beq.n	80050b0 <TIM_Base_SetConfig+0x40>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a3e      	ldr	r2, [pc, #248]	; (8005194 <TIM_Base_SetConfig+0x124>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d007      	beq.n	80050b0 <TIM_Base_SetConfig+0x40>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a3d      	ldr	r2, [pc, #244]	; (8005198 <TIM_Base_SetConfig+0x128>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d003      	beq.n	80050b0 <TIM_Base_SetConfig+0x40>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a3c      	ldr	r2, [pc, #240]	; (800519c <TIM_Base_SetConfig+0x12c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d108      	bne.n	80050c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	4313      	orrs	r3, r2
 80050c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a31      	ldr	r2, [pc, #196]	; (800518c <TIM_Base_SetConfig+0x11c>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d01f      	beq.n	800510a <TIM_Base_SetConfig+0x9a>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d0:	d01b      	beq.n	800510a <TIM_Base_SetConfig+0x9a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a2e      	ldr	r2, [pc, #184]	; (8005190 <TIM_Base_SetConfig+0x120>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d017      	beq.n	800510a <TIM_Base_SetConfig+0x9a>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a2d      	ldr	r2, [pc, #180]	; (8005194 <TIM_Base_SetConfig+0x124>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d013      	beq.n	800510a <TIM_Base_SetConfig+0x9a>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a2c      	ldr	r2, [pc, #176]	; (8005198 <TIM_Base_SetConfig+0x128>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d00f      	beq.n	800510a <TIM_Base_SetConfig+0x9a>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a2c      	ldr	r2, [pc, #176]	; (80051a0 <TIM_Base_SetConfig+0x130>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d00b      	beq.n	800510a <TIM_Base_SetConfig+0x9a>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a2b      	ldr	r2, [pc, #172]	; (80051a4 <TIM_Base_SetConfig+0x134>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d007      	beq.n	800510a <TIM_Base_SetConfig+0x9a>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a2a      	ldr	r2, [pc, #168]	; (80051a8 <TIM_Base_SetConfig+0x138>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d003      	beq.n	800510a <TIM_Base_SetConfig+0x9a>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a25      	ldr	r2, [pc, #148]	; (800519c <TIM_Base_SetConfig+0x12c>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d108      	bne.n	800511c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005110:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	4313      	orrs	r3, r2
 800511a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	4313      	orrs	r3, r2
 8005128:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a12      	ldr	r2, [pc, #72]	; (800518c <TIM_Base_SetConfig+0x11c>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d013      	beq.n	8005170 <TIM_Base_SetConfig+0x100>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a13      	ldr	r2, [pc, #76]	; (8005198 <TIM_Base_SetConfig+0x128>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d00f      	beq.n	8005170 <TIM_Base_SetConfig+0x100>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a13      	ldr	r2, [pc, #76]	; (80051a0 <TIM_Base_SetConfig+0x130>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d00b      	beq.n	8005170 <TIM_Base_SetConfig+0x100>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a12      	ldr	r2, [pc, #72]	; (80051a4 <TIM_Base_SetConfig+0x134>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d007      	beq.n	8005170 <TIM_Base_SetConfig+0x100>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a11      	ldr	r2, [pc, #68]	; (80051a8 <TIM_Base_SetConfig+0x138>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d003      	beq.n	8005170 <TIM_Base_SetConfig+0x100>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a0c      	ldr	r2, [pc, #48]	; (800519c <TIM_Base_SetConfig+0x12c>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d103      	bne.n	8005178 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	691a      	ldr	r2, [r3, #16]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	615a      	str	r2, [r3, #20]
}
 800517e:	bf00      	nop
 8005180:	3714      	adds	r7, #20
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	40012c00 	.word	0x40012c00
 8005190:	40000400 	.word	0x40000400
 8005194:	40000800 	.word	0x40000800
 8005198:	40013400 	.word	0x40013400
 800519c:	40015000 	.word	0x40015000
 80051a0:	40014000 	.word	0x40014000
 80051a4:	40014400 	.word	0x40014400
 80051a8:	40014800 	.word	0x40014800

080051ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	f023 0201 	bic.w	r2, r3, #1
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	011b      	lsls	r3, r3, #4
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	4313      	orrs	r3, r2
 80051e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f023 030a 	bic.w	r3, r3, #10
 80051e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	621a      	str	r2, [r3, #32]
}
 80051fe:	bf00      	nop
 8005200:	371c      	adds	r7, #28
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800520a:	b480      	push	{r7}
 800520c:	b087      	sub	sp, #28
 800520e:	af00      	add	r7, sp, #0
 8005210:	60f8      	str	r0, [r7, #12]
 8005212:	60b9      	str	r1, [r7, #8]
 8005214:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	f023 0210 	bic.w	r2, r3, #16
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6a1b      	ldr	r3, [r3, #32]
 800522c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005234:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	031b      	lsls	r3, r3, #12
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	4313      	orrs	r3, r2
 800523e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005246:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	011b      	lsls	r3, r3, #4
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	4313      	orrs	r3, r2
 8005250:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	621a      	str	r2, [r3, #32]
}
 800525e:	bf00      	nop
 8005260:	371c      	adds	r7, #28
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800526a:	b480      	push	{r7}
 800526c:	b085      	sub	sp, #20
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
 8005272:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005280:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4313      	orrs	r3, r2
 8005288:	f043 0307 	orr.w	r3, r3, #7
 800528c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	609a      	str	r2, [r3, #8]
}
 8005294:	bf00      	nop
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b087      	sub	sp, #28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
 80052ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	021a      	lsls	r2, r3, #8
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	431a      	orrs	r2, r3
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	609a      	str	r2, [r3, #8]
}
 80052d4:	bf00      	nop
 80052d6:	371c      	adds	r7, #28
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d101      	bne.n	80052f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052f4:	2302      	movs	r3, #2
 80052f6:	e06d      	b.n	80053d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2202      	movs	r2, #2
 8005304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a30      	ldr	r2, [pc, #192]	; (80053e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d009      	beq.n	8005336 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a2f      	ldr	r2, [pc, #188]	; (80053e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d004      	beq.n	8005336 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a2d      	ldr	r2, [pc, #180]	; (80053e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d108      	bne.n	8005348 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800533c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	4313      	orrs	r3, r2
 8005346:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	4313      	orrs	r3, r2
 8005358:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a1e      	ldr	r2, [pc, #120]	; (80053e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d01d      	beq.n	80053a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005374:	d018      	beq.n	80053a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a1c      	ldr	r2, [pc, #112]	; (80053ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d013      	beq.n	80053a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a1a      	ldr	r2, [pc, #104]	; (80053f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d00e      	beq.n	80053a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a15      	ldr	r2, [pc, #84]	; (80053e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d009      	beq.n	80053a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a16      	ldr	r2, [pc, #88]	; (80053f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d004      	beq.n	80053a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a11      	ldr	r2, [pc, #68]	; (80053e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d10c      	bne.n	80053c2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	40012c00 	.word	0x40012c00
 80053e4:	40013400 	.word	0x40013400
 80053e8:	40015000 	.word	0x40015000
 80053ec:	40000400 	.word	0x40000400
 80053f0:	40000800 	.word	0x40000800
 80053f4:	40014000 	.word	0x40014000

080053f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e040      	b.n	80054c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800544a:	2b00      	cmp	r3, #0
 800544c:	d106      	bne.n	800545c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f7fb fde4 	bl	8001024 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2224      	movs	r2, #36	; 0x24
 8005460:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f022 0201 	bic.w	r2, r2, #1
 8005470:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f980 	bl	8005778 <UART_SetConfig>
 8005478:	4603      	mov	r3, r0
 800547a:	2b01      	cmp	r3, #1
 800547c:	d101      	bne.n	8005482 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e022      	b.n	80054c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005486:	2b00      	cmp	r3, #0
 8005488:	d002      	beq.n	8005490 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fb48 	bl	8005b20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800549e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689a      	ldr	r2, [r3, #8]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f042 0201 	orr.w	r2, r2, #1
 80054be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 fbcf 	bl	8005c64 <UART_CheckIdleState>
 80054c6:	4603      	mov	r3, r0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3708      	adds	r7, #8
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b08a      	sub	sp, #40	; 0x28
 80054d4:	af02      	add	r7, sp, #8
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	603b      	str	r3, [r7, #0]
 80054dc:	4613      	mov	r3, r2
 80054de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054e4:	2b20      	cmp	r3, #32
 80054e6:	d178      	bne.n	80055da <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <HAL_UART_Transmit+0x24>
 80054ee:	88fb      	ldrh	r3, [r7, #6]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e071      	b.n	80055dc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2221      	movs	r2, #33	; 0x21
 8005504:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005506:	f7fb ff4d 	bl	80013a4 <HAL_GetTick>
 800550a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	88fa      	ldrh	r2, [r7, #6]
 8005510:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	88fa      	ldrh	r2, [r7, #6]
 8005518:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005524:	d108      	bne.n	8005538 <HAL_UART_Transmit+0x68>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d104      	bne.n	8005538 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800552e:	2300      	movs	r3, #0
 8005530:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	61bb      	str	r3, [r7, #24]
 8005536:	e003      	b.n	8005540 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800553c:	2300      	movs	r3, #0
 800553e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005540:	e030      	b.n	80055a4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	2200      	movs	r2, #0
 800554a:	2180      	movs	r1, #128	; 0x80
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f000 fc31 	bl	8005db4 <UART_WaitOnFlagUntilTimeout>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d004      	beq.n	8005562 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2220      	movs	r2, #32
 800555c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e03c      	b.n	80055dc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10b      	bne.n	8005580 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	881a      	ldrh	r2, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005574:	b292      	uxth	r2, r2
 8005576:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	3302      	adds	r3, #2
 800557c:	61bb      	str	r3, [r7, #24]
 800557e:	e008      	b.n	8005592 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	781a      	ldrb	r2, [r3, #0]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	b292      	uxth	r2, r2
 800558a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	3301      	adds	r3, #1
 8005590:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005598:	b29b      	uxth	r3, r3
 800559a:	3b01      	subs	r3, #1
 800559c:	b29a      	uxth	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1c8      	bne.n	8005542 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	2200      	movs	r2, #0
 80055b8:	2140      	movs	r1, #64	; 0x40
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 fbfa 	bl	8005db4 <UART_WaitOnFlagUntilTimeout>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d004      	beq.n	80055d0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2220      	movs	r2, #32
 80055ca:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e005      	b.n	80055dc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2220      	movs	r2, #32
 80055d4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80055d6:	2300      	movs	r3, #0
 80055d8:	e000      	b.n	80055dc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80055da:	2302      	movs	r3, #2
  }
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3720      	adds	r7, #32
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b08a      	sub	sp, #40	; 0x28
 80055e8:	af02      	add	r7, sp, #8
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	603b      	str	r3, [r7, #0]
 80055f0:	4613      	mov	r3, r2
 80055f2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055fa:	2b20      	cmp	r3, #32
 80055fc:	f040 80b6 	bne.w	800576c <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d002      	beq.n	800560c <HAL_UART_Receive+0x28>
 8005606:	88fb      	ldrh	r3, [r7, #6]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e0ae      	b.n	800576e <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2222      	movs	r2, #34	; 0x22
 800561c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005626:	f7fb febd 	bl	80013a4 <HAL_GetTick>
 800562a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	88fa      	ldrh	r2, [r7, #6]
 8005630:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	88fa      	ldrh	r2, [r7, #6]
 8005638:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005644:	d10e      	bne.n	8005664 <HAL_UART_Receive+0x80>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d105      	bne.n	800565a <HAL_UART_Receive+0x76>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005654:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005658:	e02d      	b.n	80056b6 <HAL_UART_Receive+0xd2>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	22ff      	movs	r2, #255	; 0xff
 800565e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005662:	e028      	b.n	80056b6 <HAL_UART_Receive+0xd2>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d10d      	bne.n	8005688 <HAL_UART_Receive+0xa4>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d104      	bne.n	800567e <HAL_UART_Receive+0x9a>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	22ff      	movs	r2, #255	; 0xff
 8005678:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800567c:	e01b      	b.n	80056b6 <HAL_UART_Receive+0xd2>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	227f      	movs	r2, #127	; 0x7f
 8005682:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005686:	e016      	b.n	80056b6 <HAL_UART_Receive+0xd2>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005690:	d10d      	bne.n	80056ae <HAL_UART_Receive+0xca>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d104      	bne.n	80056a4 <HAL_UART_Receive+0xc0>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	227f      	movs	r2, #127	; 0x7f
 800569e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80056a2:	e008      	b.n	80056b6 <HAL_UART_Receive+0xd2>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	223f      	movs	r2, #63	; 0x3f
 80056a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80056ac:	e003      	b.n	80056b6 <HAL_UART_Receive+0xd2>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80056bc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c6:	d108      	bne.n	80056da <HAL_UART_Receive+0xf6>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d104      	bne.n	80056da <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80056d0:	2300      	movs	r3, #0
 80056d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	61bb      	str	r3, [r7, #24]
 80056d8:	e003      	b.n	80056e2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056de:	2300      	movs	r3, #0
 80056e0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80056e2:	e037      	b.n	8005754 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	2200      	movs	r2, #0
 80056ec:	2120      	movs	r1, #32
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f000 fb60 	bl	8005db4 <UART_WaitOnFlagUntilTimeout>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d005      	beq.n	8005706 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2220      	movs	r2, #32
 80056fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e033      	b.n	800576e <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10c      	bne.n	8005726 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005712:	b29a      	uxth	r2, r3
 8005714:	8a7b      	ldrh	r3, [r7, #18]
 8005716:	4013      	ands	r3, r2
 8005718:	b29a      	uxth	r2, r3
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	3302      	adds	r3, #2
 8005722:	61bb      	str	r3, [r7, #24]
 8005724:	e00d      	b.n	8005742 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800572c:	b29b      	uxth	r3, r3
 800572e:	b2da      	uxtb	r2, r3
 8005730:	8a7b      	ldrh	r3, [r7, #18]
 8005732:	b2db      	uxtb	r3, r3
 8005734:	4013      	ands	r3, r2
 8005736:	b2da      	uxtb	r2, r3
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	3301      	adds	r3, #1
 8005740:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005748:	b29b      	uxth	r3, r3
 800574a:	3b01      	subs	r3, #1
 800574c:	b29a      	uxth	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800575a:	b29b      	uxth	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1c1      	bne.n	80056e4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2220      	movs	r2, #32
 8005764:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005768:	2300      	movs	r3, #0
 800576a:	e000      	b.n	800576e <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800576c:	2302      	movs	r3, #2
  }
}
 800576e:	4618      	mov	r0, r3
 8005770:	3720      	adds	r7, #32
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
	...

08005778 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b088      	sub	sp, #32
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005780:	2300      	movs	r3, #0
 8005782:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	689a      	ldr	r2, [r3, #8]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	431a      	orrs	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	431a      	orrs	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	69db      	ldr	r3, [r3, #28]
 8005798:	4313      	orrs	r3, r2
 800579a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	4b92      	ldr	r3, [pc, #584]	; (80059ec <UART_SetConfig+0x274>)
 80057a4:	4013      	ands	r3, r2
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	6812      	ldr	r2, [r2, #0]
 80057aa:	6979      	ldr	r1, [r7, #20]
 80057ac:	430b      	orrs	r3, r1
 80057ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	68da      	ldr	r2, [r3, #12]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a1b      	ldr	r3, [r3, #32]
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	430a      	orrs	r2, r1
 80057e8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a80      	ldr	r2, [pc, #512]	; (80059f0 <UART_SetConfig+0x278>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d120      	bne.n	8005836 <UART_SetConfig+0xbe>
 80057f4:	4b7f      	ldr	r3, [pc, #508]	; (80059f4 <UART_SetConfig+0x27c>)
 80057f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f8:	f003 0303 	and.w	r3, r3, #3
 80057fc:	2b03      	cmp	r3, #3
 80057fe:	d817      	bhi.n	8005830 <UART_SetConfig+0xb8>
 8005800:	a201      	add	r2, pc, #4	; (adr r2, 8005808 <UART_SetConfig+0x90>)
 8005802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005806:	bf00      	nop
 8005808:	08005819 	.word	0x08005819
 800580c:	08005825 	.word	0x08005825
 8005810:	0800582b 	.word	0x0800582b
 8005814:	0800581f 	.word	0x0800581f
 8005818:	2301      	movs	r3, #1
 800581a:	77fb      	strb	r3, [r7, #31]
 800581c:	e0b5      	b.n	800598a <UART_SetConfig+0x212>
 800581e:	2302      	movs	r3, #2
 8005820:	77fb      	strb	r3, [r7, #31]
 8005822:	e0b2      	b.n	800598a <UART_SetConfig+0x212>
 8005824:	2304      	movs	r3, #4
 8005826:	77fb      	strb	r3, [r7, #31]
 8005828:	e0af      	b.n	800598a <UART_SetConfig+0x212>
 800582a:	2308      	movs	r3, #8
 800582c:	77fb      	strb	r3, [r7, #31]
 800582e:	e0ac      	b.n	800598a <UART_SetConfig+0x212>
 8005830:	2310      	movs	r3, #16
 8005832:	77fb      	strb	r3, [r7, #31]
 8005834:	e0a9      	b.n	800598a <UART_SetConfig+0x212>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a6f      	ldr	r2, [pc, #444]	; (80059f8 <UART_SetConfig+0x280>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d124      	bne.n	800588a <UART_SetConfig+0x112>
 8005840:	4b6c      	ldr	r3, [pc, #432]	; (80059f4 <UART_SetConfig+0x27c>)
 8005842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005844:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005848:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800584c:	d011      	beq.n	8005872 <UART_SetConfig+0xfa>
 800584e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005852:	d817      	bhi.n	8005884 <UART_SetConfig+0x10c>
 8005854:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005858:	d011      	beq.n	800587e <UART_SetConfig+0x106>
 800585a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800585e:	d811      	bhi.n	8005884 <UART_SetConfig+0x10c>
 8005860:	2b00      	cmp	r3, #0
 8005862:	d003      	beq.n	800586c <UART_SetConfig+0xf4>
 8005864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005868:	d006      	beq.n	8005878 <UART_SetConfig+0x100>
 800586a:	e00b      	b.n	8005884 <UART_SetConfig+0x10c>
 800586c:	2300      	movs	r3, #0
 800586e:	77fb      	strb	r3, [r7, #31]
 8005870:	e08b      	b.n	800598a <UART_SetConfig+0x212>
 8005872:	2302      	movs	r3, #2
 8005874:	77fb      	strb	r3, [r7, #31]
 8005876:	e088      	b.n	800598a <UART_SetConfig+0x212>
 8005878:	2304      	movs	r3, #4
 800587a:	77fb      	strb	r3, [r7, #31]
 800587c:	e085      	b.n	800598a <UART_SetConfig+0x212>
 800587e:	2308      	movs	r3, #8
 8005880:	77fb      	strb	r3, [r7, #31]
 8005882:	e082      	b.n	800598a <UART_SetConfig+0x212>
 8005884:	2310      	movs	r3, #16
 8005886:	77fb      	strb	r3, [r7, #31]
 8005888:	e07f      	b.n	800598a <UART_SetConfig+0x212>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a5b      	ldr	r2, [pc, #364]	; (80059fc <UART_SetConfig+0x284>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d124      	bne.n	80058de <UART_SetConfig+0x166>
 8005894:	4b57      	ldr	r3, [pc, #348]	; (80059f4 <UART_SetConfig+0x27c>)
 8005896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005898:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800589c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80058a0:	d011      	beq.n	80058c6 <UART_SetConfig+0x14e>
 80058a2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80058a6:	d817      	bhi.n	80058d8 <UART_SetConfig+0x160>
 80058a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80058ac:	d011      	beq.n	80058d2 <UART_SetConfig+0x15a>
 80058ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80058b2:	d811      	bhi.n	80058d8 <UART_SetConfig+0x160>
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d003      	beq.n	80058c0 <UART_SetConfig+0x148>
 80058b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80058bc:	d006      	beq.n	80058cc <UART_SetConfig+0x154>
 80058be:	e00b      	b.n	80058d8 <UART_SetConfig+0x160>
 80058c0:	2300      	movs	r3, #0
 80058c2:	77fb      	strb	r3, [r7, #31]
 80058c4:	e061      	b.n	800598a <UART_SetConfig+0x212>
 80058c6:	2302      	movs	r3, #2
 80058c8:	77fb      	strb	r3, [r7, #31]
 80058ca:	e05e      	b.n	800598a <UART_SetConfig+0x212>
 80058cc:	2304      	movs	r3, #4
 80058ce:	77fb      	strb	r3, [r7, #31]
 80058d0:	e05b      	b.n	800598a <UART_SetConfig+0x212>
 80058d2:	2308      	movs	r3, #8
 80058d4:	77fb      	strb	r3, [r7, #31]
 80058d6:	e058      	b.n	800598a <UART_SetConfig+0x212>
 80058d8:	2310      	movs	r3, #16
 80058da:	77fb      	strb	r3, [r7, #31]
 80058dc:	e055      	b.n	800598a <UART_SetConfig+0x212>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a47      	ldr	r2, [pc, #284]	; (8005a00 <UART_SetConfig+0x288>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d124      	bne.n	8005932 <UART_SetConfig+0x1ba>
 80058e8:	4b42      	ldr	r3, [pc, #264]	; (80059f4 <UART_SetConfig+0x27c>)
 80058ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ec:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80058f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058f4:	d011      	beq.n	800591a <UART_SetConfig+0x1a2>
 80058f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058fa:	d817      	bhi.n	800592c <UART_SetConfig+0x1b4>
 80058fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005900:	d011      	beq.n	8005926 <UART_SetConfig+0x1ae>
 8005902:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005906:	d811      	bhi.n	800592c <UART_SetConfig+0x1b4>
 8005908:	2b00      	cmp	r3, #0
 800590a:	d003      	beq.n	8005914 <UART_SetConfig+0x19c>
 800590c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005910:	d006      	beq.n	8005920 <UART_SetConfig+0x1a8>
 8005912:	e00b      	b.n	800592c <UART_SetConfig+0x1b4>
 8005914:	2300      	movs	r3, #0
 8005916:	77fb      	strb	r3, [r7, #31]
 8005918:	e037      	b.n	800598a <UART_SetConfig+0x212>
 800591a:	2302      	movs	r3, #2
 800591c:	77fb      	strb	r3, [r7, #31]
 800591e:	e034      	b.n	800598a <UART_SetConfig+0x212>
 8005920:	2304      	movs	r3, #4
 8005922:	77fb      	strb	r3, [r7, #31]
 8005924:	e031      	b.n	800598a <UART_SetConfig+0x212>
 8005926:	2308      	movs	r3, #8
 8005928:	77fb      	strb	r3, [r7, #31]
 800592a:	e02e      	b.n	800598a <UART_SetConfig+0x212>
 800592c:	2310      	movs	r3, #16
 800592e:	77fb      	strb	r3, [r7, #31]
 8005930:	e02b      	b.n	800598a <UART_SetConfig+0x212>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a33      	ldr	r2, [pc, #204]	; (8005a04 <UART_SetConfig+0x28c>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d124      	bne.n	8005986 <UART_SetConfig+0x20e>
 800593c:	4b2d      	ldr	r3, [pc, #180]	; (80059f4 <UART_SetConfig+0x27c>)
 800593e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005940:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005944:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005948:	d011      	beq.n	800596e <UART_SetConfig+0x1f6>
 800594a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800594e:	d817      	bhi.n	8005980 <UART_SetConfig+0x208>
 8005950:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005954:	d011      	beq.n	800597a <UART_SetConfig+0x202>
 8005956:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800595a:	d811      	bhi.n	8005980 <UART_SetConfig+0x208>
 800595c:	2b00      	cmp	r3, #0
 800595e:	d003      	beq.n	8005968 <UART_SetConfig+0x1f0>
 8005960:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005964:	d006      	beq.n	8005974 <UART_SetConfig+0x1fc>
 8005966:	e00b      	b.n	8005980 <UART_SetConfig+0x208>
 8005968:	2300      	movs	r3, #0
 800596a:	77fb      	strb	r3, [r7, #31]
 800596c:	e00d      	b.n	800598a <UART_SetConfig+0x212>
 800596e:	2302      	movs	r3, #2
 8005970:	77fb      	strb	r3, [r7, #31]
 8005972:	e00a      	b.n	800598a <UART_SetConfig+0x212>
 8005974:	2304      	movs	r3, #4
 8005976:	77fb      	strb	r3, [r7, #31]
 8005978:	e007      	b.n	800598a <UART_SetConfig+0x212>
 800597a:	2308      	movs	r3, #8
 800597c:	77fb      	strb	r3, [r7, #31]
 800597e:	e004      	b.n	800598a <UART_SetConfig+0x212>
 8005980:	2310      	movs	r3, #16
 8005982:	77fb      	strb	r3, [r7, #31]
 8005984:	e001      	b.n	800598a <UART_SetConfig+0x212>
 8005986:	2310      	movs	r3, #16
 8005988:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	69db      	ldr	r3, [r3, #28]
 800598e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005992:	d16b      	bne.n	8005a6c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8005994:	7ffb      	ldrb	r3, [r7, #31]
 8005996:	2b08      	cmp	r3, #8
 8005998:	d838      	bhi.n	8005a0c <UART_SetConfig+0x294>
 800599a:	a201      	add	r2, pc, #4	; (adr r2, 80059a0 <UART_SetConfig+0x228>)
 800599c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a0:	080059c5 	.word	0x080059c5
 80059a4:	080059cd 	.word	0x080059cd
 80059a8:	080059d5 	.word	0x080059d5
 80059ac:	08005a0d 	.word	0x08005a0d
 80059b0:	080059db 	.word	0x080059db
 80059b4:	08005a0d 	.word	0x08005a0d
 80059b8:	08005a0d 	.word	0x08005a0d
 80059bc:	08005a0d 	.word	0x08005a0d
 80059c0:	080059e3 	.word	0x080059e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059c4:	f7fe fde8 	bl	8004598 <HAL_RCC_GetPCLK1Freq>
 80059c8:	61b8      	str	r0, [r7, #24]
        break;
 80059ca:	e024      	b.n	8005a16 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059cc:	f7fe fe06 	bl	80045dc <HAL_RCC_GetPCLK2Freq>
 80059d0:	61b8      	str	r0, [r7, #24]
        break;
 80059d2:	e020      	b.n	8005a16 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059d4:	4b0c      	ldr	r3, [pc, #48]	; (8005a08 <UART_SetConfig+0x290>)
 80059d6:	61bb      	str	r3, [r7, #24]
        break;
 80059d8:	e01d      	b.n	8005a16 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059da:	f7fe fd67 	bl	80044ac <HAL_RCC_GetSysClockFreq>
 80059de:	61b8      	str	r0, [r7, #24]
        break;
 80059e0:	e019      	b.n	8005a16 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059e6:	61bb      	str	r3, [r7, #24]
        break;
 80059e8:	e015      	b.n	8005a16 <UART_SetConfig+0x29e>
 80059ea:	bf00      	nop
 80059ec:	efff69f3 	.word	0xefff69f3
 80059f0:	40013800 	.word	0x40013800
 80059f4:	40021000 	.word	0x40021000
 80059f8:	40004400 	.word	0x40004400
 80059fc:	40004800 	.word	0x40004800
 8005a00:	40004c00 	.word	0x40004c00
 8005a04:	40005000 	.word	0x40005000
 8005a08:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	77bb      	strb	r3, [r7, #30]
        break;
 8005a14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d073      	beq.n	8005b04 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	005a      	lsls	r2, r3, #1
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	085b      	lsrs	r3, r3, #1
 8005a26:	441a      	add	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	2b0f      	cmp	r3, #15
 8005a36:	d916      	bls.n	8005a66 <UART_SetConfig+0x2ee>
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a3e:	d212      	bcs.n	8005a66 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	f023 030f 	bic.w	r3, r3, #15
 8005a48:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	085b      	lsrs	r3, r3, #1
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	f003 0307 	and.w	r3, r3, #7
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	89fb      	ldrh	r3, [r7, #14]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	89fa      	ldrh	r2, [r7, #14]
 8005a62:	60da      	str	r2, [r3, #12]
 8005a64:	e04e      	b.n	8005b04 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	77bb      	strb	r3, [r7, #30]
 8005a6a:	e04b      	b.n	8005b04 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a6c:	7ffb      	ldrb	r3, [r7, #31]
 8005a6e:	2b08      	cmp	r3, #8
 8005a70:	d827      	bhi.n	8005ac2 <UART_SetConfig+0x34a>
 8005a72:	a201      	add	r2, pc, #4	; (adr r2, 8005a78 <UART_SetConfig+0x300>)
 8005a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a78:	08005a9d 	.word	0x08005a9d
 8005a7c:	08005aa5 	.word	0x08005aa5
 8005a80:	08005aad 	.word	0x08005aad
 8005a84:	08005ac3 	.word	0x08005ac3
 8005a88:	08005ab3 	.word	0x08005ab3
 8005a8c:	08005ac3 	.word	0x08005ac3
 8005a90:	08005ac3 	.word	0x08005ac3
 8005a94:	08005ac3 	.word	0x08005ac3
 8005a98:	08005abb 	.word	0x08005abb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a9c:	f7fe fd7c 	bl	8004598 <HAL_RCC_GetPCLK1Freq>
 8005aa0:	61b8      	str	r0, [r7, #24]
        break;
 8005aa2:	e013      	b.n	8005acc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005aa4:	f7fe fd9a 	bl	80045dc <HAL_RCC_GetPCLK2Freq>
 8005aa8:	61b8      	str	r0, [r7, #24]
        break;
 8005aaa:	e00f      	b.n	8005acc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005aac:	4b1b      	ldr	r3, [pc, #108]	; (8005b1c <UART_SetConfig+0x3a4>)
 8005aae:	61bb      	str	r3, [r7, #24]
        break;
 8005ab0:	e00c      	b.n	8005acc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ab2:	f7fe fcfb 	bl	80044ac <HAL_RCC_GetSysClockFreq>
 8005ab6:	61b8      	str	r0, [r7, #24]
        break;
 8005ab8:	e008      	b.n	8005acc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005abe:	61bb      	str	r3, [r7, #24]
        break;
 8005ac0:	e004      	b.n	8005acc <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	77bb      	strb	r3, [r7, #30]
        break;
 8005aca:	bf00      	nop
    }

    if (pclk != 0U)
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d018      	beq.n	8005b04 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	085a      	lsrs	r2, r3, #1
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	441a      	add	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	2b0f      	cmp	r3, #15
 8005aea:	d909      	bls.n	8005b00 <UART_SetConfig+0x388>
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005af2:	d205      	bcs.n	8005b00 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	60da      	str	r2, [r3, #12]
 8005afe:	e001      	b.n	8005b04 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005b10:	7fbb      	ldrb	r3, [r7, #30]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3720      	adds	r7, #32
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	007a1200 	.word	0x007a1200

08005b20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00a      	beq.n	8005b4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00a      	beq.n	8005b6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b70:	f003 0304 	and.w	r3, r3, #4
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00a      	beq.n	8005b8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b92:	f003 0308 	and.w	r3, r3, #8
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00a      	beq.n	8005bb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	430a      	orrs	r2, r1
 8005bae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb4:	f003 0310 	and.w	r3, r3, #16
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00a      	beq.n	8005bd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd6:	f003 0320 	and.w	r3, r3, #32
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00a      	beq.n	8005bf4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d01a      	beq.n	8005c36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	430a      	orrs	r2, r1
 8005c14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c1e:	d10a      	bne.n	8005c36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	430a      	orrs	r2, r1
 8005c34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00a      	beq.n	8005c58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	430a      	orrs	r2, r1
 8005c56:	605a      	str	r2, [r3, #4]
  }
}
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b098      	sub	sp, #96	; 0x60
 8005c68:	af02      	add	r7, sp, #8
 8005c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c74:	f7fb fb96 	bl	80013a4 <HAL_GetTick>
 8005c78:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0308 	and.w	r3, r3, #8
 8005c84:	2b08      	cmp	r3, #8
 8005c86:	d12e      	bne.n	8005ce6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c8c:	9300      	str	r3, [sp, #0]
 8005c8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c90:	2200      	movs	r2, #0
 8005c92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 f88c 	bl	8005db4 <UART_WaitOnFlagUntilTimeout>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d021      	beq.n	8005ce6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005caa:	e853 3f00 	ldrex	r3, [r3]
 8005cae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cb6:	653b      	str	r3, [r7, #80]	; 0x50
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cc0:	647b      	str	r3, [r7, #68]	; 0x44
 8005cc2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005cc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cc8:	e841 2300 	strex	r3, r2, [r1]
 8005ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1e6      	bne.n	8005ca2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e062      	b.n	8005dac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0304 	and.w	r3, r3, #4
 8005cf0:	2b04      	cmp	r3, #4
 8005cf2:	d149      	bne.n	8005d88 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cf8:	9300      	str	r3, [sp, #0]
 8005cfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f856 	bl	8005db4 <UART_WaitOnFlagUntilTimeout>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d03c      	beq.n	8005d88 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d16:	e853 3f00 	ldrex	r3, [r3]
 8005d1a:	623b      	str	r3, [r7, #32]
   return(result);
 8005d1c:	6a3b      	ldr	r3, [r7, #32]
 8005d1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	461a      	mov	r2, r3
 8005d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d2c:	633b      	str	r3, [r7, #48]	; 0x30
 8005d2e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d34:	e841 2300 	strex	r3, r2, [r1]
 8005d38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d1e6      	bne.n	8005d0e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	3308      	adds	r3, #8
 8005d46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	e853 3f00 	ldrex	r3, [r3]
 8005d4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f023 0301 	bic.w	r3, r3, #1
 8005d56:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	3308      	adds	r3, #8
 8005d5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d60:	61fa      	str	r2, [r7, #28]
 8005d62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d64:	69b9      	ldr	r1, [r7, #24]
 8005d66:	69fa      	ldr	r2, [r7, #28]
 8005d68:	e841 2300 	strex	r3, r2, [r1]
 8005d6c:	617b      	str	r3, [r7, #20]
   return(result);
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1e5      	bne.n	8005d40 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2220      	movs	r2, #32
 8005d78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e011      	b.n	8005dac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2220      	movs	r2, #32
 8005d92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3758      	adds	r7, #88	; 0x58
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	603b      	str	r3, [r7, #0]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dc4:	e049      	b.n	8005e5a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dcc:	d045      	beq.n	8005e5a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dce:	f7fb fae9 	bl	80013a4 <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	69ba      	ldr	r2, [r7, #24]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d302      	bcc.n	8005de4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d101      	bne.n	8005de8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e048      	b.n	8005e7a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0304 	and.w	r3, r3, #4
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d031      	beq.n	8005e5a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	69db      	ldr	r3, [r3, #28]
 8005dfc:	f003 0308 	and.w	r3, r3, #8
 8005e00:	2b08      	cmp	r3, #8
 8005e02:	d110      	bne.n	8005e26 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2208      	movs	r2, #8
 8005e0a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f000 f838 	bl	8005e82 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2208      	movs	r2, #8
 8005e16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e029      	b.n	8005e7a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	69db      	ldr	r3, [r3, #28]
 8005e2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e34:	d111      	bne.n	8005e5a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f000 f81e 	bl	8005e82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2220      	movs	r2, #32
 8005e4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e00f      	b.n	8005e7a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	69da      	ldr	r2, [r3, #28]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	4013      	ands	r3, r2
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	bf0c      	ite	eq
 8005e6a:	2301      	moveq	r3, #1
 8005e6c:	2300      	movne	r3, #0
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	461a      	mov	r2, r3
 8005e72:	79fb      	ldrb	r3, [r7, #7]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d0a6      	beq.n	8005dc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b095      	sub	sp, #84	; 0x54
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e92:	e853 3f00 	ldrex	r3, [r3]
 8005e96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ea8:	643b      	str	r3, [r7, #64]	; 0x40
 8005eaa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005eae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005eb0:	e841 2300 	strex	r3, r2, [r1]
 8005eb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1e6      	bne.n	8005e8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	3308      	adds	r3, #8
 8005ec2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec4:	6a3b      	ldr	r3, [r7, #32]
 8005ec6:	e853 3f00 	ldrex	r3, [r3]
 8005eca:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	f023 0301 	bic.w	r3, r3, #1
 8005ed2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	3308      	adds	r3, #8
 8005eda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005edc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ede:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ee2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ee4:	e841 2300 	strex	r3, r2, [r1]
 8005ee8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d1e5      	bne.n	8005ebc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d118      	bne.n	8005f2a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	e853 3f00 	ldrex	r3, [r3]
 8005f04:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	f023 0310 	bic.w	r3, r3, #16
 8005f0c:	647b      	str	r3, [r7, #68]	; 0x44
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	461a      	mov	r2, r3
 8005f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f16:	61bb      	str	r3, [r7, #24]
 8005f18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1a:	6979      	ldr	r1, [r7, #20]
 8005f1c:	69ba      	ldr	r2, [r7, #24]
 8005f1e:	e841 2300 	strex	r3, r2, [r1]
 8005f22:	613b      	str	r3, [r7, #16]
   return(result);
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1e6      	bne.n	8005ef8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2220      	movs	r2, #32
 8005f2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005f3e:	bf00      	nop
 8005f40:	3754      	adds	r7, #84	; 0x54
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b085      	sub	sp, #20
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	4603      	mov	r3, r0
 8005f52:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005f54:	2300      	movs	r3, #0
 8005f56:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005f58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f5c:	2b84      	cmp	r3, #132	; 0x84
 8005f5e:	d005      	beq.n	8005f6c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005f60:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	4413      	add	r3, r2
 8005f68:	3303      	adds	r3, #3
 8005f6a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b083      	sub	sp, #12
 8005f7e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f80:	f3ef 8305 	mrs	r3, IPSR
 8005f84:	607b      	str	r3, [r7, #4]
  return(result);
 8005f86:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	bf14      	ite	ne
 8005f8c:	2301      	movne	r3, #1
 8005f8e:	2300      	moveq	r3, #0
 8005f90:	b2db      	uxtb	r3, r3
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005fa2:	f001 fb1d 	bl	80075e0 <vTaskStartScheduler>
  
  return osOK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	bd80      	pop	{r7, pc}

08005fac <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fae:	b089      	sub	sp, #36	; 0x24
 8005fb0:	af04      	add	r7, sp, #16
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d020      	beq.n	8006000 <osThreadCreate+0x54>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d01c      	beq.n	8006000 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685c      	ldr	r4, [r3, #4]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	691e      	ldr	r6, [r3, #16]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f7ff ffb6 	bl	8005f4a <makeFreeRtosPriority>
 8005fde:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	695b      	ldr	r3, [r3, #20]
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005fe8:	9202      	str	r2, [sp, #8]
 8005fea:	9301      	str	r3, [sp, #4]
 8005fec:	9100      	str	r1, [sp, #0]
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	4632      	mov	r2, r6
 8005ff2:	4629      	mov	r1, r5
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	f001 f91d 	bl	8007234 <xTaskCreateStatic>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	60fb      	str	r3, [r7, #12]
 8005ffe:	e01c      	b.n	800603a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685c      	ldr	r4, [r3, #4]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800600c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006014:	4618      	mov	r0, r3
 8006016:	f7ff ff98 	bl	8005f4a <makeFreeRtosPriority>
 800601a:	4602      	mov	r2, r0
 800601c:	f107 030c 	add.w	r3, r7, #12
 8006020:	9301      	str	r3, [sp, #4]
 8006022:	9200      	str	r2, [sp, #0]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	4632      	mov	r2, r6
 8006028:	4629      	mov	r1, r5
 800602a:	4620      	mov	r0, r4
 800602c:	f001 f95e 	bl	80072ec <xTaskCreate>
 8006030:	4603      	mov	r3, r0
 8006032:	2b01      	cmp	r3, #1
 8006034:	d001      	beq.n	800603a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006036:	2300      	movs	r3, #0
 8006038:	e000      	b.n	800603c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800603a:	68fb      	ldr	r3, [r7, #12]
}
 800603c:	4618      	mov	r0, r3
 800603e:	3714      	adds	r7, #20
 8006040:	46bd      	mov	sp, r7
 8006042:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006044 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d001      	beq.n	800605a <osDelay+0x16>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	e000      	b.n	800605c <osDelay+0x18>
 800605a:	2301      	movs	r3, #1
 800605c:	4618      	mov	r0, r3
 800605e:	f001 fa8b 	bl	8007578 <vTaskDelay>
  
  return osOK;
 8006062:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006064:	4618      	mov	r0, r3
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af02      	add	r7, sp, #8
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00f      	beq.n	800609e <osSemaphoreCreate+0x32>
    if (count == 1) {
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d10a      	bne.n	800609a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	2203      	movs	r2, #3
 800608a:	9200      	str	r2, [sp, #0]
 800608c:	2200      	movs	r2, #0
 800608e:	2100      	movs	r1, #0
 8006090:	2001      	movs	r0, #1
 8006092:	f000 f9e5 	bl	8006460 <xQueueGenericCreateStatic>
 8006096:	4603      	mov	r3, r0
 8006098:	e016      	b.n	80060c8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800609a:	2300      	movs	r3, #0
 800609c:	e014      	b.n	80060c8 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d110      	bne.n	80060c6 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80060a4:	2203      	movs	r2, #3
 80060a6:	2100      	movs	r1, #0
 80060a8:	2001      	movs	r0, #1
 80060aa:	f000 fa50 	bl	800654e <xQueueGenericCreate>
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d005      	beq.n	80060c2 <osSemaphoreCreate+0x56>
 80060b6:	2300      	movs	r3, #0
 80060b8:	2200      	movs	r2, #0
 80060ba:	2100      	movs	r1, #0
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f000 faa3 	bl	8006608 <xQueueGenericSend>
      return sema;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	e000      	b.n	80060c8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80060c6:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80060da:	2300      	movs	r3, #0
 80060dc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d101      	bne.n	80060e8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80060e4:	2380      	movs	r3, #128	; 0x80
 80060e6:	e03a      	b.n	800615e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80060e8:	2300      	movs	r3, #0
 80060ea:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f2:	d103      	bne.n	80060fc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80060f4:	f04f 33ff 	mov.w	r3, #4294967295
 80060f8:	60fb      	str	r3, [r7, #12]
 80060fa:	e009      	b.n	8006110 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d006      	beq.n	8006110 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d101      	bne.n	8006110 <osSemaphoreWait+0x40>
      ticks = 1;
 800610c:	2301      	movs	r3, #1
 800610e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006110:	f7ff ff33 	bl	8005f7a <inHandlerMode>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d017      	beq.n	800614a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800611a:	f107 0308 	add.w	r3, r7, #8
 800611e:	461a      	mov	r2, r3
 8006120:	2100      	movs	r1, #0
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 fe80 	bl	8006e28 <xQueueReceiveFromISR>
 8006128:	4603      	mov	r3, r0
 800612a:	2b01      	cmp	r3, #1
 800612c:	d001      	beq.n	8006132 <osSemaphoreWait+0x62>
      return osErrorOS;
 800612e:	23ff      	movs	r3, #255	; 0xff
 8006130:	e015      	b.n	800615e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d011      	beq.n	800615c <osSemaphoreWait+0x8c>
 8006138:	4b0b      	ldr	r3, [pc, #44]	; (8006168 <osSemaphoreWait+0x98>)
 800613a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800613e:	601a      	str	r2, [r3, #0]
 8006140:	f3bf 8f4f 	dsb	sy
 8006144:	f3bf 8f6f 	isb	sy
 8006148:	e008      	b.n	800615c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800614a:	68f9      	ldr	r1, [r7, #12]
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 fd5f 	bl	8006c10 <xQueueSemaphoreTake>
 8006152:	4603      	mov	r3, r0
 8006154:	2b01      	cmp	r3, #1
 8006156:	d001      	beq.n	800615c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006158:	23ff      	movs	r3, #255	; 0xff
 800615a:	e000      	b.n	800615e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	e000ed04 	.word	0xe000ed04

0800616c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006174:	2300      	movs	r3, #0
 8006176:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006178:	2300      	movs	r3, #0
 800617a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800617c:	f7ff fefd 	bl	8005f7a <inHandlerMode>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d016      	beq.n	80061b4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006186:	f107 0308 	add.w	r3, r7, #8
 800618a:	4619      	mov	r1, r3
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 fbd1 	bl	8006934 <xQueueGiveFromISR>
 8006192:	4603      	mov	r3, r0
 8006194:	2b01      	cmp	r3, #1
 8006196:	d001      	beq.n	800619c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006198:	23ff      	movs	r3, #255	; 0xff
 800619a:	e017      	b.n	80061cc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d013      	beq.n	80061ca <osSemaphoreRelease+0x5e>
 80061a2:	4b0c      	ldr	r3, [pc, #48]	; (80061d4 <osSemaphoreRelease+0x68>)
 80061a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061a8:	601a      	str	r2, [r3, #0]
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	f3bf 8f6f 	isb	sy
 80061b2:	e00a      	b.n	80061ca <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80061b4:	2300      	movs	r3, #0
 80061b6:	2200      	movs	r2, #0
 80061b8:	2100      	movs	r1, #0
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 fa24 	bl	8006608 <xQueueGenericSend>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d001      	beq.n	80061ca <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80061c6:	23ff      	movs	r3, #255	; 0xff
 80061c8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80061ca:	68fb      	ldr	r3, [r7, #12]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	e000ed04 	.word	0xe000ed04

080061d8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80061d8:	b590      	push	{r4, r7, lr}
 80061da:	b085      	sub	sp, #20
 80061dc:	af02      	add	r7, sp, #8
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d011      	beq.n	800620e <osMessageCreate+0x36>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00d      	beq.n	800620e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6818      	ldr	r0, [r3, #0]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6859      	ldr	r1, [r3, #4]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	689a      	ldr	r2, [r3, #8]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	2400      	movs	r4, #0
 8006204:	9400      	str	r4, [sp, #0]
 8006206:	f000 f92b 	bl	8006460 <xQueueGenericCreateStatic>
 800620a:	4603      	mov	r3, r0
 800620c:	e008      	b.n	8006220 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6818      	ldr	r0, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	4619      	mov	r1, r3
 800621a:	f000 f998 	bl	800654e <xQueueGenericCreate>
 800621e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006220:	4618      	mov	r0, r3
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	bd90      	pop	{r4, r7, pc}

08006228 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f103 0208 	add.w	r2, r3, #8
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f04f 32ff 	mov.w	r2, #4294967295
 8006240:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f103 0208 	add.w	r2, r3, #8
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f103 0208 	add.w	r2, r3, #8
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006276:	bf00      	nop
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006282:	b480      	push	{r7}
 8006284:	b085      	sub	sp, #20
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
 800628a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	689a      	ldr	r2, [r3, #8]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	683a      	ldr	r2, [r7, #0]
 80062a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	683a      	ldr	r2, [r7, #0]
 80062ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	1c5a      	adds	r2, r3, #1
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	601a      	str	r2, [r3, #0]
}
 80062be:	bf00      	nop
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062ca:	b480      	push	{r7}
 80062cc:	b085      	sub	sp, #20
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
 80062d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e0:	d103      	bne.n	80062ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	60fb      	str	r3, [r7, #12]
 80062e8:	e00c      	b.n	8006304 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	3308      	adds	r3, #8
 80062ee:	60fb      	str	r3, [r7, #12]
 80062f0:	e002      	b.n	80062f8 <vListInsert+0x2e>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	60fb      	str	r3, [r7, #12]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	429a      	cmp	r2, r3
 8006302:	d2f6      	bcs.n	80062f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	683a      	ldr	r2, [r7, #0]
 8006312:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	683a      	ldr	r2, [r7, #0]
 800631e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	1c5a      	adds	r2, r3, #1
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	601a      	str	r2, [r3, #0]
}
 8006330:	bf00      	nop
 8006332:	3714      	adds	r7, #20
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	6892      	ldr	r2, [r2, #8]
 8006352:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	6852      	ldr	r2, [r2, #4]
 800635c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	429a      	cmp	r2, r3
 8006366:	d103      	bne.n	8006370 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689a      	ldr	r2, [r3, #8]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	1e5a      	subs	r2, r3, #1
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
}
 8006384:	4618      	mov	r0, r3
 8006386:	3714      	adds	r7, #20
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10a      	bne.n	80063ba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80063a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a8:	f383 8811 	msr	BASEPRI, r3
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80063b6:	bf00      	nop
 80063b8:	e7fe      	b.n	80063b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80063ba:	f002 fbdb 	bl	8008b74 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c6:	68f9      	ldr	r1, [r7, #12]
 80063c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80063ca:	fb01 f303 	mul.w	r3, r1, r3
 80063ce:	441a      	add	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ea:	3b01      	subs	r3, #1
 80063ec:	68f9      	ldr	r1, [r7, #12]
 80063ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80063f0:	fb01 f303 	mul.w	r3, r1, r3
 80063f4:	441a      	add	r2, r3
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	22ff      	movs	r2, #255	; 0xff
 80063fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	22ff      	movs	r2, #255	; 0xff
 8006406:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d114      	bne.n	800643a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d01a      	beq.n	800644e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	3310      	adds	r3, #16
 800641c:	4618      	mov	r0, r3
 800641e:	f001 fb79 	bl	8007b14 <xTaskRemoveFromEventList>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d012      	beq.n	800644e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006428:	4b0c      	ldr	r3, [pc, #48]	; (800645c <xQueueGenericReset+0xcc>)
 800642a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	e009      	b.n	800644e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	3310      	adds	r3, #16
 800643e:	4618      	mov	r0, r3
 8006440:	f7ff fef2 	bl	8006228 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	3324      	adds	r3, #36	; 0x24
 8006448:	4618      	mov	r0, r3
 800644a:	f7ff feed 	bl	8006228 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800644e:	f002 fbc1 	bl	8008bd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006452:	2301      	movs	r3, #1
}
 8006454:	4618      	mov	r0, r3
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	e000ed04 	.word	0xe000ed04

08006460 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006460:	b580      	push	{r7, lr}
 8006462:	b08e      	sub	sp, #56	; 0x38
 8006464:	af02      	add	r7, sp, #8
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
 800646c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d10a      	bne.n	800648a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006478:	f383 8811 	msr	BASEPRI, r3
 800647c:	f3bf 8f6f 	isb	sy
 8006480:	f3bf 8f4f 	dsb	sy
 8006484:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006486:	bf00      	nop
 8006488:	e7fe      	b.n	8006488 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10a      	bne.n	80064a6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006494:	f383 8811 	msr	BASEPRI, r3
 8006498:	f3bf 8f6f 	isb	sy
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80064a2:	bf00      	nop
 80064a4:	e7fe      	b.n	80064a4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d002      	beq.n	80064b2 <xQueueGenericCreateStatic+0x52>
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d001      	beq.n	80064b6 <xQueueGenericCreateStatic+0x56>
 80064b2:	2301      	movs	r3, #1
 80064b4:	e000      	b.n	80064b8 <xQueueGenericCreateStatic+0x58>
 80064b6:	2300      	movs	r3, #0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10a      	bne.n	80064d2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80064bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c0:	f383 8811 	msr	BASEPRI, r3
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	623b      	str	r3, [r7, #32]
}
 80064ce:	bf00      	nop
 80064d0:	e7fe      	b.n	80064d0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d102      	bne.n	80064de <xQueueGenericCreateStatic+0x7e>
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <xQueueGenericCreateStatic+0x82>
 80064de:	2301      	movs	r3, #1
 80064e0:	e000      	b.n	80064e4 <xQueueGenericCreateStatic+0x84>
 80064e2:	2300      	movs	r3, #0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d10a      	bne.n	80064fe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80064e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ec:	f383 8811 	msr	BASEPRI, r3
 80064f0:	f3bf 8f6f 	isb	sy
 80064f4:	f3bf 8f4f 	dsb	sy
 80064f8:	61fb      	str	r3, [r7, #28]
}
 80064fa:	bf00      	nop
 80064fc:	e7fe      	b.n	80064fc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80064fe:	2348      	movs	r3, #72	; 0x48
 8006500:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	2b48      	cmp	r3, #72	; 0x48
 8006506:	d00a      	beq.n	800651e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650c:	f383 8811 	msr	BASEPRI, r3
 8006510:	f3bf 8f6f 	isb	sy
 8006514:	f3bf 8f4f 	dsb	sy
 8006518:	61bb      	str	r3, [r7, #24]
}
 800651a:	bf00      	nop
 800651c:	e7fe      	b.n	800651c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00d      	beq.n	8006544 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006530:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	4613      	mov	r3, r2
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	68b9      	ldr	r1, [r7, #8]
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f000 f843 	bl	80065ca <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006546:	4618      	mov	r0, r3
 8006548:	3730      	adds	r7, #48	; 0x30
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800654e:	b580      	push	{r7, lr}
 8006550:	b08a      	sub	sp, #40	; 0x28
 8006552:	af02      	add	r7, sp, #8
 8006554:	60f8      	str	r0, [r7, #12]
 8006556:	60b9      	str	r1, [r7, #8]
 8006558:	4613      	mov	r3, r2
 800655a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10a      	bne.n	8006578 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006566:	f383 8811 	msr	BASEPRI, r3
 800656a:	f3bf 8f6f 	isb	sy
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	613b      	str	r3, [r7, #16]
}
 8006574:	bf00      	nop
 8006576:	e7fe      	b.n	8006576 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d102      	bne.n	8006584 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800657e:	2300      	movs	r3, #0
 8006580:	61fb      	str	r3, [r7, #28]
 8006582:	e004      	b.n	800658e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	fb02 f303 	mul.w	r3, r2, r3
 800658c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	3348      	adds	r3, #72	; 0x48
 8006592:	4618      	mov	r0, r3
 8006594:	f002 fc10 	bl	8008db8 <pvPortMalloc>
 8006598:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00f      	beq.n	80065c0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	3348      	adds	r3, #72	; 0x48
 80065a4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80065ae:	79fa      	ldrb	r2, [r7, #7]
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	9300      	str	r3, [sp, #0]
 80065b4:	4613      	mov	r3, r2
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	68b9      	ldr	r1, [r7, #8]
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f000 f805 	bl	80065ca <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80065c0:	69bb      	ldr	r3, [r7, #24]
	}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3720      	adds	r7, #32
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b084      	sub	sp, #16
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	60f8      	str	r0, [r7, #12]
 80065d2:	60b9      	str	r1, [r7, #8]
 80065d4:	607a      	str	r2, [r7, #4]
 80065d6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d103      	bne.n	80065e6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	69ba      	ldr	r2, [r7, #24]
 80065e2:	601a      	str	r2, [r3, #0]
 80065e4:	e002      	b.n	80065ec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80065f8:	2101      	movs	r1, #1
 80065fa:	69b8      	ldr	r0, [r7, #24]
 80065fc:	f7ff fec8 	bl	8006390 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006600:	bf00      	nop
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b08e      	sub	sp, #56	; 0x38
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	607a      	str	r2, [r7, #4]
 8006614:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006616:	2300      	movs	r3, #0
 8006618:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800661e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10a      	bne.n	800663a <xQueueGenericSend+0x32>
	__asm volatile
 8006624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006628:	f383 8811 	msr	BASEPRI, r3
 800662c:	f3bf 8f6f 	isb	sy
 8006630:	f3bf 8f4f 	dsb	sy
 8006634:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006636:	bf00      	nop
 8006638:	e7fe      	b.n	8006638 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d103      	bne.n	8006648 <xQueueGenericSend+0x40>
 8006640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006644:	2b00      	cmp	r3, #0
 8006646:	d101      	bne.n	800664c <xQueueGenericSend+0x44>
 8006648:	2301      	movs	r3, #1
 800664a:	e000      	b.n	800664e <xQueueGenericSend+0x46>
 800664c:	2300      	movs	r3, #0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10a      	bne.n	8006668 <xQueueGenericSend+0x60>
	__asm volatile
 8006652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006656:	f383 8811 	msr	BASEPRI, r3
 800665a:	f3bf 8f6f 	isb	sy
 800665e:	f3bf 8f4f 	dsb	sy
 8006662:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006664:	bf00      	nop
 8006666:	e7fe      	b.n	8006666 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	2b02      	cmp	r3, #2
 800666c:	d103      	bne.n	8006676 <xQueueGenericSend+0x6e>
 800666e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006672:	2b01      	cmp	r3, #1
 8006674:	d101      	bne.n	800667a <xQueueGenericSend+0x72>
 8006676:	2301      	movs	r3, #1
 8006678:	e000      	b.n	800667c <xQueueGenericSend+0x74>
 800667a:	2300      	movs	r3, #0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10a      	bne.n	8006696 <xQueueGenericSend+0x8e>
	__asm volatile
 8006680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006684:	f383 8811 	msr	BASEPRI, r3
 8006688:	f3bf 8f6f 	isb	sy
 800668c:	f3bf 8f4f 	dsb	sy
 8006690:	623b      	str	r3, [r7, #32]
}
 8006692:	bf00      	nop
 8006694:	e7fe      	b.n	8006694 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006696:	f001 fc03 	bl	8007ea0 <xTaskGetSchedulerState>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d102      	bne.n	80066a6 <xQueueGenericSend+0x9e>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d101      	bne.n	80066aa <xQueueGenericSend+0xa2>
 80066a6:	2301      	movs	r3, #1
 80066a8:	e000      	b.n	80066ac <xQueueGenericSend+0xa4>
 80066aa:	2300      	movs	r3, #0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10a      	bne.n	80066c6 <xQueueGenericSend+0xbe>
	__asm volatile
 80066b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b4:	f383 8811 	msr	BASEPRI, r3
 80066b8:	f3bf 8f6f 	isb	sy
 80066bc:	f3bf 8f4f 	dsb	sy
 80066c0:	61fb      	str	r3, [r7, #28]
}
 80066c2:	bf00      	nop
 80066c4:	e7fe      	b.n	80066c4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066c6:	f002 fa55 	bl	8008b74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80066ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d302      	bcc.n	80066dc <xQueueGenericSend+0xd4>
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d129      	bne.n	8006730 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80066dc:	683a      	ldr	r2, [r7, #0]
 80066de:	68b9      	ldr	r1, [r7, #8]
 80066e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066e2:	f000 fc39 	bl	8006f58 <prvCopyDataToQueue>
 80066e6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d010      	beq.n	8006712 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f2:	3324      	adds	r3, #36	; 0x24
 80066f4:	4618      	mov	r0, r3
 80066f6:	f001 fa0d 	bl	8007b14 <xTaskRemoveFromEventList>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d013      	beq.n	8006728 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006700:	4b3f      	ldr	r3, [pc, #252]	; (8006800 <xQueueGenericSend+0x1f8>)
 8006702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006706:	601a      	str	r2, [r3, #0]
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	f3bf 8f6f 	isb	sy
 8006710:	e00a      	b.n	8006728 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006714:	2b00      	cmp	r3, #0
 8006716:	d007      	beq.n	8006728 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006718:	4b39      	ldr	r3, [pc, #228]	; (8006800 <xQueueGenericSend+0x1f8>)
 800671a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800671e:	601a      	str	r2, [r3, #0]
 8006720:	f3bf 8f4f 	dsb	sy
 8006724:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006728:	f002 fa54 	bl	8008bd4 <vPortExitCritical>
				return pdPASS;
 800672c:	2301      	movs	r3, #1
 800672e:	e063      	b.n	80067f8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d103      	bne.n	800673e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006736:	f002 fa4d 	bl	8008bd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800673a:	2300      	movs	r3, #0
 800673c:	e05c      	b.n	80067f8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800673e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006740:	2b00      	cmp	r3, #0
 8006742:	d106      	bne.n	8006752 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006744:	f107 0314 	add.w	r3, r7, #20
 8006748:	4618      	mov	r0, r3
 800674a:	f001 fa45 	bl	8007bd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800674e:	2301      	movs	r3, #1
 8006750:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006752:	f002 fa3f 	bl	8008bd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006756:	f000 ffb3 	bl	80076c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800675a:	f002 fa0b 	bl	8008b74 <vPortEnterCritical>
 800675e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006760:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006764:	b25b      	sxtb	r3, r3
 8006766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800676a:	d103      	bne.n	8006774 <xQueueGenericSend+0x16c>
 800676c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676e:	2200      	movs	r2, #0
 8006770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006776:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800677a:	b25b      	sxtb	r3, r3
 800677c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006780:	d103      	bne.n	800678a <xQueueGenericSend+0x182>
 8006782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006784:	2200      	movs	r2, #0
 8006786:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800678a:	f002 fa23 	bl	8008bd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800678e:	1d3a      	adds	r2, r7, #4
 8006790:	f107 0314 	add.w	r3, r7, #20
 8006794:	4611      	mov	r1, r2
 8006796:	4618      	mov	r0, r3
 8006798:	f001 fa34 	bl	8007c04 <xTaskCheckForTimeOut>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d124      	bne.n	80067ec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80067a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067a4:	f000 fcd0 	bl	8007148 <prvIsQueueFull>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d018      	beq.n	80067e0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80067ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b0:	3310      	adds	r3, #16
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	4611      	mov	r1, r2
 80067b6:	4618      	mov	r0, r3
 80067b8:	f001 f95c 	bl	8007a74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80067bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067be:	f000 fc5b 	bl	8007078 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80067c2:	f000 ff8b 	bl	80076dc <xTaskResumeAll>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f47f af7c 	bne.w	80066c6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80067ce:	4b0c      	ldr	r3, [pc, #48]	; (8006800 <xQueueGenericSend+0x1f8>)
 80067d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067d4:	601a      	str	r2, [r3, #0]
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	f3bf 8f6f 	isb	sy
 80067de:	e772      	b.n	80066c6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80067e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067e2:	f000 fc49 	bl	8007078 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80067e6:	f000 ff79 	bl	80076dc <xTaskResumeAll>
 80067ea:	e76c      	b.n	80066c6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80067ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067ee:	f000 fc43 	bl	8007078 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80067f2:	f000 ff73 	bl	80076dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80067f6:	2300      	movs	r3, #0
		}
	}
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3738      	adds	r7, #56	; 0x38
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	e000ed04 	.word	0xe000ed04

08006804 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b08e      	sub	sp, #56	; 0x38
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
 8006810:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10a      	bne.n	8006832 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800681c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006820:	f383 8811 	msr	BASEPRI, r3
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800682e:	bf00      	nop
 8006830:	e7fe      	b.n	8006830 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d103      	bne.n	8006840 <xQueueGenericSendFromISR+0x3c>
 8006838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683c:	2b00      	cmp	r3, #0
 800683e:	d101      	bne.n	8006844 <xQueueGenericSendFromISR+0x40>
 8006840:	2301      	movs	r3, #1
 8006842:	e000      	b.n	8006846 <xQueueGenericSendFromISR+0x42>
 8006844:	2300      	movs	r3, #0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10a      	bne.n	8006860 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800684a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684e:	f383 8811 	msr	BASEPRI, r3
 8006852:	f3bf 8f6f 	isb	sy
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	623b      	str	r3, [r7, #32]
}
 800685c:	bf00      	nop
 800685e:	e7fe      	b.n	800685e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	2b02      	cmp	r3, #2
 8006864:	d103      	bne.n	800686e <xQueueGenericSendFromISR+0x6a>
 8006866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800686a:	2b01      	cmp	r3, #1
 800686c:	d101      	bne.n	8006872 <xQueueGenericSendFromISR+0x6e>
 800686e:	2301      	movs	r3, #1
 8006870:	e000      	b.n	8006874 <xQueueGenericSendFromISR+0x70>
 8006872:	2300      	movs	r3, #0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d10a      	bne.n	800688e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687c:	f383 8811 	msr	BASEPRI, r3
 8006880:	f3bf 8f6f 	isb	sy
 8006884:	f3bf 8f4f 	dsb	sy
 8006888:	61fb      	str	r3, [r7, #28]
}
 800688a:	bf00      	nop
 800688c:	e7fe      	b.n	800688c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800688e:	f002 fa53 	bl	8008d38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006892:	f3ef 8211 	mrs	r2, BASEPRI
 8006896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689a:	f383 8811 	msr	BASEPRI, r3
 800689e:	f3bf 8f6f 	isb	sy
 80068a2:	f3bf 8f4f 	dsb	sy
 80068a6:	61ba      	str	r2, [r7, #24]
 80068a8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80068aa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80068ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d302      	bcc.n	80068c0 <xQueueGenericSendFromISR+0xbc>
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d12c      	bne.n	800691a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80068c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80068ca:	683a      	ldr	r2, [r7, #0]
 80068cc:	68b9      	ldr	r1, [r7, #8]
 80068ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068d0:	f000 fb42 	bl	8006f58 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80068d4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80068d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068dc:	d112      	bne.n	8006904 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d016      	beq.n	8006914 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e8:	3324      	adds	r3, #36	; 0x24
 80068ea:	4618      	mov	r0, r3
 80068ec:	f001 f912 	bl	8007b14 <xTaskRemoveFromEventList>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00e      	beq.n	8006914 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00b      	beq.n	8006914 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	601a      	str	r2, [r3, #0]
 8006902:	e007      	b.n	8006914 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006904:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006908:	3301      	adds	r3, #1
 800690a:	b2db      	uxtb	r3, r3
 800690c:	b25a      	sxtb	r2, r3
 800690e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006914:	2301      	movs	r3, #1
 8006916:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006918:	e001      	b.n	800691e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800691a:	2300      	movs	r3, #0
 800691c:	637b      	str	r3, [r7, #52]	; 0x34
 800691e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006920:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006928:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800692a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800692c:	4618      	mov	r0, r3
 800692e:	3738      	adds	r7, #56	; 0x38
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b08e      	sub	sp, #56	; 0x38
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006944:	2b00      	cmp	r3, #0
 8006946:	d10a      	bne.n	800695e <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694c:	f383 8811 	msr	BASEPRI, r3
 8006950:	f3bf 8f6f 	isb	sy
 8006954:	f3bf 8f4f 	dsb	sy
 8006958:	623b      	str	r3, [r7, #32]
}
 800695a:	bf00      	nop
 800695c:	e7fe      	b.n	800695c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800695e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00a      	beq.n	800697c <xQueueGiveFromISR+0x48>
	__asm volatile
 8006966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696a:	f383 8811 	msr	BASEPRI, r3
 800696e:	f3bf 8f6f 	isb	sy
 8006972:	f3bf 8f4f 	dsb	sy
 8006976:	61fb      	str	r3, [r7, #28]
}
 8006978:	bf00      	nop
 800697a:	e7fe      	b.n	800697a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800697c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d103      	bne.n	800698c <xQueueGiveFromISR+0x58>
 8006984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d101      	bne.n	8006990 <xQueueGiveFromISR+0x5c>
 800698c:	2301      	movs	r3, #1
 800698e:	e000      	b.n	8006992 <xQueueGiveFromISR+0x5e>
 8006990:	2300      	movs	r3, #0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d10a      	bne.n	80069ac <xQueueGiveFromISR+0x78>
	__asm volatile
 8006996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699a:	f383 8811 	msr	BASEPRI, r3
 800699e:	f3bf 8f6f 	isb	sy
 80069a2:	f3bf 8f4f 	dsb	sy
 80069a6:	61bb      	str	r3, [r7, #24]
}
 80069a8:	bf00      	nop
 80069aa:	e7fe      	b.n	80069aa <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069ac:	f002 f9c4 	bl	8008d38 <vPortValidateInterruptPriority>
	__asm volatile
 80069b0:	f3ef 8211 	mrs	r2, BASEPRI
 80069b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b8:	f383 8811 	msr	BASEPRI, r3
 80069bc:	f3bf 8f6f 	isb	sy
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	617a      	str	r2, [r7, #20]
 80069c6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80069c8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80069ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80069d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069d8:	429a      	cmp	r2, r3
 80069da:	d22b      	bcs.n	8006a34 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80069dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80069e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e8:	1c5a      	adds	r2, r3, #1
 80069ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ec:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80069ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80069f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f6:	d112      	bne.n	8006a1e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d016      	beq.n	8006a2e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a02:	3324      	adds	r3, #36	; 0x24
 8006a04:	4618      	mov	r0, r3
 8006a06:	f001 f885 	bl	8007b14 <xTaskRemoveFromEventList>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00e      	beq.n	8006a2e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00b      	beq.n	8006a2e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	601a      	str	r2, [r3, #0]
 8006a1c:	e007      	b.n	8006a2e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006a1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a22:	3301      	adds	r3, #1
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	b25a      	sxtb	r2, r3
 8006a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	637b      	str	r3, [r7, #52]	; 0x34
 8006a32:	e001      	b.n	8006a38 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006a34:	2300      	movs	r3, #0
 8006a36:	637b      	str	r3, [r7, #52]	; 0x34
 8006a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a3a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f383 8811 	msr	BASEPRI, r3
}
 8006a42:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3738      	adds	r7, #56	; 0x38
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
	...

08006a50 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b08c      	sub	sp, #48	; 0x30
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10a      	bne.n	8006a80 <xQueueReceive+0x30>
	__asm volatile
 8006a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6e:	f383 8811 	msr	BASEPRI, r3
 8006a72:	f3bf 8f6f 	isb	sy
 8006a76:	f3bf 8f4f 	dsb	sy
 8006a7a:	623b      	str	r3, [r7, #32]
}
 8006a7c:	bf00      	nop
 8006a7e:	e7fe      	b.n	8006a7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d103      	bne.n	8006a8e <xQueueReceive+0x3e>
 8006a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d101      	bne.n	8006a92 <xQueueReceive+0x42>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e000      	b.n	8006a94 <xQueueReceive+0x44>
 8006a92:	2300      	movs	r3, #0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d10a      	bne.n	8006aae <xQueueReceive+0x5e>
	__asm volatile
 8006a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9c:	f383 8811 	msr	BASEPRI, r3
 8006aa0:	f3bf 8f6f 	isb	sy
 8006aa4:	f3bf 8f4f 	dsb	sy
 8006aa8:	61fb      	str	r3, [r7, #28]
}
 8006aaa:	bf00      	nop
 8006aac:	e7fe      	b.n	8006aac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006aae:	f001 f9f7 	bl	8007ea0 <xTaskGetSchedulerState>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d102      	bne.n	8006abe <xQueueReceive+0x6e>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <xQueueReceive+0x72>
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e000      	b.n	8006ac4 <xQueueReceive+0x74>
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10a      	bne.n	8006ade <xQueueReceive+0x8e>
	__asm volatile
 8006ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006acc:	f383 8811 	msr	BASEPRI, r3
 8006ad0:	f3bf 8f6f 	isb	sy
 8006ad4:	f3bf 8f4f 	dsb	sy
 8006ad8:	61bb      	str	r3, [r7, #24]
}
 8006ada:	bf00      	nop
 8006adc:	e7fe      	b.n	8006adc <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ade:	f002 f849 	bl	8008b74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d01f      	beq.n	8006b2e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006aee:	68b9      	ldr	r1, [r7, #8]
 8006af0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006af2:	f000 fa9b 	bl	800702c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af8:	1e5a      	subs	r2, r3, #1
 8006afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00f      	beq.n	8006b26 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b08:	3310      	adds	r3, #16
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f001 f802 	bl	8007b14 <xTaskRemoveFromEventList>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d007      	beq.n	8006b26 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006b16:	4b3d      	ldr	r3, [pc, #244]	; (8006c0c <xQueueReceive+0x1bc>)
 8006b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b1c:	601a      	str	r2, [r3, #0]
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006b26:	f002 f855 	bl	8008bd4 <vPortExitCritical>
				return pdPASS;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e069      	b.n	8006c02 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d103      	bne.n	8006b3c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b34:	f002 f84e 	bl	8008bd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	e062      	b.n	8006c02 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d106      	bne.n	8006b50 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b42:	f107 0310 	add.w	r3, r7, #16
 8006b46:	4618      	mov	r0, r3
 8006b48:	f001 f846 	bl	8007bd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b50:	f002 f840 	bl	8008bd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b54:	f000 fdb4 	bl	80076c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b58:	f002 f80c 	bl	8008b74 <vPortEnterCritical>
 8006b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b62:	b25b      	sxtb	r3, r3
 8006b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b68:	d103      	bne.n	8006b72 <xQueueReceive+0x122>
 8006b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b78:	b25b      	sxtb	r3, r3
 8006b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b7e:	d103      	bne.n	8006b88 <xQueueReceive+0x138>
 8006b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b88:	f002 f824 	bl	8008bd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b8c:	1d3a      	adds	r2, r7, #4
 8006b8e:	f107 0310 	add.w	r3, r7, #16
 8006b92:	4611      	mov	r1, r2
 8006b94:	4618      	mov	r0, r3
 8006b96:	f001 f835 	bl	8007c04 <xTaskCheckForTimeOut>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d123      	bne.n	8006be8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ba0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ba2:	f000 fabb 	bl	800711c <prvIsQueueEmpty>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d017      	beq.n	8006bdc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bae:	3324      	adds	r3, #36	; 0x24
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	4611      	mov	r1, r2
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f000 ff5d 	bl	8007a74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006bba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bbc:	f000 fa5c 	bl	8007078 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006bc0:	f000 fd8c 	bl	80076dc <xTaskResumeAll>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d189      	bne.n	8006ade <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006bca:	4b10      	ldr	r3, [pc, #64]	; (8006c0c <xQueueReceive+0x1bc>)
 8006bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bd0:	601a      	str	r2, [r3, #0]
 8006bd2:	f3bf 8f4f 	dsb	sy
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	e780      	b.n	8006ade <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006bdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bde:	f000 fa4b 	bl	8007078 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006be2:	f000 fd7b 	bl	80076dc <xTaskResumeAll>
 8006be6:	e77a      	b.n	8006ade <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006be8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bea:	f000 fa45 	bl	8007078 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006bee:	f000 fd75 	bl	80076dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006bf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bf4:	f000 fa92 	bl	800711c <prvIsQueueEmpty>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f43f af6f 	beq.w	8006ade <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006c00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3730      	adds	r7, #48	; 0x30
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	e000ed04 	.word	0xe000ed04

08006c10 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b08e      	sub	sp, #56	; 0x38
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006c22:	2300      	movs	r3, #0
 8006c24:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d10a      	bne.n	8006c42 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c30:	f383 8811 	msr	BASEPRI, r3
 8006c34:	f3bf 8f6f 	isb	sy
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	623b      	str	r3, [r7, #32]
}
 8006c3e:	bf00      	nop
 8006c40:	e7fe      	b.n	8006c40 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00a      	beq.n	8006c60 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4e:	f383 8811 	msr	BASEPRI, r3
 8006c52:	f3bf 8f6f 	isb	sy
 8006c56:	f3bf 8f4f 	dsb	sy
 8006c5a:	61fb      	str	r3, [r7, #28]
}
 8006c5c:	bf00      	nop
 8006c5e:	e7fe      	b.n	8006c5e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c60:	f001 f91e 	bl	8007ea0 <xTaskGetSchedulerState>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d102      	bne.n	8006c70 <xQueueSemaphoreTake+0x60>
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d101      	bne.n	8006c74 <xQueueSemaphoreTake+0x64>
 8006c70:	2301      	movs	r3, #1
 8006c72:	e000      	b.n	8006c76 <xQueueSemaphoreTake+0x66>
 8006c74:	2300      	movs	r3, #0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d10a      	bne.n	8006c90 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7e:	f383 8811 	msr	BASEPRI, r3
 8006c82:	f3bf 8f6f 	isb	sy
 8006c86:	f3bf 8f4f 	dsb	sy
 8006c8a:	61bb      	str	r3, [r7, #24]
}
 8006c8c:	bf00      	nop
 8006c8e:	e7fe      	b.n	8006c8e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c90:	f001 ff70 	bl	8008b74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c98:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d024      	beq.n	8006cea <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca2:	1e5a      	subs	r2, r3, #1
 8006ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d104      	bne.n	8006cba <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006cb0:	f001 fac0 	bl	8008234 <pvTaskIncrementMutexHeldCount>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb8:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00f      	beq.n	8006ce2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc4:	3310      	adds	r3, #16
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f000 ff24 	bl	8007b14 <xTaskRemoveFromEventList>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d007      	beq.n	8006ce2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006cd2:	4b54      	ldr	r3, [pc, #336]	; (8006e24 <xQueueSemaphoreTake+0x214>)
 8006cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cd8:	601a      	str	r2, [r3, #0]
 8006cda:	f3bf 8f4f 	dsb	sy
 8006cde:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006ce2:	f001 ff77 	bl	8008bd4 <vPortExitCritical>
				return pdPASS;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e097      	b.n	8006e1a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d111      	bne.n	8006d14 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00a      	beq.n	8006d0c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	617b      	str	r3, [r7, #20]
}
 8006d08:	bf00      	nop
 8006d0a:	e7fe      	b.n	8006d0a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006d0c:	f001 ff62 	bl	8008bd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006d10:	2300      	movs	r3, #0
 8006d12:	e082      	b.n	8006e1a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d106      	bne.n	8006d28 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d1a:	f107 030c 	add.w	r3, r7, #12
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f000 ff5a 	bl	8007bd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d24:	2301      	movs	r3, #1
 8006d26:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d28:	f001 ff54 	bl	8008bd4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d2c:	f000 fcc8 	bl	80076c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d30:	f001 ff20 	bl	8008b74 <vPortEnterCritical>
 8006d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d3a:	b25b      	sxtb	r3, r3
 8006d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d40:	d103      	bne.n	8006d4a <xQueueSemaphoreTake+0x13a>
 8006d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d50:	b25b      	sxtb	r3, r3
 8006d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d56:	d103      	bne.n	8006d60 <xQueueSemaphoreTake+0x150>
 8006d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d60:	f001 ff38 	bl	8008bd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d64:	463a      	mov	r2, r7
 8006d66:	f107 030c 	add.w	r3, r7, #12
 8006d6a:	4611      	mov	r1, r2
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f000 ff49 	bl	8007c04 <xTaskCheckForTimeOut>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d132      	bne.n	8006dde <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d7a:	f000 f9cf 	bl	800711c <prvIsQueueEmpty>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d026      	beq.n	8006dd2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d109      	bne.n	8006da0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006d8c:	f001 fef2 	bl	8008b74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	4618      	mov	r0, r3
 8006d96:	f001 f8a1 	bl	8007edc <xTaskPriorityInherit>
 8006d9a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006d9c:	f001 ff1a 	bl	8008bd4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da2:	3324      	adds	r3, #36	; 0x24
 8006da4:	683a      	ldr	r2, [r7, #0]
 8006da6:	4611      	mov	r1, r2
 8006da8:	4618      	mov	r0, r3
 8006daa:	f000 fe63 	bl	8007a74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006dae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006db0:	f000 f962 	bl	8007078 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006db4:	f000 fc92 	bl	80076dc <xTaskResumeAll>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f47f af68 	bne.w	8006c90 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006dc0:	4b18      	ldr	r3, [pc, #96]	; (8006e24 <xQueueSemaphoreTake+0x214>)
 8006dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dc6:	601a      	str	r2, [r3, #0]
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	e75e      	b.n	8006c90 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006dd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006dd4:	f000 f950 	bl	8007078 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006dd8:	f000 fc80 	bl	80076dc <xTaskResumeAll>
 8006ddc:	e758      	b.n	8006c90 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006dde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006de0:	f000 f94a 	bl	8007078 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006de4:	f000 fc7a 	bl	80076dc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006de8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006dea:	f000 f997 	bl	800711c <prvIsQueueEmpty>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f43f af4d 	beq.w	8006c90 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00d      	beq.n	8006e18 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006dfc:	f001 feba 	bl	8008b74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006e00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e02:	f000 f891 	bl	8006f28 <prvGetDisinheritPriorityAfterTimeout>
 8006e06:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f001 f970 	bl	80080f4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006e14:	f001 fede 	bl	8008bd4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006e18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3738      	adds	r7, #56	; 0x38
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	e000ed04 	.word	0xe000ed04

08006e28 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b08e      	sub	sp, #56	; 0x38
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10a      	bne.n	8006e54 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e42:	f383 8811 	msr	BASEPRI, r3
 8006e46:	f3bf 8f6f 	isb	sy
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	623b      	str	r3, [r7, #32]
}
 8006e50:	bf00      	nop
 8006e52:	e7fe      	b.n	8006e52 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d103      	bne.n	8006e62 <xQueueReceiveFromISR+0x3a>
 8006e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d101      	bne.n	8006e66 <xQueueReceiveFromISR+0x3e>
 8006e62:	2301      	movs	r3, #1
 8006e64:	e000      	b.n	8006e68 <xQueueReceiveFromISR+0x40>
 8006e66:	2300      	movs	r3, #0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d10a      	bne.n	8006e82 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e70:	f383 8811 	msr	BASEPRI, r3
 8006e74:	f3bf 8f6f 	isb	sy
 8006e78:	f3bf 8f4f 	dsb	sy
 8006e7c:	61fb      	str	r3, [r7, #28]
}
 8006e7e:	bf00      	nop
 8006e80:	e7fe      	b.n	8006e80 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e82:	f001 ff59 	bl	8008d38 <vPortValidateInterruptPriority>
	__asm volatile
 8006e86:	f3ef 8211 	mrs	r2, BASEPRI
 8006e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8e:	f383 8811 	msr	BASEPRI, r3
 8006e92:	f3bf 8f6f 	isb	sy
 8006e96:	f3bf 8f4f 	dsb	sy
 8006e9a:	61ba      	str	r2, [r7, #24]
 8006e9c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006e9e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d02f      	beq.n	8006f0e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006eb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006eb8:	68b9      	ldr	r1, [r7, #8]
 8006eba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ebc:	f000 f8b6 	bl	800702c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec2:	1e5a      	subs	r2, r3, #1
 8006ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006ec8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed0:	d112      	bne.n	8006ef8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d016      	beq.n	8006f08 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006edc:	3310      	adds	r3, #16
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f000 fe18 	bl	8007b14 <xTaskRemoveFromEventList>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00e      	beq.n	8006f08 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00b      	beq.n	8006f08 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	601a      	str	r2, [r3, #0]
 8006ef6:	e007      	b.n	8006f08 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006efc:	3301      	adds	r3, #1
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	b25a      	sxtb	r2, r3
 8006f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	637b      	str	r3, [r7, #52]	; 0x34
 8006f0c:	e001      	b.n	8006f12 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	637b      	str	r3, [r7, #52]	; 0x34
 8006f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f14:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	f383 8811 	msr	BASEPRI, r3
}
 8006f1c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3738      	adds	r7, #56	; 0x38
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d006      	beq.n	8006f46 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f1c3 0307 	rsb	r3, r3, #7
 8006f42:	60fb      	str	r3, [r7, #12]
 8006f44:	e001      	b.n	8006f4a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006f46:	2300      	movs	r3, #0
 8006f48:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
	}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3714      	adds	r7, #20
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b086      	sub	sp, #24
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006f64:	2300      	movs	r3, #0
 8006f66:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d10d      	bne.n	8006f92 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d14d      	bne.n	800701a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	4618      	mov	r0, r3
 8006f84:	f001 f830 	bl	8007fe8 <xTaskPriorityDisinherit>
 8006f88:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	605a      	str	r2, [r3, #4]
 8006f90:	e043      	b.n	800701a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d119      	bne.n	8006fcc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6898      	ldr	r0, [r3, #8]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	68b9      	ldr	r1, [r7, #8]
 8006fa4:	f002 fbdb 	bl	800975e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	689a      	ldr	r2, [r3, #8]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb0:	441a      	add	r2, r3
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	689a      	ldr	r2, [r3, #8]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d32b      	bcc.n	800701a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	609a      	str	r2, [r3, #8]
 8006fca:	e026      	b.n	800701a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	68d8      	ldr	r0, [r3, #12]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	68b9      	ldr	r1, [r7, #8]
 8006fd8:	f002 fbc1 	bl	800975e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	68da      	ldr	r2, [r3, #12]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe4:	425b      	negs	r3, r3
 8006fe6:	441a      	add	r2, r3
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	68da      	ldr	r2, [r3, #12]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d207      	bcs.n	8007008 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	685a      	ldr	r2, [r3, #4]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007000:	425b      	negs	r3, r3
 8007002:	441a      	add	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b02      	cmp	r3, #2
 800700c:	d105      	bne.n	800701a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d002      	beq.n	800701a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	3b01      	subs	r3, #1
 8007018:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	1c5a      	adds	r2, r3, #1
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007022:	697b      	ldr	r3, [r7, #20]
}
 8007024:	4618      	mov	r0, r3
 8007026:	3718      	adds	r7, #24
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703a:	2b00      	cmp	r3, #0
 800703c:	d018      	beq.n	8007070 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	68da      	ldr	r2, [r3, #12]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007046:	441a      	add	r2, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	68da      	ldr	r2, [r3, #12]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	429a      	cmp	r2, r3
 8007056:	d303      	bcc.n	8007060 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	68d9      	ldr	r1, [r3, #12]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007068:	461a      	mov	r2, r3
 800706a:	6838      	ldr	r0, [r7, #0]
 800706c:	f002 fb77 	bl	800975e <memcpy>
	}
}
 8007070:	bf00      	nop
 8007072:	3708      	adds	r7, #8
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007080:	f001 fd78 	bl	8008b74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800708a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800708c:	e011      	b.n	80070b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007092:	2b00      	cmp	r3, #0
 8007094:	d012      	beq.n	80070bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	3324      	adds	r3, #36	; 0x24
 800709a:	4618      	mov	r0, r3
 800709c:	f000 fd3a 	bl	8007b14 <xTaskRemoveFromEventList>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d001      	beq.n	80070aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80070a6:	f000 fe0f 	bl	8007cc8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80070aa:	7bfb      	ldrb	r3, [r7, #15]
 80070ac:	3b01      	subs	r3, #1
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80070b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	dce9      	bgt.n	800708e <prvUnlockQueue+0x16>
 80070ba:	e000      	b.n	80070be <prvUnlockQueue+0x46>
					break;
 80070bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	22ff      	movs	r2, #255	; 0xff
 80070c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80070c6:	f001 fd85 	bl	8008bd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80070ca:	f001 fd53 	bl	8008b74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80070d6:	e011      	b.n	80070fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d012      	beq.n	8007106 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	3310      	adds	r3, #16
 80070e4:	4618      	mov	r0, r3
 80070e6:	f000 fd15 	bl	8007b14 <xTaskRemoveFromEventList>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d001      	beq.n	80070f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80070f0:	f000 fdea 	bl	8007cc8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80070f4:	7bbb      	ldrb	r3, [r7, #14]
 80070f6:	3b01      	subs	r3, #1
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80070fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007100:	2b00      	cmp	r3, #0
 8007102:	dce9      	bgt.n	80070d8 <prvUnlockQueue+0x60>
 8007104:	e000      	b.n	8007108 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007106:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	22ff      	movs	r2, #255	; 0xff
 800710c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007110:	f001 fd60 	bl	8008bd4 <vPortExitCritical>
}
 8007114:	bf00      	nop
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007124:	f001 fd26 	bl	8008b74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712c:	2b00      	cmp	r3, #0
 800712e:	d102      	bne.n	8007136 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007130:	2301      	movs	r3, #1
 8007132:	60fb      	str	r3, [r7, #12]
 8007134:	e001      	b.n	800713a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007136:	2300      	movs	r3, #0
 8007138:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800713a:	f001 fd4b 	bl	8008bd4 <vPortExitCritical>

	return xReturn;
 800713e:	68fb      	ldr	r3, [r7, #12]
}
 8007140:	4618      	mov	r0, r3
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007150:	f001 fd10 	bl	8008b74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800715c:	429a      	cmp	r2, r3
 800715e:	d102      	bne.n	8007166 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007160:	2301      	movs	r3, #1
 8007162:	60fb      	str	r3, [r7, #12]
 8007164:	e001      	b.n	800716a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007166:	2300      	movs	r3, #0
 8007168:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800716a:	f001 fd33 	bl	8008bd4 <vPortExitCritical>

	return xReturn;
 800716e:	68fb      	ldr	r3, [r7, #12]
}
 8007170:	4618      	mov	r0, r3
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007182:	2300      	movs	r3, #0
 8007184:	60fb      	str	r3, [r7, #12]
 8007186:	e014      	b.n	80071b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007188:	4a0f      	ldr	r2, [pc, #60]	; (80071c8 <vQueueAddToRegistry+0x50>)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10b      	bne.n	80071ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007194:	490c      	ldr	r1, [pc, #48]	; (80071c8 <vQueueAddToRegistry+0x50>)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	683a      	ldr	r2, [r7, #0]
 800719a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800719e:	4a0a      	ldr	r2, [pc, #40]	; (80071c8 <vQueueAddToRegistry+0x50>)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	00db      	lsls	r3, r3, #3
 80071a4:	4413      	add	r3, r2
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80071aa:	e006      	b.n	80071ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	3301      	adds	r3, #1
 80071b0:	60fb      	str	r3, [r7, #12]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2b07      	cmp	r3, #7
 80071b6:	d9e7      	bls.n	8007188 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80071b8:	bf00      	nop
 80071ba:	bf00      	nop
 80071bc:	3714      	adds	r7, #20
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	200009c4 	.word	0x200009c4

080071cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b086      	sub	sp, #24
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80071dc:	f001 fcca 	bl	8008b74 <vPortEnterCritical>
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071e6:	b25b      	sxtb	r3, r3
 80071e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ec:	d103      	bne.n	80071f6 <vQueueWaitForMessageRestricted+0x2a>
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071fc:	b25b      	sxtb	r3, r3
 80071fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007202:	d103      	bne.n	800720c <vQueueWaitForMessageRestricted+0x40>
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	2200      	movs	r2, #0
 8007208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800720c:	f001 fce2 	bl	8008bd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007214:	2b00      	cmp	r3, #0
 8007216:	d106      	bne.n	8007226 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	3324      	adds	r3, #36	; 0x24
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	68b9      	ldr	r1, [r7, #8]
 8007220:	4618      	mov	r0, r3
 8007222:	f000 fc4b 	bl	8007abc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007226:	6978      	ldr	r0, [r7, #20]
 8007228:	f7ff ff26 	bl	8007078 <prvUnlockQueue>
	}
 800722c:	bf00      	nop
 800722e:	3718      	adds	r7, #24
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007234:	b580      	push	{r7, lr}
 8007236:	b08e      	sub	sp, #56	; 0x38
 8007238:	af04      	add	r7, sp, #16
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
 8007240:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007244:	2b00      	cmp	r3, #0
 8007246:	d10a      	bne.n	800725e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800724c:	f383 8811 	msr	BASEPRI, r3
 8007250:	f3bf 8f6f 	isb	sy
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	623b      	str	r3, [r7, #32]
}
 800725a:	bf00      	nop
 800725c:	e7fe      	b.n	800725c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800725e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10a      	bne.n	800727a <xTaskCreateStatic+0x46>
	__asm volatile
 8007264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007268:	f383 8811 	msr	BASEPRI, r3
 800726c:	f3bf 8f6f 	isb	sy
 8007270:	f3bf 8f4f 	dsb	sy
 8007274:	61fb      	str	r3, [r7, #28]
}
 8007276:	bf00      	nop
 8007278:	e7fe      	b.n	8007278 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800727a:	23a0      	movs	r3, #160	; 0xa0
 800727c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	2ba0      	cmp	r3, #160	; 0xa0
 8007282:	d00a      	beq.n	800729a <xTaskCreateStatic+0x66>
	__asm volatile
 8007284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007288:	f383 8811 	msr	BASEPRI, r3
 800728c:	f3bf 8f6f 	isb	sy
 8007290:	f3bf 8f4f 	dsb	sy
 8007294:	61bb      	str	r3, [r7, #24]
}
 8007296:	bf00      	nop
 8007298:	e7fe      	b.n	8007298 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800729a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729c:	2b00      	cmp	r3, #0
 800729e:	d01e      	beq.n	80072de <xTaskCreateStatic+0xaa>
 80072a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d01b      	beq.n	80072de <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80072a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80072aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072ae:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80072b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b2:	2202      	movs	r2, #2
 80072b4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80072b8:	2300      	movs	r3, #0
 80072ba:	9303      	str	r3, [sp, #12]
 80072bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072be:	9302      	str	r3, [sp, #8]
 80072c0:	f107 0314 	add.w	r3, r7, #20
 80072c4:	9301      	str	r3, [sp, #4]
 80072c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	68b9      	ldr	r1, [r7, #8]
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f000 f851 	bl	8007378 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072d8:	f000 f8e4 	bl	80074a4 <prvAddNewTaskToReadyList>
 80072dc:	e001      	b.n	80072e2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80072de:	2300      	movs	r3, #0
 80072e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80072e2:	697b      	ldr	r3, [r7, #20]
	}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3728      	adds	r7, #40	; 0x28
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b08c      	sub	sp, #48	; 0x30
 80072f0:	af04      	add	r7, sp, #16
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	603b      	str	r3, [r7, #0]
 80072f8:	4613      	mov	r3, r2
 80072fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072fc:	88fb      	ldrh	r3, [r7, #6]
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	4618      	mov	r0, r3
 8007302:	f001 fd59 	bl	8008db8 <pvPortMalloc>
 8007306:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00e      	beq.n	800732c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800730e:	20a0      	movs	r0, #160	; 0xa0
 8007310:	f001 fd52 	bl	8008db8 <pvPortMalloc>
 8007314:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d003      	beq.n	8007324 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	697a      	ldr	r2, [r7, #20]
 8007320:	631a      	str	r2, [r3, #48]	; 0x30
 8007322:	e005      	b.n	8007330 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007324:	6978      	ldr	r0, [r7, #20]
 8007326:	f001 fe0b 	bl	8008f40 <vPortFree>
 800732a:	e001      	b.n	8007330 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800732c:	2300      	movs	r3, #0
 800732e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d017      	beq.n	8007366 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800733e:	88fa      	ldrh	r2, [r7, #6]
 8007340:	2300      	movs	r3, #0
 8007342:	9303      	str	r3, [sp, #12]
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	9302      	str	r3, [sp, #8]
 8007348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734a:	9301      	str	r3, [sp, #4]
 800734c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734e:	9300      	str	r3, [sp, #0]
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	68b9      	ldr	r1, [r7, #8]
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f000 f80f 	bl	8007378 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800735a:	69f8      	ldr	r0, [r7, #28]
 800735c:	f000 f8a2 	bl	80074a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007360:	2301      	movs	r3, #1
 8007362:	61bb      	str	r3, [r7, #24]
 8007364:	e002      	b.n	800736c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007366:	f04f 33ff 	mov.w	r3, #4294967295
 800736a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800736c:	69bb      	ldr	r3, [r7, #24]
	}
 800736e:	4618      	mov	r0, r3
 8007370:	3720      	adds	r7, #32
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
	...

08007378 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b088      	sub	sp, #32
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]
 8007384:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007388:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007390:	3b01      	subs	r3, #1
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4413      	add	r3, r2
 8007396:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	f023 0307 	bic.w	r3, r3, #7
 800739e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	f003 0307 	and.w	r3, r3, #7
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00a      	beq.n	80073c0 <prvInitialiseNewTask+0x48>
	__asm volatile
 80073aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ae:	f383 8811 	msr	BASEPRI, r3
 80073b2:	f3bf 8f6f 	isb	sy
 80073b6:	f3bf 8f4f 	dsb	sy
 80073ba:	617b      	str	r3, [r7, #20]
}
 80073bc:	bf00      	nop
 80073be:	e7fe      	b.n	80073be <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073c0:	2300      	movs	r3, #0
 80073c2:	61fb      	str	r3, [r7, #28]
 80073c4:	e012      	b.n	80073ec <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80073c6:	68ba      	ldr	r2, [r7, #8]
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	4413      	add	r3, r2
 80073cc:	7819      	ldrb	r1, [r3, #0]
 80073ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	4413      	add	r3, r2
 80073d4:	3334      	adds	r3, #52	; 0x34
 80073d6:	460a      	mov	r2, r1
 80073d8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80073da:	68ba      	ldr	r2, [r7, #8]
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	4413      	add	r3, r2
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d006      	beq.n	80073f4 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	3301      	adds	r3, #1
 80073ea:	61fb      	str	r3, [r7, #28]
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	2b0f      	cmp	r3, #15
 80073f0:	d9e9      	bls.n	80073c6 <prvInitialiseNewTask+0x4e>
 80073f2:	e000      	b.n	80073f6 <prvInitialiseNewTask+0x7e>
		{
			break;
 80073f4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80073f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80073fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007400:	2b06      	cmp	r3, #6
 8007402:	d901      	bls.n	8007408 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007404:	2306      	movs	r3, #6
 8007406:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800740c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800740e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007410:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007412:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007416:	2200      	movs	r2, #0
 8007418:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800741a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741c:	3304      	adds	r3, #4
 800741e:	4618      	mov	r0, r3
 8007420:	f7fe ff22 	bl	8006268 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007426:	3318      	adds	r3, #24
 8007428:	4618      	mov	r0, r3
 800742a:	f7fe ff1d 	bl	8006268 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800742e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007432:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007436:	f1c3 0207 	rsb	r2, r3, #7
 800743a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800743e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007442:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007446:	2200      	movs	r2, #0
 8007448:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800744c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744e:	2200      	movs	r2, #0
 8007450:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007456:	334c      	adds	r3, #76	; 0x4c
 8007458:	224c      	movs	r2, #76	; 0x4c
 800745a:	2100      	movs	r1, #0
 800745c:	4618      	mov	r0, r3
 800745e:	f002 f8ad 	bl	80095bc <memset>
 8007462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007464:	4a0c      	ldr	r2, [pc, #48]	; (8007498 <prvInitialiseNewTask+0x120>)
 8007466:	651a      	str	r2, [r3, #80]	; 0x50
 8007468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746a:	4a0c      	ldr	r2, [pc, #48]	; (800749c <prvInitialiseNewTask+0x124>)
 800746c:	655a      	str	r2, [r3, #84]	; 0x54
 800746e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007470:	4a0b      	ldr	r2, [pc, #44]	; (80074a0 <prvInitialiseNewTask+0x128>)
 8007472:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007474:	683a      	ldr	r2, [r7, #0]
 8007476:	68f9      	ldr	r1, [r7, #12]
 8007478:	69b8      	ldr	r0, [r7, #24]
 800747a:	f001 fa4d 	bl	8008918 <pxPortInitialiseStack>
 800747e:	4602      	mov	r2, r0
 8007480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007482:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007486:	2b00      	cmp	r3, #0
 8007488:	d002      	beq.n	8007490 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800748a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800748e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007490:	bf00      	nop
 8007492:	3720      	adds	r7, #32
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	2000184c 	.word	0x2000184c
 800749c:	200018b4 	.word	0x200018b4
 80074a0:	2000191c 	.word	0x2000191c

080074a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80074ac:	f001 fb62 	bl	8008b74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80074b0:	4b2a      	ldr	r3, [pc, #168]	; (800755c <prvAddNewTaskToReadyList+0xb8>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	3301      	adds	r3, #1
 80074b6:	4a29      	ldr	r2, [pc, #164]	; (800755c <prvAddNewTaskToReadyList+0xb8>)
 80074b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80074ba:	4b29      	ldr	r3, [pc, #164]	; (8007560 <prvAddNewTaskToReadyList+0xbc>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d109      	bne.n	80074d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80074c2:	4a27      	ldr	r2, [pc, #156]	; (8007560 <prvAddNewTaskToReadyList+0xbc>)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80074c8:	4b24      	ldr	r3, [pc, #144]	; (800755c <prvAddNewTaskToReadyList+0xb8>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d110      	bne.n	80074f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80074d0:	f000 fc1e 	bl	8007d10 <prvInitialiseTaskLists>
 80074d4:	e00d      	b.n	80074f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80074d6:	4b23      	ldr	r3, [pc, #140]	; (8007564 <prvAddNewTaskToReadyList+0xc0>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d109      	bne.n	80074f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80074de:	4b20      	ldr	r3, [pc, #128]	; (8007560 <prvAddNewTaskToReadyList+0xbc>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d802      	bhi.n	80074f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80074ec:	4a1c      	ldr	r2, [pc, #112]	; (8007560 <prvAddNewTaskToReadyList+0xbc>)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80074f2:	4b1d      	ldr	r3, [pc, #116]	; (8007568 <prvAddNewTaskToReadyList+0xc4>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	3301      	adds	r3, #1
 80074f8:	4a1b      	ldr	r2, [pc, #108]	; (8007568 <prvAddNewTaskToReadyList+0xc4>)
 80074fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007500:	2201      	movs	r2, #1
 8007502:	409a      	lsls	r2, r3
 8007504:	4b19      	ldr	r3, [pc, #100]	; (800756c <prvAddNewTaskToReadyList+0xc8>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4313      	orrs	r3, r2
 800750a:	4a18      	ldr	r2, [pc, #96]	; (800756c <prvAddNewTaskToReadyList+0xc8>)
 800750c:	6013      	str	r3, [r2, #0]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007512:	4613      	mov	r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	4413      	add	r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	4a15      	ldr	r2, [pc, #84]	; (8007570 <prvAddNewTaskToReadyList+0xcc>)
 800751c:	441a      	add	r2, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	3304      	adds	r3, #4
 8007522:	4619      	mov	r1, r3
 8007524:	4610      	mov	r0, r2
 8007526:	f7fe feac 	bl	8006282 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800752a:	f001 fb53 	bl	8008bd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800752e:	4b0d      	ldr	r3, [pc, #52]	; (8007564 <prvAddNewTaskToReadyList+0xc0>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00e      	beq.n	8007554 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007536:	4b0a      	ldr	r3, [pc, #40]	; (8007560 <prvAddNewTaskToReadyList+0xbc>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007540:	429a      	cmp	r2, r3
 8007542:	d207      	bcs.n	8007554 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007544:	4b0b      	ldr	r3, [pc, #44]	; (8007574 <prvAddNewTaskToReadyList+0xd0>)
 8007546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800754a:	601a      	str	r2, [r3, #0]
 800754c:	f3bf 8f4f 	dsb	sy
 8007550:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007554:	bf00      	nop
 8007556:	3708      	adds	r7, #8
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	20000b04 	.word	0x20000b04
 8007560:	20000a04 	.word	0x20000a04
 8007564:	20000b10 	.word	0x20000b10
 8007568:	20000b20 	.word	0x20000b20
 800756c:	20000b0c 	.word	0x20000b0c
 8007570:	20000a08 	.word	0x20000a08
 8007574:	e000ed04 	.word	0xe000ed04

08007578 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007580:	2300      	movs	r3, #0
 8007582:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d017      	beq.n	80075ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800758a:	4b13      	ldr	r3, [pc, #76]	; (80075d8 <vTaskDelay+0x60>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00a      	beq.n	80075a8 <vTaskDelay+0x30>
	__asm volatile
 8007592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007596:	f383 8811 	msr	BASEPRI, r3
 800759a:	f3bf 8f6f 	isb	sy
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	60bb      	str	r3, [r7, #8]
}
 80075a4:	bf00      	nop
 80075a6:	e7fe      	b.n	80075a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80075a8:	f000 f88a 	bl	80076c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80075ac:	2100      	movs	r1, #0
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 fe54 	bl	800825c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80075b4:	f000 f892 	bl	80076dc <xTaskResumeAll>
 80075b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d107      	bne.n	80075d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80075c0:	4b06      	ldr	r3, [pc, #24]	; (80075dc <vTaskDelay+0x64>)
 80075c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075c6:	601a      	str	r2, [r3, #0]
 80075c8:	f3bf 8f4f 	dsb	sy
 80075cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80075d0:	bf00      	nop
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	20000b2c 	.word	0x20000b2c
 80075dc:	e000ed04 	.word	0xe000ed04

080075e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b08a      	sub	sp, #40	; 0x28
 80075e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80075e6:	2300      	movs	r3, #0
 80075e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80075ea:	2300      	movs	r3, #0
 80075ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80075ee:	463a      	mov	r2, r7
 80075f0:	1d39      	adds	r1, r7, #4
 80075f2:	f107 0308 	add.w	r3, r7, #8
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7f8 fe42 	bl	8000280 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80075fc:	6839      	ldr	r1, [r7, #0]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	68ba      	ldr	r2, [r7, #8]
 8007602:	9202      	str	r2, [sp, #8]
 8007604:	9301      	str	r3, [sp, #4]
 8007606:	2300      	movs	r3, #0
 8007608:	9300      	str	r3, [sp, #0]
 800760a:	2300      	movs	r3, #0
 800760c:	460a      	mov	r2, r1
 800760e:	4924      	ldr	r1, [pc, #144]	; (80076a0 <vTaskStartScheduler+0xc0>)
 8007610:	4824      	ldr	r0, [pc, #144]	; (80076a4 <vTaskStartScheduler+0xc4>)
 8007612:	f7ff fe0f 	bl	8007234 <xTaskCreateStatic>
 8007616:	4603      	mov	r3, r0
 8007618:	4a23      	ldr	r2, [pc, #140]	; (80076a8 <vTaskStartScheduler+0xc8>)
 800761a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800761c:	4b22      	ldr	r3, [pc, #136]	; (80076a8 <vTaskStartScheduler+0xc8>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d002      	beq.n	800762a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007624:	2301      	movs	r3, #1
 8007626:	617b      	str	r3, [r7, #20]
 8007628:	e001      	b.n	800762e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800762a:	2300      	movs	r3, #0
 800762c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	2b01      	cmp	r3, #1
 8007632:	d102      	bne.n	800763a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007634:	f000 fe78 	bl	8008328 <xTimerCreateTimerTask>
 8007638:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d11b      	bne.n	8007678 <vTaskStartScheduler+0x98>
	__asm volatile
 8007640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007644:	f383 8811 	msr	BASEPRI, r3
 8007648:	f3bf 8f6f 	isb	sy
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	613b      	str	r3, [r7, #16]
}
 8007652:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007654:	4b15      	ldr	r3, [pc, #84]	; (80076ac <vTaskStartScheduler+0xcc>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	334c      	adds	r3, #76	; 0x4c
 800765a:	4a15      	ldr	r2, [pc, #84]	; (80076b0 <vTaskStartScheduler+0xd0>)
 800765c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800765e:	4b15      	ldr	r3, [pc, #84]	; (80076b4 <vTaskStartScheduler+0xd4>)
 8007660:	f04f 32ff 	mov.w	r2, #4294967295
 8007664:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007666:	4b14      	ldr	r3, [pc, #80]	; (80076b8 <vTaskStartScheduler+0xd8>)
 8007668:	2201      	movs	r2, #1
 800766a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800766c:	4b13      	ldr	r3, [pc, #76]	; (80076bc <vTaskStartScheduler+0xdc>)
 800766e:	2200      	movs	r2, #0
 8007670:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007672:	f001 f9dd 	bl	8008a30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007676:	e00e      	b.n	8007696 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800767e:	d10a      	bne.n	8007696 <vTaskStartScheduler+0xb6>
	__asm volatile
 8007680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007684:	f383 8811 	msr	BASEPRI, r3
 8007688:	f3bf 8f6f 	isb	sy
 800768c:	f3bf 8f4f 	dsb	sy
 8007690:	60fb      	str	r3, [r7, #12]
}
 8007692:	bf00      	nop
 8007694:	e7fe      	b.n	8007694 <vTaskStartScheduler+0xb4>
}
 8007696:	bf00      	nop
 8007698:	3718      	adds	r7, #24
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	0800a61c 	.word	0x0800a61c
 80076a4:	08007ce1 	.word	0x08007ce1
 80076a8:	20000b28 	.word	0x20000b28
 80076ac:	20000a04 	.word	0x20000a04
 80076b0:	20000078 	.word	0x20000078
 80076b4:	20000b24 	.word	0x20000b24
 80076b8:	20000b10 	.word	0x20000b10
 80076bc:	20000b08 	.word	0x20000b08

080076c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80076c0:	b480      	push	{r7}
 80076c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80076c4:	4b04      	ldr	r3, [pc, #16]	; (80076d8 <vTaskSuspendAll+0x18>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	3301      	adds	r3, #1
 80076ca:	4a03      	ldr	r2, [pc, #12]	; (80076d8 <vTaskSuspendAll+0x18>)
 80076cc:	6013      	str	r3, [r2, #0]
}
 80076ce:	bf00      	nop
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr
 80076d8:	20000b2c 	.word	0x20000b2c

080076dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80076e2:	2300      	movs	r3, #0
 80076e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80076e6:	2300      	movs	r3, #0
 80076e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80076ea:	4b41      	ldr	r3, [pc, #260]	; (80077f0 <xTaskResumeAll+0x114>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d10a      	bne.n	8007708 <xTaskResumeAll+0x2c>
	__asm volatile
 80076f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	603b      	str	r3, [r7, #0]
}
 8007704:	bf00      	nop
 8007706:	e7fe      	b.n	8007706 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007708:	f001 fa34 	bl	8008b74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800770c:	4b38      	ldr	r3, [pc, #224]	; (80077f0 <xTaskResumeAll+0x114>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	3b01      	subs	r3, #1
 8007712:	4a37      	ldr	r2, [pc, #220]	; (80077f0 <xTaskResumeAll+0x114>)
 8007714:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007716:	4b36      	ldr	r3, [pc, #216]	; (80077f0 <xTaskResumeAll+0x114>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d161      	bne.n	80077e2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800771e:	4b35      	ldr	r3, [pc, #212]	; (80077f4 <xTaskResumeAll+0x118>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d05d      	beq.n	80077e2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007726:	e02e      	b.n	8007786 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007728:	4b33      	ldr	r3, [pc, #204]	; (80077f8 <xTaskResumeAll+0x11c>)
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	3318      	adds	r3, #24
 8007734:	4618      	mov	r0, r3
 8007736:	f7fe fe01 	bl	800633c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	3304      	adds	r3, #4
 800773e:	4618      	mov	r0, r3
 8007740:	f7fe fdfc 	bl	800633c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007748:	2201      	movs	r2, #1
 800774a:	409a      	lsls	r2, r3
 800774c:	4b2b      	ldr	r3, [pc, #172]	; (80077fc <xTaskResumeAll+0x120>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4313      	orrs	r3, r2
 8007752:	4a2a      	ldr	r2, [pc, #168]	; (80077fc <xTaskResumeAll+0x120>)
 8007754:	6013      	str	r3, [r2, #0]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800775a:	4613      	mov	r3, r2
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	4413      	add	r3, r2
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	4a27      	ldr	r2, [pc, #156]	; (8007800 <xTaskResumeAll+0x124>)
 8007764:	441a      	add	r2, r3
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	3304      	adds	r3, #4
 800776a:	4619      	mov	r1, r3
 800776c:	4610      	mov	r0, r2
 800776e:	f7fe fd88 	bl	8006282 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007776:	4b23      	ldr	r3, [pc, #140]	; (8007804 <xTaskResumeAll+0x128>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777c:	429a      	cmp	r2, r3
 800777e:	d302      	bcc.n	8007786 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007780:	4b21      	ldr	r3, [pc, #132]	; (8007808 <xTaskResumeAll+0x12c>)
 8007782:	2201      	movs	r2, #1
 8007784:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007786:	4b1c      	ldr	r3, [pc, #112]	; (80077f8 <xTaskResumeAll+0x11c>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1cc      	bne.n	8007728 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d001      	beq.n	8007798 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007794:	f000 fb5e 	bl	8007e54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007798:	4b1c      	ldr	r3, [pc, #112]	; (800780c <xTaskResumeAll+0x130>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d010      	beq.n	80077c6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80077a4:	f000 f846 	bl	8007834 <xTaskIncrementTick>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d002      	beq.n	80077b4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80077ae:	4b16      	ldr	r3, [pc, #88]	; (8007808 <xTaskResumeAll+0x12c>)
 80077b0:	2201      	movs	r2, #1
 80077b2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	3b01      	subs	r3, #1
 80077b8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d1f1      	bne.n	80077a4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80077c0:	4b12      	ldr	r3, [pc, #72]	; (800780c <xTaskResumeAll+0x130>)
 80077c2:	2200      	movs	r2, #0
 80077c4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80077c6:	4b10      	ldr	r3, [pc, #64]	; (8007808 <xTaskResumeAll+0x12c>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d009      	beq.n	80077e2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80077ce:	2301      	movs	r3, #1
 80077d0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80077d2:	4b0f      	ldr	r3, [pc, #60]	; (8007810 <xTaskResumeAll+0x134>)
 80077d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077d8:	601a      	str	r2, [r3, #0]
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80077e2:	f001 f9f7 	bl	8008bd4 <vPortExitCritical>

	return xAlreadyYielded;
 80077e6:	68bb      	ldr	r3, [r7, #8]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	20000b2c 	.word	0x20000b2c
 80077f4:	20000b04 	.word	0x20000b04
 80077f8:	20000ac4 	.word	0x20000ac4
 80077fc:	20000b0c 	.word	0x20000b0c
 8007800:	20000a08 	.word	0x20000a08
 8007804:	20000a04 	.word	0x20000a04
 8007808:	20000b18 	.word	0x20000b18
 800780c:	20000b14 	.word	0x20000b14
 8007810:	e000ed04 	.word	0xe000ed04

08007814 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800781a:	4b05      	ldr	r3, [pc, #20]	; (8007830 <xTaskGetTickCount+0x1c>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007820:	687b      	ldr	r3, [r7, #4]
}
 8007822:	4618      	mov	r0, r3
 8007824:	370c      	adds	r7, #12
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	20000b08 	.word	0x20000b08

08007834 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800783a:	2300      	movs	r3, #0
 800783c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800783e:	4b51      	ldr	r3, [pc, #324]	; (8007984 <xTaskIncrementTick+0x150>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	f040 808d 	bne.w	8007962 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007848:	4b4f      	ldr	r3, [pc, #316]	; (8007988 <xTaskIncrementTick+0x154>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	3301      	adds	r3, #1
 800784e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007850:	4a4d      	ldr	r2, [pc, #308]	; (8007988 <xTaskIncrementTick+0x154>)
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d120      	bne.n	800789e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800785c:	4b4b      	ldr	r3, [pc, #300]	; (800798c <xTaskIncrementTick+0x158>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00a      	beq.n	800787c <xTaskIncrementTick+0x48>
	__asm volatile
 8007866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786a:	f383 8811 	msr	BASEPRI, r3
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f3bf 8f4f 	dsb	sy
 8007876:	603b      	str	r3, [r7, #0]
}
 8007878:	bf00      	nop
 800787a:	e7fe      	b.n	800787a <xTaskIncrementTick+0x46>
 800787c:	4b43      	ldr	r3, [pc, #268]	; (800798c <xTaskIncrementTick+0x158>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	60fb      	str	r3, [r7, #12]
 8007882:	4b43      	ldr	r3, [pc, #268]	; (8007990 <xTaskIncrementTick+0x15c>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a41      	ldr	r2, [pc, #260]	; (800798c <xTaskIncrementTick+0x158>)
 8007888:	6013      	str	r3, [r2, #0]
 800788a:	4a41      	ldr	r2, [pc, #260]	; (8007990 <xTaskIncrementTick+0x15c>)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6013      	str	r3, [r2, #0]
 8007890:	4b40      	ldr	r3, [pc, #256]	; (8007994 <xTaskIncrementTick+0x160>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	3301      	adds	r3, #1
 8007896:	4a3f      	ldr	r2, [pc, #252]	; (8007994 <xTaskIncrementTick+0x160>)
 8007898:	6013      	str	r3, [r2, #0]
 800789a:	f000 fadb 	bl	8007e54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800789e:	4b3e      	ldr	r3, [pc, #248]	; (8007998 <xTaskIncrementTick+0x164>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d34d      	bcc.n	8007944 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078a8:	4b38      	ldr	r3, [pc, #224]	; (800798c <xTaskIncrementTick+0x158>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d101      	bne.n	80078b6 <xTaskIncrementTick+0x82>
 80078b2:	2301      	movs	r3, #1
 80078b4:	e000      	b.n	80078b8 <xTaskIncrementTick+0x84>
 80078b6:	2300      	movs	r3, #0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d004      	beq.n	80078c6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078bc:	4b36      	ldr	r3, [pc, #216]	; (8007998 <xTaskIncrementTick+0x164>)
 80078be:	f04f 32ff 	mov.w	r2, #4294967295
 80078c2:	601a      	str	r2, [r3, #0]
					break;
 80078c4:	e03e      	b.n	8007944 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80078c6:	4b31      	ldr	r3, [pc, #196]	; (800798c <xTaskIncrementTick+0x158>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80078d6:	693a      	ldr	r2, [r7, #16]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d203      	bcs.n	80078e6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80078de:	4a2e      	ldr	r2, [pc, #184]	; (8007998 <xTaskIncrementTick+0x164>)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6013      	str	r3, [r2, #0]
						break;
 80078e4:	e02e      	b.n	8007944 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	3304      	adds	r3, #4
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7fe fd26 	bl	800633c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d004      	beq.n	8007902 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	3318      	adds	r3, #24
 80078fc:	4618      	mov	r0, r3
 80078fe:	f7fe fd1d 	bl	800633c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007906:	2201      	movs	r2, #1
 8007908:	409a      	lsls	r2, r3
 800790a:	4b24      	ldr	r3, [pc, #144]	; (800799c <xTaskIncrementTick+0x168>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4313      	orrs	r3, r2
 8007910:	4a22      	ldr	r2, [pc, #136]	; (800799c <xTaskIncrementTick+0x168>)
 8007912:	6013      	str	r3, [r2, #0]
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007918:	4613      	mov	r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	4413      	add	r3, r2
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	4a1f      	ldr	r2, [pc, #124]	; (80079a0 <xTaskIncrementTick+0x16c>)
 8007922:	441a      	add	r2, r3
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	3304      	adds	r3, #4
 8007928:	4619      	mov	r1, r3
 800792a:	4610      	mov	r0, r2
 800792c:	f7fe fca9 	bl	8006282 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007934:	4b1b      	ldr	r3, [pc, #108]	; (80079a4 <xTaskIncrementTick+0x170>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793a:	429a      	cmp	r2, r3
 800793c:	d3b4      	bcc.n	80078a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800793e:	2301      	movs	r3, #1
 8007940:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007942:	e7b1      	b.n	80078a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007944:	4b17      	ldr	r3, [pc, #92]	; (80079a4 <xTaskIncrementTick+0x170>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800794a:	4915      	ldr	r1, [pc, #84]	; (80079a0 <xTaskIncrementTick+0x16c>)
 800794c:	4613      	mov	r3, r2
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	4413      	add	r3, r2
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	440b      	add	r3, r1
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d907      	bls.n	800796c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800795c:	2301      	movs	r3, #1
 800795e:	617b      	str	r3, [r7, #20]
 8007960:	e004      	b.n	800796c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007962:	4b11      	ldr	r3, [pc, #68]	; (80079a8 <xTaskIncrementTick+0x174>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	3301      	adds	r3, #1
 8007968:	4a0f      	ldr	r2, [pc, #60]	; (80079a8 <xTaskIncrementTick+0x174>)
 800796a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800796c:	4b0f      	ldr	r3, [pc, #60]	; (80079ac <xTaskIncrementTick+0x178>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d001      	beq.n	8007978 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8007974:	2301      	movs	r3, #1
 8007976:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007978:	697b      	ldr	r3, [r7, #20]
}
 800797a:	4618      	mov	r0, r3
 800797c:	3718      	adds	r7, #24
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	20000b2c 	.word	0x20000b2c
 8007988:	20000b08 	.word	0x20000b08
 800798c:	20000abc 	.word	0x20000abc
 8007990:	20000ac0 	.word	0x20000ac0
 8007994:	20000b1c 	.word	0x20000b1c
 8007998:	20000b24 	.word	0x20000b24
 800799c:	20000b0c 	.word	0x20000b0c
 80079a0:	20000a08 	.word	0x20000a08
 80079a4:	20000a04 	.word	0x20000a04
 80079a8:	20000b14 	.word	0x20000b14
 80079ac:	20000b18 	.word	0x20000b18

080079b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80079b0:	b480      	push	{r7}
 80079b2:	b087      	sub	sp, #28
 80079b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80079b6:	4b29      	ldr	r3, [pc, #164]	; (8007a5c <vTaskSwitchContext+0xac>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d003      	beq.n	80079c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80079be:	4b28      	ldr	r3, [pc, #160]	; (8007a60 <vTaskSwitchContext+0xb0>)
 80079c0:	2201      	movs	r2, #1
 80079c2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80079c4:	e044      	b.n	8007a50 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80079c6:	4b26      	ldr	r3, [pc, #152]	; (8007a60 <vTaskSwitchContext+0xb0>)
 80079c8:	2200      	movs	r2, #0
 80079ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80079cc:	4b25      	ldr	r3, [pc, #148]	; (8007a64 <vTaskSwitchContext+0xb4>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	fab3 f383 	clz	r3, r3
 80079d8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80079da:	7afb      	ldrb	r3, [r7, #11]
 80079dc:	f1c3 031f 	rsb	r3, r3, #31
 80079e0:	617b      	str	r3, [r7, #20]
 80079e2:	4921      	ldr	r1, [pc, #132]	; (8007a68 <vTaskSwitchContext+0xb8>)
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	4613      	mov	r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	4413      	add	r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	440b      	add	r3, r1
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d10a      	bne.n	8007a0c <vTaskSwitchContext+0x5c>
	__asm volatile
 80079f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fa:	f383 8811 	msr	BASEPRI, r3
 80079fe:	f3bf 8f6f 	isb	sy
 8007a02:	f3bf 8f4f 	dsb	sy
 8007a06:	607b      	str	r3, [r7, #4]
}
 8007a08:	bf00      	nop
 8007a0a:	e7fe      	b.n	8007a0a <vTaskSwitchContext+0x5a>
 8007a0c:	697a      	ldr	r2, [r7, #20]
 8007a0e:	4613      	mov	r3, r2
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	4413      	add	r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	4a14      	ldr	r2, [pc, #80]	; (8007a68 <vTaskSwitchContext+0xb8>)
 8007a18:	4413      	add	r3, r2
 8007a1a:	613b      	str	r3, [r7, #16]
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	685a      	ldr	r2, [r3, #4]
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	605a      	str	r2, [r3, #4]
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	685a      	ldr	r2, [r3, #4]
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	3308      	adds	r3, #8
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d104      	bne.n	8007a3c <vTaskSwitchContext+0x8c>
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	685a      	ldr	r2, [r3, #4]
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	605a      	str	r2, [r3, #4]
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	4a0a      	ldr	r2, [pc, #40]	; (8007a6c <vTaskSwitchContext+0xbc>)
 8007a44:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a46:	4b09      	ldr	r3, [pc, #36]	; (8007a6c <vTaskSwitchContext+0xbc>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	334c      	adds	r3, #76	; 0x4c
 8007a4c:	4a08      	ldr	r2, [pc, #32]	; (8007a70 <vTaskSwitchContext+0xc0>)
 8007a4e:	6013      	str	r3, [r2, #0]
}
 8007a50:	bf00      	nop
 8007a52:	371c      	adds	r7, #28
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr
 8007a5c:	20000b2c 	.word	0x20000b2c
 8007a60:	20000b18 	.word	0x20000b18
 8007a64:	20000b0c 	.word	0x20000b0c
 8007a68:	20000a08 	.word	0x20000a08
 8007a6c:	20000a04 	.word	0x20000a04
 8007a70:	20000078 	.word	0x20000078

08007a74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10a      	bne.n	8007a9a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a88:	f383 8811 	msr	BASEPRI, r3
 8007a8c:	f3bf 8f6f 	isb	sy
 8007a90:	f3bf 8f4f 	dsb	sy
 8007a94:	60fb      	str	r3, [r7, #12]
}
 8007a96:	bf00      	nop
 8007a98:	e7fe      	b.n	8007a98 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a9a:	4b07      	ldr	r3, [pc, #28]	; (8007ab8 <vTaskPlaceOnEventList+0x44>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	3318      	adds	r3, #24
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f7fe fc11 	bl	80062ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007aa8:	2101      	movs	r1, #1
 8007aaa:	6838      	ldr	r0, [r7, #0]
 8007aac:	f000 fbd6 	bl	800825c <prvAddCurrentTaskToDelayedList>
}
 8007ab0:	bf00      	nop
 8007ab2:	3710      	adds	r7, #16
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	20000a04 	.word	0x20000a04

08007abc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b086      	sub	sp, #24
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d10a      	bne.n	8007ae4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad2:	f383 8811 	msr	BASEPRI, r3
 8007ad6:	f3bf 8f6f 	isb	sy
 8007ada:	f3bf 8f4f 	dsb	sy
 8007ade:	617b      	str	r3, [r7, #20]
}
 8007ae0:	bf00      	nop
 8007ae2:	e7fe      	b.n	8007ae2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ae4:	4b0a      	ldr	r3, [pc, #40]	; (8007b10 <vTaskPlaceOnEventListRestricted+0x54>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	3318      	adds	r3, #24
 8007aea:	4619      	mov	r1, r3
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	f7fe fbc8 	bl	8006282 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d002      	beq.n	8007afe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007af8:	f04f 33ff 	mov.w	r3, #4294967295
 8007afc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007afe:	6879      	ldr	r1, [r7, #4]
 8007b00:	68b8      	ldr	r0, [r7, #8]
 8007b02:	f000 fbab 	bl	800825c <prvAddCurrentTaskToDelayedList>
	}
 8007b06:	bf00      	nop
 8007b08:	3718      	adds	r7, #24
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	20000a04 	.word	0x20000a04

08007b14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b086      	sub	sp, #24
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d10a      	bne.n	8007b40 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2e:	f383 8811 	msr	BASEPRI, r3
 8007b32:	f3bf 8f6f 	isb	sy
 8007b36:	f3bf 8f4f 	dsb	sy
 8007b3a:	60fb      	str	r3, [r7, #12]
}
 8007b3c:	bf00      	nop
 8007b3e:	e7fe      	b.n	8007b3e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	3318      	adds	r3, #24
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7fe fbf9 	bl	800633c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b4a:	4b1d      	ldr	r3, [pc, #116]	; (8007bc0 <xTaskRemoveFromEventList+0xac>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d11c      	bne.n	8007b8c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	3304      	adds	r3, #4
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7fe fbf0 	bl	800633c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b60:	2201      	movs	r2, #1
 8007b62:	409a      	lsls	r2, r3
 8007b64:	4b17      	ldr	r3, [pc, #92]	; (8007bc4 <xTaskRemoveFromEventList+0xb0>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	4a16      	ldr	r2, [pc, #88]	; (8007bc4 <xTaskRemoveFromEventList+0xb0>)
 8007b6c:	6013      	str	r3, [r2, #0]
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b72:	4613      	mov	r3, r2
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	4413      	add	r3, r2
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	4a13      	ldr	r2, [pc, #76]	; (8007bc8 <xTaskRemoveFromEventList+0xb4>)
 8007b7c:	441a      	add	r2, r3
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	3304      	adds	r3, #4
 8007b82:	4619      	mov	r1, r3
 8007b84:	4610      	mov	r0, r2
 8007b86:	f7fe fb7c 	bl	8006282 <vListInsertEnd>
 8007b8a:	e005      	b.n	8007b98 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	3318      	adds	r3, #24
 8007b90:	4619      	mov	r1, r3
 8007b92:	480e      	ldr	r0, [pc, #56]	; (8007bcc <xTaskRemoveFromEventList+0xb8>)
 8007b94:	f7fe fb75 	bl	8006282 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b9c:	4b0c      	ldr	r3, [pc, #48]	; (8007bd0 <xTaskRemoveFromEventList+0xbc>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d905      	bls.n	8007bb2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007baa:	4b0a      	ldr	r3, [pc, #40]	; (8007bd4 <xTaskRemoveFromEventList+0xc0>)
 8007bac:	2201      	movs	r2, #1
 8007bae:	601a      	str	r2, [r3, #0]
 8007bb0:	e001      	b.n	8007bb6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007bb6:	697b      	ldr	r3, [r7, #20]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3718      	adds	r7, #24
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	20000b2c 	.word	0x20000b2c
 8007bc4:	20000b0c 	.word	0x20000b0c
 8007bc8:	20000a08 	.word	0x20000a08
 8007bcc:	20000ac4 	.word	0x20000ac4
 8007bd0:	20000a04 	.word	0x20000a04
 8007bd4:	20000b18 	.word	0x20000b18

08007bd8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007be0:	4b06      	ldr	r3, [pc, #24]	; (8007bfc <vTaskInternalSetTimeOutState+0x24>)
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007be8:	4b05      	ldr	r3, [pc, #20]	; (8007c00 <vTaskInternalSetTimeOutState+0x28>)
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	605a      	str	r2, [r3, #4]
}
 8007bf0:	bf00      	nop
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr
 8007bfc:	20000b1c 	.word	0x20000b1c
 8007c00:	20000b08 	.word	0x20000b08

08007c04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b088      	sub	sp, #32
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d10a      	bne.n	8007c2a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c18:	f383 8811 	msr	BASEPRI, r3
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	f3bf 8f4f 	dsb	sy
 8007c24:	613b      	str	r3, [r7, #16]
}
 8007c26:	bf00      	nop
 8007c28:	e7fe      	b.n	8007c28 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d10a      	bne.n	8007c46 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c34:	f383 8811 	msr	BASEPRI, r3
 8007c38:	f3bf 8f6f 	isb	sy
 8007c3c:	f3bf 8f4f 	dsb	sy
 8007c40:	60fb      	str	r3, [r7, #12]
}
 8007c42:	bf00      	nop
 8007c44:	e7fe      	b.n	8007c44 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007c46:	f000 ff95 	bl	8008b74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007c4a:	4b1d      	ldr	r3, [pc, #116]	; (8007cc0 <xTaskCheckForTimeOut+0xbc>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	69ba      	ldr	r2, [r7, #24]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c62:	d102      	bne.n	8007c6a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007c64:	2300      	movs	r3, #0
 8007c66:	61fb      	str	r3, [r7, #28]
 8007c68:	e023      	b.n	8007cb2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	4b15      	ldr	r3, [pc, #84]	; (8007cc4 <xTaskCheckForTimeOut+0xc0>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d007      	beq.n	8007c86 <xTaskCheckForTimeOut+0x82>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	69ba      	ldr	r2, [r7, #24]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d302      	bcc.n	8007c86 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007c80:	2301      	movs	r3, #1
 8007c82:	61fb      	str	r3, [r7, #28]
 8007c84:	e015      	b.n	8007cb2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	697a      	ldr	r2, [r7, #20]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d20b      	bcs.n	8007ca8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	1ad2      	subs	r2, r2, r3
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f7ff ff9b 	bl	8007bd8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	61fb      	str	r3, [r7, #28]
 8007ca6:	e004      	b.n	8007cb2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	2200      	movs	r2, #0
 8007cac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007cb2:	f000 ff8f 	bl	8008bd4 <vPortExitCritical>

	return xReturn;
 8007cb6:	69fb      	ldr	r3, [r7, #28]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3720      	adds	r7, #32
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	20000b08 	.word	0x20000b08
 8007cc4:	20000b1c 	.word	0x20000b1c

08007cc8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007cc8:	b480      	push	{r7}
 8007cca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ccc:	4b03      	ldr	r3, [pc, #12]	; (8007cdc <vTaskMissedYield+0x14>)
 8007cce:	2201      	movs	r2, #1
 8007cd0:	601a      	str	r2, [r3, #0]
}
 8007cd2:	bf00      	nop
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr
 8007cdc:	20000b18 	.word	0x20000b18

08007ce0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ce8:	f000 f852 	bl	8007d90 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007cec:	4b06      	ldr	r3, [pc, #24]	; (8007d08 <prvIdleTask+0x28>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d9f9      	bls.n	8007ce8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007cf4:	4b05      	ldr	r3, [pc, #20]	; (8007d0c <prvIdleTask+0x2c>)
 8007cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cfa:	601a      	str	r2, [r3, #0]
 8007cfc:	f3bf 8f4f 	dsb	sy
 8007d00:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d04:	e7f0      	b.n	8007ce8 <prvIdleTask+0x8>
 8007d06:	bf00      	nop
 8007d08:	20000a08 	.word	0x20000a08
 8007d0c:	e000ed04 	.word	0xe000ed04

08007d10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d16:	2300      	movs	r3, #0
 8007d18:	607b      	str	r3, [r7, #4]
 8007d1a:	e00c      	b.n	8007d36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	4413      	add	r3, r2
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	4a12      	ldr	r2, [pc, #72]	; (8007d70 <prvInitialiseTaskLists+0x60>)
 8007d28:	4413      	add	r3, r2
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7fe fa7c 	bl	8006228 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	3301      	adds	r3, #1
 8007d34:	607b      	str	r3, [r7, #4]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2b06      	cmp	r3, #6
 8007d3a:	d9ef      	bls.n	8007d1c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007d3c:	480d      	ldr	r0, [pc, #52]	; (8007d74 <prvInitialiseTaskLists+0x64>)
 8007d3e:	f7fe fa73 	bl	8006228 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d42:	480d      	ldr	r0, [pc, #52]	; (8007d78 <prvInitialiseTaskLists+0x68>)
 8007d44:	f7fe fa70 	bl	8006228 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007d48:	480c      	ldr	r0, [pc, #48]	; (8007d7c <prvInitialiseTaskLists+0x6c>)
 8007d4a:	f7fe fa6d 	bl	8006228 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007d4e:	480c      	ldr	r0, [pc, #48]	; (8007d80 <prvInitialiseTaskLists+0x70>)
 8007d50:	f7fe fa6a 	bl	8006228 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007d54:	480b      	ldr	r0, [pc, #44]	; (8007d84 <prvInitialiseTaskLists+0x74>)
 8007d56:	f7fe fa67 	bl	8006228 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007d5a:	4b0b      	ldr	r3, [pc, #44]	; (8007d88 <prvInitialiseTaskLists+0x78>)
 8007d5c:	4a05      	ldr	r2, [pc, #20]	; (8007d74 <prvInitialiseTaskLists+0x64>)
 8007d5e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007d60:	4b0a      	ldr	r3, [pc, #40]	; (8007d8c <prvInitialiseTaskLists+0x7c>)
 8007d62:	4a05      	ldr	r2, [pc, #20]	; (8007d78 <prvInitialiseTaskLists+0x68>)
 8007d64:	601a      	str	r2, [r3, #0]
}
 8007d66:	bf00      	nop
 8007d68:	3708      	adds	r7, #8
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	20000a08 	.word	0x20000a08
 8007d74:	20000a94 	.word	0x20000a94
 8007d78:	20000aa8 	.word	0x20000aa8
 8007d7c:	20000ac4 	.word	0x20000ac4
 8007d80:	20000ad8 	.word	0x20000ad8
 8007d84:	20000af0 	.word	0x20000af0
 8007d88:	20000abc 	.word	0x20000abc
 8007d8c:	20000ac0 	.word	0x20000ac0

08007d90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d96:	e019      	b.n	8007dcc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007d98:	f000 feec 	bl	8008b74 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007d9c:	4b10      	ldr	r3, [pc, #64]	; (8007de0 <prvCheckTasksWaitingTermination+0x50>)
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	3304      	adds	r3, #4
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7fe fac7 	bl	800633c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007dae:	4b0d      	ldr	r3, [pc, #52]	; (8007de4 <prvCheckTasksWaitingTermination+0x54>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	3b01      	subs	r3, #1
 8007db4:	4a0b      	ldr	r2, [pc, #44]	; (8007de4 <prvCheckTasksWaitingTermination+0x54>)
 8007db6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007db8:	4b0b      	ldr	r3, [pc, #44]	; (8007de8 <prvCheckTasksWaitingTermination+0x58>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	4a0a      	ldr	r2, [pc, #40]	; (8007de8 <prvCheckTasksWaitingTermination+0x58>)
 8007dc0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007dc2:	f000 ff07 	bl	8008bd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 f810 	bl	8007dec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007dcc:	4b06      	ldr	r3, [pc, #24]	; (8007de8 <prvCheckTasksWaitingTermination+0x58>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d1e1      	bne.n	8007d98 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007dd4:	bf00      	nop
 8007dd6:	bf00      	nop
 8007dd8:	3708      	adds	r7, #8
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	20000ad8 	.word	0x20000ad8
 8007de4:	20000b04 	.word	0x20000b04
 8007de8:	20000aec 	.word	0x20000aec

08007dec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	334c      	adds	r3, #76	; 0x4c
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f001 fbf7 	bl	80095ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d108      	bne.n	8007e1a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f001 f897 	bl	8008f40 <vPortFree>
				vPortFree( pxTCB );
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f001 f894 	bl	8008f40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e18:	e018      	b.n	8007e4c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d103      	bne.n	8007e2c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f001 f88b 	bl	8008f40 <vPortFree>
	}
 8007e2a:	e00f      	b.n	8007e4c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d00a      	beq.n	8007e4c <prvDeleteTCB+0x60>
	__asm volatile
 8007e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3a:	f383 8811 	msr	BASEPRI, r3
 8007e3e:	f3bf 8f6f 	isb	sy
 8007e42:	f3bf 8f4f 	dsb	sy
 8007e46:	60fb      	str	r3, [r7, #12]
}
 8007e48:	bf00      	nop
 8007e4a:	e7fe      	b.n	8007e4a <prvDeleteTCB+0x5e>
	}
 8007e4c:	bf00      	nop
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e5a:	4b0f      	ldr	r3, [pc, #60]	; (8007e98 <prvResetNextTaskUnblockTime+0x44>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d101      	bne.n	8007e68 <prvResetNextTaskUnblockTime+0x14>
 8007e64:	2301      	movs	r3, #1
 8007e66:	e000      	b.n	8007e6a <prvResetNextTaskUnblockTime+0x16>
 8007e68:	2300      	movs	r3, #0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d004      	beq.n	8007e78 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007e6e:	4b0b      	ldr	r3, [pc, #44]	; (8007e9c <prvResetNextTaskUnblockTime+0x48>)
 8007e70:	f04f 32ff 	mov.w	r2, #4294967295
 8007e74:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007e76:	e008      	b.n	8007e8a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007e78:	4b07      	ldr	r3, [pc, #28]	; (8007e98 <prvResetNextTaskUnblockTime+0x44>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	4a05      	ldr	r2, [pc, #20]	; (8007e9c <prvResetNextTaskUnblockTime+0x48>)
 8007e88:	6013      	str	r3, [r2, #0]
}
 8007e8a:	bf00      	nop
 8007e8c:	370c      	adds	r7, #12
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	20000abc 	.word	0x20000abc
 8007e9c:	20000b24 	.word	0x20000b24

08007ea0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007ea6:	4b0b      	ldr	r3, [pc, #44]	; (8007ed4 <xTaskGetSchedulerState+0x34>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d102      	bne.n	8007eb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	607b      	str	r3, [r7, #4]
 8007eb2:	e008      	b.n	8007ec6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007eb4:	4b08      	ldr	r3, [pc, #32]	; (8007ed8 <xTaskGetSchedulerState+0x38>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d102      	bne.n	8007ec2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007ebc:	2302      	movs	r3, #2
 8007ebe:	607b      	str	r3, [r7, #4]
 8007ec0:	e001      	b.n	8007ec6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007ec6:	687b      	ldr	r3, [r7, #4]
	}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr
 8007ed4:	20000b10 	.word	0x20000b10
 8007ed8:	20000b2c 	.word	0x20000b2c

08007edc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d06e      	beq.n	8007fd0 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ef6:	4b39      	ldr	r3, [pc, #228]	; (8007fdc <xTaskPriorityInherit+0x100>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d25e      	bcs.n	8007fbe <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	699b      	ldr	r3, [r3, #24]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	db06      	blt.n	8007f16 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f08:	4b34      	ldr	r3, [pc, #208]	; (8007fdc <xTaskPriorityInherit+0x100>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f0e:	f1c3 0207 	rsb	r2, r3, #7
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	6959      	ldr	r1, [r3, #20]
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f1e:	4613      	mov	r3, r2
 8007f20:	009b      	lsls	r3, r3, #2
 8007f22:	4413      	add	r3, r2
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	4a2e      	ldr	r2, [pc, #184]	; (8007fe0 <xTaskPriorityInherit+0x104>)
 8007f28:	4413      	add	r3, r2
 8007f2a:	4299      	cmp	r1, r3
 8007f2c:	d101      	bne.n	8007f32 <xTaskPriorityInherit+0x56>
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e000      	b.n	8007f34 <xTaskPriorityInherit+0x58>
 8007f32:	2300      	movs	r3, #0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d03a      	beq.n	8007fae <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	3304      	adds	r3, #4
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7fe f9fd 	bl	800633c <uxListRemove>
 8007f42:	4603      	mov	r3, r0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d115      	bne.n	8007f74 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f4c:	4924      	ldr	r1, [pc, #144]	; (8007fe0 <xTaskPriorityInherit+0x104>)
 8007f4e:	4613      	mov	r3, r2
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	4413      	add	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	440b      	add	r3, r1
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d10a      	bne.n	8007f74 <xTaskPriorityInherit+0x98>
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f62:	2201      	movs	r2, #1
 8007f64:	fa02 f303 	lsl.w	r3, r2, r3
 8007f68:	43da      	mvns	r2, r3
 8007f6a:	4b1e      	ldr	r3, [pc, #120]	; (8007fe4 <xTaskPriorityInherit+0x108>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4013      	ands	r3, r2
 8007f70:	4a1c      	ldr	r2, [pc, #112]	; (8007fe4 <xTaskPriorityInherit+0x108>)
 8007f72:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007f74:	4b19      	ldr	r3, [pc, #100]	; (8007fdc <xTaskPriorityInherit+0x100>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f82:	2201      	movs	r2, #1
 8007f84:	409a      	lsls	r2, r3
 8007f86:	4b17      	ldr	r3, [pc, #92]	; (8007fe4 <xTaskPriorityInherit+0x108>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	4a15      	ldr	r2, [pc, #84]	; (8007fe4 <xTaskPriorityInherit+0x108>)
 8007f8e:	6013      	str	r3, [r2, #0]
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f94:	4613      	mov	r3, r2
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	4413      	add	r3, r2
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	4a10      	ldr	r2, [pc, #64]	; (8007fe0 <xTaskPriorityInherit+0x104>)
 8007f9e:	441a      	add	r2, r3
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	3304      	adds	r3, #4
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	4610      	mov	r0, r2
 8007fa8:	f7fe f96b 	bl	8006282 <vListInsertEnd>
 8007fac:	e004      	b.n	8007fb8 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007fae:	4b0b      	ldr	r3, [pc, #44]	; (8007fdc <xTaskPriorityInherit+0x100>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	60fb      	str	r3, [r7, #12]
 8007fbc:	e008      	b.n	8007fd0 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fc2:	4b06      	ldr	r3, [pc, #24]	; (8007fdc <xTaskPriorityInherit+0x100>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d201      	bcs.n	8007fd0 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
	}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	20000a04 	.word	0x20000a04
 8007fe0:	20000a08 	.word	0x20000a08
 8007fe4:	20000b0c 	.word	0x20000b0c

08007fe8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b086      	sub	sp, #24
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d06e      	beq.n	80080dc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007ffe:	4b3a      	ldr	r3, [pc, #232]	; (80080e8 <xTaskPriorityDisinherit+0x100>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	693a      	ldr	r2, [r7, #16]
 8008004:	429a      	cmp	r2, r3
 8008006:	d00a      	beq.n	800801e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800800c:	f383 8811 	msr	BASEPRI, r3
 8008010:	f3bf 8f6f 	isb	sy
 8008014:	f3bf 8f4f 	dsb	sy
 8008018:	60fb      	str	r3, [r7, #12]
}
 800801a:	bf00      	nop
 800801c:	e7fe      	b.n	800801c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008022:	2b00      	cmp	r3, #0
 8008024:	d10a      	bne.n	800803c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802a:	f383 8811 	msr	BASEPRI, r3
 800802e:	f3bf 8f6f 	isb	sy
 8008032:	f3bf 8f4f 	dsb	sy
 8008036:	60bb      	str	r3, [r7, #8]
}
 8008038:	bf00      	nop
 800803a:	e7fe      	b.n	800803a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008040:	1e5a      	subs	r2, r3, #1
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800804e:	429a      	cmp	r2, r3
 8008050:	d044      	beq.n	80080dc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008056:	2b00      	cmp	r3, #0
 8008058:	d140      	bne.n	80080dc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	3304      	adds	r3, #4
 800805e:	4618      	mov	r0, r3
 8008060:	f7fe f96c 	bl	800633c <uxListRemove>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d115      	bne.n	8008096 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800806e:	491f      	ldr	r1, [pc, #124]	; (80080ec <xTaskPriorityDisinherit+0x104>)
 8008070:	4613      	mov	r3, r2
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	4413      	add	r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	440b      	add	r3, r1
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d10a      	bne.n	8008096 <xTaskPriorityDisinherit+0xae>
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008084:	2201      	movs	r2, #1
 8008086:	fa02 f303 	lsl.w	r3, r2, r3
 800808a:	43da      	mvns	r2, r3
 800808c:	4b18      	ldr	r3, [pc, #96]	; (80080f0 <xTaskPriorityDisinherit+0x108>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4013      	ands	r3, r2
 8008092:	4a17      	ldr	r2, [pc, #92]	; (80080f0 <xTaskPriorityDisinherit+0x108>)
 8008094:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a2:	f1c3 0207 	rsb	r2, r3, #7
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ae:	2201      	movs	r2, #1
 80080b0:	409a      	lsls	r2, r3
 80080b2:	4b0f      	ldr	r3, [pc, #60]	; (80080f0 <xTaskPriorityDisinherit+0x108>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4313      	orrs	r3, r2
 80080b8:	4a0d      	ldr	r2, [pc, #52]	; (80080f0 <xTaskPriorityDisinherit+0x108>)
 80080ba:	6013      	str	r3, [r2, #0]
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080c0:	4613      	mov	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	4413      	add	r3, r2
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	4a08      	ldr	r2, [pc, #32]	; (80080ec <xTaskPriorityDisinherit+0x104>)
 80080ca:	441a      	add	r2, r3
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	3304      	adds	r3, #4
 80080d0:	4619      	mov	r1, r3
 80080d2:	4610      	mov	r0, r2
 80080d4:	f7fe f8d5 	bl	8006282 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80080d8:	2301      	movs	r3, #1
 80080da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80080dc:	697b      	ldr	r3, [r7, #20]
	}
 80080de:	4618      	mov	r0, r3
 80080e0:	3718      	adds	r7, #24
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	20000a04 	.word	0x20000a04
 80080ec:	20000a08 	.word	0x20000a08
 80080f0:	20000b0c 	.word	0x20000b0c

080080f4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b088      	sub	sp, #32
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008102:	2301      	movs	r3, #1
 8008104:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2b00      	cmp	r3, #0
 800810a:	f000 8088 	beq.w	800821e <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008112:	2b00      	cmp	r3, #0
 8008114:	d10a      	bne.n	800812c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811a:	f383 8811 	msr	BASEPRI, r3
 800811e:	f3bf 8f6f 	isb	sy
 8008122:	f3bf 8f4f 	dsb	sy
 8008126:	60fb      	str	r3, [r7, #12]
}
 8008128:	bf00      	nop
 800812a:	e7fe      	b.n	800812a <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008130:	683a      	ldr	r2, [r7, #0]
 8008132:	429a      	cmp	r2, r3
 8008134:	d902      	bls.n	800813c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	61fb      	str	r3, [r7, #28]
 800813a:	e002      	b.n	8008142 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008140:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008146:	69fa      	ldr	r2, [r7, #28]
 8008148:	429a      	cmp	r2, r3
 800814a:	d068      	beq.n	800821e <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800814c:	69bb      	ldr	r3, [r7, #24]
 800814e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008150:	697a      	ldr	r2, [r7, #20]
 8008152:	429a      	cmp	r2, r3
 8008154:	d163      	bne.n	800821e <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008156:	4b34      	ldr	r3, [pc, #208]	; (8008228 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	69ba      	ldr	r2, [r7, #24]
 800815c:	429a      	cmp	r2, r3
 800815e:	d10a      	bne.n	8008176 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8008160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008164:	f383 8811 	msr	BASEPRI, r3
 8008168:	f3bf 8f6f 	isb	sy
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	60bb      	str	r3, [r7, #8]
}
 8008172:	bf00      	nop
 8008174:	e7fe      	b.n	8008174 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800817a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800817c:	69bb      	ldr	r3, [r7, #24]
 800817e:	69fa      	ldr	r2, [r7, #28]
 8008180:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	699b      	ldr	r3, [r3, #24]
 8008186:	2b00      	cmp	r3, #0
 8008188:	db04      	blt.n	8008194 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	f1c3 0207 	rsb	r2, r3, #7
 8008190:	69bb      	ldr	r3, [r7, #24]
 8008192:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	6959      	ldr	r1, [r3, #20]
 8008198:	693a      	ldr	r2, [r7, #16]
 800819a:	4613      	mov	r3, r2
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	4413      	add	r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4a22      	ldr	r2, [pc, #136]	; (800822c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80081a4:	4413      	add	r3, r2
 80081a6:	4299      	cmp	r1, r3
 80081a8:	d101      	bne.n	80081ae <vTaskPriorityDisinheritAfterTimeout+0xba>
 80081aa:	2301      	movs	r3, #1
 80081ac:	e000      	b.n	80081b0 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 80081ae:	2300      	movs	r3, #0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d034      	beq.n	800821e <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	3304      	adds	r3, #4
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7fe f8bf 	bl	800633c <uxListRemove>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d115      	bne.n	80081f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081c8:	4918      	ldr	r1, [pc, #96]	; (800822c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80081ca:	4613      	mov	r3, r2
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	4413      	add	r3, r2
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	440b      	add	r3, r1
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d10a      	bne.n	80081f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081de:	2201      	movs	r2, #1
 80081e0:	fa02 f303 	lsl.w	r3, r2, r3
 80081e4:	43da      	mvns	r2, r3
 80081e6:	4b12      	ldr	r3, [pc, #72]	; (8008230 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4013      	ands	r3, r2
 80081ec:	4a10      	ldr	r2, [pc, #64]	; (8008230 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80081ee:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f4:	2201      	movs	r2, #1
 80081f6:	409a      	lsls	r2, r3
 80081f8:	4b0d      	ldr	r3, [pc, #52]	; (8008230 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	4a0c      	ldr	r2, [pc, #48]	; (8008230 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008200:	6013      	str	r3, [r2, #0]
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008206:	4613      	mov	r3, r2
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	4413      	add	r3, r2
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	4a07      	ldr	r2, [pc, #28]	; (800822c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008210:	441a      	add	r2, r3
 8008212:	69bb      	ldr	r3, [r7, #24]
 8008214:	3304      	adds	r3, #4
 8008216:	4619      	mov	r1, r3
 8008218:	4610      	mov	r0, r2
 800821a:	f7fe f832 	bl	8006282 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800821e:	bf00      	nop
 8008220:	3720      	adds	r7, #32
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	20000a04 	.word	0x20000a04
 800822c:	20000a08 	.word	0x20000a08
 8008230:	20000b0c 	.word	0x20000b0c

08008234 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8008234:	b480      	push	{r7}
 8008236:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008238:	4b07      	ldr	r3, [pc, #28]	; (8008258 <pvTaskIncrementMutexHeldCount+0x24>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d004      	beq.n	800824a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008240:	4b05      	ldr	r3, [pc, #20]	; (8008258 <pvTaskIncrementMutexHeldCount+0x24>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008246:	3201      	adds	r2, #1
 8008248:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800824a:	4b03      	ldr	r3, [pc, #12]	; (8008258 <pvTaskIncrementMutexHeldCount+0x24>)
 800824c:	681b      	ldr	r3, [r3, #0]
	}
 800824e:	4618      	mov	r0, r3
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr
 8008258:	20000a04 	.word	0x20000a04

0800825c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008266:	4b29      	ldr	r3, [pc, #164]	; (800830c <prvAddCurrentTaskToDelayedList+0xb0>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800826c:	4b28      	ldr	r3, [pc, #160]	; (8008310 <prvAddCurrentTaskToDelayedList+0xb4>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	3304      	adds	r3, #4
 8008272:	4618      	mov	r0, r3
 8008274:	f7fe f862 	bl	800633c <uxListRemove>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d10b      	bne.n	8008296 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800827e:	4b24      	ldr	r3, [pc, #144]	; (8008310 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008284:	2201      	movs	r2, #1
 8008286:	fa02 f303 	lsl.w	r3, r2, r3
 800828a:	43da      	mvns	r2, r3
 800828c:	4b21      	ldr	r3, [pc, #132]	; (8008314 <prvAddCurrentTaskToDelayedList+0xb8>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4013      	ands	r3, r2
 8008292:	4a20      	ldr	r2, [pc, #128]	; (8008314 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008294:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800829c:	d10a      	bne.n	80082b4 <prvAddCurrentTaskToDelayedList+0x58>
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d007      	beq.n	80082b4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082a4:	4b1a      	ldr	r3, [pc, #104]	; (8008310 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	3304      	adds	r3, #4
 80082aa:	4619      	mov	r1, r3
 80082ac:	481a      	ldr	r0, [pc, #104]	; (8008318 <prvAddCurrentTaskToDelayedList+0xbc>)
 80082ae:	f7fd ffe8 	bl	8006282 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80082b2:	e026      	b.n	8008302 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4413      	add	r3, r2
 80082ba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80082bc:	4b14      	ldr	r3, [pc, #80]	; (8008310 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68ba      	ldr	r2, [r7, #8]
 80082c2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80082c4:	68ba      	ldr	r2, [r7, #8]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d209      	bcs.n	80082e0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082cc:	4b13      	ldr	r3, [pc, #76]	; (800831c <prvAddCurrentTaskToDelayedList+0xc0>)
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	4b0f      	ldr	r3, [pc, #60]	; (8008310 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	3304      	adds	r3, #4
 80082d6:	4619      	mov	r1, r3
 80082d8:	4610      	mov	r0, r2
 80082da:	f7fd fff6 	bl	80062ca <vListInsert>
}
 80082de:	e010      	b.n	8008302 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082e0:	4b0f      	ldr	r3, [pc, #60]	; (8008320 <prvAddCurrentTaskToDelayedList+0xc4>)
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	4b0a      	ldr	r3, [pc, #40]	; (8008310 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	3304      	adds	r3, #4
 80082ea:	4619      	mov	r1, r3
 80082ec:	4610      	mov	r0, r2
 80082ee:	f7fd ffec 	bl	80062ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80082f2:	4b0c      	ldr	r3, [pc, #48]	; (8008324 <prvAddCurrentTaskToDelayedList+0xc8>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68ba      	ldr	r2, [r7, #8]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d202      	bcs.n	8008302 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80082fc:	4a09      	ldr	r2, [pc, #36]	; (8008324 <prvAddCurrentTaskToDelayedList+0xc8>)
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	6013      	str	r3, [r2, #0]
}
 8008302:	bf00      	nop
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	20000b08 	.word	0x20000b08
 8008310:	20000a04 	.word	0x20000a04
 8008314:	20000b0c 	.word	0x20000b0c
 8008318:	20000af0 	.word	0x20000af0
 800831c:	20000ac0 	.word	0x20000ac0
 8008320:	20000abc 	.word	0x20000abc
 8008324:	20000b24 	.word	0x20000b24

08008328 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b08a      	sub	sp, #40	; 0x28
 800832c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800832e:	2300      	movs	r3, #0
 8008330:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008332:	f000 fab1 	bl	8008898 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008336:	4b1c      	ldr	r3, [pc, #112]	; (80083a8 <xTimerCreateTimerTask+0x80>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d021      	beq.n	8008382 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800833e:	2300      	movs	r3, #0
 8008340:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008342:	2300      	movs	r3, #0
 8008344:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008346:	1d3a      	adds	r2, r7, #4
 8008348:	f107 0108 	add.w	r1, r7, #8
 800834c:	f107 030c 	add.w	r3, r7, #12
 8008350:	4618      	mov	r0, r3
 8008352:	f7f7 ffaf 	bl	80002b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008356:	6879      	ldr	r1, [r7, #4]
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	9202      	str	r2, [sp, #8]
 800835e:	9301      	str	r3, [sp, #4]
 8008360:	2302      	movs	r3, #2
 8008362:	9300      	str	r3, [sp, #0]
 8008364:	2300      	movs	r3, #0
 8008366:	460a      	mov	r2, r1
 8008368:	4910      	ldr	r1, [pc, #64]	; (80083ac <xTimerCreateTimerTask+0x84>)
 800836a:	4811      	ldr	r0, [pc, #68]	; (80083b0 <xTimerCreateTimerTask+0x88>)
 800836c:	f7fe ff62 	bl	8007234 <xTaskCreateStatic>
 8008370:	4603      	mov	r3, r0
 8008372:	4a10      	ldr	r2, [pc, #64]	; (80083b4 <xTimerCreateTimerTask+0x8c>)
 8008374:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008376:	4b0f      	ldr	r3, [pc, #60]	; (80083b4 <xTimerCreateTimerTask+0x8c>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d001      	beq.n	8008382 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800837e:	2301      	movs	r3, #1
 8008380:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d10a      	bne.n	800839e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838c:	f383 8811 	msr	BASEPRI, r3
 8008390:	f3bf 8f6f 	isb	sy
 8008394:	f3bf 8f4f 	dsb	sy
 8008398:	613b      	str	r3, [r7, #16]
}
 800839a:	bf00      	nop
 800839c:	e7fe      	b.n	800839c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800839e:	697b      	ldr	r3, [r7, #20]
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3718      	adds	r7, #24
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	20000b60 	.word	0x20000b60
 80083ac:	0800a624 	.word	0x0800a624
 80083b0:	080084d5 	.word	0x080084d5
 80083b4:	20000b64 	.word	0x20000b64

080083b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b08a      	sub	sp, #40	; 0x28
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	607a      	str	r2, [r7, #4]
 80083c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80083c6:	2300      	movs	r3, #0
 80083c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10a      	bne.n	80083e6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80083d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	623b      	str	r3, [r7, #32]
}
 80083e2:	bf00      	nop
 80083e4:	e7fe      	b.n	80083e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80083e6:	4b1a      	ldr	r3, [pc, #104]	; (8008450 <xTimerGenericCommand+0x98>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d02a      	beq.n	8008444 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	2b05      	cmp	r3, #5
 80083fe:	dc18      	bgt.n	8008432 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008400:	f7ff fd4e 	bl	8007ea0 <xTaskGetSchedulerState>
 8008404:	4603      	mov	r3, r0
 8008406:	2b02      	cmp	r3, #2
 8008408:	d109      	bne.n	800841e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800840a:	4b11      	ldr	r3, [pc, #68]	; (8008450 <xTimerGenericCommand+0x98>)
 800840c:	6818      	ldr	r0, [r3, #0]
 800840e:	f107 0114 	add.w	r1, r7, #20
 8008412:	2300      	movs	r3, #0
 8008414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008416:	f7fe f8f7 	bl	8006608 <xQueueGenericSend>
 800841a:	6278      	str	r0, [r7, #36]	; 0x24
 800841c:	e012      	b.n	8008444 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800841e:	4b0c      	ldr	r3, [pc, #48]	; (8008450 <xTimerGenericCommand+0x98>)
 8008420:	6818      	ldr	r0, [r3, #0]
 8008422:	f107 0114 	add.w	r1, r7, #20
 8008426:	2300      	movs	r3, #0
 8008428:	2200      	movs	r2, #0
 800842a:	f7fe f8ed 	bl	8006608 <xQueueGenericSend>
 800842e:	6278      	str	r0, [r7, #36]	; 0x24
 8008430:	e008      	b.n	8008444 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008432:	4b07      	ldr	r3, [pc, #28]	; (8008450 <xTimerGenericCommand+0x98>)
 8008434:	6818      	ldr	r0, [r3, #0]
 8008436:	f107 0114 	add.w	r1, r7, #20
 800843a:	2300      	movs	r3, #0
 800843c:	683a      	ldr	r2, [r7, #0]
 800843e:	f7fe f9e1 	bl	8006804 <xQueueGenericSendFromISR>
 8008442:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008446:	4618      	mov	r0, r3
 8008448:	3728      	adds	r7, #40	; 0x28
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	20000b60 	.word	0x20000b60

08008454 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b088      	sub	sp, #32
 8008458:	af02      	add	r7, sp, #8
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800845e:	4b1c      	ldr	r3, [pc, #112]	; (80084d0 <prvProcessExpiredTimer+0x7c>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	3304      	adds	r3, #4
 800846c:	4618      	mov	r0, r3
 800846e:	f7fd ff65 	bl	800633c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	69db      	ldr	r3, [r3, #28]
 8008476:	2b01      	cmp	r3, #1
 8008478:	d122      	bne.n	80084c0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	699a      	ldr	r2, [r3, #24]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	18d1      	adds	r1, r2, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	683a      	ldr	r2, [r7, #0]
 8008486:	6978      	ldr	r0, [r7, #20]
 8008488:	f000 f8c8 	bl	800861c <prvInsertTimerInActiveList>
 800848c:	4603      	mov	r3, r0
 800848e:	2b00      	cmp	r3, #0
 8008490:	d016      	beq.n	80084c0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008492:	2300      	movs	r3, #0
 8008494:	9300      	str	r3, [sp, #0]
 8008496:	2300      	movs	r3, #0
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	2100      	movs	r1, #0
 800849c:	6978      	ldr	r0, [r7, #20]
 800849e:	f7ff ff8b 	bl	80083b8 <xTimerGenericCommand>
 80084a2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d10a      	bne.n	80084c0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80084aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ae:	f383 8811 	msr	BASEPRI, r3
 80084b2:	f3bf 8f6f 	isb	sy
 80084b6:	f3bf 8f4f 	dsb	sy
 80084ba:	60fb      	str	r3, [r7, #12]
}
 80084bc:	bf00      	nop
 80084be:	e7fe      	b.n	80084be <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c4:	6978      	ldr	r0, [r7, #20]
 80084c6:	4798      	blx	r3
}
 80084c8:	bf00      	nop
 80084ca:	3718      	adds	r7, #24
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	20000b58 	.word	0x20000b58

080084d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084dc:	f107 0308 	add.w	r3, r7, #8
 80084e0:	4618      	mov	r0, r3
 80084e2:	f000 f857 	bl	8008594 <prvGetNextExpireTime>
 80084e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	4619      	mov	r1, r3
 80084ec:	68f8      	ldr	r0, [r7, #12]
 80084ee:	f000 f803 	bl	80084f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80084f2:	f000 f8d5 	bl	80086a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084f6:	e7f1      	b.n	80084dc <prvTimerTask+0x8>

080084f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008502:	f7ff f8dd 	bl	80076c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008506:	f107 0308 	add.w	r3, r7, #8
 800850a:	4618      	mov	r0, r3
 800850c:	f000 f866 	bl	80085dc <prvSampleTimeNow>
 8008510:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d130      	bne.n	800857a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d10a      	bne.n	8008534 <prvProcessTimerOrBlockTask+0x3c>
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	429a      	cmp	r2, r3
 8008524:	d806      	bhi.n	8008534 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008526:	f7ff f8d9 	bl	80076dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800852a:	68f9      	ldr	r1, [r7, #12]
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f7ff ff91 	bl	8008454 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008532:	e024      	b.n	800857e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d008      	beq.n	800854c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800853a:	4b13      	ldr	r3, [pc, #76]	; (8008588 <prvProcessTimerOrBlockTask+0x90>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	bf0c      	ite	eq
 8008544:	2301      	moveq	r3, #1
 8008546:	2300      	movne	r3, #0
 8008548:	b2db      	uxtb	r3, r3
 800854a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800854c:	4b0f      	ldr	r3, [pc, #60]	; (800858c <prvProcessTimerOrBlockTask+0x94>)
 800854e:	6818      	ldr	r0, [r3, #0]
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	1ad3      	subs	r3, r2, r3
 8008556:	683a      	ldr	r2, [r7, #0]
 8008558:	4619      	mov	r1, r3
 800855a:	f7fe fe37 	bl	80071cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800855e:	f7ff f8bd 	bl	80076dc <xTaskResumeAll>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d10a      	bne.n	800857e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008568:	4b09      	ldr	r3, [pc, #36]	; (8008590 <prvProcessTimerOrBlockTask+0x98>)
 800856a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800856e:	601a      	str	r2, [r3, #0]
 8008570:	f3bf 8f4f 	dsb	sy
 8008574:	f3bf 8f6f 	isb	sy
}
 8008578:	e001      	b.n	800857e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800857a:	f7ff f8af 	bl	80076dc <xTaskResumeAll>
}
 800857e:	bf00      	nop
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	20000b5c 	.word	0x20000b5c
 800858c:	20000b60 	.word	0x20000b60
 8008590:	e000ed04 	.word	0xe000ed04

08008594 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008594:	b480      	push	{r7}
 8008596:	b085      	sub	sp, #20
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800859c:	4b0e      	ldr	r3, [pc, #56]	; (80085d8 <prvGetNextExpireTime+0x44>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	bf0c      	ite	eq
 80085a6:	2301      	moveq	r3, #1
 80085a8:	2300      	movne	r3, #0
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	461a      	mov	r2, r3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d105      	bne.n	80085c6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085ba:	4b07      	ldr	r3, [pc, #28]	; (80085d8 <prvGetNextExpireTime+0x44>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	60fb      	str	r3, [r7, #12]
 80085c4:	e001      	b.n	80085ca <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80085c6:	2300      	movs	r3, #0
 80085c8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80085ca:	68fb      	ldr	r3, [r7, #12]
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3714      	adds	r7, #20
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr
 80085d8:	20000b58 	.word	0x20000b58

080085dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80085e4:	f7ff f916 	bl	8007814 <xTaskGetTickCount>
 80085e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80085ea:	4b0b      	ldr	r3, [pc, #44]	; (8008618 <prvSampleTimeNow+0x3c>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	68fa      	ldr	r2, [r7, #12]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d205      	bcs.n	8008600 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80085f4:	f000 f8ee 	bl	80087d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	601a      	str	r2, [r3, #0]
 80085fe:	e002      	b.n	8008606 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008606:	4a04      	ldr	r2, [pc, #16]	; (8008618 <prvSampleTimeNow+0x3c>)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800860c:	68fb      	ldr	r3, [r7, #12]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	20000b68 	.word	0x20000b68

0800861c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b086      	sub	sp, #24
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	607a      	str	r2, [r7, #4]
 8008628:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800862a:	2300      	movs	r3, #0
 800862c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	68ba      	ldr	r2, [r7, #8]
 8008632:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	68fa      	ldr	r2, [r7, #12]
 8008638:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800863a:	68ba      	ldr	r2, [r7, #8]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	429a      	cmp	r2, r3
 8008640:	d812      	bhi.n	8008668 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	1ad2      	subs	r2, r2, r3
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	699b      	ldr	r3, [r3, #24]
 800864c:	429a      	cmp	r2, r3
 800864e:	d302      	bcc.n	8008656 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008650:	2301      	movs	r3, #1
 8008652:	617b      	str	r3, [r7, #20]
 8008654:	e01b      	b.n	800868e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008656:	4b10      	ldr	r3, [pc, #64]	; (8008698 <prvInsertTimerInActiveList+0x7c>)
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	3304      	adds	r3, #4
 800865e:	4619      	mov	r1, r3
 8008660:	4610      	mov	r0, r2
 8008662:	f7fd fe32 	bl	80062ca <vListInsert>
 8008666:	e012      	b.n	800868e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	429a      	cmp	r2, r3
 800866e:	d206      	bcs.n	800867e <prvInsertTimerInActiveList+0x62>
 8008670:	68ba      	ldr	r2, [r7, #8]
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	429a      	cmp	r2, r3
 8008676:	d302      	bcc.n	800867e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008678:	2301      	movs	r3, #1
 800867a:	617b      	str	r3, [r7, #20]
 800867c:	e007      	b.n	800868e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800867e:	4b07      	ldr	r3, [pc, #28]	; (800869c <prvInsertTimerInActiveList+0x80>)
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	3304      	adds	r3, #4
 8008686:	4619      	mov	r1, r3
 8008688:	4610      	mov	r0, r2
 800868a:	f7fd fe1e 	bl	80062ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 800868e:	697b      	ldr	r3, [r7, #20]
}
 8008690:	4618      	mov	r0, r3
 8008692:	3718      	adds	r7, #24
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	20000b5c 	.word	0x20000b5c
 800869c:	20000b58 	.word	0x20000b58

080086a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b08c      	sub	sp, #48	; 0x30
 80086a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80086a6:	e081      	b.n	80087ac <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	db7e      	blt.n	80087ac <prvProcessReceivedCommands+0x10c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80086b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b4:	695b      	ldr	r3, [r3, #20]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d004      	beq.n	80086c4 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086bc:	3304      	adds	r3, #4
 80086be:	4618      	mov	r0, r3
 80086c0:	f7fd fe3c 	bl	800633c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80086c4:	1d3b      	adds	r3, r7, #4
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7ff ff88 	bl	80085dc <prvSampleTimeNow>
 80086cc:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	2b09      	cmp	r3, #9
 80086d2:	d86a      	bhi.n	80087aa <prvProcessReceivedCommands+0x10a>
 80086d4:	a201      	add	r2, pc, #4	; (adr r2, 80086dc <prvProcessReceivedCommands+0x3c>)
 80086d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086da:	bf00      	nop
 80086dc:	08008705 	.word	0x08008705
 80086e0:	08008705 	.word	0x08008705
 80086e4:	08008705 	.word	0x08008705
 80086e8:	080087ad 	.word	0x080087ad
 80086ec:	08008761 	.word	0x08008761
 80086f0:	08008799 	.word	0x08008799
 80086f4:	08008705 	.word	0x08008705
 80086f8:	08008705 	.word	0x08008705
 80086fc:	080087ad 	.word	0x080087ad
 8008700:	08008761 	.word	0x08008761
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008704:	68fa      	ldr	r2, [r7, #12]
 8008706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008708:	699b      	ldr	r3, [r3, #24]
 800870a:	18d1      	adds	r1, r2, r3
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6a3a      	ldr	r2, [r7, #32]
 8008710:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008712:	f7ff ff83 	bl	800861c <prvInsertTimerInActiveList>
 8008716:	4603      	mov	r3, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	d047      	beq.n	80087ac <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800871c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008720:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008722:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008726:	69db      	ldr	r3, [r3, #28]
 8008728:	2b01      	cmp	r3, #1
 800872a:	d13f      	bne.n	80087ac <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008730:	699b      	ldr	r3, [r3, #24]
 8008732:	441a      	add	r2, r3
 8008734:	2300      	movs	r3, #0
 8008736:	9300      	str	r3, [sp, #0]
 8008738:	2300      	movs	r3, #0
 800873a:	2100      	movs	r1, #0
 800873c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800873e:	f7ff fe3b 	bl	80083b8 <xTimerGenericCommand>
 8008742:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d130      	bne.n	80087ac <prvProcessReceivedCommands+0x10c>
	__asm volatile
 800874a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800874e:	f383 8811 	msr	BASEPRI, r3
 8008752:	f3bf 8f6f 	isb	sy
 8008756:	f3bf 8f4f 	dsb	sy
 800875a:	61bb      	str	r3, [r7, #24]
}
 800875c:	bf00      	nop
 800875e:	e7fe      	b.n	800875e <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008760:	68fa      	ldr	r2, [r7, #12]
 8008762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008764:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008768:	699b      	ldr	r3, [r3, #24]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d10a      	bne.n	8008784 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 800876e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008772:	f383 8811 	msr	BASEPRI, r3
 8008776:	f3bf 8f6f 	isb	sy
 800877a:	f3bf 8f4f 	dsb	sy
 800877e:	617b      	str	r3, [r7, #20]
}
 8008780:	bf00      	nop
 8008782:	e7fe      	b.n	8008782 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008786:	699a      	ldr	r2, [r3, #24]
 8008788:	6a3b      	ldr	r3, [r7, #32]
 800878a:	18d1      	adds	r1, r2, r3
 800878c:	6a3b      	ldr	r3, [r7, #32]
 800878e:	6a3a      	ldr	r2, [r7, #32]
 8008790:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008792:	f7ff ff43 	bl	800861c <prvInsertTimerInActiveList>
					break;
 8008796:	e009      	b.n	80087ac <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d104      	bne.n	80087ac <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 80087a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087a4:	f000 fbcc 	bl	8008f40 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80087a8:	e000      	b.n	80087ac <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
 80087aa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80087ac:	4b08      	ldr	r3, [pc, #32]	; (80087d0 <prvProcessReceivedCommands+0x130>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f107 0108 	add.w	r1, r7, #8
 80087b4:	2200      	movs	r2, #0
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7fe f94a 	bl	8006a50 <xQueueReceive>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	f47f af72 	bne.w	80086a8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80087c4:	bf00      	nop
 80087c6:	bf00      	nop
 80087c8:	3728      	adds	r7, #40	; 0x28
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	20000b60 	.word	0x20000b60

080087d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b088      	sub	sp, #32
 80087d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80087da:	e045      	b.n	8008868 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087dc:	4b2c      	ldr	r3, [pc, #176]	; (8008890 <prvSwitchTimerLists+0xbc>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087e6:	4b2a      	ldr	r3, [pc, #168]	; (8008890 <prvSwitchTimerLists+0xbc>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	3304      	adds	r3, #4
 80087f4:	4618      	mov	r0, r3
 80087f6:	f7fd fda1 	bl	800633c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fe:	68f8      	ldr	r0, [r7, #12]
 8008800:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	69db      	ldr	r3, [r3, #28]
 8008806:	2b01      	cmp	r3, #1
 8008808:	d12e      	bne.n	8008868 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	699b      	ldr	r3, [r3, #24]
 800880e:	693a      	ldr	r2, [r7, #16]
 8008810:	4413      	add	r3, r2
 8008812:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008814:	68ba      	ldr	r2, [r7, #8]
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	429a      	cmp	r2, r3
 800881a:	d90e      	bls.n	800883a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	68ba      	ldr	r2, [r7, #8]
 8008820:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	68fa      	ldr	r2, [r7, #12]
 8008826:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008828:	4b19      	ldr	r3, [pc, #100]	; (8008890 <prvSwitchTimerLists+0xbc>)
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	3304      	adds	r3, #4
 8008830:	4619      	mov	r1, r3
 8008832:	4610      	mov	r0, r2
 8008834:	f7fd fd49 	bl	80062ca <vListInsert>
 8008838:	e016      	b.n	8008868 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800883a:	2300      	movs	r3, #0
 800883c:	9300      	str	r3, [sp, #0]
 800883e:	2300      	movs	r3, #0
 8008840:	693a      	ldr	r2, [r7, #16]
 8008842:	2100      	movs	r1, #0
 8008844:	68f8      	ldr	r0, [r7, #12]
 8008846:	f7ff fdb7 	bl	80083b8 <xTimerGenericCommand>
 800884a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d10a      	bne.n	8008868 <prvSwitchTimerLists+0x94>
	__asm volatile
 8008852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008856:	f383 8811 	msr	BASEPRI, r3
 800885a:	f3bf 8f6f 	isb	sy
 800885e:	f3bf 8f4f 	dsb	sy
 8008862:	603b      	str	r3, [r7, #0]
}
 8008864:	bf00      	nop
 8008866:	e7fe      	b.n	8008866 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008868:	4b09      	ldr	r3, [pc, #36]	; (8008890 <prvSwitchTimerLists+0xbc>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1b4      	bne.n	80087dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008872:	4b07      	ldr	r3, [pc, #28]	; (8008890 <prvSwitchTimerLists+0xbc>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008878:	4b06      	ldr	r3, [pc, #24]	; (8008894 <prvSwitchTimerLists+0xc0>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a04      	ldr	r2, [pc, #16]	; (8008890 <prvSwitchTimerLists+0xbc>)
 800887e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008880:	4a04      	ldr	r2, [pc, #16]	; (8008894 <prvSwitchTimerLists+0xc0>)
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	6013      	str	r3, [r2, #0]
}
 8008886:	bf00      	nop
 8008888:	3718      	adds	r7, #24
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	20000b58 	.word	0x20000b58
 8008894:	20000b5c 	.word	0x20000b5c

08008898 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800889e:	f000 f969 	bl	8008b74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80088a2:	4b15      	ldr	r3, [pc, #84]	; (80088f8 <prvCheckForValidListAndQueue+0x60>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d120      	bne.n	80088ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80088aa:	4814      	ldr	r0, [pc, #80]	; (80088fc <prvCheckForValidListAndQueue+0x64>)
 80088ac:	f7fd fcbc 	bl	8006228 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80088b0:	4813      	ldr	r0, [pc, #76]	; (8008900 <prvCheckForValidListAndQueue+0x68>)
 80088b2:	f7fd fcb9 	bl	8006228 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80088b6:	4b13      	ldr	r3, [pc, #76]	; (8008904 <prvCheckForValidListAndQueue+0x6c>)
 80088b8:	4a10      	ldr	r2, [pc, #64]	; (80088fc <prvCheckForValidListAndQueue+0x64>)
 80088ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80088bc:	4b12      	ldr	r3, [pc, #72]	; (8008908 <prvCheckForValidListAndQueue+0x70>)
 80088be:	4a10      	ldr	r2, [pc, #64]	; (8008900 <prvCheckForValidListAndQueue+0x68>)
 80088c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80088c2:	2300      	movs	r3, #0
 80088c4:	9300      	str	r3, [sp, #0]
 80088c6:	4b11      	ldr	r3, [pc, #68]	; (800890c <prvCheckForValidListAndQueue+0x74>)
 80088c8:	4a11      	ldr	r2, [pc, #68]	; (8008910 <prvCheckForValidListAndQueue+0x78>)
 80088ca:	210c      	movs	r1, #12
 80088cc:	200a      	movs	r0, #10
 80088ce:	f7fd fdc7 	bl	8006460 <xQueueGenericCreateStatic>
 80088d2:	4603      	mov	r3, r0
 80088d4:	4a08      	ldr	r2, [pc, #32]	; (80088f8 <prvCheckForValidListAndQueue+0x60>)
 80088d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80088d8:	4b07      	ldr	r3, [pc, #28]	; (80088f8 <prvCheckForValidListAndQueue+0x60>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d005      	beq.n	80088ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80088e0:	4b05      	ldr	r3, [pc, #20]	; (80088f8 <prvCheckForValidListAndQueue+0x60>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	490b      	ldr	r1, [pc, #44]	; (8008914 <prvCheckForValidListAndQueue+0x7c>)
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7fe fc46 	bl	8007178 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80088ec:	f000 f972 	bl	8008bd4 <vPortExitCritical>
}
 80088f0:	bf00      	nop
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	20000b60 	.word	0x20000b60
 80088fc:	20000b30 	.word	0x20000b30
 8008900:	20000b44 	.word	0x20000b44
 8008904:	20000b58 	.word	0x20000b58
 8008908:	20000b5c 	.word	0x20000b5c
 800890c:	20000be4 	.word	0x20000be4
 8008910:	20000b6c 	.word	0x20000b6c
 8008914:	0800a62c 	.word	0x0800a62c

08008918 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008918:	b480      	push	{r7}
 800891a:	b085      	sub	sp, #20
 800891c:	af00      	add	r7, sp, #0
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	3b04      	subs	r3, #4
 8008928:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008930:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	3b04      	subs	r3, #4
 8008936:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	f023 0201 	bic.w	r2, r3, #1
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	3b04      	subs	r3, #4
 8008946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008948:	4a0c      	ldr	r2, [pc, #48]	; (800897c <pxPortInitialiseStack+0x64>)
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	3b14      	subs	r3, #20
 8008952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	3b04      	subs	r3, #4
 800895e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f06f 0202 	mvn.w	r2, #2
 8008966:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	3b20      	subs	r3, #32
 800896c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800896e:	68fb      	ldr	r3, [r7, #12]
}
 8008970:	4618      	mov	r0, r3
 8008972:	3714      	adds	r7, #20
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr
 800897c:	08008981 	.word	0x08008981

08008980 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008980:	b480      	push	{r7}
 8008982:	b085      	sub	sp, #20
 8008984:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008986:	2300      	movs	r3, #0
 8008988:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800898a:	4b12      	ldr	r3, [pc, #72]	; (80089d4 <prvTaskExitError+0x54>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008992:	d00a      	beq.n	80089aa <prvTaskExitError+0x2a>
	__asm volatile
 8008994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008998:	f383 8811 	msr	BASEPRI, r3
 800899c:	f3bf 8f6f 	isb	sy
 80089a0:	f3bf 8f4f 	dsb	sy
 80089a4:	60fb      	str	r3, [r7, #12]
}
 80089a6:	bf00      	nop
 80089a8:	e7fe      	b.n	80089a8 <prvTaskExitError+0x28>
	__asm volatile
 80089aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ae:	f383 8811 	msr	BASEPRI, r3
 80089b2:	f3bf 8f6f 	isb	sy
 80089b6:	f3bf 8f4f 	dsb	sy
 80089ba:	60bb      	str	r3, [r7, #8]
}
 80089bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80089be:	bf00      	nop
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d0fc      	beq.n	80089c0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089c6:	bf00      	nop
 80089c8:	bf00      	nop
 80089ca:	3714      	adds	r7, #20
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr
 80089d4:	2000001c 	.word	0x2000001c
	...

080089e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80089e0:	4b07      	ldr	r3, [pc, #28]	; (8008a00 <pxCurrentTCBConst2>)
 80089e2:	6819      	ldr	r1, [r3, #0]
 80089e4:	6808      	ldr	r0, [r1, #0]
 80089e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ea:	f380 8809 	msr	PSP, r0
 80089ee:	f3bf 8f6f 	isb	sy
 80089f2:	f04f 0000 	mov.w	r0, #0
 80089f6:	f380 8811 	msr	BASEPRI, r0
 80089fa:	4770      	bx	lr
 80089fc:	f3af 8000 	nop.w

08008a00 <pxCurrentTCBConst2>:
 8008a00:	20000a04 	.word	0x20000a04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a04:	bf00      	nop
 8008a06:	bf00      	nop

08008a08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a08:	4808      	ldr	r0, [pc, #32]	; (8008a2c <prvPortStartFirstTask+0x24>)
 8008a0a:	6800      	ldr	r0, [r0, #0]
 8008a0c:	6800      	ldr	r0, [r0, #0]
 8008a0e:	f380 8808 	msr	MSP, r0
 8008a12:	f04f 0000 	mov.w	r0, #0
 8008a16:	f380 8814 	msr	CONTROL, r0
 8008a1a:	b662      	cpsie	i
 8008a1c:	b661      	cpsie	f
 8008a1e:	f3bf 8f4f 	dsb	sy
 8008a22:	f3bf 8f6f 	isb	sy
 8008a26:	df00      	svc	0
 8008a28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a2a:	bf00      	nop
 8008a2c:	e000ed08 	.word	0xe000ed08

08008a30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b086      	sub	sp, #24
 8008a34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008a36:	4b46      	ldr	r3, [pc, #280]	; (8008b50 <xPortStartScheduler+0x120>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a46      	ldr	r2, [pc, #280]	; (8008b54 <xPortStartScheduler+0x124>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d10a      	bne.n	8008a56 <xPortStartScheduler+0x26>
	__asm volatile
 8008a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a44:	f383 8811 	msr	BASEPRI, r3
 8008a48:	f3bf 8f6f 	isb	sy
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	613b      	str	r3, [r7, #16]
}
 8008a52:	bf00      	nop
 8008a54:	e7fe      	b.n	8008a54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008a56:	4b3e      	ldr	r3, [pc, #248]	; (8008b50 <xPortStartScheduler+0x120>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a3f      	ldr	r2, [pc, #252]	; (8008b58 <xPortStartScheduler+0x128>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d10a      	bne.n	8008a76 <xPortStartScheduler+0x46>
	__asm volatile
 8008a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a64:	f383 8811 	msr	BASEPRI, r3
 8008a68:	f3bf 8f6f 	isb	sy
 8008a6c:	f3bf 8f4f 	dsb	sy
 8008a70:	60fb      	str	r3, [r7, #12]
}
 8008a72:	bf00      	nop
 8008a74:	e7fe      	b.n	8008a74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a76:	4b39      	ldr	r3, [pc, #228]	; (8008b5c <xPortStartScheduler+0x12c>)
 8008a78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	22ff      	movs	r2, #255	; 0xff
 8008a86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a90:	78fb      	ldrb	r3, [r7, #3]
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a98:	b2da      	uxtb	r2, r3
 8008a9a:	4b31      	ldr	r3, [pc, #196]	; (8008b60 <xPortStartScheduler+0x130>)
 8008a9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a9e:	4b31      	ldr	r3, [pc, #196]	; (8008b64 <xPortStartScheduler+0x134>)
 8008aa0:	2207      	movs	r2, #7
 8008aa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008aa4:	e009      	b.n	8008aba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008aa6:	4b2f      	ldr	r3, [pc, #188]	; (8008b64 <xPortStartScheduler+0x134>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	3b01      	subs	r3, #1
 8008aac:	4a2d      	ldr	r2, [pc, #180]	; (8008b64 <xPortStartScheduler+0x134>)
 8008aae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ab0:	78fb      	ldrb	r3, [r7, #3]
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	005b      	lsls	r3, r3, #1
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008aba:	78fb      	ldrb	r3, [r7, #3]
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ac2:	2b80      	cmp	r3, #128	; 0x80
 8008ac4:	d0ef      	beq.n	8008aa6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008ac6:	4b27      	ldr	r3, [pc, #156]	; (8008b64 <xPortStartScheduler+0x134>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f1c3 0307 	rsb	r3, r3, #7
 8008ace:	2b04      	cmp	r3, #4
 8008ad0:	d00a      	beq.n	8008ae8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad6:	f383 8811 	msr	BASEPRI, r3
 8008ada:	f3bf 8f6f 	isb	sy
 8008ade:	f3bf 8f4f 	dsb	sy
 8008ae2:	60bb      	str	r3, [r7, #8]
}
 8008ae4:	bf00      	nop
 8008ae6:	e7fe      	b.n	8008ae6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008ae8:	4b1e      	ldr	r3, [pc, #120]	; (8008b64 <xPortStartScheduler+0x134>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	021b      	lsls	r3, r3, #8
 8008aee:	4a1d      	ldr	r2, [pc, #116]	; (8008b64 <xPortStartScheduler+0x134>)
 8008af0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008af2:	4b1c      	ldr	r3, [pc, #112]	; (8008b64 <xPortStartScheduler+0x134>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008afa:	4a1a      	ldr	r2, [pc, #104]	; (8008b64 <xPortStartScheduler+0x134>)
 8008afc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	b2da      	uxtb	r2, r3
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b06:	4b18      	ldr	r3, [pc, #96]	; (8008b68 <xPortStartScheduler+0x138>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a17      	ldr	r2, [pc, #92]	; (8008b68 <xPortStartScheduler+0x138>)
 8008b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b12:	4b15      	ldr	r3, [pc, #84]	; (8008b68 <xPortStartScheduler+0x138>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a14      	ldr	r2, [pc, #80]	; (8008b68 <xPortStartScheduler+0x138>)
 8008b18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008b1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b1e:	f000 f8dd 	bl	8008cdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b22:	4b12      	ldr	r3, [pc, #72]	; (8008b6c <xPortStartScheduler+0x13c>)
 8008b24:	2200      	movs	r2, #0
 8008b26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b28:	f000 f8fc 	bl	8008d24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b2c:	4b10      	ldr	r3, [pc, #64]	; (8008b70 <xPortStartScheduler+0x140>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a0f      	ldr	r2, [pc, #60]	; (8008b70 <xPortStartScheduler+0x140>)
 8008b32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008b36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b38:	f7ff ff66 	bl	8008a08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b3c:	f7fe ff38 	bl	80079b0 <vTaskSwitchContext>
	prvTaskExitError();
 8008b40:	f7ff ff1e 	bl	8008980 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3718      	adds	r7, #24
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	e000ed00 	.word	0xe000ed00
 8008b54:	410fc271 	.word	0x410fc271
 8008b58:	410fc270 	.word	0x410fc270
 8008b5c:	e000e400 	.word	0xe000e400
 8008b60:	20000c2c 	.word	0x20000c2c
 8008b64:	20000c30 	.word	0x20000c30
 8008b68:	e000ed20 	.word	0xe000ed20
 8008b6c:	2000001c 	.word	0x2000001c
 8008b70:	e000ef34 	.word	0xe000ef34

08008b74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
	__asm volatile
 8008b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7e:	f383 8811 	msr	BASEPRI, r3
 8008b82:	f3bf 8f6f 	isb	sy
 8008b86:	f3bf 8f4f 	dsb	sy
 8008b8a:	607b      	str	r3, [r7, #4]
}
 8008b8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b8e:	4b0f      	ldr	r3, [pc, #60]	; (8008bcc <vPortEnterCritical+0x58>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	3301      	adds	r3, #1
 8008b94:	4a0d      	ldr	r2, [pc, #52]	; (8008bcc <vPortEnterCritical+0x58>)
 8008b96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b98:	4b0c      	ldr	r3, [pc, #48]	; (8008bcc <vPortEnterCritical+0x58>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d10f      	bne.n	8008bc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008ba0:	4b0b      	ldr	r3, [pc, #44]	; (8008bd0 <vPortEnterCritical+0x5c>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00a      	beq.n	8008bc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bae:	f383 8811 	msr	BASEPRI, r3
 8008bb2:	f3bf 8f6f 	isb	sy
 8008bb6:	f3bf 8f4f 	dsb	sy
 8008bba:	603b      	str	r3, [r7, #0]
}
 8008bbc:	bf00      	nop
 8008bbe:	e7fe      	b.n	8008bbe <vPortEnterCritical+0x4a>
	}
}
 8008bc0:	bf00      	nop
 8008bc2:	370c      	adds	r7, #12
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr
 8008bcc:	2000001c 	.word	0x2000001c
 8008bd0:	e000ed04 	.word	0xe000ed04

08008bd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008bda:	4b12      	ldr	r3, [pc, #72]	; (8008c24 <vPortExitCritical+0x50>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d10a      	bne.n	8008bf8 <vPortExitCritical+0x24>
	__asm volatile
 8008be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be6:	f383 8811 	msr	BASEPRI, r3
 8008bea:	f3bf 8f6f 	isb	sy
 8008bee:	f3bf 8f4f 	dsb	sy
 8008bf2:	607b      	str	r3, [r7, #4]
}
 8008bf4:	bf00      	nop
 8008bf6:	e7fe      	b.n	8008bf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008bf8:	4b0a      	ldr	r3, [pc, #40]	; (8008c24 <vPortExitCritical+0x50>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	3b01      	subs	r3, #1
 8008bfe:	4a09      	ldr	r2, [pc, #36]	; (8008c24 <vPortExitCritical+0x50>)
 8008c00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c02:	4b08      	ldr	r3, [pc, #32]	; (8008c24 <vPortExitCritical+0x50>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d105      	bne.n	8008c16 <vPortExitCritical+0x42>
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	f383 8811 	msr	BASEPRI, r3
}
 8008c14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c16:	bf00      	nop
 8008c18:	370c      	adds	r7, #12
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop
 8008c24:	2000001c 	.word	0x2000001c
	...

08008c30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c30:	f3ef 8009 	mrs	r0, PSP
 8008c34:	f3bf 8f6f 	isb	sy
 8008c38:	4b15      	ldr	r3, [pc, #84]	; (8008c90 <pxCurrentTCBConst>)
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	f01e 0f10 	tst.w	lr, #16
 8008c40:	bf08      	it	eq
 8008c42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c4a:	6010      	str	r0, [r2, #0]
 8008c4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008c50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008c54:	f380 8811 	msr	BASEPRI, r0
 8008c58:	f3bf 8f4f 	dsb	sy
 8008c5c:	f3bf 8f6f 	isb	sy
 8008c60:	f7fe fea6 	bl	80079b0 <vTaskSwitchContext>
 8008c64:	f04f 0000 	mov.w	r0, #0
 8008c68:	f380 8811 	msr	BASEPRI, r0
 8008c6c:	bc09      	pop	{r0, r3}
 8008c6e:	6819      	ldr	r1, [r3, #0]
 8008c70:	6808      	ldr	r0, [r1, #0]
 8008c72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c76:	f01e 0f10 	tst.w	lr, #16
 8008c7a:	bf08      	it	eq
 8008c7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008c80:	f380 8809 	msr	PSP, r0
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	4770      	bx	lr
 8008c8a:	bf00      	nop
 8008c8c:	f3af 8000 	nop.w

08008c90 <pxCurrentTCBConst>:
 8008c90:	20000a04 	.word	0x20000a04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c94:	bf00      	nop
 8008c96:	bf00      	nop

08008c98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca2:	f383 8811 	msr	BASEPRI, r3
 8008ca6:	f3bf 8f6f 	isb	sy
 8008caa:	f3bf 8f4f 	dsb	sy
 8008cae:	607b      	str	r3, [r7, #4]
}
 8008cb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008cb2:	f7fe fdbf 	bl	8007834 <xTaskIncrementTick>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d003      	beq.n	8008cc4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008cbc:	4b06      	ldr	r3, [pc, #24]	; (8008cd8 <SysTick_Handler+0x40>)
 8008cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cc2:	601a      	str	r2, [r3, #0]
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	f383 8811 	msr	BASEPRI, r3
}
 8008cce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008cd0:	bf00      	nop
 8008cd2:	3708      	adds	r7, #8
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}
 8008cd8:	e000ed04 	.word	0xe000ed04

08008cdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008cdc:	b480      	push	{r7}
 8008cde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008ce0:	4b0b      	ldr	r3, [pc, #44]	; (8008d10 <vPortSetupTimerInterrupt+0x34>)
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008ce6:	4b0b      	ldr	r3, [pc, #44]	; (8008d14 <vPortSetupTimerInterrupt+0x38>)
 8008ce8:	2200      	movs	r2, #0
 8008cea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008cec:	4b0a      	ldr	r3, [pc, #40]	; (8008d18 <vPortSetupTimerInterrupt+0x3c>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a0a      	ldr	r2, [pc, #40]	; (8008d1c <vPortSetupTimerInterrupt+0x40>)
 8008cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8008cf6:	099b      	lsrs	r3, r3, #6
 8008cf8:	4a09      	ldr	r2, [pc, #36]	; (8008d20 <vPortSetupTimerInterrupt+0x44>)
 8008cfa:	3b01      	subs	r3, #1
 8008cfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008cfe:	4b04      	ldr	r3, [pc, #16]	; (8008d10 <vPortSetupTimerInterrupt+0x34>)
 8008d00:	2207      	movs	r2, #7
 8008d02:	601a      	str	r2, [r3, #0]
}
 8008d04:	bf00      	nop
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop
 8008d10:	e000e010 	.word	0xe000e010
 8008d14:	e000e018 	.word	0xe000e018
 8008d18:	20000010 	.word	0x20000010
 8008d1c:	10624dd3 	.word	0x10624dd3
 8008d20:	e000e014 	.word	0xe000e014

08008d24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008d34 <vPortEnableVFP+0x10>
 8008d28:	6801      	ldr	r1, [r0, #0]
 8008d2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008d2e:	6001      	str	r1, [r0, #0]
 8008d30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008d32:	bf00      	nop
 8008d34:	e000ed88 	.word	0xe000ed88

08008d38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d38:	b480      	push	{r7}
 8008d3a:	b085      	sub	sp, #20
 8008d3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d3e:	f3ef 8305 	mrs	r3, IPSR
 8008d42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2b0f      	cmp	r3, #15
 8008d48:	d914      	bls.n	8008d74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d4a:	4a17      	ldr	r2, [pc, #92]	; (8008da8 <vPortValidateInterruptPriority+0x70>)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	4413      	add	r3, r2
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008d54:	4b15      	ldr	r3, [pc, #84]	; (8008dac <vPortValidateInterruptPriority+0x74>)
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	7afa      	ldrb	r2, [r7, #11]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d20a      	bcs.n	8008d74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d62:	f383 8811 	msr	BASEPRI, r3
 8008d66:	f3bf 8f6f 	isb	sy
 8008d6a:	f3bf 8f4f 	dsb	sy
 8008d6e:	607b      	str	r3, [r7, #4]
}
 8008d70:	bf00      	nop
 8008d72:	e7fe      	b.n	8008d72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008d74:	4b0e      	ldr	r3, [pc, #56]	; (8008db0 <vPortValidateInterruptPriority+0x78>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008d7c:	4b0d      	ldr	r3, [pc, #52]	; (8008db4 <vPortValidateInterruptPriority+0x7c>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d90a      	bls.n	8008d9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d88:	f383 8811 	msr	BASEPRI, r3
 8008d8c:	f3bf 8f6f 	isb	sy
 8008d90:	f3bf 8f4f 	dsb	sy
 8008d94:	603b      	str	r3, [r7, #0]
}
 8008d96:	bf00      	nop
 8008d98:	e7fe      	b.n	8008d98 <vPortValidateInterruptPriority+0x60>
	}
 8008d9a:	bf00      	nop
 8008d9c:	3714      	adds	r7, #20
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr
 8008da6:	bf00      	nop
 8008da8:	e000e3f0 	.word	0xe000e3f0
 8008dac:	20000c2c 	.word	0x20000c2c
 8008db0:	e000ed0c 	.word	0xe000ed0c
 8008db4:	20000c30 	.word	0x20000c30

08008db8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b08a      	sub	sp, #40	; 0x28
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008dc4:	f7fe fc7c 	bl	80076c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008dc8:	4b58      	ldr	r3, [pc, #352]	; (8008f2c <pvPortMalloc+0x174>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d101      	bne.n	8008dd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008dd0:	f000 f910 	bl	8008ff4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008dd4:	4b56      	ldr	r3, [pc, #344]	; (8008f30 <pvPortMalloc+0x178>)
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4013      	ands	r3, r2
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	f040 808e 	bne.w	8008efe <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d01d      	beq.n	8008e24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008de8:	2208      	movs	r2, #8
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4413      	add	r3, r2
 8008dee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f003 0307 	and.w	r3, r3, #7
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d014      	beq.n	8008e24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f023 0307 	bic.w	r3, r3, #7
 8008e00:	3308      	adds	r3, #8
 8008e02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f003 0307 	and.w	r3, r3, #7
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d00a      	beq.n	8008e24 <pvPortMalloc+0x6c>
	__asm volatile
 8008e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e12:	f383 8811 	msr	BASEPRI, r3
 8008e16:	f3bf 8f6f 	isb	sy
 8008e1a:	f3bf 8f4f 	dsb	sy
 8008e1e:	617b      	str	r3, [r7, #20]
}
 8008e20:	bf00      	nop
 8008e22:	e7fe      	b.n	8008e22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d069      	beq.n	8008efe <pvPortMalloc+0x146>
 8008e2a:	4b42      	ldr	r3, [pc, #264]	; (8008f34 <pvPortMalloc+0x17c>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d864      	bhi.n	8008efe <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008e34:	4b40      	ldr	r3, [pc, #256]	; (8008f38 <pvPortMalloc+0x180>)
 8008e36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008e38:	4b3f      	ldr	r3, [pc, #252]	; (8008f38 <pvPortMalloc+0x180>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e3e:	e004      	b.n	8008e4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d903      	bls.n	8008e5c <pvPortMalloc+0xa4>
 8008e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d1f1      	bne.n	8008e40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008e5c:	4b33      	ldr	r3, [pc, #204]	; (8008f2c <pvPortMalloc+0x174>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d04b      	beq.n	8008efe <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008e66:	6a3b      	ldr	r3, [r7, #32]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2208      	movs	r2, #8
 8008e6c:	4413      	add	r3, r2
 8008e6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	6a3b      	ldr	r3, [r7, #32]
 8008e76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7a:	685a      	ldr	r2, [r3, #4]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	1ad2      	subs	r2, r2, r3
 8008e80:	2308      	movs	r3, #8
 8008e82:	005b      	lsls	r3, r3, #1
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d91f      	bls.n	8008ec8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e90:	69bb      	ldr	r3, [r7, #24]
 8008e92:	f003 0307 	and.w	r3, r3, #7
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00a      	beq.n	8008eb0 <pvPortMalloc+0xf8>
	__asm volatile
 8008e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9e:	f383 8811 	msr	BASEPRI, r3
 8008ea2:	f3bf 8f6f 	isb	sy
 8008ea6:	f3bf 8f4f 	dsb	sy
 8008eaa:	613b      	str	r3, [r7, #16]
}
 8008eac:	bf00      	nop
 8008eae:	e7fe      	b.n	8008eae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb2:	685a      	ldr	r2, [r3, #4]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	1ad2      	subs	r2, r2, r3
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008ec2:	69b8      	ldr	r0, [r7, #24]
 8008ec4:	f000 f8f8 	bl	80090b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008ec8:	4b1a      	ldr	r3, [pc, #104]	; (8008f34 <pvPortMalloc+0x17c>)
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	1ad3      	subs	r3, r2, r3
 8008ed2:	4a18      	ldr	r2, [pc, #96]	; (8008f34 <pvPortMalloc+0x17c>)
 8008ed4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008ed6:	4b17      	ldr	r3, [pc, #92]	; (8008f34 <pvPortMalloc+0x17c>)
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	4b18      	ldr	r3, [pc, #96]	; (8008f3c <pvPortMalloc+0x184>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d203      	bcs.n	8008eea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008ee2:	4b14      	ldr	r3, [pc, #80]	; (8008f34 <pvPortMalloc+0x17c>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a15      	ldr	r2, [pc, #84]	; (8008f3c <pvPortMalloc+0x184>)
 8008ee8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eec:	685a      	ldr	r2, [r3, #4]
 8008eee:	4b10      	ldr	r3, [pc, #64]	; (8008f30 <pvPortMalloc+0x178>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	431a      	orrs	r2, r3
 8008ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efa:	2200      	movs	r2, #0
 8008efc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008efe:	f7fe fbed 	bl	80076dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f02:	69fb      	ldr	r3, [r7, #28]
 8008f04:	f003 0307 	and.w	r3, r3, #7
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d00a      	beq.n	8008f22 <pvPortMalloc+0x16a>
	__asm volatile
 8008f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f10:	f383 8811 	msr	BASEPRI, r3
 8008f14:	f3bf 8f6f 	isb	sy
 8008f18:	f3bf 8f4f 	dsb	sy
 8008f1c:	60fb      	str	r3, [r7, #12]
}
 8008f1e:	bf00      	nop
 8008f20:	e7fe      	b.n	8008f20 <pvPortMalloc+0x168>
	return pvReturn;
 8008f22:	69fb      	ldr	r3, [r7, #28]
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3728      	adds	r7, #40	; 0x28
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	2000183c 	.word	0x2000183c
 8008f30:	20001848 	.word	0x20001848
 8008f34:	20001840 	.word	0x20001840
 8008f38:	20001834 	.word	0x20001834
 8008f3c:	20001844 	.word	0x20001844

08008f40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b086      	sub	sp, #24
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d048      	beq.n	8008fe4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008f52:	2308      	movs	r3, #8
 8008f54:	425b      	negs	r3, r3
 8008f56:	697a      	ldr	r2, [r7, #20]
 8008f58:	4413      	add	r3, r2
 8008f5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	685a      	ldr	r2, [r3, #4]
 8008f64:	4b21      	ldr	r3, [pc, #132]	; (8008fec <vPortFree+0xac>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4013      	ands	r3, r2
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d10a      	bne.n	8008f84 <vPortFree+0x44>
	__asm volatile
 8008f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f72:	f383 8811 	msr	BASEPRI, r3
 8008f76:	f3bf 8f6f 	isb	sy
 8008f7a:	f3bf 8f4f 	dsb	sy
 8008f7e:	60fb      	str	r3, [r7, #12]
}
 8008f80:	bf00      	nop
 8008f82:	e7fe      	b.n	8008f82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d00a      	beq.n	8008fa2 <vPortFree+0x62>
	__asm volatile
 8008f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f90:	f383 8811 	msr	BASEPRI, r3
 8008f94:	f3bf 8f6f 	isb	sy
 8008f98:	f3bf 8f4f 	dsb	sy
 8008f9c:	60bb      	str	r3, [r7, #8]
}
 8008f9e:	bf00      	nop
 8008fa0:	e7fe      	b.n	8008fa0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	685a      	ldr	r2, [r3, #4]
 8008fa6:	4b11      	ldr	r3, [pc, #68]	; (8008fec <vPortFree+0xac>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4013      	ands	r3, r2
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d019      	beq.n	8008fe4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d115      	bne.n	8008fe4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	685a      	ldr	r2, [r3, #4]
 8008fbc:	4b0b      	ldr	r3, [pc, #44]	; (8008fec <vPortFree+0xac>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	43db      	mvns	r3, r3
 8008fc2:	401a      	ands	r2, r3
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008fc8:	f7fe fb7a 	bl	80076c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	685a      	ldr	r2, [r3, #4]
 8008fd0:	4b07      	ldr	r3, [pc, #28]	; (8008ff0 <vPortFree+0xb0>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	4a06      	ldr	r2, [pc, #24]	; (8008ff0 <vPortFree+0xb0>)
 8008fd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008fda:	6938      	ldr	r0, [r7, #16]
 8008fdc:	f000 f86c 	bl	80090b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008fe0:	f7fe fb7c 	bl	80076dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008fe4:	bf00      	nop
 8008fe6:	3718      	adds	r7, #24
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	20001848 	.word	0x20001848
 8008ff0:	20001840 	.word	0x20001840

08008ff4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b085      	sub	sp, #20
 8008ff8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008ffa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008ffe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009000:	4b27      	ldr	r3, [pc, #156]	; (80090a0 <prvHeapInit+0xac>)
 8009002:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f003 0307 	and.w	r3, r3, #7
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00c      	beq.n	8009028 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	3307      	adds	r3, #7
 8009012:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f023 0307 	bic.w	r3, r3, #7
 800901a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800901c:	68ba      	ldr	r2, [r7, #8]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	1ad3      	subs	r3, r2, r3
 8009022:	4a1f      	ldr	r2, [pc, #124]	; (80090a0 <prvHeapInit+0xac>)
 8009024:	4413      	add	r3, r2
 8009026:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800902c:	4a1d      	ldr	r2, [pc, #116]	; (80090a4 <prvHeapInit+0xb0>)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009032:	4b1c      	ldr	r3, [pc, #112]	; (80090a4 <prvHeapInit+0xb0>)
 8009034:	2200      	movs	r2, #0
 8009036:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	68ba      	ldr	r2, [r7, #8]
 800903c:	4413      	add	r3, r2
 800903e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009040:	2208      	movs	r2, #8
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	1a9b      	subs	r3, r3, r2
 8009046:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f023 0307 	bic.w	r3, r3, #7
 800904e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	4a15      	ldr	r2, [pc, #84]	; (80090a8 <prvHeapInit+0xb4>)
 8009054:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009056:	4b14      	ldr	r3, [pc, #80]	; (80090a8 <prvHeapInit+0xb4>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2200      	movs	r2, #0
 800905c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800905e:	4b12      	ldr	r3, [pc, #72]	; (80090a8 <prvHeapInit+0xb4>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2200      	movs	r2, #0
 8009064:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	68fa      	ldr	r2, [r7, #12]
 800906e:	1ad2      	subs	r2, r2, r3
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009074:	4b0c      	ldr	r3, [pc, #48]	; (80090a8 <prvHeapInit+0xb4>)
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	4a0a      	ldr	r2, [pc, #40]	; (80090ac <prvHeapInit+0xb8>)
 8009082:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	4a09      	ldr	r2, [pc, #36]	; (80090b0 <prvHeapInit+0xbc>)
 800908a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800908c:	4b09      	ldr	r3, [pc, #36]	; (80090b4 <prvHeapInit+0xc0>)
 800908e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009092:	601a      	str	r2, [r3, #0]
}
 8009094:	bf00      	nop
 8009096:	3714      	adds	r7, #20
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr
 80090a0:	20000c34 	.word	0x20000c34
 80090a4:	20001834 	.word	0x20001834
 80090a8:	2000183c 	.word	0x2000183c
 80090ac:	20001844 	.word	0x20001844
 80090b0:	20001840 	.word	0x20001840
 80090b4:	20001848 	.word	0x20001848

080090b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80090b8:	b480      	push	{r7}
 80090ba:	b085      	sub	sp, #20
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80090c0:	4b28      	ldr	r3, [pc, #160]	; (8009164 <prvInsertBlockIntoFreeList+0xac>)
 80090c2:	60fb      	str	r3, [r7, #12]
 80090c4:	e002      	b.n	80090cc <prvInsertBlockIntoFreeList+0x14>
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	60fb      	str	r3, [r7, #12]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d8f7      	bhi.n	80090c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	68ba      	ldr	r2, [r7, #8]
 80090e0:	4413      	add	r3, r2
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d108      	bne.n	80090fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	685a      	ldr	r2, [r3, #4]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	441a      	add	r2, r3
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	68ba      	ldr	r2, [r7, #8]
 8009104:	441a      	add	r2, r3
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	429a      	cmp	r2, r3
 800910c:	d118      	bne.n	8009140 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	4b15      	ldr	r3, [pc, #84]	; (8009168 <prvInsertBlockIntoFreeList+0xb0>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	429a      	cmp	r2, r3
 8009118:	d00d      	beq.n	8009136 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	685a      	ldr	r2, [r3, #4]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	441a      	add	r2, r3
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	601a      	str	r2, [r3, #0]
 8009134:	e008      	b.n	8009148 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009136:	4b0c      	ldr	r3, [pc, #48]	; (8009168 <prvInsertBlockIntoFreeList+0xb0>)
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	601a      	str	r2, [r3, #0]
 800913e:	e003      	b.n	8009148 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009148:	68fa      	ldr	r2, [r7, #12]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	429a      	cmp	r2, r3
 800914e:	d002      	beq.n	8009156 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009156:	bf00      	nop
 8009158:	3714      	adds	r7, #20
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr
 8009162:	bf00      	nop
 8009164:	20001834 	.word	0x20001834
 8009168:	2000183c 	.word	0x2000183c

0800916c <std>:
 800916c:	2300      	movs	r3, #0
 800916e:	b510      	push	{r4, lr}
 8009170:	4604      	mov	r4, r0
 8009172:	e9c0 3300 	strd	r3, r3, [r0]
 8009176:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800917a:	6083      	str	r3, [r0, #8]
 800917c:	8181      	strh	r1, [r0, #12]
 800917e:	6643      	str	r3, [r0, #100]	; 0x64
 8009180:	81c2      	strh	r2, [r0, #14]
 8009182:	6183      	str	r3, [r0, #24]
 8009184:	4619      	mov	r1, r3
 8009186:	2208      	movs	r2, #8
 8009188:	305c      	adds	r0, #92	; 0x5c
 800918a:	f000 fa17 	bl	80095bc <memset>
 800918e:	4b0d      	ldr	r3, [pc, #52]	; (80091c4 <std+0x58>)
 8009190:	6263      	str	r3, [r4, #36]	; 0x24
 8009192:	4b0d      	ldr	r3, [pc, #52]	; (80091c8 <std+0x5c>)
 8009194:	62a3      	str	r3, [r4, #40]	; 0x28
 8009196:	4b0d      	ldr	r3, [pc, #52]	; (80091cc <std+0x60>)
 8009198:	62e3      	str	r3, [r4, #44]	; 0x2c
 800919a:	4b0d      	ldr	r3, [pc, #52]	; (80091d0 <std+0x64>)
 800919c:	6323      	str	r3, [r4, #48]	; 0x30
 800919e:	4b0d      	ldr	r3, [pc, #52]	; (80091d4 <std+0x68>)
 80091a0:	6224      	str	r4, [r4, #32]
 80091a2:	429c      	cmp	r4, r3
 80091a4:	d006      	beq.n	80091b4 <std+0x48>
 80091a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80091aa:	4294      	cmp	r4, r2
 80091ac:	d002      	beq.n	80091b4 <std+0x48>
 80091ae:	33d0      	adds	r3, #208	; 0xd0
 80091b0:	429c      	cmp	r4, r3
 80091b2:	d105      	bne.n	80091c0 <std+0x54>
 80091b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80091b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091bc:	f000 bacc 	b.w	8009758 <__retarget_lock_init_recursive>
 80091c0:	bd10      	pop	{r4, pc}
 80091c2:	bf00      	nop
 80091c4:	0800940d 	.word	0x0800940d
 80091c8:	0800942f 	.word	0x0800942f
 80091cc:	08009467 	.word	0x08009467
 80091d0:	0800948b 	.word	0x0800948b
 80091d4:	2000184c 	.word	0x2000184c

080091d8 <stdio_exit_handler>:
 80091d8:	4a02      	ldr	r2, [pc, #8]	; (80091e4 <stdio_exit_handler+0xc>)
 80091da:	4903      	ldr	r1, [pc, #12]	; (80091e8 <stdio_exit_handler+0x10>)
 80091dc:	4803      	ldr	r0, [pc, #12]	; (80091ec <stdio_exit_handler+0x14>)
 80091de:	f000 b869 	b.w	80092b4 <_fwalk_sglue>
 80091e2:	bf00      	nop
 80091e4:	20000020 	.word	0x20000020
 80091e8:	0800a2d1 	.word	0x0800a2d1
 80091ec:	2000002c 	.word	0x2000002c

080091f0 <cleanup_stdio>:
 80091f0:	6841      	ldr	r1, [r0, #4]
 80091f2:	4b0c      	ldr	r3, [pc, #48]	; (8009224 <cleanup_stdio+0x34>)
 80091f4:	4299      	cmp	r1, r3
 80091f6:	b510      	push	{r4, lr}
 80091f8:	4604      	mov	r4, r0
 80091fa:	d001      	beq.n	8009200 <cleanup_stdio+0x10>
 80091fc:	f001 f868 	bl	800a2d0 <_fflush_r>
 8009200:	68a1      	ldr	r1, [r4, #8]
 8009202:	4b09      	ldr	r3, [pc, #36]	; (8009228 <cleanup_stdio+0x38>)
 8009204:	4299      	cmp	r1, r3
 8009206:	d002      	beq.n	800920e <cleanup_stdio+0x1e>
 8009208:	4620      	mov	r0, r4
 800920a:	f001 f861 	bl	800a2d0 <_fflush_r>
 800920e:	68e1      	ldr	r1, [r4, #12]
 8009210:	4b06      	ldr	r3, [pc, #24]	; (800922c <cleanup_stdio+0x3c>)
 8009212:	4299      	cmp	r1, r3
 8009214:	d004      	beq.n	8009220 <cleanup_stdio+0x30>
 8009216:	4620      	mov	r0, r4
 8009218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800921c:	f001 b858 	b.w	800a2d0 <_fflush_r>
 8009220:	bd10      	pop	{r4, pc}
 8009222:	bf00      	nop
 8009224:	2000184c 	.word	0x2000184c
 8009228:	200018b4 	.word	0x200018b4
 800922c:	2000191c 	.word	0x2000191c

08009230 <global_stdio_init.part.0>:
 8009230:	b510      	push	{r4, lr}
 8009232:	4b0b      	ldr	r3, [pc, #44]	; (8009260 <global_stdio_init.part.0+0x30>)
 8009234:	4c0b      	ldr	r4, [pc, #44]	; (8009264 <global_stdio_init.part.0+0x34>)
 8009236:	4a0c      	ldr	r2, [pc, #48]	; (8009268 <global_stdio_init.part.0+0x38>)
 8009238:	601a      	str	r2, [r3, #0]
 800923a:	4620      	mov	r0, r4
 800923c:	2200      	movs	r2, #0
 800923e:	2104      	movs	r1, #4
 8009240:	f7ff ff94 	bl	800916c <std>
 8009244:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009248:	2201      	movs	r2, #1
 800924a:	2109      	movs	r1, #9
 800924c:	f7ff ff8e 	bl	800916c <std>
 8009250:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009254:	2202      	movs	r2, #2
 8009256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800925a:	2112      	movs	r1, #18
 800925c:	f7ff bf86 	b.w	800916c <std>
 8009260:	20001984 	.word	0x20001984
 8009264:	2000184c 	.word	0x2000184c
 8009268:	080091d9 	.word	0x080091d9

0800926c <__sfp_lock_acquire>:
 800926c:	4801      	ldr	r0, [pc, #4]	; (8009274 <__sfp_lock_acquire+0x8>)
 800926e:	f000 ba74 	b.w	800975a <__retarget_lock_acquire_recursive>
 8009272:	bf00      	nop
 8009274:	2000198d 	.word	0x2000198d

08009278 <__sfp_lock_release>:
 8009278:	4801      	ldr	r0, [pc, #4]	; (8009280 <__sfp_lock_release+0x8>)
 800927a:	f000 ba6f 	b.w	800975c <__retarget_lock_release_recursive>
 800927e:	bf00      	nop
 8009280:	2000198d 	.word	0x2000198d

08009284 <__sinit>:
 8009284:	b510      	push	{r4, lr}
 8009286:	4604      	mov	r4, r0
 8009288:	f7ff fff0 	bl	800926c <__sfp_lock_acquire>
 800928c:	6a23      	ldr	r3, [r4, #32]
 800928e:	b11b      	cbz	r3, 8009298 <__sinit+0x14>
 8009290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009294:	f7ff bff0 	b.w	8009278 <__sfp_lock_release>
 8009298:	4b04      	ldr	r3, [pc, #16]	; (80092ac <__sinit+0x28>)
 800929a:	6223      	str	r3, [r4, #32]
 800929c:	4b04      	ldr	r3, [pc, #16]	; (80092b0 <__sinit+0x2c>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d1f5      	bne.n	8009290 <__sinit+0xc>
 80092a4:	f7ff ffc4 	bl	8009230 <global_stdio_init.part.0>
 80092a8:	e7f2      	b.n	8009290 <__sinit+0xc>
 80092aa:	bf00      	nop
 80092ac:	080091f1 	.word	0x080091f1
 80092b0:	20001984 	.word	0x20001984

080092b4 <_fwalk_sglue>:
 80092b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092b8:	4607      	mov	r7, r0
 80092ba:	4688      	mov	r8, r1
 80092bc:	4614      	mov	r4, r2
 80092be:	2600      	movs	r6, #0
 80092c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092c4:	f1b9 0901 	subs.w	r9, r9, #1
 80092c8:	d505      	bpl.n	80092d6 <_fwalk_sglue+0x22>
 80092ca:	6824      	ldr	r4, [r4, #0]
 80092cc:	2c00      	cmp	r4, #0
 80092ce:	d1f7      	bne.n	80092c0 <_fwalk_sglue+0xc>
 80092d0:	4630      	mov	r0, r6
 80092d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092d6:	89ab      	ldrh	r3, [r5, #12]
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d907      	bls.n	80092ec <_fwalk_sglue+0x38>
 80092dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092e0:	3301      	adds	r3, #1
 80092e2:	d003      	beq.n	80092ec <_fwalk_sglue+0x38>
 80092e4:	4629      	mov	r1, r5
 80092e6:	4638      	mov	r0, r7
 80092e8:	47c0      	blx	r8
 80092ea:	4306      	orrs	r6, r0
 80092ec:	3568      	adds	r5, #104	; 0x68
 80092ee:	e7e9      	b.n	80092c4 <_fwalk_sglue+0x10>

080092f0 <iprintf>:
 80092f0:	b40f      	push	{r0, r1, r2, r3}
 80092f2:	b507      	push	{r0, r1, r2, lr}
 80092f4:	4906      	ldr	r1, [pc, #24]	; (8009310 <iprintf+0x20>)
 80092f6:	ab04      	add	r3, sp, #16
 80092f8:	6808      	ldr	r0, [r1, #0]
 80092fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80092fe:	6881      	ldr	r1, [r0, #8]
 8009300:	9301      	str	r3, [sp, #4]
 8009302:	f000 fcb5 	bl	8009c70 <_vfiprintf_r>
 8009306:	b003      	add	sp, #12
 8009308:	f85d eb04 	ldr.w	lr, [sp], #4
 800930c:	b004      	add	sp, #16
 800930e:	4770      	bx	lr
 8009310:	20000078 	.word	0x20000078

08009314 <_puts_r>:
 8009314:	6a03      	ldr	r3, [r0, #32]
 8009316:	b570      	push	{r4, r5, r6, lr}
 8009318:	6884      	ldr	r4, [r0, #8]
 800931a:	4605      	mov	r5, r0
 800931c:	460e      	mov	r6, r1
 800931e:	b90b      	cbnz	r3, 8009324 <_puts_r+0x10>
 8009320:	f7ff ffb0 	bl	8009284 <__sinit>
 8009324:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009326:	07db      	lsls	r3, r3, #31
 8009328:	d405      	bmi.n	8009336 <_puts_r+0x22>
 800932a:	89a3      	ldrh	r3, [r4, #12]
 800932c:	0598      	lsls	r0, r3, #22
 800932e:	d402      	bmi.n	8009336 <_puts_r+0x22>
 8009330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009332:	f000 fa12 	bl	800975a <__retarget_lock_acquire_recursive>
 8009336:	89a3      	ldrh	r3, [r4, #12]
 8009338:	0719      	lsls	r1, r3, #28
 800933a:	d513      	bpl.n	8009364 <_puts_r+0x50>
 800933c:	6923      	ldr	r3, [r4, #16]
 800933e:	b18b      	cbz	r3, 8009364 <_puts_r+0x50>
 8009340:	3e01      	subs	r6, #1
 8009342:	68a3      	ldr	r3, [r4, #8]
 8009344:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009348:	3b01      	subs	r3, #1
 800934a:	60a3      	str	r3, [r4, #8]
 800934c:	b9e9      	cbnz	r1, 800938a <_puts_r+0x76>
 800934e:	2b00      	cmp	r3, #0
 8009350:	da2e      	bge.n	80093b0 <_puts_r+0x9c>
 8009352:	4622      	mov	r2, r4
 8009354:	210a      	movs	r1, #10
 8009356:	4628      	mov	r0, r5
 8009358:	f000 f89b 	bl	8009492 <__swbuf_r>
 800935c:	3001      	adds	r0, #1
 800935e:	d007      	beq.n	8009370 <_puts_r+0x5c>
 8009360:	250a      	movs	r5, #10
 8009362:	e007      	b.n	8009374 <_puts_r+0x60>
 8009364:	4621      	mov	r1, r4
 8009366:	4628      	mov	r0, r5
 8009368:	f000 f8d0 	bl	800950c <__swsetup_r>
 800936c:	2800      	cmp	r0, #0
 800936e:	d0e7      	beq.n	8009340 <_puts_r+0x2c>
 8009370:	f04f 35ff 	mov.w	r5, #4294967295
 8009374:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009376:	07da      	lsls	r2, r3, #31
 8009378:	d405      	bmi.n	8009386 <_puts_r+0x72>
 800937a:	89a3      	ldrh	r3, [r4, #12]
 800937c:	059b      	lsls	r3, r3, #22
 800937e:	d402      	bmi.n	8009386 <_puts_r+0x72>
 8009380:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009382:	f000 f9eb 	bl	800975c <__retarget_lock_release_recursive>
 8009386:	4628      	mov	r0, r5
 8009388:	bd70      	pop	{r4, r5, r6, pc}
 800938a:	2b00      	cmp	r3, #0
 800938c:	da04      	bge.n	8009398 <_puts_r+0x84>
 800938e:	69a2      	ldr	r2, [r4, #24]
 8009390:	429a      	cmp	r2, r3
 8009392:	dc06      	bgt.n	80093a2 <_puts_r+0x8e>
 8009394:	290a      	cmp	r1, #10
 8009396:	d004      	beq.n	80093a2 <_puts_r+0x8e>
 8009398:	6823      	ldr	r3, [r4, #0]
 800939a:	1c5a      	adds	r2, r3, #1
 800939c:	6022      	str	r2, [r4, #0]
 800939e:	7019      	strb	r1, [r3, #0]
 80093a0:	e7cf      	b.n	8009342 <_puts_r+0x2e>
 80093a2:	4622      	mov	r2, r4
 80093a4:	4628      	mov	r0, r5
 80093a6:	f000 f874 	bl	8009492 <__swbuf_r>
 80093aa:	3001      	adds	r0, #1
 80093ac:	d1c9      	bne.n	8009342 <_puts_r+0x2e>
 80093ae:	e7df      	b.n	8009370 <_puts_r+0x5c>
 80093b0:	6823      	ldr	r3, [r4, #0]
 80093b2:	250a      	movs	r5, #10
 80093b4:	1c5a      	adds	r2, r3, #1
 80093b6:	6022      	str	r2, [r4, #0]
 80093b8:	701d      	strb	r5, [r3, #0]
 80093ba:	e7db      	b.n	8009374 <_puts_r+0x60>

080093bc <puts>:
 80093bc:	4b02      	ldr	r3, [pc, #8]	; (80093c8 <puts+0xc>)
 80093be:	4601      	mov	r1, r0
 80093c0:	6818      	ldr	r0, [r3, #0]
 80093c2:	f7ff bfa7 	b.w	8009314 <_puts_r>
 80093c6:	bf00      	nop
 80093c8:	20000078 	.word	0x20000078

080093cc <siprintf>:
 80093cc:	b40e      	push	{r1, r2, r3}
 80093ce:	b500      	push	{lr}
 80093d0:	b09c      	sub	sp, #112	; 0x70
 80093d2:	ab1d      	add	r3, sp, #116	; 0x74
 80093d4:	9002      	str	r0, [sp, #8]
 80093d6:	9006      	str	r0, [sp, #24]
 80093d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80093dc:	4809      	ldr	r0, [pc, #36]	; (8009404 <siprintf+0x38>)
 80093de:	9107      	str	r1, [sp, #28]
 80093e0:	9104      	str	r1, [sp, #16]
 80093e2:	4909      	ldr	r1, [pc, #36]	; (8009408 <siprintf+0x3c>)
 80093e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80093e8:	9105      	str	r1, [sp, #20]
 80093ea:	6800      	ldr	r0, [r0, #0]
 80093ec:	9301      	str	r3, [sp, #4]
 80093ee:	a902      	add	r1, sp, #8
 80093f0:	f000 fb16 	bl	8009a20 <_svfiprintf_r>
 80093f4:	9b02      	ldr	r3, [sp, #8]
 80093f6:	2200      	movs	r2, #0
 80093f8:	701a      	strb	r2, [r3, #0]
 80093fa:	b01c      	add	sp, #112	; 0x70
 80093fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009400:	b003      	add	sp, #12
 8009402:	4770      	bx	lr
 8009404:	20000078 	.word	0x20000078
 8009408:	ffff0208 	.word	0xffff0208

0800940c <__sread>:
 800940c:	b510      	push	{r4, lr}
 800940e:	460c      	mov	r4, r1
 8009410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009414:	f000 f952 	bl	80096bc <_read_r>
 8009418:	2800      	cmp	r0, #0
 800941a:	bfab      	itete	ge
 800941c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800941e:	89a3      	ldrhlt	r3, [r4, #12]
 8009420:	181b      	addge	r3, r3, r0
 8009422:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009426:	bfac      	ite	ge
 8009428:	6563      	strge	r3, [r4, #84]	; 0x54
 800942a:	81a3      	strhlt	r3, [r4, #12]
 800942c:	bd10      	pop	{r4, pc}

0800942e <__swrite>:
 800942e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009432:	461f      	mov	r7, r3
 8009434:	898b      	ldrh	r3, [r1, #12]
 8009436:	05db      	lsls	r3, r3, #23
 8009438:	4605      	mov	r5, r0
 800943a:	460c      	mov	r4, r1
 800943c:	4616      	mov	r6, r2
 800943e:	d505      	bpl.n	800944c <__swrite+0x1e>
 8009440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009444:	2302      	movs	r3, #2
 8009446:	2200      	movs	r2, #0
 8009448:	f000 f926 	bl	8009698 <_lseek_r>
 800944c:	89a3      	ldrh	r3, [r4, #12]
 800944e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009452:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009456:	81a3      	strh	r3, [r4, #12]
 8009458:	4632      	mov	r2, r6
 800945a:	463b      	mov	r3, r7
 800945c:	4628      	mov	r0, r5
 800945e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009462:	f000 b93d 	b.w	80096e0 <_write_r>

08009466 <__sseek>:
 8009466:	b510      	push	{r4, lr}
 8009468:	460c      	mov	r4, r1
 800946a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800946e:	f000 f913 	bl	8009698 <_lseek_r>
 8009472:	1c43      	adds	r3, r0, #1
 8009474:	89a3      	ldrh	r3, [r4, #12]
 8009476:	bf15      	itete	ne
 8009478:	6560      	strne	r0, [r4, #84]	; 0x54
 800947a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800947e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009482:	81a3      	strheq	r3, [r4, #12]
 8009484:	bf18      	it	ne
 8009486:	81a3      	strhne	r3, [r4, #12]
 8009488:	bd10      	pop	{r4, pc}

0800948a <__sclose>:
 800948a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800948e:	f000 b89d 	b.w	80095cc <_close_r>

08009492 <__swbuf_r>:
 8009492:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009494:	460e      	mov	r6, r1
 8009496:	4614      	mov	r4, r2
 8009498:	4605      	mov	r5, r0
 800949a:	b118      	cbz	r0, 80094a4 <__swbuf_r+0x12>
 800949c:	6a03      	ldr	r3, [r0, #32]
 800949e:	b90b      	cbnz	r3, 80094a4 <__swbuf_r+0x12>
 80094a0:	f7ff fef0 	bl	8009284 <__sinit>
 80094a4:	69a3      	ldr	r3, [r4, #24]
 80094a6:	60a3      	str	r3, [r4, #8]
 80094a8:	89a3      	ldrh	r3, [r4, #12]
 80094aa:	071a      	lsls	r2, r3, #28
 80094ac:	d525      	bpl.n	80094fa <__swbuf_r+0x68>
 80094ae:	6923      	ldr	r3, [r4, #16]
 80094b0:	b31b      	cbz	r3, 80094fa <__swbuf_r+0x68>
 80094b2:	6823      	ldr	r3, [r4, #0]
 80094b4:	6922      	ldr	r2, [r4, #16]
 80094b6:	1a98      	subs	r0, r3, r2
 80094b8:	6963      	ldr	r3, [r4, #20]
 80094ba:	b2f6      	uxtb	r6, r6
 80094bc:	4283      	cmp	r3, r0
 80094be:	4637      	mov	r7, r6
 80094c0:	dc04      	bgt.n	80094cc <__swbuf_r+0x3a>
 80094c2:	4621      	mov	r1, r4
 80094c4:	4628      	mov	r0, r5
 80094c6:	f000 ff03 	bl	800a2d0 <_fflush_r>
 80094ca:	b9e0      	cbnz	r0, 8009506 <__swbuf_r+0x74>
 80094cc:	68a3      	ldr	r3, [r4, #8]
 80094ce:	3b01      	subs	r3, #1
 80094d0:	60a3      	str	r3, [r4, #8]
 80094d2:	6823      	ldr	r3, [r4, #0]
 80094d4:	1c5a      	adds	r2, r3, #1
 80094d6:	6022      	str	r2, [r4, #0]
 80094d8:	701e      	strb	r6, [r3, #0]
 80094da:	6962      	ldr	r2, [r4, #20]
 80094dc:	1c43      	adds	r3, r0, #1
 80094de:	429a      	cmp	r2, r3
 80094e0:	d004      	beq.n	80094ec <__swbuf_r+0x5a>
 80094e2:	89a3      	ldrh	r3, [r4, #12]
 80094e4:	07db      	lsls	r3, r3, #31
 80094e6:	d506      	bpl.n	80094f6 <__swbuf_r+0x64>
 80094e8:	2e0a      	cmp	r6, #10
 80094ea:	d104      	bne.n	80094f6 <__swbuf_r+0x64>
 80094ec:	4621      	mov	r1, r4
 80094ee:	4628      	mov	r0, r5
 80094f0:	f000 feee 	bl	800a2d0 <_fflush_r>
 80094f4:	b938      	cbnz	r0, 8009506 <__swbuf_r+0x74>
 80094f6:	4638      	mov	r0, r7
 80094f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094fa:	4621      	mov	r1, r4
 80094fc:	4628      	mov	r0, r5
 80094fe:	f000 f805 	bl	800950c <__swsetup_r>
 8009502:	2800      	cmp	r0, #0
 8009504:	d0d5      	beq.n	80094b2 <__swbuf_r+0x20>
 8009506:	f04f 37ff 	mov.w	r7, #4294967295
 800950a:	e7f4      	b.n	80094f6 <__swbuf_r+0x64>

0800950c <__swsetup_r>:
 800950c:	b538      	push	{r3, r4, r5, lr}
 800950e:	4b2a      	ldr	r3, [pc, #168]	; (80095b8 <__swsetup_r+0xac>)
 8009510:	4605      	mov	r5, r0
 8009512:	6818      	ldr	r0, [r3, #0]
 8009514:	460c      	mov	r4, r1
 8009516:	b118      	cbz	r0, 8009520 <__swsetup_r+0x14>
 8009518:	6a03      	ldr	r3, [r0, #32]
 800951a:	b90b      	cbnz	r3, 8009520 <__swsetup_r+0x14>
 800951c:	f7ff feb2 	bl	8009284 <__sinit>
 8009520:	89a3      	ldrh	r3, [r4, #12]
 8009522:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009526:	0718      	lsls	r0, r3, #28
 8009528:	d422      	bmi.n	8009570 <__swsetup_r+0x64>
 800952a:	06d9      	lsls	r1, r3, #27
 800952c:	d407      	bmi.n	800953e <__swsetup_r+0x32>
 800952e:	2309      	movs	r3, #9
 8009530:	602b      	str	r3, [r5, #0]
 8009532:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009536:	81a3      	strh	r3, [r4, #12]
 8009538:	f04f 30ff 	mov.w	r0, #4294967295
 800953c:	e034      	b.n	80095a8 <__swsetup_r+0x9c>
 800953e:	0758      	lsls	r0, r3, #29
 8009540:	d512      	bpl.n	8009568 <__swsetup_r+0x5c>
 8009542:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009544:	b141      	cbz	r1, 8009558 <__swsetup_r+0x4c>
 8009546:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800954a:	4299      	cmp	r1, r3
 800954c:	d002      	beq.n	8009554 <__swsetup_r+0x48>
 800954e:	4628      	mov	r0, r5
 8009550:	f000 f914 	bl	800977c <_free_r>
 8009554:	2300      	movs	r3, #0
 8009556:	6363      	str	r3, [r4, #52]	; 0x34
 8009558:	89a3      	ldrh	r3, [r4, #12]
 800955a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800955e:	81a3      	strh	r3, [r4, #12]
 8009560:	2300      	movs	r3, #0
 8009562:	6063      	str	r3, [r4, #4]
 8009564:	6923      	ldr	r3, [r4, #16]
 8009566:	6023      	str	r3, [r4, #0]
 8009568:	89a3      	ldrh	r3, [r4, #12]
 800956a:	f043 0308 	orr.w	r3, r3, #8
 800956e:	81a3      	strh	r3, [r4, #12]
 8009570:	6923      	ldr	r3, [r4, #16]
 8009572:	b94b      	cbnz	r3, 8009588 <__swsetup_r+0x7c>
 8009574:	89a3      	ldrh	r3, [r4, #12]
 8009576:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800957a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800957e:	d003      	beq.n	8009588 <__swsetup_r+0x7c>
 8009580:	4621      	mov	r1, r4
 8009582:	4628      	mov	r0, r5
 8009584:	f000 fef2 	bl	800a36c <__smakebuf_r>
 8009588:	89a0      	ldrh	r0, [r4, #12]
 800958a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800958e:	f010 0301 	ands.w	r3, r0, #1
 8009592:	d00a      	beq.n	80095aa <__swsetup_r+0x9e>
 8009594:	2300      	movs	r3, #0
 8009596:	60a3      	str	r3, [r4, #8]
 8009598:	6963      	ldr	r3, [r4, #20]
 800959a:	425b      	negs	r3, r3
 800959c:	61a3      	str	r3, [r4, #24]
 800959e:	6923      	ldr	r3, [r4, #16]
 80095a0:	b943      	cbnz	r3, 80095b4 <__swsetup_r+0xa8>
 80095a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80095a6:	d1c4      	bne.n	8009532 <__swsetup_r+0x26>
 80095a8:	bd38      	pop	{r3, r4, r5, pc}
 80095aa:	0781      	lsls	r1, r0, #30
 80095ac:	bf58      	it	pl
 80095ae:	6963      	ldrpl	r3, [r4, #20]
 80095b0:	60a3      	str	r3, [r4, #8]
 80095b2:	e7f4      	b.n	800959e <__swsetup_r+0x92>
 80095b4:	2000      	movs	r0, #0
 80095b6:	e7f7      	b.n	80095a8 <__swsetup_r+0x9c>
 80095b8:	20000078 	.word	0x20000078

080095bc <memset>:
 80095bc:	4402      	add	r2, r0
 80095be:	4603      	mov	r3, r0
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d100      	bne.n	80095c6 <memset+0xa>
 80095c4:	4770      	bx	lr
 80095c6:	f803 1b01 	strb.w	r1, [r3], #1
 80095ca:	e7f9      	b.n	80095c0 <memset+0x4>

080095cc <_close_r>:
 80095cc:	b538      	push	{r3, r4, r5, lr}
 80095ce:	4d06      	ldr	r5, [pc, #24]	; (80095e8 <_close_r+0x1c>)
 80095d0:	2300      	movs	r3, #0
 80095d2:	4604      	mov	r4, r0
 80095d4:	4608      	mov	r0, r1
 80095d6:	602b      	str	r3, [r5, #0]
 80095d8:	f7f7 fe13 	bl	8001202 <_close>
 80095dc:	1c43      	adds	r3, r0, #1
 80095de:	d102      	bne.n	80095e6 <_close_r+0x1a>
 80095e0:	682b      	ldr	r3, [r5, #0]
 80095e2:	b103      	cbz	r3, 80095e6 <_close_r+0x1a>
 80095e4:	6023      	str	r3, [r4, #0]
 80095e6:	bd38      	pop	{r3, r4, r5, pc}
 80095e8:	20001988 	.word	0x20001988

080095ec <_reclaim_reent>:
 80095ec:	4b29      	ldr	r3, [pc, #164]	; (8009694 <_reclaim_reent+0xa8>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4283      	cmp	r3, r0
 80095f2:	b570      	push	{r4, r5, r6, lr}
 80095f4:	4604      	mov	r4, r0
 80095f6:	d04b      	beq.n	8009690 <_reclaim_reent+0xa4>
 80095f8:	69c3      	ldr	r3, [r0, #28]
 80095fa:	b143      	cbz	r3, 800960e <_reclaim_reent+0x22>
 80095fc:	68db      	ldr	r3, [r3, #12]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d144      	bne.n	800968c <_reclaim_reent+0xa0>
 8009602:	69e3      	ldr	r3, [r4, #28]
 8009604:	6819      	ldr	r1, [r3, #0]
 8009606:	b111      	cbz	r1, 800960e <_reclaim_reent+0x22>
 8009608:	4620      	mov	r0, r4
 800960a:	f000 f8b7 	bl	800977c <_free_r>
 800960e:	6961      	ldr	r1, [r4, #20]
 8009610:	b111      	cbz	r1, 8009618 <_reclaim_reent+0x2c>
 8009612:	4620      	mov	r0, r4
 8009614:	f000 f8b2 	bl	800977c <_free_r>
 8009618:	69e1      	ldr	r1, [r4, #28]
 800961a:	b111      	cbz	r1, 8009622 <_reclaim_reent+0x36>
 800961c:	4620      	mov	r0, r4
 800961e:	f000 f8ad 	bl	800977c <_free_r>
 8009622:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009624:	b111      	cbz	r1, 800962c <_reclaim_reent+0x40>
 8009626:	4620      	mov	r0, r4
 8009628:	f000 f8a8 	bl	800977c <_free_r>
 800962c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800962e:	b111      	cbz	r1, 8009636 <_reclaim_reent+0x4a>
 8009630:	4620      	mov	r0, r4
 8009632:	f000 f8a3 	bl	800977c <_free_r>
 8009636:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009638:	b111      	cbz	r1, 8009640 <_reclaim_reent+0x54>
 800963a:	4620      	mov	r0, r4
 800963c:	f000 f89e 	bl	800977c <_free_r>
 8009640:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009642:	b111      	cbz	r1, 800964a <_reclaim_reent+0x5e>
 8009644:	4620      	mov	r0, r4
 8009646:	f000 f899 	bl	800977c <_free_r>
 800964a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800964c:	b111      	cbz	r1, 8009654 <_reclaim_reent+0x68>
 800964e:	4620      	mov	r0, r4
 8009650:	f000 f894 	bl	800977c <_free_r>
 8009654:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009656:	b111      	cbz	r1, 800965e <_reclaim_reent+0x72>
 8009658:	4620      	mov	r0, r4
 800965a:	f000 f88f 	bl	800977c <_free_r>
 800965e:	6a23      	ldr	r3, [r4, #32]
 8009660:	b1b3      	cbz	r3, 8009690 <_reclaim_reent+0xa4>
 8009662:	4620      	mov	r0, r4
 8009664:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009668:	4718      	bx	r3
 800966a:	5949      	ldr	r1, [r1, r5]
 800966c:	b941      	cbnz	r1, 8009680 <_reclaim_reent+0x94>
 800966e:	3504      	adds	r5, #4
 8009670:	69e3      	ldr	r3, [r4, #28]
 8009672:	2d80      	cmp	r5, #128	; 0x80
 8009674:	68d9      	ldr	r1, [r3, #12]
 8009676:	d1f8      	bne.n	800966a <_reclaim_reent+0x7e>
 8009678:	4620      	mov	r0, r4
 800967a:	f000 f87f 	bl	800977c <_free_r>
 800967e:	e7c0      	b.n	8009602 <_reclaim_reent+0x16>
 8009680:	680e      	ldr	r6, [r1, #0]
 8009682:	4620      	mov	r0, r4
 8009684:	f000 f87a 	bl	800977c <_free_r>
 8009688:	4631      	mov	r1, r6
 800968a:	e7ef      	b.n	800966c <_reclaim_reent+0x80>
 800968c:	2500      	movs	r5, #0
 800968e:	e7ef      	b.n	8009670 <_reclaim_reent+0x84>
 8009690:	bd70      	pop	{r4, r5, r6, pc}
 8009692:	bf00      	nop
 8009694:	20000078 	.word	0x20000078

08009698 <_lseek_r>:
 8009698:	b538      	push	{r3, r4, r5, lr}
 800969a:	4d07      	ldr	r5, [pc, #28]	; (80096b8 <_lseek_r+0x20>)
 800969c:	4604      	mov	r4, r0
 800969e:	4608      	mov	r0, r1
 80096a0:	4611      	mov	r1, r2
 80096a2:	2200      	movs	r2, #0
 80096a4:	602a      	str	r2, [r5, #0]
 80096a6:	461a      	mov	r2, r3
 80096a8:	f7f7 fdd2 	bl	8001250 <_lseek>
 80096ac:	1c43      	adds	r3, r0, #1
 80096ae:	d102      	bne.n	80096b6 <_lseek_r+0x1e>
 80096b0:	682b      	ldr	r3, [r5, #0]
 80096b2:	b103      	cbz	r3, 80096b6 <_lseek_r+0x1e>
 80096b4:	6023      	str	r3, [r4, #0]
 80096b6:	bd38      	pop	{r3, r4, r5, pc}
 80096b8:	20001988 	.word	0x20001988

080096bc <_read_r>:
 80096bc:	b538      	push	{r3, r4, r5, lr}
 80096be:	4d07      	ldr	r5, [pc, #28]	; (80096dc <_read_r+0x20>)
 80096c0:	4604      	mov	r4, r0
 80096c2:	4608      	mov	r0, r1
 80096c4:	4611      	mov	r1, r2
 80096c6:	2200      	movs	r2, #0
 80096c8:	602a      	str	r2, [r5, #0]
 80096ca:	461a      	mov	r2, r3
 80096cc:	f7f7 fd7c 	bl	80011c8 <_read>
 80096d0:	1c43      	adds	r3, r0, #1
 80096d2:	d102      	bne.n	80096da <_read_r+0x1e>
 80096d4:	682b      	ldr	r3, [r5, #0]
 80096d6:	b103      	cbz	r3, 80096da <_read_r+0x1e>
 80096d8:	6023      	str	r3, [r4, #0]
 80096da:	bd38      	pop	{r3, r4, r5, pc}
 80096dc:	20001988 	.word	0x20001988

080096e0 <_write_r>:
 80096e0:	b538      	push	{r3, r4, r5, lr}
 80096e2:	4d07      	ldr	r5, [pc, #28]	; (8009700 <_write_r+0x20>)
 80096e4:	4604      	mov	r4, r0
 80096e6:	4608      	mov	r0, r1
 80096e8:	4611      	mov	r1, r2
 80096ea:	2200      	movs	r2, #0
 80096ec:	602a      	str	r2, [r5, #0]
 80096ee:	461a      	mov	r2, r3
 80096f0:	f7f7 f81b 	bl	800072a <_write>
 80096f4:	1c43      	adds	r3, r0, #1
 80096f6:	d102      	bne.n	80096fe <_write_r+0x1e>
 80096f8:	682b      	ldr	r3, [r5, #0]
 80096fa:	b103      	cbz	r3, 80096fe <_write_r+0x1e>
 80096fc:	6023      	str	r3, [r4, #0]
 80096fe:	bd38      	pop	{r3, r4, r5, pc}
 8009700:	20001988 	.word	0x20001988

08009704 <__errno>:
 8009704:	4b01      	ldr	r3, [pc, #4]	; (800970c <__errno+0x8>)
 8009706:	6818      	ldr	r0, [r3, #0]
 8009708:	4770      	bx	lr
 800970a:	bf00      	nop
 800970c:	20000078 	.word	0x20000078

08009710 <__libc_init_array>:
 8009710:	b570      	push	{r4, r5, r6, lr}
 8009712:	4d0d      	ldr	r5, [pc, #52]	; (8009748 <__libc_init_array+0x38>)
 8009714:	4c0d      	ldr	r4, [pc, #52]	; (800974c <__libc_init_array+0x3c>)
 8009716:	1b64      	subs	r4, r4, r5
 8009718:	10a4      	asrs	r4, r4, #2
 800971a:	2600      	movs	r6, #0
 800971c:	42a6      	cmp	r6, r4
 800971e:	d109      	bne.n	8009734 <__libc_init_array+0x24>
 8009720:	4d0b      	ldr	r5, [pc, #44]	; (8009750 <__libc_init_array+0x40>)
 8009722:	4c0c      	ldr	r4, [pc, #48]	; (8009754 <__libc_init_array+0x44>)
 8009724:	f000 fee2 	bl	800a4ec <_init>
 8009728:	1b64      	subs	r4, r4, r5
 800972a:	10a4      	asrs	r4, r4, #2
 800972c:	2600      	movs	r6, #0
 800972e:	42a6      	cmp	r6, r4
 8009730:	d105      	bne.n	800973e <__libc_init_array+0x2e>
 8009732:	bd70      	pop	{r4, r5, r6, pc}
 8009734:	f855 3b04 	ldr.w	r3, [r5], #4
 8009738:	4798      	blx	r3
 800973a:	3601      	adds	r6, #1
 800973c:	e7ee      	b.n	800971c <__libc_init_array+0xc>
 800973e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009742:	4798      	blx	r3
 8009744:	3601      	adds	r6, #1
 8009746:	e7f2      	b.n	800972e <__libc_init_array+0x1e>
 8009748:	0800a6a0 	.word	0x0800a6a0
 800974c:	0800a6a0 	.word	0x0800a6a0
 8009750:	0800a6a0 	.word	0x0800a6a0
 8009754:	0800a6a4 	.word	0x0800a6a4

08009758 <__retarget_lock_init_recursive>:
 8009758:	4770      	bx	lr

0800975a <__retarget_lock_acquire_recursive>:
 800975a:	4770      	bx	lr

0800975c <__retarget_lock_release_recursive>:
 800975c:	4770      	bx	lr

0800975e <memcpy>:
 800975e:	440a      	add	r2, r1
 8009760:	4291      	cmp	r1, r2
 8009762:	f100 33ff 	add.w	r3, r0, #4294967295
 8009766:	d100      	bne.n	800976a <memcpy+0xc>
 8009768:	4770      	bx	lr
 800976a:	b510      	push	{r4, lr}
 800976c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009770:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009774:	4291      	cmp	r1, r2
 8009776:	d1f9      	bne.n	800976c <memcpy+0xe>
 8009778:	bd10      	pop	{r4, pc}
	...

0800977c <_free_r>:
 800977c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800977e:	2900      	cmp	r1, #0
 8009780:	d044      	beq.n	800980c <_free_r+0x90>
 8009782:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009786:	9001      	str	r0, [sp, #4]
 8009788:	2b00      	cmp	r3, #0
 800978a:	f1a1 0404 	sub.w	r4, r1, #4
 800978e:	bfb8      	it	lt
 8009790:	18e4      	addlt	r4, r4, r3
 8009792:	f000 f8df 	bl	8009954 <__malloc_lock>
 8009796:	4a1e      	ldr	r2, [pc, #120]	; (8009810 <_free_r+0x94>)
 8009798:	9801      	ldr	r0, [sp, #4]
 800979a:	6813      	ldr	r3, [r2, #0]
 800979c:	b933      	cbnz	r3, 80097ac <_free_r+0x30>
 800979e:	6063      	str	r3, [r4, #4]
 80097a0:	6014      	str	r4, [r2, #0]
 80097a2:	b003      	add	sp, #12
 80097a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80097a8:	f000 b8da 	b.w	8009960 <__malloc_unlock>
 80097ac:	42a3      	cmp	r3, r4
 80097ae:	d908      	bls.n	80097c2 <_free_r+0x46>
 80097b0:	6825      	ldr	r5, [r4, #0]
 80097b2:	1961      	adds	r1, r4, r5
 80097b4:	428b      	cmp	r3, r1
 80097b6:	bf01      	itttt	eq
 80097b8:	6819      	ldreq	r1, [r3, #0]
 80097ba:	685b      	ldreq	r3, [r3, #4]
 80097bc:	1949      	addeq	r1, r1, r5
 80097be:	6021      	streq	r1, [r4, #0]
 80097c0:	e7ed      	b.n	800979e <_free_r+0x22>
 80097c2:	461a      	mov	r2, r3
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	b10b      	cbz	r3, 80097cc <_free_r+0x50>
 80097c8:	42a3      	cmp	r3, r4
 80097ca:	d9fa      	bls.n	80097c2 <_free_r+0x46>
 80097cc:	6811      	ldr	r1, [r2, #0]
 80097ce:	1855      	adds	r5, r2, r1
 80097d0:	42a5      	cmp	r5, r4
 80097d2:	d10b      	bne.n	80097ec <_free_r+0x70>
 80097d4:	6824      	ldr	r4, [r4, #0]
 80097d6:	4421      	add	r1, r4
 80097d8:	1854      	adds	r4, r2, r1
 80097da:	42a3      	cmp	r3, r4
 80097dc:	6011      	str	r1, [r2, #0]
 80097de:	d1e0      	bne.n	80097a2 <_free_r+0x26>
 80097e0:	681c      	ldr	r4, [r3, #0]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	6053      	str	r3, [r2, #4]
 80097e6:	440c      	add	r4, r1
 80097e8:	6014      	str	r4, [r2, #0]
 80097ea:	e7da      	b.n	80097a2 <_free_r+0x26>
 80097ec:	d902      	bls.n	80097f4 <_free_r+0x78>
 80097ee:	230c      	movs	r3, #12
 80097f0:	6003      	str	r3, [r0, #0]
 80097f2:	e7d6      	b.n	80097a2 <_free_r+0x26>
 80097f4:	6825      	ldr	r5, [r4, #0]
 80097f6:	1961      	adds	r1, r4, r5
 80097f8:	428b      	cmp	r3, r1
 80097fa:	bf04      	itt	eq
 80097fc:	6819      	ldreq	r1, [r3, #0]
 80097fe:	685b      	ldreq	r3, [r3, #4]
 8009800:	6063      	str	r3, [r4, #4]
 8009802:	bf04      	itt	eq
 8009804:	1949      	addeq	r1, r1, r5
 8009806:	6021      	streq	r1, [r4, #0]
 8009808:	6054      	str	r4, [r2, #4]
 800980a:	e7ca      	b.n	80097a2 <_free_r+0x26>
 800980c:	b003      	add	sp, #12
 800980e:	bd30      	pop	{r4, r5, pc}
 8009810:	20001990 	.word	0x20001990

08009814 <sbrk_aligned>:
 8009814:	b570      	push	{r4, r5, r6, lr}
 8009816:	4e0e      	ldr	r6, [pc, #56]	; (8009850 <sbrk_aligned+0x3c>)
 8009818:	460c      	mov	r4, r1
 800981a:	6831      	ldr	r1, [r6, #0]
 800981c:	4605      	mov	r5, r0
 800981e:	b911      	cbnz	r1, 8009826 <sbrk_aligned+0x12>
 8009820:	f000 fe1c 	bl	800a45c <_sbrk_r>
 8009824:	6030      	str	r0, [r6, #0]
 8009826:	4621      	mov	r1, r4
 8009828:	4628      	mov	r0, r5
 800982a:	f000 fe17 	bl	800a45c <_sbrk_r>
 800982e:	1c43      	adds	r3, r0, #1
 8009830:	d00a      	beq.n	8009848 <sbrk_aligned+0x34>
 8009832:	1cc4      	adds	r4, r0, #3
 8009834:	f024 0403 	bic.w	r4, r4, #3
 8009838:	42a0      	cmp	r0, r4
 800983a:	d007      	beq.n	800984c <sbrk_aligned+0x38>
 800983c:	1a21      	subs	r1, r4, r0
 800983e:	4628      	mov	r0, r5
 8009840:	f000 fe0c 	bl	800a45c <_sbrk_r>
 8009844:	3001      	adds	r0, #1
 8009846:	d101      	bne.n	800984c <sbrk_aligned+0x38>
 8009848:	f04f 34ff 	mov.w	r4, #4294967295
 800984c:	4620      	mov	r0, r4
 800984e:	bd70      	pop	{r4, r5, r6, pc}
 8009850:	20001994 	.word	0x20001994

08009854 <_malloc_r>:
 8009854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009858:	1ccd      	adds	r5, r1, #3
 800985a:	f025 0503 	bic.w	r5, r5, #3
 800985e:	3508      	adds	r5, #8
 8009860:	2d0c      	cmp	r5, #12
 8009862:	bf38      	it	cc
 8009864:	250c      	movcc	r5, #12
 8009866:	2d00      	cmp	r5, #0
 8009868:	4607      	mov	r7, r0
 800986a:	db01      	blt.n	8009870 <_malloc_r+0x1c>
 800986c:	42a9      	cmp	r1, r5
 800986e:	d905      	bls.n	800987c <_malloc_r+0x28>
 8009870:	230c      	movs	r3, #12
 8009872:	603b      	str	r3, [r7, #0]
 8009874:	2600      	movs	r6, #0
 8009876:	4630      	mov	r0, r6
 8009878:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800987c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009950 <_malloc_r+0xfc>
 8009880:	f000 f868 	bl	8009954 <__malloc_lock>
 8009884:	f8d8 3000 	ldr.w	r3, [r8]
 8009888:	461c      	mov	r4, r3
 800988a:	bb5c      	cbnz	r4, 80098e4 <_malloc_r+0x90>
 800988c:	4629      	mov	r1, r5
 800988e:	4638      	mov	r0, r7
 8009890:	f7ff ffc0 	bl	8009814 <sbrk_aligned>
 8009894:	1c43      	adds	r3, r0, #1
 8009896:	4604      	mov	r4, r0
 8009898:	d155      	bne.n	8009946 <_malloc_r+0xf2>
 800989a:	f8d8 4000 	ldr.w	r4, [r8]
 800989e:	4626      	mov	r6, r4
 80098a0:	2e00      	cmp	r6, #0
 80098a2:	d145      	bne.n	8009930 <_malloc_r+0xdc>
 80098a4:	2c00      	cmp	r4, #0
 80098a6:	d048      	beq.n	800993a <_malloc_r+0xe6>
 80098a8:	6823      	ldr	r3, [r4, #0]
 80098aa:	4631      	mov	r1, r6
 80098ac:	4638      	mov	r0, r7
 80098ae:	eb04 0903 	add.w	r9, r4, r3
 80098b2:	f000 fdd3 	bl	800a45c <_sbrk_r>
 80098b6:	4581      	cmp	r9, r0
 80098b8:	d13f      	bne.n	800993a <_malloc_r+0xe6>
 80098ba:	6821      	ldr	r1, [r4, #0]
 80098bc:	1a6d      	subs	r5, r5, r1
 80098be:	4629      	mov	r1, r5
 80098c0:	4638      	mov	r0, r7
 80098c2:	f7ff ffa7 	bl	8009814 <sbrk_aligned>
 80098c6:	3001      	adds	r0, #1
 80098c8:	d037      	beq.n	800993a <_malloc_r+0xe6>
 80098ca:	6823      	ldr	r3, [r4, #0]
 80098cc:	442b      	add	r3, r5
 80098ce:	6023      	str	r3, [r4, #0]
 80098d0:	f8d8 3000 	ldr.w	r3, [r8]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d038      	beq.n	800994a <_malloc_r+0xf6>
 80098d8:	685a      	ldr	r2, [r3, #4]
 80098da:	42a2      	cmp	r2, r4
 80098dc:	d12b      	bne.n	8009936 <_malloc_r+0xe2>
 80098de:	2200      	movs	r2, #0
 80098e0:	605a      	str	r2, [r3, #4]
 80098e2:	e00f      	b.n	8009904 <_malloc_r+0xb0>
 80098e4:	6822      	ldr	r2, [r4, #0]
 80098e6:	1b52      	subs	r2, r2, r5
 80098e8:	d41f      	bmi.n	800992a <_malloc_r+0xd6>
 80098ea:	2a0b      	cmp	r2, #11
 80098ec:	d917      	bls.n	800991e <_malloc_r+0xca>
 80098ee:	1961      	adds	r1, r4, r5
 80098f0:	42a3      	cmp	r3, r4
 80098f2:	6025      	str	r5, [r4, #0]
 80098f4:	bf18      	it	ne
 80098f6:	6059      	strne	r1, [r3, #4]
 80098f8:	6863      	ldr	r3, [r4, #4]
 80098fa:	bf08      	it	eq
 80098fc:	f8c8 1000 	streq.w	r1, [r8]
 8009900:	5162      	str	r2, [r4, r5]
 8009902:	604b      	str	r3, [r1, #4]
 8009904:	4638      	mov	r0, r7
 8009906:	f104 060b 	add.w	r6, r4, #11
 800990a:	f000 f829 	bl	8009960 <__malloc_unlock>
 800990e:	f026 0607 	bic.w	r6, r6, #7
 8009912:	1d23      	adds	r3, r4, #4
 8009914:	1af2      	subs	r2, r6, r3
 8009916:	d0ae      	beq.n	8009876 <_malloc_r+0x22>
 8009918:	1b9b      	subs	r3, r3, r6
 800991a:	50a3      	str	r3, [r4, r2]
 800991c:	e7ab      	b.n	8009876 <_malloc_r+0x22>
 800991e:	42a3      	cmp	r3, r4
 8009920:	6862      	ldr	r2, [r4, #4]
 8009922:	d1dd      	bne.n	80098e0 <_malloc_r+0x8c>
 8009924:	f8c8 2000 	str.w	r2, [r8]
 8009928:	e7ec      	b.n	8009904 <_malloc_r+0xb0>
 800992a:	4623      	mov	r3, r4
 800992c:	6864      	ldr	r4, [r4, #4]
 800992e:	e7ac      	b.n	800988a <_malloc_r+0x36>
 8009930:	4634      	mov	r4, r6
 8009932:	6876      	ldr	r6, [r6, #4]
 8009934:	e7b4      	b.n	80098a0 <_malloc_r+0x4c>
 8009936:	4613      	mov	r3, r2
 8009938:	e7cc      	b.n	80098d4 <_malloc_r+0x80>
 800993a:	230c      	movs	r3, #12
 800993c:	603b      	str	r3, [r7, #0]
 800993e:	4638      	mov	r0, r7
 8009940:	f000 f80e 	bl	8009960 <__malloc_unlock>
 8009944:	e797      	b.n	8009876 <_malloc_r+0x22>
 8009946:	6025      	str	r5, [r4, #0]
 8009948:	e7dc      	b.n	8009904 <_malloc_r+0xb0>
 800994a:	605b      	str	r3, [r3, #4]
 800994c:	deff      	udf	#255	; 0xff
 800994e:	bf00      	nop
 8009950:	20001990 	.word	0x20001990

08009954 <__malloc_lock>:
 8009954:	4801      	ldr	r0, [pc, #4]	; (800995c <__malloc_lock+0x8>)
 8009956:	f7ff bf00 	b.w	800975a <__retarget_lock_acquire_recursive>
 800995a:	bf00      	nop
 800995c:	2000198c 	.word	0x2000198c

08009960 <__malloc_unlock>:
 8009960:	4801      	ldr	r0, [pc, #4]	; (8009968 <__malloc_unlock+0x8>)
 8009962:	f7ff befb 	b.w	800975c <__retarget_lock_release_recursive>
 8009966:	bf00      	nop
 8009968:	2000198c 	.word	0x2000198c

0800996c <__ssputs_r>:
 800996c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009970:	688e      	ldr	r6, [r1, #8]
 8009972:	461f      	mov	r7, r3
 8009974:	42be      	cmp	r6, r7
 8009976:	680b      	ldr	r3, [r1, #0]
 8009978:	4682      	mov	sl, r0
 800997a:	460c      	mov	r4, r1
 800997c:	4690      	mov	r8, r2
 800997e:	d82c      	bhi.n	80099da <__ssputs_r+0x6e>
 8009980:	898a      	ldrh	r2, [r1, #12]
 8009982:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009986:	d026      	beq.n	80099d6 <__ssputs_r+0x6a>
 8009988:	6965      	ldr	r5, [r4, #20]
 800998a:	6909      	ldr	r1, [r1, #16]
 800998c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009990:	eba3 0901 	sub.w	r9, r3, r1
 8009994:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009998:	1c7b      	adds	r3, r7, #1
 800999a:	444b      	add	r3, r9
 800999c:	106d      	asrs	r5, r5, #1
 800999e:	429d      	cmp	r5, r3
 80099a0:	bf38      	it	cc
 80099a2:	461d      	movcc	r5, r3
 80099a4:	0553      	lsls	r3, r2, #21
 80099a6:	d527      	bpl.n	80099f8 <__ssputs_r+0x8c>
 80099a8:	4629      	mov	r1, r5
 80099aa:	f7ff ff53 	bl	8009854 <_malloc_r>
 80099ae:	4606      	mov	r6, r0
 80099b0:	b360      	cbz	r0, 8009a0c <__ssputs_r+0xa0>
 80099b2:	6921      	ldr	r1, [r4, #16]
 80099b4:	464a      	mov	r2, r9
 80099b6:	f7ff fed2 	bl	800975e <memcpy>
 80099ba:	89a3      	ldrh	r3, [r4, #12]
 80099bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80099c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099c4:	81a3      	strh	r3, [r4, #12]
 80099c6:	6126      	str	r6, [r4, #16]
 80099c8:	6165      	str	r5, [r4, #20]
 80099ca:	444e      	add	r6, r9
 80099cc:	eba5 0509 	sub.w	r5, r5, r9
 80099d0:	6026      	str	r6, [r4, #0]
 80099d2:	60a5      	str	r5, [r4, #8]
 80099d4:	463e      	mov	r6, r7
 80099d6:	42be      	cmp	r6, r7
 80099d8:	d900      	bls.n	80099dc <__ssputs_r+0x70>
 80099da:	463e      	mov	r6, r7
 80099dc:	6820      	ldr	r0, [r4, #0]
 80099de:	4632      	mov	r2, r6
 80099e0:	4641      	mov	r1, r8
 80099e2:	f000 fcff 	bl	800a3e4 <memmove>
 80099e6:	68a3      	ldr	r3, [r4, #8]
 80099e8:	1b9b      	subs	r3, r3, r6
 80099ea:	60a3      	str	r3, [r4, #8]
 80099ec:	6823      	ldr	r3, [r4, #0]
 80099ee:	4433      	add	r3, r6
 80099f0:	6023      	str	r3, [r4, #0]
 80099f2:	2000      	movs	r0, #0
 80099f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099f8:	462a      	mov	r2, r5
 80099fa:	f000 fd3f 	bl	800a47c <_realloc_r>
 80099fe:	4606      	mov	r6, r0
 8009a00:	2800      	cmp	r0, #0
 8009a02:	d1e0      	bne.n	80099c6 <__ssputs_r+0x5a>
 8009a04:	6921      	ldr	r1, [r4, #16]
 8009a06:	4650      	mov	r0, sl
 8009a08:	f7ff feb8 	bl	800977c <_free_r>
 8009a0c:	230c      	movs	r3, #12
 8009a0e:	f8ca 3000 	str.w	r3, [sl]
 8009a12:	89a3      	ldrh	r3, [r4, #12]
 8009a14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a18:	81a3      	strh	r3, [r4, #12]
 8009a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a1e:	e7e9      	b.n	80099f4 <__ssputs_r+0x88>

08009a20 <_svfiprintf_r>:
 8009a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a24:	4698      	mov	r8, r3
 8009a26:	898b      	ldrh	r3, [r1, #12]
 8009a28:	061b      	lsls	r3, r3, #24
 8009a2a:	b09d      	sub	sp, #116	; 0x74
 8009a2c:	4607      	mov	r7, r0
 8009a2e:	460d      	mov	r5, r1
 8009a30:	4614      	mov	r4, r2
 8009a32:	d50e      	bpl.n	8009a52 <_svfiprintf_r+0x32>
 8009a34:	690b      	ldr	r3, [r1, #16]
 8009a36:	b963      	cbnz	r3, 8009a52 <_svfiprintf_r+0x32>
 8009a38:	2140      	movs	r1, #64	; 0x40
 8009a3a:	f7ff ff0b 	bl	8009854 <_malloc_r>
 8009a3e:	6028      	str	r0, [r5, #0]
 8009a40:	6128      	str	r0, [r5, #16]
 8009a42:	b920      	cbnz	r0, 8009a4e <_svfiprintf_r+0x2e>
 8009a44:	230c      	movs	r3, #12
 8009a46:	603b      	str	r3, [r7, #0]
 8009a48:	f04f 30ff 	mov.w	r0, #4294967295
 8009a4c:	e0d0      	b.n	8009bf0 <_svfiprintf_r+0x1d0>
 8009a4e:	2340      	movs	r3, #64	; 0x40
 8009a50:	616b      	str	r3, [r5, #20]
 8009a52:	2300      	movs	r3, #0
 8009a54:	9309      	str	r3, [sp, #36]	; 0x24
 8009a56:	2320      	movs	r3, #32
 8009a58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a60:	2330      	movs	r3, #48	; 0x30
 8009a62:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009c08 <_svfiprintf_r+0x1e8>
 8009a66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a6a:	f04f 0901 	mov.w	r9, #1
 8009a6e:	4623      	mov	r3, r4
 8009a70:	469a      	mov	sl, r3
 8009a72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a76:	b10a      	cbz	r2, 8009a7c <_svfiprintf_r+0x5c>
 8009a78:	2a25      	cmp	r2, #37	; 0x25
 8009a7a:	d1f9      	bne.n	8009a70 <_svfiprintf_r+0x50>
 8009a7c:	ebba 0b04 	subs.w	fp, sl, r4
 8009a80:	d00b      	beq.n	8009a9a <_svfiprintf_r+0x7a>
 8009a82:	465b      	mov	r3, fp
 8009a84:	4622      	mov	r2, r4
 8009a86:	4629      	mov	r1, r5
 8009a88:	4638      	mov	r0, r7
 8009a8a:	f7ff ff6f 	bl	800996c <__ssputs_r>
 8009a8e:	3001      	adds	r0, #1
 8009a90:	f000 80a9 	beq.w	8009be6 <_svfiprintf_r+0x1c6>
 8009a94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a96:	445a      	add	r2, fp
 8009a98:	9209      	str	r2, [sp, #36]	; 0x24
 8009a9a:	f89a 3000 	ldrb.w	r3, [sl]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	f000 80a1 	beq.w	8009be6 <_svfiprintf_r+0x1c6>
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8009aaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009aae:	f10a 0a01 	add.w	sl, sl, #1
 8009ab2:	9304      	str	r3, [sp, #16]
 8009ab4:	9307      	str	r3, [sp, #28]
 8009ab6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009aba:	931a      	str	r3, [sp, #104]	; 0x68
 8009abc:	4654      	mov	r4, sl
 8009abe:	2205      	movs	r2, #5
 8009ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ac4:	4850      	ldr	r0, [pc, #320]	; (8009c08 <_svfiprintf_r+0x1e8>)
 8009ac6:	f7f6 fb8b 	bl	80001e0 <memchr>
 8009aca:	9a04      	ldr	r2, [sp, #16]
 8009acc:	b9d8      	cbnz	r0, 8009b06 <_svfiprintf_r+0xe6>
 8009ace:	06d0      	lsls	r0, r2, #27
 8009ad0:	bf44      	itt	mi
 8009ad2:	2320      	movmi	r3, #32
 8009ad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ad8:	0711      	lsls	r1, r2, #28
 8009ada:	bf44      	itt	mi
 8009adc:	232b      	movmi	r3, #43	; 0x2b
 8009ade:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ae2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ae6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ae8:	d015      	beq.n	8009b16 <_svfiprintf_r+0xf6>
 8009aea:	9a07      	ldr	r2, [sp, #28]
 8009aec:	4654      	mov	r4, sl
 8009aee:	2000      	movs	r0, #0
 8009af0:	f04f 0c0a 	mov.w	ip, #10
 8009af4:	4621      	mov	r1, r4
 8009af6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009afa:	3b30      	subs	r3, #48	; 0x30
 8009afc:	2b09      	cmp	r3, #9
 8009afe:	d94d      	bls.n	8009b9c <_svfiprintf_r+0x17c>
 8009b00:	b1b0      	cbz	r0, 8009b30 <_svfiprintf_r+0x110>
 8009b02:	9207      	str	r2, [sp, #28]
 8009b04:	e014      	b.n	8009b30 <_svfiprintf_r+0x110>
 8009b06:	eba0 0308 	sub.w	r3, r0, r8
 8009b0a:	fa09 f303 	lsl.w	r3, r9, r3
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	9304      	str	r3, [sp, #16]
 8009b12:	46a2      	mov	sl, r4
 8009b14:	e7d2      	b.n	8009abc <_svfiprintf_r+0x9c>
 8009b16:	9b03      	ldr	r3, [sp, #12]
 8009b18:	1d19      	adds	r1, r3, #4
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	9103      	str	r1, [sp, #12]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	bfbb      	ittet	lt
 8009b22:	425b      	neglt	r3, r3
 8009b24:	f042 0202 	orrlt.w	r2, r2, #2
 8009b28:	9307      	strge	r3, [sp, #28]
 8009b2a:	9307      	strlt	r3, [sp, #28]
 8009b2c:	bfb8      	it	lt
 8009b2e:	9204      	strlt	r2, [sp, #16]
 8009b30:	7823      	ldrb	r3, [r4, #0]
 8009b32:	2b2e      	cmp	r3, #46	; 0x2e
 8009b34:	d10c      	bne.n	8009b50 <_svfiprintf_r+0x130>
 8009b36:	7863      	ldrb	r3, [r4, #1]
 8009b38:	2b2a      	cmp	r3, #42	; 0x2a
 8009b3a:	d134      	bne.n	8009ba6 <_svfiprintf_r+0x186>
 8009b3c:	9b03      	ldr	r3, [sp, #12]
 8009b3e:	1d1a      	adds	r2, r3, #4
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	9203      	str	r2, [sp, #12]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	bfb8      	it	lt
 8009b48:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b4c:	3402      	adds	r4, #2
 8009b4e:	9305      	str	r3, [sp, #20]
 8009b50:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009c18 <_svfiprintf_r+0x1f8>
 8009b54:	7821      	ldrb	r1, [r4, #0]
 8009b56:	2203      	movs	r2, #3
 8009b58:	4650      	mov	r0, sl
 8009b5a:	f7f6 fb41 	bl	80001e0 <memchr>
 8009b5e:	b138      	cbz	r0, 8009b70 <_svfiprintf_r+0x150>
 8009b60:	9b04      	ldr	r3, [sp, #16]
 8009b62:	eba0 000a 	sub.w	r0, r0, sl
 8009b66:	2240      	movs	r2, #64	; 0x40
 8009b68:	4082      	lsls	r2, r0
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	3401      	adds	r4, #1
 8009b6e:	9304      	str	r3, [sp, #16]
 8009b70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b74:	4825      	ldr	r0, [pc, #148]	; (8009c0c <_svfiprintf_r+0x1ec>)
 8009b76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b7a:	2206      	movs	r2, #6
 8009b7c:	f7f6 fb30 	bl	80001e0 <memchr>
 8009b80:	2800      	cmp	r0, #0
 8009b82:	d038      	beq.n	8009bf6 <_svfiprintf_r+0x1d6>
 8009b84:	4b22      	ldr	r3, [pc, #136]	; (8009c10 <_svfiprintf_r+0x1f0>)
 8009b86:	bb1b      	cbnz	r3, 8009bd0 <_svfiprintf_r+0x1b0>
 8009b88:	9b03      	ldr	r3, [sp, #12]
 8009b8a:	3307      	adds	r3, #7
 8009b8c:	f023 0307 	bic.w	r3, r3, #7
 8009b90:	3308      	adds	r3, #8
 8009b92:	9303      	str	r3, [sp, #12]
 8009b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b96:	4433      	add	r3, r6
 8009b98:	9309      	str	r3, [sp, #36]	; 0x24
 8009b9a:	e768      	b.n	8009a6e <_svfiprintf_r+0x4e>
 8009b9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ba0:	460c      	mov	r4, r1
 8009ba2:	2001      	movs	r0, #1
 8009ba4:	e7a6      	b.n	8009af4 <_svfiprintf_r+0xd4>
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	3401      	adds	r4, #1
 8009baa:	9305      	str	r3, [sp, #20]
 8009bac:	4619      	mov	r1, r3
 8009bae:	f04f 0c0a 	mov.w	ip, #10
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bb8:	3a30      	subs	r2, #48	; 0x30
 8009bba:	2a09      	cmp	r2, #9
 8009bbc:	d903      	bls.n	8009bc6 <_svfiprintf_r+0x1a6>
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d0c6      	beq.n	8009b50 <_svfiprintf_r+0x130>
 8009bc2:	9105      	str	r1, [sp, #20]
 8009bc4:	e7c4      	b.n	8009b50 <_svfiprintf_r+0x130>
 8009bc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bca:	4604      	mov	r4, r0
 8009bcc:	2301      	movs	r3, #1
 8009bce:	e7f0      	b.n	8009bb2 <_svfiprintf_r+0x192>
 8009bd0:	ab03      	add	r3, sp, #12
 8009bd2:	9300      	str	r3, [sp, #0]
 8009bd4:	462a      	mov	r2, r5
 8009bd6:	4b0f      	ldr	r3, [pc, #60]	; (8009c14 <_svfiprintf_r+0x1f4>)
 8009bd8:	a904      	add	r1, sp, #16
 8009bda:	4638      	mov	r0, r7
 8009bdc:	f3af 8000 	nop.w
 8009be0:	1c42      	adds	r2, r0, #1
 8009be2:	4606      	mov	r6, r0
 8009be4:	d1d6      	bne.n	8009b94 <_svfiprintf_r+0x174>
 8009be6:	89ab      	ldrh	r3, [r5, #12]
 8009be8:	065b      	lsls	r3, r3, #25
 8009bea:	f53f af2d 	bmi.w	8009a48 <_svfiprintf_r+0x28>
 8009bee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bf0:	b01d      	add	sp, #116	; 0x74
 8009bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bf6:	ab03      	add	r3, sp, #12
 8009bf8:	9300      	str	r3, [sp, #0]
 8009bfa:	462a      	mov	r2, r5
 8009bfc:	4b05      	ldr	r3, [pc, #20]	; (8009c14 <_svfiprintf_r+0x1f4>)
 8009bfe:	a904      	add	r1, sp, #16
 8009c00:	4638      	mov	r0, r7
 8009c02:	f000 f9bd 	bl	8009f80 <_printf_i>
 8009c06:	e7eb      	b.n	8009be0 <_svfiprintf_r+0x1c0>
 8009c08:	0800a66c 	.word	0x0800a66c
 8009c0c:	0800a676 	.word	0x0800a676
 8009c10:	00000000 	.word	0x00000000
 8009c14:	0800996d 	.word	0x0800996d
 8009c18:	0800a672 	.word	0x0800a672

08009c1c <__sfputc_r>:
 8009c1c:	6893      	ldr	r3, [r2, #8]
 8009c1e:	3b01      	subs	r3, #1
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	b410      	push	{r4}
 8009c24:	6093      	str	r3, [r2, #8]
 8009c26:	da08      	bge.n	8009c3a <__sfputc_r+0x1e>
 8009c28:	6994      	ldr	r4, [r2, #24]
 8009c2a:	42a3      	cmp	r3, r4
 8009c2c:	db01      	blt.n	8009c32 <__sfputc_r+0x16>
 8009c2e:	290a      	cmp	r1, #10
 8009c30:	d103      	bne.n	8009c3a <__sfputc_r+0x1e>
 8009c32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c36:	f7ff bc2c 	b.w	8009492 <__swbuf_r>
 8009c3a:	6813      	ldr	r3, [r2, #0]
 8009c3c:	1c58      	adds	r0, r3, #1
 8009c3e:	6010      	str	r0, [r2, #0]
 8009c40:	7019      	strb	r1, [r3, #0]
 8009c42:	4608      	mov	r0, r1
 8009c44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c48:	4770      	bx	lr

08009c4a <__sfputs_r>:
 8009c4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c4c:	4606      	mov	r6, r0
 8009c4e:	460f      	mov	r7, r1
 8009c50:	4614      	mov	r4, r2
 8009c52:	18d5      	adds	r5, r2, r3
 8009c54:	42ac      	cmp	r4, r5
 8009c56:	d101      	bne.n	8009c5c <__sfputs_r+0x12>
 8009c58:	2000      	movs	r0, #0
 8009c5a:	e007      	b.n	8009c6c <__sfputs_r+0x22>
 8009c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c60:	463a      	mov	r2, r7
 8009c62:	4630      	mov	r0, r6
 8009c64:	f7ff ffda 	bl	8009c1c <__sfputc_r>
 8009c68:	1c43      	adds	r3, r0, #1
 8009c6a:	d1f3      	bne.n	8009c54 <__sfputs_r+0xa>
 8009c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009c70 <_vfiprintf_r>:
 8009c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c74:	460d      	mov	r5, r1
 8009c76:	b09d      	sub	sp, #116	; 0x74
 8009c78:	4614      	mov	r4, r2
 8009c7a:	4698      	mov	r8, r3
 8009c7c:	4606      	mov	r6, r0
 8009c7e:	b118      	cbz	r0, 8009c88 <_vfiprintf_r+0x18>
 8009c80:	6a03      	ldr	r3, [r0, #32]
 8009c82:	b90b      	cbnz	r3, 8009c88 <_vfiprintf_r+0x18>
 8009c84:	f7ff fafe 	bl	8009284 <__sinit>
 8009c88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c8a:	07d9      	lsls	r1, r3, #31
 8009c8c:	d405      	bmi.n	8009c9a <_vfiprintf_r+0x2a>
 8009c8e:	89ab      	ldrh	r3, [r5, #12]
 8009c90:	059a      	lsls	r2, r3, #22
 8009c92:	d402      	bmi.n	8009c9a <_vfiprintf_r+0x2a>
 8009c94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c96:	f7ff fd60 	bl	800975a <__retarget_lock_acquire_recursive>
 8009c9a:	89ab      	ldrh	r3, [r5, #12]
 8009c9c:	071b      	lsls	r3, r3, #28
 8009c9e:	d501      	bpl.n	8009ca4 <_vfiprintf_r+0x34>
 8009ca0:	692b      	ldr	r3, [r5, #16]
 8009ca2:	b99b      	cbnz	r3, 8009ccc <_vfiprintf_r+0x5c>
 8009ca4:	4629      	mov	r1, r5
 8009ca6:	4630      	mov	r0, r6
 8009ca8:	f7ff fc30 	bl	800950c <__swsetup_r>
 8009cac:	b170      	cbz	r0, 8009ccc <_vfiprintf_r+0x5c>
 8009cae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cb0:	07dc      	lsls	r4, r3, #31
 8009cb2:	d504      	bpl.n	8009cbe <_vfiprintf_r+0x4e>
 8009cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb8:	b01d      	add	sp, #116	; 0x74
 8009cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cbe:	89ab      	ldrh	r3, [r5, #12]
 8009cc0:	0598      	lsls	r0, r3, #22
 8009cc2:	d4f7      	bmi.n	8009cb4 <_vfiprintf_r+0x44>
 8009cc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cc6:	f7ff fd49 	bl	800975c <__retarget_lock_release_recursive>
 8009cca:	e7f3      	b.n	8009cb4 <_vfiprintf_r+0x44>
 8009ccc:	2300      	movs	r3, #0
 8009cce:	9309      	str	r3, [sp, #36]	; 0x24
 8009cd0:	2320      	movs	r3, #32
 8009cd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cda:	2330      	movs	r3, #48	; 0x30
 8009cdc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009e90 <_vfiprintf_r+0x220>
 8009ce0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ce4:	f04f 0901 	mov.w	r9, #1
 8009ce8:	4623      	mov	r3, r4
 8009cea:	469a      	mov	sl, r3
 8009cec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cf0:	b10a      	cbz	r2, 8009cf6 <_vfiprintf_r+0x86>
 8009cf2:	2a25      	cmp	r2, #37	; 0x25
 8009cf4:	d1f9      	bne.n	8009cea <_vfiprintf_r+0x7a>
 8009cf6:	ebba 0b04 	subs.w	fp, sl, r4
 8009cfa:	d00b      	beq.n	8009d14 <_vfiprintf_r+0xa4>
 8009cfc:	465b      	mov	r3, fp
 8009cfe:	4622      	mov	r2, r4
 8009d00:	4629      	mov	r1, r5
 8009d02:	4630      	mov	r0, r6
 8009d04:	f7ff ffa1 	bl	8009c4a <__sfputs_r>
 8009d08:	3001      	adds	r0, #1
 8009d0a:	f000 80a9 	beq.w	8009e60 <_vfiprintf_r+0x1f0>
 8009d0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d10:	445a      	add	r2, fp
 8009d12:	9209      	str	r2, [sp, #36]	; 0x24
 8009d14:	f89a 3000 	ldrb.w	r3, [sl]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	f000 80a1 	beq.w	8009e60 <_vfiprintf_r+0x1f0>
 8009d1e:	2300      	movs	r3, #0
 8009d20:	f04f 32ff 	mov.w	r2, #4294967295
 8009d24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d28:	f10a 0a01 	add.w	sl, sl, #1
 8009d2c:	9304      	str	r3, [sp, #16]
 8009d2e:	9307      	str	r3, [sp, #28]
 8009d30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d34:	931a      	str	r3, [sp, #104]	; 0x68
 8009d36:	4654      	mov	r4, sl
 8009d38:	2205      	movs	r2, #5
 8009d3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d3e:	4854      	ldr	r0, [pc, #336]	; (8009e90 <_vfiprintf_r+0x220>)
 8009d40:	f7f6 fa4e 	bl	80001e0 <memchr>
 8009d44:	9a04      	ldr	r2, [sp, #16]
 8009d46:	b9d8      	cbnz	r0, 8009d80 <_vfiprintf_r+0x110>
 8009d48:	06d1      	lsls	r1, r2, #27
 8009d4a:	bf44      	itt	mi
 8009d4c:	2320      	movmi	r3, #32
 8009d4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d52:	0713      	lsls	r3, r2, #28
 8009d54:	bf44      	itt	mi
 8009d56:	232b      	movmi	r3, #43	; 0x2b
 8009d58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d5c:	f89a 3000 	ldrb.w	r3, [sl]
 8009d60:	2b2a      	cmp	r3, #42	; 0x2a
 8009d62:	d015      	beq.n	8009d90 <_vfiprintf_r+0x120>
 8009d64:	9a07      	ldr	r2, [sp, #28]
 8009d66:	4654      	mov	r4, sl
 8009d68:	2000      	movs	r0, #0
 8009d6a:	f04f 0c0a 	mov.w	ip, #10
 8009d6e:	4621      	mov	r1, r4
 8009d70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d74:	3b30      	subs	r3, #48	; 0x30
 8009d76:	2b09      	cmp	r3, #9
 8009d78:	d94d      	bls.n	8009e16 <_vfiprintf_r+0x1a6>
 8009d7a:	b1b0      	cbz	r0, 8009daa <_vfiprintf_r+0x13a>
 8009d7c:	9207      	str	r2, [sp, #28]
 8009d7e:	e014      	b.n	8009daa <_vfiprintf_r+0x13a>
 8009d80:	eba0 0308 	sub.w	r3, r0, r8
 8009d84:	fa09 f303 	lsl.w	r3, r9, r3
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	9304      	str	r3, [sp, #16]
 8009d8c:	46a2      	mov	sl, r4
 8009d8e:	e7d2      	b.n	8009d36 <_vfiprintf_r+0xc6>
 8009d90:	9b03      	ldr	r3, [sp, #12]
 8009d92:	1d19      	adds	r1, r3, #4
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	9103      	str	r1, [sp, #12]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	bfbb      	ittet	lt
 8009d9c:	425b      	neglt	r3, r3
 8009d9e:	f042 0202 	orrlt.w	r2, r2, #2
 8009da2:	9307      	strge	r3, [sp, #28]
 8009da4:	9307      	strlt	r3, [sp, #28]
 8009da6:	bfb8      	it	lt
 8009da8:	9204      	strlt	r2, [sp, #16]
 8009daa:	7823      	ldrb	r3, [r4, #0]
 8009dac:	2b2e      	cmp	r3, #46	; 0x2e
 8009dae:	d10c      	bne.n	8009dca <_vfiprintf_r+0x15a>
 8009db0:	7863      	ldrb	r3, [r4, #1]
 8009db2:	2b2a      	cmp	r3, #42	; 0x2a
 8009db4:	d134      	bne.n	8009e20 <_vfiprintf_r+0x1b0>
 8009db6:	9b03      	ldr	r3, [sp, #12]
 8009db8:	1d1a      	adds	r2, r3, #4
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	9203      	str	r2, [sp, #12]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	bfb8      	it	lt
 8009dc2:	f04f 33ff 	movlt.w	r3, #4294967295
 8009dc6:	3402      	adds	r4, #2
 8009dc8:	9305      	str	r3, [sp, #20]
 8009dca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009ea0 <_vfiprintf_r+0x230>
 8009dce:	7821      	ldrb	r1, [r4, #0]
 8009dd0:	2203      	movs	r2, #3
 8009dd2:	4650      	mov	r0, sl
 8009dd4:	f7f6 fa04 	bl	80001e0 <memchr>
 8009dd8:	b138      	cbz	r0, 8009dea <_vfiprintf_r+0x17a>
 8009dda:	9b04      	ldr	r3, [sp, #16]
 8009ddc:	eba0 000a 	sub.w	r0, r0, sl
 8009de0:	2240      	movs	r2, #64	; 0x40
 8009de2:	4082      	lsls	r2, r0
 8009de4:	4313      	orrs	r3, r2
 8009de6:	3401      	adds	r4, #1
 8009de8:	9304      	str	r3, [sp, #16]
 8009dea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dee:	4829      	ldr	r0, [pc, #164]	; (8009e94 <_vfiprintf_r+0x224>)
 8009df0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009df4:	2206      	movs	r2, #6
 8009df6:	f7f6 f9f3 	bl	80001e0 <memchr>
 8009dfa:	2800      	cmp	r0, #0
 8009dfc:	d03f      	beq.n	8009e7e <_vfiprintf_r+0x20e>
 8009dfe:	4b26      	ldr	r3, [pc, #152]	; (8009e98 <_vfiprintf_r+0x228>)
 8009e00:	bb1b      	cbnz	r3, 8009e4a <_vfiprintf_r+0x1da>
 8009e02:	9b03      	ldr	r3, [sp, #12]
 8009e04:	3307      	adds	r3, #7
 8009e06:	f023 0307 	bic.w	r3, r3, #7
 8009e0a:	3308      	adds	r3, #8
 8009e0c:	9303      	str	r3, [sp, #12]
 8009e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e10:	443b      	add	r3, r7
 8009e12:	9309      	str	r3, [sp, #36]	; 0x24
 8009e14:	e768      	b.n	8009ce8 <_vfiprintf_r+0x78>
 8009e16:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e1a:	460c      	mov	r4, r1
 8009e1c:	2001      	movs	r0, #1
 8009e1e:	e7a6      	b.n	8009d6e <_vfiprintf_r+0xfe>
 8009e20:	2300      	movs	r3, #0
 8009e22:	3401      	adds	r4, #1
 8009e24:	9305      	str	r3, [sp, #20]
 8009e26:	4619      	mov	r1, r3
 8009e28:	f04f 0c0a 	mov.w	ip, #10
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e32:	3a30      	subs	r2, #48	; 0x30
 8009e34:	2a09      	cmp	r2, #9
 8009e36:	d903      	bls.n	8009e40 <_vfiprintf_r+0x1d0>
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d0c6      	beq.n	8009dca <_vfiprintf_r+0x15a>
 8009e3c:	9105      	str	r1, [sp, #20]
 8009e3e:	e7c4      	b.n	8009dca <_vfiprintf_r+0x15a>
 8009e40:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e44:	4604      	mov	r4, r0
 8009e46:	2301      	movs	r3, #1
 8009e48:	e7f0      	b.n	8009e2c <_vfiprintf_r+0x1bc>
 8009e4a:	ab03      	add	r3, sp, #12
 8009e4c:	9300      	str	r3, [sp, #0]
 8009e4e:	462a      	mov	r2, r5
 8009e50:	4b12      	ldr	r3, [pc, #72]	; (8009e9c <_vfiprintf_r+0x22c>)
 8009e52:	a904      	add	r1, sp, #16
 8009e54:	4630      	mov	r0, r6
 8009e56:	f3af 8000 	nop.w
 8009e5a:	4607      	mov	r7, r0
 8009e5c:	1c78      	adds	r0, r7, #1
 8009e5e:	d1d6      	bne.n	8009e0e <_vfiprintf_r+0x19e>
 8009e60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e62:	07d9      	lsls	r1, r3, #31
 8009e64:	d405      	bmi.n	8009e72 <_vfiprintf_r+0x202>
 8009e66:	89ab      	ldrh	r3, [r5, #12]
 8009e68:	059a      	lsls	r2, r3, #22
 8009e6a:	d402      	bmi.n	8009e72 <_vfiprintf_r+0x202>
 8009e6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e6e:	f7ff fc75 	bl	800975c <__retarget_lock_release_recursive>
 8009e72:	89ab      	ldrh	r3, [r5, #12]
 8009e74:	065b      	lsls	r3, r3, #25
 8009e76:	f53f af1d 	bmi.w	8009cb4 <_vfiprintf_r+0x44>
 8009e7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e7c:	e71c      	b.n	8009cb8 <_vfiprintf_r+0x48>
 8009e7e:	ab03      	add	r3, sp, #12
 8009e80:	9300      	str	r3, [sp, #0]
 8009e82:	462a      	mov	r2, r5
 8009e84:	4b05      	ldr	r3, [pc, #20]	; (8009e9c <_vfiprintf_r+0x22c>)
 8009e86:	a904      	add	r1, sp, #16
 8009e88:	4630      	mov	r0, r6
 8009e8a:	f000 f879 	bl	8009f80 <_printf_i>
 8009e8e:	e7e4      	b.n	8009e5a <_vfiprintf_r+0x1ea>
 8009e90:	0800a66c 	.word	0x0800a66c
 8009e94:	0800a676 	.word	0x0800a676
 8009e98:	00000000 	.word	0x00000000
 8009e9c:	08009c4b 	.word	0x08009c4b
 8009ea0:	0800a672 	.word	0x0800a672

08009ea4 <_printf_common>:
 8009ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ea8:	4616      	mov	r6, r2
 8009eaa:	4699      	mov	r9, r3
 8009eac:	688a      	ldr	r2, [r1, #8]
 8009eae:	690b      	ldr	r3, [r1, #16]
 8009eb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	bfb8      	it	lt
 8009eb8:	4613      	movlt	r3, r2
 8009eba:	6033      	str	r3, [r6, #0]
 8009ebc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ec0:	4607      	mov	r7, r0
 8009ec2:	460c      	mov	r4, r1
 8009ec4:	b10a      	cbz	r2, 8009eca <_printf_common+0x26>
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	6033      	str	r3, [r6, #0]
 8009eca:	6823      	ldr	r3, [r4, #0]
 8009ecc:	0699      	lsls	r1, r3, #26
 8009ece:	bf42      	ittt	mi
 8009ed0:	6833      	ldrmi	r3, [r6, #0]
 8009ed2:	3302      	addmi	r3, #2
 8009ed4:	6033      	strmi	r3, [r6, #0]
 8009ed6:	6825      	ldr	r5, [r4, #0]
 8009ed8:	f015 0506 	ands.w	r5, r5, #6
 8009edc:	d106      	bne.n	8009eec <_printf_common+0x48>
 8009ede:	f104 0a19 	add.w	sl, r4, #25
 8009ee2:	68e3      	ldr	r3, [r4, #12]
 8009ee4:	6832      	ldr	r2, [r6, #0]
 8009ee6:	1a9b      	subs	r3, r3, r2
 8009ee8:	42ab      	cmp	r3, r5
 8009eea:	dc26      	bgt.n	8009f3a <_printf_common+0x96>
 8009eec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ef0:	1e13      	subs	r3, r2, #0
 8009ef2:	6822      	ldr	r2, [r4, #0]
 8009ef4:	bf18      	it	ne
 8009ef6:	2301      	movne	r3, #1
 8009ef8:	0692      	lsls	r2, r2, #26
 8009efa:	d42b      	bmi.n	8009f54 <_printf_common+0xb0>
 8009efc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f00:	4649      	mov	r1, r9
 8009f02:	4638      	mov	r0, r7
 8009f04:	47c0      	blx	r8
 8009f06:	3001      	adds	r0, #1
 8009f08:	d01e      	beq.n	8009f48 <_printf_common+0xa4>
 8009f0a:	6823      	ldr	r3, [r4, #0]
 8009f0c:	6922      	ldr	r2, [r4, #16]
 8009f0e:	f003 0306 	and.w	r3, r3, #6
 8009f12:	2b04      	cmp	r3, #4
 8009f14:	bf02      	ittt	eq
 8009f16:	68e5      	ldreq	r5, [r4, #12]
 8009f18:	6833      	ldreq	r3, [r6, #0]
 8009f1a:	1aed      	subeq	r5, r5, r3
 8009f1c:	68a3      	ldr	r3, [r4, #8]
 8009f1e:	bf0c      	ite	eq
 8009f20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f24:	2500      	movne	r5, #0
 8009f26:	4293      	cmp	r3, r2
 8009f28:	bfc4      	itt	gt
 8009f2a:	1a9b      	subgt	r3, r3, r2
 8009f2c:	18ed      	addgt	r5, r5, r3
 8009f2e:	2600      	movs	r6, #0
 8009f30:	341a      	adds	r4, #26
 8009f32:	42b5      	cmp	r5, r6
 8009f34:	d11a      	bne.n	8009f6c <_printf_common+0xc8>
 8009f36:	2000      	movs	r0, #0
 8009f38:	e008      	b.n	8009f4c <_printf_common+0xa8>
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	4652      	mov	r2, sl
 8009f3e:	4649      	mov	r1, r9
 8009f40:	4638      	mov	r0, r7
 8009f42:	47c0      	blx	r8
 8009f44:	3001      	adds	r0, #1
 8009f46:	d103      	bne.n	8009f50 <_printf_common+0xac>
 8009f48:	f04f 30ff 	mov.w	r0, #4294967295
 8009f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f50:	3501      	adds	r5, #1
 8009f52:	e7c6      	b.n	8009ee2 <_printf_common+0x3e>
 8009f54:	18e1      	adds	r1, r4, r3
 8009f56:	1c5a      	adds	r2, r3, #1
 8009f58:	2030      	movs	r0, #48	; 0x30
 8009f5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f5e:	4422      	add	r2, r4
 8009f60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f68:	3302      	adds	r3, #2
 8009f6a:	e7c7      	b.n	8009efc <_printf_common+0x58>
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	4622      	mov	r2, r4
 8009f70:	4649      	mov	r1, r9
 8009f72:	4638      	mov	r0, r7
 8009f74:	47c0      	blx	r8
 8009f76:	3001      	adds	r0, #1
 8009f78:	d0e6      	beq.n	8009f48 <_printf_common+0xa4>
 8009f7a:	3601      	adds	r6, #1
 8009f7c:	e7d9      	b.n	8009f32 <_printf_common+0x8e>
	...

08009f80 <_printf_i>:
 8009f80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f84:	7e0f      	ldrb	r7, [r1, #24]
 8009f86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f88:	2f78      	cmp	r7, #120	; 0x78
 8009f8a:	4691      	mov	r9, r2
 8009f8c:	4680      	mov	r8, r0
 8009f8e:	460c      	mov	r4, r1
 8009f90:	469a      	mov	sl, r3
 8009f92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009f96:	d807      	bhi.n	8009fa8 <_printf_i+0x28>
 8009f98:	2f62      	cmp	r7, #98	; 0x62
 8009f9a:	d80a      	bhi.n	8009fb2 <_printf_i+0x32>
 8009f9c:	2f00      	cmp	r7, #0
 8009f9e:	f000 80d4 	beq.w	800a14a <_printf_i+0x1ca>
 8009fa2:	2f58      	cmp	r7, #88	; 0x58
 8009fa4:	f000 80c0 	beq.w	800a128 <_printf_i+0x1a8>
 8009fa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009fb0:	e03a      	b.n	800a028 <_printf_i+0xa8>
 8009fb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009fb6:	2b15      	cmp	r3, #21
 8009fb8:	d8f6      	bhi.n	8009fa8 <_printf_i+0x28>
 8009fba:	a101      	add	r1, pc, #4	; (adr r1, 8009fc0 <_printf_i+0x40>)
 8009fbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fc0:	0800a019 	.word	0x0800a019
 8009fc4:	0800a02d 	.word	0x0800a02d
 8009fc8:	08009fa9 	.word	0x08009fa9
 8009fcc:	08009fa9 	.word	0x08009fa9
 8009fd0:	08009fa9 	.word	0x08009fa9
 8009fd4:	08009fa9 	.word	0x08009fa9
 8009fd8:	0800a02d 	.word	0x0800a02d
 8009fdc:	08009fa9 	.word	0x08009fa9
 8009fe0:	08009fa9 	.word	0x08009fa9
 8009fe4:	08009fa9 	.word	0x08009fa9
 8009fe8:	08009fa9 	.word	0x08009fa9
 8009fec:	0800a131 	.word	0x0800a131
 8009ff0:	0800a059 	.word	0x0800a059
 8009ff4:	0800a0eb 	.word	0x0800a0eb
 8009ff8:	08009fa9 	.word	0x08009fa9
 8009ffc:	08009fa9 	.word	0x08009fa9
 800a000:	0800a153 	.word	0x0800a153
 800a004:	08009fa9 	.word	0x08009fa9
 800a008:	0800a059 	.word	0x0800a059
 800a00c:	08009fa9 	.word	0x08009fa9
 800a010:	08009fa9 	.word	0x08009fa9
 800a014:	0800a0f3 	.word	0x0800a0f3
 800a018:	682b      	ldr	r3, [r5, #0]
 800a01a:	1d1a      	adds	r2, r3, #4
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	602a      	str	r2, [r5, #0]
 800a020:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a024:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a028:	2301      	movs	r3, #1
 800a02a:	e09f      	b.n	800a16c <_printf_i+0x1ec>
 800a02c:	6820      	ldr	r0, [r4, #0]
 800a02e:	682b      	ldr	r3, [r5, #0]
 800a030:	0607      	lsls	r7, r0, #24
 800a032:	f103 0104 	add.w	r1, r3, #4
 800a036:	6029      	str	r1, [r5, #0]
 800a038:	d501      	bpl.n	800a03e <_printf_i+0xbe>
 800a03a:	681e      	ldr	r6, [r3, #0]
 800a03c:	e003      	b.n	800a046 <_printf_i+0xc6>
 800a03e:	0646      	lsls	r6, r0, #25
 800a040:	d5fb      	bpl.n	800a03a <_printf_i+0xba>
 800a042:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a046:	2e00      	cmp	r6, #0
 800a048:	da03      	bge.n	800a052 <_printf_i+0xd2>
 800a04a:	232d      	movs	r3, #45	; 0x2d
 800a04c:	4276      	negs	r6, r6
 800a04e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a052:	485a      	ldr	r0, [pc, #360]	; (800a1bc <_printf_i+0x23c>)
 800a054:	230a      	movs	r3, #10
 800a056:	e012      	b.n	800a07e <_printf_i+0xfe>
 800a058:	682b      	ldr	r3, [r5, #0]
 800a05a:	6820      	ldr	r0, [r4, #0]
 800a05c:	1d19      	adds	r1, r3, #4
 800a05e:	6029      	str	r1, [r5, #0]
 800a060:	0605      	lsls	r5, r0, #24
 800a062:	d501      	bpl.n	800a068 <_printf_i+0xe8>
 800a064:	681e      	ldr	r6, [r3, #0]
 800a066:	e002      	b.n	800a06e <_printf_i+0xee>
 800a068:	0641      	lsls	r1, r0, #25
 800a06a:	d5fb      	bpl.n	800a064 <_printf_i+0xe4>
 800a06c:	881e      	ldrh	r6, [r3, #0]
 800a06e:	4853      	ldr	r0, [pc, #332]	; (800a1bc <_printf_i+0x23c>)
 800a070:	2f6f      	cmp	r7, #111	; 0x6f
 800a072:	bf0c      	ite	eq
 800a074:	2308      	moveq	r3, #8
 800a076:	230a      	movne	r3, #10
 800a078:	2100      	movs	r1, #0
 800a07a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a07e:	6865      	ldr	r5, [r4, #4]
 800a080:	60a5      	str	r5, [r4, #8]
 800a082:	2d00      	cmp	r5, #0
 800a084:	bfa2      	ittt	ge
 800a086:	6821      	ldrge	r1, [r4, #0]
 800a088:	f021 0104 	bicge.w	r1, r1, #4
 800a08c:	6021      	strge	r1, [r4, #0]
 800a08e:	b90e      	cbnz	r6, 800a094 <_printf_i+0x114>
 800a090:	2d00      	cmp	r5, #0
 800a092:	d04b      	beq.n	800a12c <_printf_i+0x1ac>
 800a094:	4615      	mov	r5, r2
 800a096:	fbb6 f1f3 	udiv	r1, r6, r3
 800a09a:	fb03 6711 	mls	r7, r3, r1, r6
 800a09e:	5dc7      	ldrb	r7, [r0, r7]
 800a0a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a0a4:	4637      	mov	r7, r6
 800a0a6:	42bb      	cmp	r3, r7
 800a0a8:	460e      	mov	r6, r1
 800a0aa:	d9f4      	bls.n	800a096 <_printf_i+0x116>
 800a0ac:	2b08      	cmp	r3, #8
 800a0ae:	d10b      	bne.n	800a0c8 <_printf_i+0x148>
 800a0b0:	6823      	ldr	r3, [r4, #0]
 800a0b2:	07de      	lsls	r6, r3, #31
 800a0b4:	d508      	bpl.n	800a0c8 <_printf_i+0x148>
 800a0b6:	6923      	ldr	r3, [r4, #16]
 800a0b8:	6861      	ldr	r1, [r4, #4]
 800a0ba:	4299      	cmp	r1, r3
 800a0bc:	bfde      	ittt	le
 800a0be:	2330      	movle	r3, #48	; 0x30
 800a0c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a0c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a0c8:	1b52      	subs	r2, r2, r5
 800a0ca:	6122      	str	r2, [r4, #16]
 800a0cc:	f8cd a000 	str.w	sl, [sp]
 800a0d0:	464b      	mov	r3, r9
 800a0d2:	aa03      	add	r2, sp, #12
 800a0d4:	4621      	mov	r1, r4
 800a0d6:	4640      	mov	r0, r8
 800a0d8:	f7ff fee4 	bl	8009ea4 <_printf_common>
 800a0dc:	3001      	adds	r0, #1
 800a0de:	d14a      	bne.n	800a176 <_printf_i+0x1f6>
 800a0e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0e4:	b004      	add	sp, #16
 800a0e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0ea:	6823      	ldr	r3, [r4, #0]
 800a0ec:	f043 0320 	orr.w	r3, r3, #32
 800a0f0:	6023      	str	r3, [r4, #0]
 800a0f2:	4833      	ldr	r0, [pc, #204]	; (800a1c0 <_printf_i+0x240>)
 800a0f4:	2778      	movs	r7, #120	; 0x78
 800a0f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a0fa:	6823      	ldr	r3, [r4, #0]
 800a0fc:	6829      	ldr	r1, [r5, #0]
 800a0fe:	061f      	lsls	r7, r3, #24
 800a100:	f851 6b04 	ldr.w	r6, [r1], #4
 800a104:	d402      	bmi.n	800a10c <_printf_i+0x18c>
 800a106:	065f      	lsls	r7, r3, #25
 800a108:	bf48      	it	mi
 800a10a:	b2b6      	uxthmi	r6, r6
 800a10c:	07df      	lsls	r7, r3, #31
 800a10e:	bf48      	it	mi
 800a110:	f043 0320 	orrmi.w	r3, r3, #32
 800a114:	6029      	str	r1, [r5, #0]
 800a116:	bf48      	it	mi
 800a118:	6023      	strmi	r3, [r4, #0]
 800a11a:	b91e      	cbnz	r6, 800a124 <_printf_i+0x1a4>
 800a11c:	6823      	ldr	r3, [r4, #0]
 800a11e:	f023 0320 	bic.w	r3, r3, #32
 800a122:	6023      	str	r3, [r4, #0]
 800a124:	2310      	movs	r3, #16
 800a126:	e7a7      	b.n	800a078 <_printf_i+0xf8>
 800a128:	4824      	ldr	r0, [pc, #144]	; (800a1bc <_printf_i+0x23c>)
 800a12a:	e7e4      	b.n	800a0f6 <_printf_i+0x176>
 800a12c:	4615      	mov	r5, r2
 800a12e:	e7bd      	b.n	800a0ac <_printf_i+0x12c>
 800a130:	682b      	ldr	r3, [r5, #0]
 800a132:	6826      	ldr	r6, [r4, #0]
 800a134:	6961      	ldr	r1, [r4, #20]
 800a136:	1d18      	adds	r0, r3, #4
 800a138:	6028      	str	r0, [r5, #0]
 800a13a:	0635      	lsls	r5, r6, #24
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	d501      	bpl.n	800a144 <_printf_i+0x1c4>
 800a140:	6019      	str	r1, [r3, #0]
 800a142:	e002      	b.n	800a14a <_printf_i+0x1ca>
 800a144:	0670      	lsls	r0, r6, #25
 800a146:	d5fb      	bpl.n	800a140 <_printf_i+0x1c0>
 800a148:	8019      	strh	r1, [r3, #0]
 800a14a:	2300      	movs	r3, #0
 800a14c:	6123      	str	r3, [r4, #16]
 800a14e:	4615      	mov	r5, r2
 800a150:	e7bc      	b.n	800a0cc <_printf_i+0x14c>
 800a152:	682b      	ldr	r3, [r5, #0]
 800a154:	1d1a      	adds	r2, r3, #4
 800a156:	602a      	str	r2, [r5, #0]
 800a158:	681d      	ldr	r5, [r3, #0]
 800a15a:	6862      	ldr	r2, [r4, #4]
 800a15c:	2100      	movs	r1, #0
 800a15e:	4628      	mov	r0, r5
 800a160:	f7f6 f83e 	bl	80001e0 <memchr>
 800a164:	b108      	cbz	r0, 800a16a <_printf_i+0x1ea>
 800a166:	1b40      	subs	r0, r0, r5
 800a168:	6060      	str	r0, [r4, #4]
 800a16a:	6863      	ldr	r3, [r4, #4]
 800a16c:	6123      	str	r3, [r4, #16]
 800a16e:	2300      	movs	r3, #0
 800a170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a174:	e7aa      	b.n	800a0cc <_printf_i+0x14c>
 800a176:	6923      	ldr	r3, [r4, #16]
 800a178:	462a      	mov	r2, r5
 800a17a:	4649      	mov	r1, r9
 800a17c:	4640      	mov	r0, r8
 800a17e:	47d0      	blx	sl
 800a180:	3001      	adds	r0, #1
 800a182:	d0ad      	beq.n	800a0e0 <_printf_i+0x160>
 800a184:	6823      	ldr	r3, [r4, #0]
 800a186:	079b      	lsls	r3, r3, #30
 800a188:	d413      	bmi.n	800a1b2 <_printf_i+0x232>
 800a18a:	68e0      	ldr	r0, [r4, #12]
 800a18c:	9b03      	ldr	r3, [sp, #12]
 800a18e:	4298      	cmp	r0, r3
 800a190:	bfb8      	it	lt
 800a192:	4618      	movlt	r0, r3
 800a194:	e7a6      	b.n	800a0e4 <_printf_i+0x164>
 800a196:	2301      	movs	r3, #1
 800a198:	4632      	mov	r2, r6
 800a19a:	4649      	mov	r1, r9
 800a19c:	4640      	mov	r0, r8
 800a19e:	47d0      	blx	sl
 800a1a0:	3001      	adds	r0, #1
 800a1a2:	d09d      	beq.n	800a0e0 <_printf_i+0x160>
 800a1a4:	3501      	adds	r5, #1
 800a1a6:	68e3      	ldr	r3, [r4, #12]
 800a1a8:	9903      	ldr	r1, [sp, #12]
 800a1aa:	1a5b      	subs	r3, r3, r1
 800a1ac:	42ab      	cmp	r3, r5
 800a1ae:	dcf2      	bgt.n	800a196 <_printf_i+0x216>
 800a1b0:	e7eb      	b.n	800a18a <_printf_i+0x20a>
 800a1b2:	2500      	movs	r5, #0
 800a1b4:	f104 0619 	add.w	r6, r4, #25
 800a1b8:	e7f5      	b.n	800a1a6 <_printf_i+0x226>
 800a1ba:	bf00      	nop
 800a1bc:	0800a67d 	.word	0x0800a67d
 800a1c0:	0800a68e 	.word	0x0800a68e

0800a1c4 <__sflush_r>:
 800a1c4:	898a      	ldrh	r2, [r1, #12]
 800a1c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1ca:	4605      	mov	r5, r0
 800a1cc:	0710      	lsls	r0, r2, #28
 800a1ce:	460c      	mov	r4, r1
 800a1d0:	d458      	bmi.n	800a284 <__sflush_r+0xc0>
 800a1d2:	684b      	ldr	r3, [r1, #4]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	dc05      	bgt.n	800a1e4 <__sflush_r+0x20>
 800a1d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	dc02      	bgt.n	800a1e4 <__sflush_r+0x20>
 800a1de:	2000      	movs	r0, #0
 800a1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1e6:	2e00      	cmp	r6, #0
 800a1e8:	d0f9      	beq.n	800a1de <__sflush_r+0x1a>
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a1f0:	682f      	ldr	r7, [r5, #0]
 800a1f2:	6a21      	ldr	r1, [r4, #32]
 800a1f4:	602b      	str	r3, [r5, #0]
 800a1f6:	d032      	beq.n	800a25e <__sflush_r+0x9a>
 800a1f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a1fa:	89a3      	ldrh	r3, [r4, #12]
 800a1fc:	075a      	lsls	r2, r3, #29
 800a1fe:	d505      	bpl.n	800a20c <__sflush_r+0x48>
 800a200:	6863      	ldr	r3, [r4, #4]
 800a202:	1ac0      	subs	r0, r0, r3
 800a204:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a206:	b10b      	cbz	r3, 800a20c <__sflush_r+0x48>
 800a208:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a20a:	1ac0      	subs	r0, r0, r3
 800a20c:	2300      	movs	r3, #0
 800a20e:	4602      	mov	r2, r0
 800a210:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a212:	6a21      	ldr	r1, [r4, #32]
 800a214:	4628      	mov	r0, r5
 800a216:	47b0      	blx	r6
 800a218:	1c43      	adds	r3, r0, #1
 800a21a:	89a3      	ldrh	r3, [r4, #12]
 800a21c:	d106      	bne.n	800a22c <__sflush_r+0x68>
 800a21e:	6829      	ldr	r1, [r5, #0]
 800a220:	291d      	cmp	r1, #29
 800a222:	d82b      	bhi.n	800a27c <__sflush_r+0xb8>
 800a224:	4a29      	ldr	r2, [pc, #164]	; (800a2cc <__sflush_r+0x108>)
 800a226:	410a      	asrs	r2, r1
 800a228:	07d6      	lsls	r6, r2, #31
 800a22a:	d427      	bmi.n	800a27c <__sflush_r+0xb8>
 800a22c:	2200      	movs	r2, #0
 800a22e:	6062      	str	r2, [r4, #4]
 800a230:	04d9      	lsls	r1, r3, #19
 800a232:	6922      	ldr	r2, [r4, #16]
 800a234:	6022      	str	r2, [r4, #0]
 800a236:	d504      	bpl.n	800a242 <__sflush_r+0x7e>
 800a238:	1c42      	adds	r2, r0, #1
 800a23a:	d101      	bne.n	800a240 <__sflush_r+0x7c>
 800a23c:	682b      	ldr	r3, [r5, #0]
 800a23e:	b903      	cbnz	r3, 800a242 <__sflush_r+0x7e>
 800a240:	6560      	str	r0, [r4, #84]	; 0x54
 800a242:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a244:	602f      	str	r7, [r5, #0]
 800a246:	2900      	cmp	r1, #0
 800a248:	d0c9      	beq.n	800a1de <__sflush_r+0x1a>
 800a24a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a24e:	4299      	cmp	r1, r3
 800a250:	d002      	beq.n	800a258 <__sflush_r+0x94>
 800a252:	4628      	mov	r0, r5
 800a254:	f7ff fa92 	bl	800977c <_free_r>
 800a258:	2000      	movs	r0, #0
 800a25a:	6360      	str	r0, [r4, #52]	; 0x34
 800a25c:	e7c0      	b.n	800a1e0 <__sflush_r+0x1c>
 800a25e:	2301      	movs	r3, #1
 800a260:	4628      	mov	r0, r5
 800a262:	47b0      	blx	r6
 800a264:	1c41      	adds	r1, r0, #1
 800a266:	d1c8      	bne.n	800a1fa <__sflush_r+0x36>
 800a268:	682b      	ldr	r3, [r5, #0]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d0c5      	beq.n	800a1fa <__sflush_r+0x36>
 800a26e:	2b1d      	cmp	r3, #29
 800a270:	d001      	beq.n	800a276 <__sflush_r+0xb2>
 800a272:	2b16      	cmp	r3, #22
 800a274:	d101      	bne.n	800a27a <__sflush_r+0xb6>
 800a276:	602f      	str	r7, [r5, #0]
 800a278:	e7b1      	b.n	800a1de <__sflush_r+0x1a>
 800a27a:	89a3      	ldrh	r3, [r4, #12]
 800a27c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a280:	81a3      	strh	r3, [r4, #12]
 800a282:	e7ad      	b.n	800a1e0 <__sflush_r+0x1c>
 800a284:	690f      	ldr	r7, [r1, #16]
 800a286:	2f00      	cmp	r7, #0
 800a288:	d0a9      	beq.n	800a1de <__sflush_r+0x1a>
 800a28a:	0793      	lsls	r3, r2, #30
 800a28c:	680e      	ldr	r6, [r1, #0]
 800a28e:	bf08      	it	eq
 800a290:	694b      	ldreq	r3, [r1, #20]
 800a292:	600f      	str	r7, [r1, #0]
 800a294:	bf18      	it	ne
 800a296:	2300      	movne	r3, #0
 800a298:	eba6 0807 	sub.w	r8, r6, r7
 800a29c:	608b      	str	r3, [r1, #8]
 800a29e:	f1b8 0f00 	cmp.w	r8, #0
 800a2a2:	dd9c      	ble.n	800a1de <__sflush_r+0x1a>
 800a2a4:	6a21      	ldr	r1, [r4, #32]
 800a2a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a2a8:	4643      	mov	r3, r8
 800a2aa:	463a      	mov	r2, r7
 800a2ac:	4628      	mov	r0, r5
 800a2ae:	47b0      	blx	r6
 800a2b0:	2800      	cmp	r0, #0
 800a2b2:	dc06      	bgt.n	800a2c2 <__sflush_r+0xfe>
 800a2b4:	89a3      	ldrh	r3, [r4, #12]
 800a2b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2ba:	81a3      	strh	r3, [r4, #12]
 800a2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c0:	e78e      	b.n	800a1e0 <__sflush_r+0x1c>
 800a2c2:	4407      	add	r7, r0
 800a2c4:	eba8 0800 	sub.w	r8, r8, r0
 800a2c8:	e7e9      	b.n	800a29e <__sflush_r+0xda>
 800a2ca:	bf00      	nop
 800a2cc:	dfbffffe 	.word	0xdfbffffe

0800a2d0 <_fflush_r>:
 800a2d0:	b538      	push	{r3, r4, r5, lr}
 800a2d2:	690b      	ldr	r3, [r1, #16]
 800a2d4:	4605      	mov	r5, r0
 800a2d6:	460c      	mov	r4, r1
 800a2d8:	b913      	cbnz	r3, 800a2e0 <_fflush_r+0x10>
 800a2da:	2500      	movs	r5, #0
 800a2dc:	4628      	mov	r0, r5
 800a2de:	bd38      	pop	{r3, r4, r5, pc}
 800a2e0:	b118      	cbz	r0, 800a2ea <_fflush_r+0x1a>
 800a2e2:	6a03      	ldr	r3, [r0, #32]
 800a2e4:	b90b      	cbnz	r3, 800a2ea <_fflush_r+0x1a>
 800a2e6:	f7fe ffcd 	bl	8009284 <__sinit>
 800a2ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d0f3      	beq.n	800a2da <_fflush_r+0xa>
 800a2f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a2f4:	07d0      	lsls	r0, r2, #31
 800a2f6:	d404      	bmi.n	800a302 <_fflush_r+0x32>
 800a2f8:	0599      	lsls	r1, r3, #22
 800a2fa:	d402      	bmi.n	800a302 <_fflush_r+0x32>
 800a2fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2fe:	f7ff fa2c 	bl	800975a <__retarget_lock_acquire_recursive>
 800a302:	4628      	mov	r0, r5
 800a304:	4621      	mov	r1, r4
 800a306:	f7ff ff5d 	bl	800a1c4 <__sflush_r>
 800a30a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a30c:	07da      	lsls	r2, r3, #31
 800a30e:	4605      	mov	r5, r0
 800a310:	d4e4      	bmi.n	800a2dc <_fflush_r+0xc>
 800a312:	89a3      	ldrh	r3, [r4, #12]
 800a314:	059b      	lsls	r3, r3, #22
 800a316:	d4e1      	bmi.n	800a2dc <_fflush_r+0xc>
 800a318:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a31a:	f7ff fa1f 	bl	800975c <__retarget_lock_release_recursive>
 800a31e:	e7dd      	b.n	800a2dc <_fflush_r+0xc>

0800a320 <__swhatbuf_r>:
 800a320:	b570      	push	{r4, r5, r6, lr}
 800a322:	460c      	mov	r4, r1
 800a324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a328:	2900      	cmp	r1, #0
 800a32a:	b096      	sub	sp, #88	; 0x58
 800a32c:	4615      	mov	r5, r2
 800a32e:	461e      	mov	r6, r3
 800a330:	da0d      	bge.n	800a34e <__swhatbuf_r+0x2e>
 800a332:	89a3      	ldrh	r3, [r4, #12]
 800a334:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a338:	f04f 0100 	mov.w	r1, #0
 800a33c:	bf0c      	ite	eq
 800a33e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a342:	2340      	movne	r3, #64	; 0x40
 800a344:	2000      	movs	r0, #0
 800a346:	6031      	str	r1, [r6, #0]
 800a348:	602b      	str	r3, [r5, #0]
 800a34a:	b016      	add	sp, #88	; 0x58
 800a34c:	bd70      	pop	{r4, r5, r6, pc}
 800a34e:	466a      	mov	r2, sp
 800a350:	f000 f862 	bl	800a418 <_fstat_r>
 800a354:	2800      	cmp	r0, #0
 800a356:	dbec      	blt.n	800a332 <__swhatbuf_r+0x12>
 800a358:	9901      	ldr	r1, [sp, #4]
 800a35a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a35e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a362:	4259      	negs	r1, r3
 800a364:	4159      	adcs	r1, r3
 800a366:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a36a:	e7eb      	b.n	800a344 <__swhatbuf_r+0x24>

0800a36c <__smakebuf_r>:
 800a36c:	898b      	ldrh	r3, [r1, #12]
 800a36e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a370:	079d      	lsls	r5, r3, #30
 800a372:	4606      	mov	r6, r0
 800a374:	460c      	mov	r4, r1
 800a376:	d507      	bpl.n	800a388 <__smakebuf_r+0x1c>
 800a378:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a37c:	6023      	str	r3, [r4, #0]
 800a37e:	6123      	str	r3, [r4, #16]
 800a380:	2301      	movs	r3, #1
 800a382:	6163      	str	r3, [r4, #20]
 800a384:	b002      	add	sp, #8
 800a386:	bd70      	pop	{r4, r5, r6, pc}
 800a388:	ab01      	add	r3, sp, #4
 800a38a:	466a      	mov	r2, sp
 800a38c:	f7ff ffc8 	bl	800a320 <__swhatbuf_r>
 800a390:	9900      	ldr	r1, [sp, #0]
 800a392:	4605      	mov	r5, r0
 800a394:	4630      	mov	r0, r6
 800a396:	f7ff fa5d 	bl	8009854 <_malloc_r>
 800a39a:	b948      	cbnz	r0, 800a3b0 <__smakebuf_r+0x44>
 800a39c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3a0:	059a      	lsls	r2, r3, #22
 800a3a2:	d4ef      	bmi.n	800a384 <__smakebuf_r+0x18>
 800a3a4:	f023 0303 	bic.w	r3, r3, #3
 800a3a8:	f043 0302 	orr.w	r3, r3, #2
 800a3ac:	81a3      	strh	r3, [r4, #12]
 800a3ae:	e7e3      	b.n	800a378 <__smakebuf_r+0xc>
 800a3b0:	89a3      	ldrh	r3, [r4, #12]
 800a3b2:	6020      	str	r0, [r4, #0]
 800a3b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3b8:	81a3      	strh	r3, [r4, #12]
 800a3ba:	9b00      	ldr	r3, [sp, #0]
 800a3bc:	6163      	str	r3, [r4, #20]
 800a3be:	9b01      	ldr	r3, [sp, #4]
 800a3c0:	6120      	str	r0, [r4, #16]
 800a3c2:	b15b      	cbz	r3, 800a3dc <__smakebuf_r+0x70>
 800a3c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3c8:	4630      	mov	r0, r6
 800a3ca:	f000 f837 	bl	800a43c <_isatty_r>
 800a3ce:	b128      	cbz	r0, 800a3dc <__smakebuf_r+0x70>
 800a3d0:	89a3      	ldrh	r3, [r4, #12]
 800a3d2:	f023 0303 	bic.w	r3, r3, #3
 800a3d6:	f043 0301 	orr.w	r3, r3, #1
 800a3da:	81a3      	strh	r3, [r4, #12]
 800a3dc:	89a3      	ldrh	r3, [r4, #12]
 800a3de:	431d      	orrs	r5, r3
 800a3e0:	81a5      	strh	r5, [r4, #12]
 800a3e2:	e7cf      	b.n	800a384 <__smakebuf_r+0x18>

0800a3e4 <memmove>:
 800a3e4:	4288      	cmp	r0, r1
 800a3e6:	b510      	push	{r4, lr}
 800a3e8:	eb01 0402 	add.w	r4, r1, r2
 800a3ec:	d902      	bls.n	800a3f4 <memmove+0x10>
 800a3ee:	4284      	cmp	r4, r0
 800a3f0:	4623      	mov	r3, r4
 800a3f2:	d807      	bhi.n	800a404 <memmove+0x20>
 800a3f4:	1e43      	subs	r3, r0, #1
 800a3f6:	42a1      	cmp	r1, r4
 800a3f8:	d008      	beq.n	800a40c <memmove+0x28>
 800a3fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a402:	e7f8      	b.n	800a3f6 <memmove+0x12>
 800a404:	4402      	add	r2, r0
 800a406:	4601      	mov	r1, r0
 800a408:	428a      	cmp	r2, r1
 800a40a:	d100      	bne.n	800a40e <memmove+0x2a>
 800a40c:	bd10      	pop	{r4, pc}
 800a40e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a412:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a416:	e7f7      	b.n	800a408 <memmove+0x24>

0800a418 <_fstat_r>:
 800a418:	b538      	push	{r3, r4, r5, lr}
 800a41a:	4d07      	ldr	r5, [pc, #28]	; (800a438 <_fstat_r+0x20>)
 800a41c:	2300      	movs	r3, #0
 800a41e:	4604      	mov	r4, r0
 800a420:	4608      	mov	r0, r1
 800a422:	4611      	mov	r1, r2
 800a424:	602b      	str	r3, [r5, #0]
 800a426:	f7f6 fef8 	bl	800121a <_fstat>
 800a42a:	1c43      	adds	r3, r0, #1
 800a42c:	d102      	bne.n	800a434 <_fstat_r+0x1c>
 800a42e:	682b      	ldr	r3, [r5, #0]
 800a430:	b103      	cbz	r3, 800a434 <_fstat_r+0x1c>
 800a432:	6023      	str	r3, [r4, #0]
 800a434:	bd38      	pop	{r3, r4, r5, pc}
 800a436:	bf00      	nop
 800a438:	20001988 	.word	0x20001988

0800a43c <_isatty_r>:
 800a43c:	b538      	push	{r3, r4, r5, lr}
 800a43e:	4d06      	ldr	r5, [pc, #24]	; (800a458 <_isatty_r+0x1c>)
 800a440:	2300      	movs	r3, #0
 800a442:	4604      	mov	r4, r0
 800a444:	4608      	mov	r0, r1
 800a446:	602b      	str	r3, [r5, #0]
 800a448:	f7f6 fef7 	bl	800123a <_isatty>
 800a44c:	1c43      	adds	r3, r0, #1
 800a44e:	d102      	bne.n	800a456 <_isatty_r+0x1a>
 800a450:	682b      	ldr	r3, [r5, #0]
 800a452:	b103      	cbz	r3, 800a456 <_isatty_r+0x1a>
 800a454:	6023      	str	r3, [r4, #0]
 800a456:	bd38      	pop	{r3, r4, r5, pc}
 800a458:	20001988 	.word	0x20001988

0800a45c <_sbrk_r>:
 800a45c:	b538      	push	{r3, r4, r5, lr}
 800a45e:	4d06      	ldr	r5, [pc, #24]	; (800a478 <_sbrk_r+0x1c>)
 800a460:	2300      	movs	r3, #0
 800a462:	4604      	mov	r4, r0
 800a464:	4608      	mov	r0, r1
 800a466:	602b      	str	r3, [r5, #0]
 800a468:	f7f6 ff00 	bl	800126c <_sbrk>
 800a46c:	1c43      	adds	r3, r0, #1
 800a46e:	d102      	bne.n	800a476 <_sbrk_r+0x1a>
 800a470:	682b      	ldr	r3, [r5, #0]
 800a472:	b103      	cbz	r3, 800a476 <_sbrk_r+0x1a>
 800a474:	6023      	str	r3, [r4, #0]
 800a476:	bd38      	pop	{r3, r4, r5, pc}
 800a478:	20001988 	.word	0x20001988

0800a47c <_realloc_r>:
 800a47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a480:	4680      	mov	r8, r0
 800a482:	4614      	mov	r4, r2
 800a484:	460e      	mov	r6, r1
 800a486:	b921      	cbnz	r1, 800a492 <_realloc_r+0x16>
 800a488:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a48c:	4611      	mov	r1, r2
 800a48e:	f7ff b9e1 	b.w	8009854 <_malloc_r>
 800a492:	b92a      	cbnz	r2, 800a4a0 <_realloc_r+0x24>
 800a494:	f7ff f972 	bl	800977c <_free_r>
 800a498:	4625      	mov	r5, r4
 800a49a:	4628      	mov	r0, r5
 800a49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4a0:	f000 f81b 	bl	800a4da <_malloc_usable_size_r>
 800a4a4:	4284      	cmp	r4, r0
 800a4a6:	4607      	mov	r7, r0
 800a4a8:	d802      	bhi.n	800a4b0 <_realloc_r+0x34>
 800a4aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a4ae:	d812      	bhi.n	800a4d6 <_realloc_r+0x5a>
 800a4b0:	4621      	mov	r1, r4
 800a4b2:	4640      	mov	r0, r8
 800a4b4:	f7ff f9ce 	bl	8009854 <_malloc_r>
 800a4b8:	4605      	mov	r5, r0
 800a4ba:	2800      	cmp	r0, #0
 800a4bc:	d0ed      	beq.n	800a49a <_realloc_r+0x1e>
 800a4be:	42bc      	cmp	r4, r7
 800a4c0:	4622      	mov	r2, r4
 800a4c2:	4631      	mov	r1, r6
 800a4c4:	bf28      	it	cs
 800a4c6:	463a      	movcs	r2, r7
 800a4c8:	f7ff f949 	bl	800975e <memcpy>
 800a4cc:	4631      	mov	r1, r6
 800a4ce:	4640      	mov	r0, r8
 800a4d0:	f7ff f954 	bl	800977c <_free_r>
 800a4d4:	e7e1      	b.n	800a49a <_realloc_r+0x1e>
 800a4d6:	4635      	mov	r5, r6
 800a4d8:	e7df      	b.n	800a49a <_realloc_r+0x1e>

0800a4da <_malloc_usable_size_r>:
 800a4da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4de:	1f18      	subs	r0, r3, #4
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	bfbc      	itt	lt
 800a4e4:	580b      	ldrlt	r3, [r1, r0]
 800a4e6:	18c0      	addlt	r0, r0, r3
 800a4e8:	4770      	bx	lr
	...

0800a4ec <_init>:
 800a4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ee:	bf00      	nop
 800a4f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4f2:	bc08      	pop	{r3}
 800a4f4:	469e      	mov	lr, r3
 800a4f6:	4770      	bx	lr

0800a4f8 <_fini>:
 800a4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4fa:	bf00      	nop
 800a4fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4fe:	bc08      	pop	{r3}
 800a500:	469e      	mov	lr, r3
 800a502:	4770      	bx	lr
