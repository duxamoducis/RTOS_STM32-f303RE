
RTOS_STM32_F303RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b34  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08009cd4  08009cd4  00019cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e70  08009e70  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08009e70  08009e70  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009e70  08009e70  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e70  08009e70  00019e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e74  08009e74  00019e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08009e78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          0000191c  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001998  20001998  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e60a  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004117  00000000  00000000  0003e6f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001908  00000000  00000000  00042810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000138d  00000000  00000000  00044118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024eeb  00000000  00000000  000454a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001fa71  00000000  00000000  0006a390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000df951  00000000  00000000  00089e01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007244  00000000  00000000  00169754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000083  00000000  00000000  00170998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009cbc 	.word	0x08009cbc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08009cbc 	.word	0x08009cbc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	4a07      	ldr	r2, [pc, #28]	; (80002ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000290:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000292:	68bb      	ldr	r3, [r7, #8]
 8000294:	4a06      	ldr	r2, [pc, #24]	; (80002b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000296:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	2280      	movs	r2, #128	; 0x80
 800029c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	20000098 	.word	0x20000098
 80002b0:	20000138 	.word	0x20000138

080002b4 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	60f8      	str	r0, [r7, #12]
 80002bc:	60b9      	str	r1, [r7, #8]
 80002be:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	4a07      	ldr	r2, [pc, #28]	; (80002e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80002c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80002c6:	68bb      	ldr	r3, [r7, #8]
 80002c8:	4a06      	ldr	r2, [pc, #24]	; (80002e4 <vApplicationGetTimerTaskMemory+0x30>)
 80002ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002d2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80002d4:	bf00      	nop
 80002d6:	3714      	adds	r7, #20
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr
 80002e0:	20000338 	.word	0x20000338
 80002e4:	200003d8 	.word	0x200003d8

080002e8 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4603      	mov	r3, r0
 80002f0:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80002f2:	4a38      	ldr	r2, [pc, #224]	; (80003d4 <HD44780_Init+0xec>)
 80002f4:	79fb      	ldrb	r3, [r7, #7]
 80002f6:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80002f8:	4b37      	ldr	r3, [pc, #220]	; (80003d8 <HD44780_Init+0xf0>)
 80002fa:	2208      	movs	r2, #8
 80002fc:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80002fe:	4b37      	ldr	r3, [pc, #220]	; (80003dc <HD44780_Init+0xf4>)
 8000300:	2200      	movs	r2, #0
 8000302:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000304:	4b33      	ldr	r3, [pc, #204]	; (80003d4 <HD44780_Init+0xec>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	2b01      	cmp	r3, #1
 800030a:	d907      	bls.n	800031c <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 800030c:	4b33      	ldr	r3, [pc, #204]	; (80003dc <HD44780_Init+0xf4>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	f043 0308 	orr.w	r3, r3, #8
 8000314:	b2da      	uxtb	r2, r3
 8000316:	4b31      	ldr	r3, [pc, #196]	; (80003dc <HD44780_Init+0xf4>)
 8000318:	701a      	strb	r2, [r3, #0]
 800031a:	e006      	b.n	800032a <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 800031c:	4b2f      	ldr	r3, [pc, #188]	; (80003dc <HD44780_Init+0xf4>)
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	f043 0304 	orr.w	r3, r3, #4
 8000324:	b2da      	uxtb	r2, r3
 8000326:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <HD44780_Init+0xf4>)
 8000328:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800032a:	f000 f985 	bl	8000638 <DelayInit>
  HAL_Delay(50);
 800032e:	2032      	movs	r0, #50	; 0x32
 8000330:	f001 f830 	bl	8001394 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000334:	4b28      	ldr	r3, [pc, #160]	; (80003d8 <HD44780_Init+0xf0>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	4618      	mov	r0, r3
 800033a:	f000 f943 	bl	80005c4 <ExpanderWrite>
  HAL_Delay(1000);
 800033e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000342:	f001 f827 	bl	8001394 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000346:	2030      	movs	r0, #48	; 0x30
 8000348:	f000 f92b 	bl	80005a2 <Write4Bits>
  DelayUS(4500);
 800034c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000350:	f000 f99c 	bl	800068c <DelayUS>

  Write4Bits(0x03 << 4);
 8000354:	2030      	movs	r0, #48	; 0x30
 8000356:	f000 f924 	bl	80005a2 <Write4Bits>
  DelayUS(4500);
 800035a:	f241 1094 	movw	r0, #4500	; 0x1194
 800035e:	f000 f995 	bl	800068c <DelayUS>

  Write4Bits(0x03 << 4);
 8000362:	2030      	movs	r0, #48	; 0x30
 8000364:	f000 f91d 	bl	80005a2 <Write4Bits>
  DelayUS(4500);
 8000368:	f241 1094 	movw	r0, #4500	; 0x1194
 800036c:	f000 f98e 	bl	800068c <DelayUS>

  Write4Bits(0x02 << 4);
 8000370:	2020      	movs	r0, #32
 8000372:	f000 f916 	bl	80005a2 <Write4Bits>
  DelayUS(100);
 8000376:	2064      	movs	r0, #100	; 0x64
 8000378:	f000 f988 	bl	800068c <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 800037c:	4b17      	ldr	r3, [pc, #92]	; (80003dc <HD44780_Init+0xf4>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	f043 0320 	orr.w	r3, r3, #32
 8000384:	b2db      	uxtb	r3, r3
 8000386:	4618      	mov	r0, r3
 8000388:	f000 f8ce 	bl	8000528 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800038c:	4b14      	ldr	r3, [pc, #80]	; (80003e0 <HD44780_Init+0xf8>)
 800038e:	2204      	movs	r2, #4
 8000390:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000392:	f000 f875 	bl	8000480 <HD44780_Display>
  HD44780_Clear();
 8000396:	f000 f82b 	bl	80003f0 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800039a:	4b12      	ldr	r3, [pc, #72]	; (80003e4 <HD44780_Init+0xfc>)
 800039c:	2202      	movs	r2, #2
 800039e:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80003a0:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <HD44780_Init+0xfc>)
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	f043 0304 	orr.w	r3, r3, #4
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	4618      	mov	r0, r3
 80003ac:	f000 f8bc 	bl	8000528 <SendCommand>
  DelayUS(4500);
 80003b0:	f241 1094 	movw	r0, #4500	; 0x1194
 80003b4:	f000 f96a 	bl	800068c <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80003b8:	490b      	ldr	r1, [pc, #44]	; (80003e8 <HD44780_Init+0x100>)
 80003ba:	2000      	movs	r0, #0
 80003bc:	f000 f876 	bl	80004ac <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80003c0:	490a      	ldr	r1, [pc, #40]	; (80003ec <HD44780_Init+0x104>)
 80003c2:	2001      	movs	r0, #1
 80003c4:	f000 f872 	bl	80004ac <HD44780_CreateSpecialChar>

  HD44780_Home();
 80003c8:	f000 f81d 	bl	8000406 <HD44780_Home>
}
 80003cc:	bf00      	nop
 80003ce:	3708      	adds	r7, #8
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	200007db 	.word	0x200007db
 80003d8:	200007dc 	.word	0x200007dc
 80003dc:	200007d8 	.word	0x200007d8
 80003e0:	200007d9 	.word	0x200007d9
 80003e4:	200007da 	.word	0x200007da
 80003e8:	20000000 	.word	0x20000000
 80003ec:	20000008 	.word	0x20000008

080003f0 <HD44780_Clear>:

void HD44780_Clear()
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80003f4:	2001      	movs	r0, #1
 80003f6:	f000 f897 	bl	8000528 <SendCommand>
  DelayUS(2000);
 80003fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003fe:	f000 f945 	bl	800068c <DelayUS>
}
 8000402:	bf00      	nop
 8000404:	bd80      	pop	{r7, pc}

08000406 <HD44780_Home>:

void HD44780_Home()
{
 8000406:	b580      	push	{r7, lr}
 8000408:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800040a:	2002      	movs	r0, #2
 800040c:	f000 f88c 	bl	8000528 <SendCommand>
  DelayUS(2000);
 8000410:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000414:	f000 f93a 	bl	800068c <DelayUS>
}
 8000418:	bf00      	nop
 800041a:	bd80      	pop	{r7, pc}

0800041c <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 800041c:	b590      	push	{r4, r7, lr}
 800041e:	b087      	sub	sp, #28
 8000420:	af00      	add	r7, sp, #0
 8000422:	4603      	mov	r3, r0
 8000424:	460a      	mov	r2, r1
 8000426:	71fb      	strb	r3, [r7, #7]
 8000428:	4613      	mov	r3, r2
 800042a:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 800042c:	4b12      	ldr	r3, [pc, #72]	; (8000478 <HD44780_SetCursor+0x5c>)
 800042e:	f107 0408 	add.w	r4, r7, #8
 8000432:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000434:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000438:	4b10      	ldr	r3, [pc, #64]	; (800047c <HD44780_SetCursor+0x60>)
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	79ba      	ldrb	r2, [r7, #6]
 800043e:	429a      	cmp	r2, r3
 8000440:	d303      	bcc.n	800044a <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000442:	4b0e      	ldr	r3, [pc, #56]	; (800047c <HD44780_SetCursor+0x60>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	3b01      	subs	r3, #1
 8000448:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800044a:	79bb      	ldrb	r3, [r7, #6]
 800044c:	009b      	lsls	r3, r3, #2
 800044e:	3318      	adds	r3, #24
 8000450:	443b      	add	r3, r7
 8000452:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000456:	b2da      	uxtb	r2, r3
 8000458:	79fb      	ldrb	r3, [r7, #7]
 800045a:	4413      	add	r3, r2
 800045c:	b2db      	uxtb	r3, r3
 800045e:	b25b      	sxtb	r3, r3
 8000460:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000464:	b25b      	sxtb	r3, r3
 8000466:	b2db      	uxtb	r3, r3
 8000468:	4618      	mov	r0, r3
 800046a:	f000 f85d 	bl	8000528 <SendCommand>
}
 800046e:	bf00      	nop
 8000470:	371c      	adds	r7, #28
 8000472:	46bd      	mov	sp, r7
 8000474:	bd90      	pop	{r4, r7, pc}
 8000476:	bf00      	nop
 8000478:	08009cd4 	.word	0x08009cd4
 800047c:	200007db 	.word	0x200007db

08000480 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000484:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <HD44780_Display+0x28>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	f043 0304 	orr.w	r3, r3, #4
 800048c:	b2da      	uxtb	r2, r3
 800048e:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <HD44780_Display+0x28>)
 8000490:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000492:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <HD44780_Display+0x28>)
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	f043 0308 	orr.w	r3, r3, #8
 800049a:	b2db      	uxtb	r3, r3
 800049c:	4618      	mov	r0, r3
 800049e:	f000 f843 	bl	8000528 <SendCommand>
}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	200007d9 	.word	0x200007d9

080004ac <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b084      	sub	sp, #16
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	4603      	mov	r3, r0
 80004b4:	6039      	str	r1, [r7, #0]
 80004b6:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80004b8:	79fb      	ldrb	r3, [r7, #7]
 80004ba:	f003 0307 	and.w	r3, r3, #7
 80004be:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	00db      	lsls	r3, r3, #3
 80004c4:	b25b      	sxtb	r3, r3
 80004c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004ca:	b25b      	sxtb	r3, r3
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	4618      	mov	r0, r3
 80004d0:	f000 f82a 	bl	8000528 <SendCommand>
  for (int i=0; i<8; i++)
 80004d4:	2300      	movs	r3, #0
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	e009      	b.n	80004ee <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	683a      	ldr	r2, [r7, #0]
 80004de:	4413      	add	r3, r2
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	4618      	mov	r0, r3
 80004e4:	f000 f82e 	bl	8000544 <SendChar>
  for (int i=0; i<8; i++)
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	3301      	adds	r3, #1
 80004ec:	60fb      	str	r3, [r7, #12]
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	2b07      	cmp	r3, #7
 80004f2:	ddf2      	ble.n	80004da <HD44780_CreateSpecialChar+0x2e>
  }
}
 80004f4:	bf00      	nop
 80004f6:	bf00      	nop
 80004f8:	3710      	adds	r7, #16
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80004fe:	b580      	push	{r7, lr}
 8000500:	b082      	sub	sp, #8
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000506:	e006      	b.n	8000516 <HD44780_PrintStr+0x18>
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	1c5a      	adds	r2, r3, #1
 800050c:	607a      	str	r2, [r7, #4]
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	4618      	mov	r0, r3
 8000512:	f000 f817 	bl	8000544 <SendChar>
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d1f4      	bne.n	8000508 <HD44780_PrintStr+0xa>
}
 800051e:	bf00      	nop
 8000520:	bf00      	nop
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f000 f812 	bl	8000560 <Send>
}
 800053c:	bf00      	nop
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	2101      	movs	r1, #1
 8000552:	4618      	mov	r0, r3
 8000554:	f000 f804 	bl	8000560 <Send>
}
 8000558:	bf00      	nop
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}

08000560 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	460a      	mov	r2, r1
 800056a:	71fb      	strb	r3, [r7, #7]
 800056c:	4613      	mov	r3, r2
 800056e:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	f023 030f 	bic.w	r3, r3, #15
 8000576:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	011b      	lsls	r3, r3, #4
 800057c:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800057e:	7bfa      	ldrb	r2, [r7, #15]
 8000580:	79bb      	ldrb	r3, [r7, #6]
 8000582:	4313      	orrs	r3, r2
 8000584:	b2db      	uxtb	r3, r3
 8000586:	4618      	mov	r0, r3
 8000588:	f000 f80b 	bl	80005a2 <Write4Bits>
  Write4Bits((lownib)|mode);
 800058c:	7bba      	ldrb	r2, [r7, #14]
 800058e:	79bb      	ldrb	r3, [r7, #6]
 8000590:	4313      	orrs	r3, r2
 8000592:	b2db      	uxtb	r3, r3
 8000594:	4618      	mov	r0, r3
 8000596:	f000 f804 	bl	80005a2 <Write4Bits>
}
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b082      	sub	sp, #8
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	4603      	mov	r3, r0
 80005aa:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 f808 	bl	80005c4 <ExpanderWrite>
  PulseEnable(value);
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 f820 	bl	80005fc <PulseEnable>
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af02      	add	r7, sp, #8
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <ExpanderWrite+0x30>)
 80005d0:	781a      	ldrb	r2, [r3, #0]
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80005da:	f107 020f 	add.w	r2, r7, #15
 80005de:	230a      	movs	r3, #10
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2301      	movs	r3, #1
 80005e4:	214e      	movs	r1, #78	; 0x4e
 80005e6:	4804      	ldr	r0, [pc, #16]	; (80005f8 <ExpanderWrite+0x34>)
 80005e8:	f002 f9e0 	bl	80029ac <HAL_I2C_Master_Transmit>
}
 80005ec:	bf00      	nop
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	200007dc 	.word	0x200007dc
 80005f8:	20000830 	.word	0x20000830

080005fc <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	b2db      	uxtb	r3, r3
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff ffd8 	bl	80005c4 <ExpanderWrite>
  DelayUS(20);
 8000614:	2014      	movs	r0, #20
 8000616:	f000 f839 	bl	800068c <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	f023 0304 	bic.w	r3, r3, #4
 8000620:	b2db      	uxtb	r3, r3
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff ffce 	bl	80005c4 <ExpanderWrite>
  DelayUS(20);
 8000628:	2014      	movs	r0, #20
 800062a:	f000 f82f 	bl	800068c <DelayUS>
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <DelayInit>:

static void DelayInit(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 800063c:	4b11      	ldr	r3, [pc, #68]	; (8000684 <DelayInit+0x4c>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	4a10      	ldr	r2, [pc, #64]	; (8000684 <DelayInit+0x4c>)
 8000642:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000646:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000648:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <DelayInit+0x4c>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	4a0d      	ldr	r2, [pc, #52]	; (8000684 <DelayInit+0x4c>)
 800064e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000652:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <DelayInit+0x50>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a0b      	ldr	r2, [pc, #44]	; (8000688 <DelayInit+0x50>)
 800065a:	f023 0301 	bic.w	r3, r3, #1
 800065e:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <DelayInit+0x50>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a08      	ldr	r2, [pc, #32]	; (8000688 <DelayInit+0x50>)
 8000666:	f043 0301 	orr.w	r3, r3, #1
 800066a:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <DelayInit+0x50>)
 800066e:	2200      	movs	r2, #0
 8000670:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000672:	bf00      	nop
  __ASM volatile ("NOP");
 8000674:	bf00      	nop
  __ASM volatile ("NOP");
 8000676:	bf00      	nop
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000edf0 	.word	0xe000edf0
 8000688:	e0001000 	.word	0xe0001000

0800068c <DelayUS>:

static void DelayUS(uint32_t us) {
 800068c:	b480      	push	{r7}
 800068e:	b087      	sub	sp, #28
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000694:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <DelayUS+0x44>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a0e      	ldr	r2, [pc, #56]	; (80006d4 <DelayUS+0x48>)
 800069a:	fba2 2303 	umull	r2, r3, r2, r3
 800069e:	0c9a      	lsrs	r2, r3, #18
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	fb02 f303 	mul.w	r3, r2, r3
 80006a6:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80006a8:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <DelayUS+0x4c>)
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80006ae:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <DelayUS+0x4c>)
 80006b0:	685a      	ldr	r2, [r3, #4]
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	697a      	ldr	r2, [r7, #20]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d8f6      	bhi.n	80006ae <DelayUS+0x22>
}
 80006c0:	bf00      	nop
 80006c2:	bf00      	nop
 80006c4:	371c      	adds	r7, #28
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	20000010 	.word	0x20000010
 80006d4:	431bde83 	.word	0x431bde83
 80006d8:	e0001000 	.word	0xe0001000

080006dc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006e8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80006ec:	f003 0301 	and.w	r3, r3, #1
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d013      	beq.n	800071c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80006f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006f8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80006fc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000700:	2b00      	cmp	r3, #0
 8000702:	d00b      	beq.n	800071c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000704:	e000      	b.n	8000708 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000706:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000708:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d0f9      	beq.n	8000706 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000712:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	b2d2      	uxtb	r2, r2
 800071a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800071c:	687b      	ldr	r3, [r7, #4]
}
 800071e:	4618      	mov	r0, r3
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 800072a:	b580      	push	{r7, lr}
 800072c:	b086      	sub	sp, #24
 800072e:	af00      	add	r7, sp, #0
 8000730:	60f8      	str	r0, [r7, #12]
 8000732:	60b9      	str	r1, [r7, #8]
 8000734:	607a      	str	r2, [r7, #4]
	/* Write code that is used by puts and printf */
	int i = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
	for(i=0; i<len; i++)
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]
 800073e:	e009      	b.n	8000754 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	1c5a      	adds	r2, r3, #1
 8000744:	60ba      	str	r2, [r7, #8]
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff ffc7 	bl	80006dc <ITM_SendChar>
	for(i=0; i<len; i++)
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	3301      	adds	r3, #1
 8000752:	617b      	str	r3, [r7, #20]
 8000754:	697a      	ldr	r2, [r7, #20]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	429a      	cmp	r2, r3
 800075a:	dbf1      	blt.n	8000740 <_write+0x16>

	return len;
 800075c:	687b      	ldr	r3, [r7, #4]
}
 800075e:	4618      	mov	r0, r3
 8000760:	3718      	adds	r7, #24
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000768:	b5b0      	push	{r4, r5, r7, lr}
 800076a:	b0a2      	sub	sp, #136	; 0x88
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076e:	f000 fddb 	bl	8001328 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000772:	f000 f893 	bl	800089c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000776:	f000 fa15 	bl	8000ba4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800077a:	f000 f9e3 	bl	8000b44 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 800077e:	f000 f8f5 	bl	800096c <MX_ADC2_Init>
  MX_I2C1_Init();
 8000782:	f000 f951 	bl	8000a28 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000786:	f000 f98f 	bl	8000aa8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  printf("starting....\n");
 800078a:	4838      	ldr	r0, [pc, #224]	; (800086c <main+0x104>)
 800078c:	f008 f9fe 	bl	8008b8c <puts>
  HD44780_Init(2);
 8000790:	2002      	movs	r0, #2
 8000792:	f7ff fda9 	bl	80002e8 <HD44780_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySemAlarm */
  osSemaphoreDef(myBinarySemAlarm);
 8000796:	2300      	movs	r3, #0
 8000798:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800079c:	2300      	movs	r3, #0
 800079e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  myBinarySemAlarmHandle = osSemaphoreCreate(osSemaphore(myBinarySemAlarm), 1);
 80007a2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80007a6:	2101      	movs	r1, #1
 80007a8:	4618      	mov	r0, r3
 80007aa:	f005 fc39 	bl	8006020 <osSemaphoreCreate>
 80007ae:	4603      	mov	r3, r0
 80007b0:	4a2f      	ldr	r2, [pc, #188]	; (8000870 <main+0x108>)
 80007b2:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 16, uint16_t);
 80007b4:	4b2f      	ldr	r3, [pc, #188]	; (8000874 <main+0x10c>)
 80007b6:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80007ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 80007c0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f005 fc5c 	bl	8006084 <osMessageCreate>
 80007cc:	4603      	mov	r3, r0
 80007ce:	4a2a      	ldr	r2, [pc, #168]	; (8000878 <main+0x110>)
 80007d0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, Task1_init, osPriorityNormal, 0, 128);
 80007d2:	4b2a      	ldr	r3, [pc, #168]	; (800087c <main+0x114>)
 80007d4:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80007d8:	461d      	mov	r5, r3
 80007da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 80007e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007ea:	2100      	movs	r1, #0
 80007ec:	4618      	mov	r0, r3
 80007ee:	f005 fbb7 	bl	8005f60 <osThreadCreate>
 80007f2:	4603      	mov	r3, r0
 80007f4:	4a22      	ldr	r2, [pc, #136]	; (8000880 <main+0x118>)
 80007f6:	6013      	str	r3, [r2, #0]

  /* definition and creation of LCD */
  osThreadDef(LCD, StartLCD, osPriorityNormal, 0, 128);
 80007f8:	4b22      	ldr	r3, [pc, #136]	; (8000884 <main+0x11c>)
 80007fa:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80007fe:	461d      	mov	r5, r3
 8000800:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000804:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000808:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LCDHandle = osThreadCreate(osThread(LCD), NULL);
 800080c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f005 fba4 	bl	8005f60 <osThreadCreate>
 8000818:	4603      	mov	r3, r0
 800081a:	4a1b      	ldr	r2, [pc, #108]	; (8000888 <main+0x120>)
 800081c:	6013      	str	r3, [r2, #0]

  /* definition and creation of WaterSensor */
  osThreadDef(WaterSensor, StartWaterSensor, osPriorityNormal, 0, 128);
 800081e:	4b1b      	ldr	r3, [pc, #108]	; (800088c <main+0x124>)
 8000820:	f107 041c 	add.w	r4, r7, #28
 8000824:	461d      	mov	r5, r3
 8000826:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000828:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800082a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800082e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  WaterSensorHandle = osThreadCreate(osThread(WaterSensor), NULL);
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	2100      	movs	r1, #0
 8000838:	4618      	mov	r0, r3
 800083a:	f005 fb91 	bl	8005f60 <osThreadCreate>
 800083e:	4603      	mov	r3, r0
 8000840:	4a13      	ldr	r2, [pc, #76]	; (8000890 <main+0x128>)
 8000842:	6013      	str	r3, [r2, #0]

  /* definition and creation of AlarmLED */
  osThreadDef(AlarmLED, StartAlarmLED, osPriorityNormal, 0, 128);
 8000844:	4b13      	ldr	r3, [pc, #76]	; (8000894 <main+0x12c>)
 8000846:	463c      	mov	r4, r7
 8000848:	461d      	mov	r5, r3
 800084a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800084c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800084e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000852:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AlarmLEDHandle = osThreadCreate(osThread(AlarmLED), NULL);
 8000856:	463b      	mov	r3, r7
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f005 fb80 	bl	8005f60 <osThreadCreate>
 8000860:	4603      	mov	r3, r0
 8000862:	4a0d      	ldr	r2, [pc, #52]	; (8000898 <main+0x130>)
 8000864:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000866:	f005 fb74 	bl	8005f52 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800086a:	e7fe      	b.n	800086a <main+0x102>
 800086c:	08009ce4 	.word	0x08009ce4
 8000870:	2000096c 	.word	0x2000096c
 8000874:	08009cf4 	.word	0x08009cf4
 8000878:	20000968 	.word	0x20000968
 800087c:	08009d0c 	.word	0x08009d0c
 8000880:	20000958 	.word	0x20000958
 8000884:	08009d2c 	.word	0x08009d2c
 8000888:	2000095c 	.word	0x2000095c
 800088c:	08009d54 	.word	0x08009d54
 8000890:	20000960 	.word	0x20000960
 8000894:	08009d7c 	.word	0x08009d7c
 8000898:	20000964 	.word	0x20000964

0800089c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b0a6      	sub	sp, #152	; 0x98
 80008a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80008a6:	2228      	movs	r2, #40	; 0x28
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f008 fa6e 	bl	8008d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2258      	movs	r2, #88	; 0x58
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f008 fa60 	bl	8008d8c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008cc:	2302      	movs	r3, #2
 80008ce:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d0:	2301      	movs	r3, #1
 80008d2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008d4:	2310      	movs	r3, #16
 80008d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008da:	2302      	movs	r3, #2
 80008dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008e8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80008fa:	4618      	mov	r0, r3
 80008fc:	f002 fbf2 	bl	80030e4 <HAL_RCC_OscConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000906:	f000 faa9 	bl	8000e5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090a:	230f      	movs	r3, #15
 800090c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800090e:	2302      	movs	r3, #2
 8000910:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800091a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000920:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000924:	2102      	movs	r1, #2
 8000926:	4618      	mov	r0, r3
 8000928:	f003 fc30 	bl	800418c <HAL_RCC_ClockConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000932:	f000 fa93 	bl	8000e5c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <SystemClock_Config+0xcc>)
 8000938:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800093e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000948:	2300      	movs	r3, #0
 800094a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	4618      	mov	r0, r3
 8000950:	f003 fe84 	bl	800465c <HAL_RCCEx_PeriphCLKConfig>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800095a:	f000 fa7f 	bl	8000e5c <Error_Handler>
  }
}
 800095e:	bf00      	nop
 8000960:	3798      	adds	r7, #152	; 0x98
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	002000a2 	.word	0x002000a2

0800096c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000972:	463b      	mov	r3, r7
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
 8000980:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000982:	4b27      	ldr	r3, [pc, #156]	; (8000a20 <MX_ADC2_Init+0xb4>)
 8000984:	4a27      	ldr	r2, [pc, #156]	; (8000a24 <MX_ADC2_Init+0xb8>)
 8000986:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000988:	4b25      	ldr	r3, [pc, #148]	; (8000a20 <MX_ADC2_Init+0xb4>)
 800098a:	2200      	movs	r2, #0
 800098c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800098e:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <MX_ADC2_Init+0xb4>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000994:	4b22      	ldr	r3, [pc, #136]	; (8000a20 <MX_ADC2_Init+0xb4>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800099a:	4b21      	ldr	r3, [pc, #132]	; (8000a20 <MX_ADC2_Init+0xb4>)
 800099c:	2200      	movs	r2, #0
 800099e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80009a0:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <MX_ADC2_Init+0xb4>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009a8:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <MX_ADC2_Init+0xb4>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009ae:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <MX_ADC2_Init+0xb4>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009b4:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <MX_ADC2_Init+0xb4>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80009ba:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <MX_ADC2_Init+0xb4>)
 80009bc:	2201      	movs	r2, #1
 80009be:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80009c0:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <MX_ADC2_Init+0xb4>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <MX_ADC2_Init+0xb4>)
 80009ca:	2204      	movs	r2, #4
 80009cc:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_ADC2_Init+0xb4>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <MX_ADC2_Init+0xb4>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80009da:	4811      	ldr	r0, [pc, #68]	; (8000a20 <MX_ADC2_Init+0xb4>)
 80009dc:	f000 fcfe 	bl	80013dc <HAL_ADC_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 80009e6:	f000 fa39 	bl	8000e5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009ea:	2301      	movs	r3, #1
 80009ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009ee:	2301      	movs	r3, #1
 80009f0:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009f6:	2300      	movs	r3, #0
 80009f8:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a02:	463b      	mov	r3, r7
 8000a04:	4619      	mov	r1, r3
 8000a06:	4806      	ldr	r0, [pc, #24]	; (8000a20 <MX_ADC2_Init+0xb4>)
 8000a08:	f001 f908 	bl	8001c1c <HAL_ADC_ConfigChannel>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000a12:	f000 fa23 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200007e0 	.word	0x200007e0
 8000a24:	50000100 	.word	0x50000100

08000a28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <MX_I2C1_Init+0x74>)
 8000a2e:	4a1c      	ldr	r2, [pc, #112]	; (8000aa0 <MX_I2C1_Init+0x78>)
 8000a30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000a32:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <MX_I2C1_Init+0x74>)
 8000a34:	4a1b      	ldr	r2, [pc, #108]	; (8000aa4 <MX_I2C1_Init+0x7c>)
 8000a36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a38:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <MX_I2C1_Init+0x74>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a3e:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <MX_I2C1_Init+0x74>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a44:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <MX_I2C1_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a4a:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <MX_I2C1_Init+0x74>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a50:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <MX_I2C1_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_I2C1_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_I2C1_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a62:	480e      	ldr	r0, [pc, #56]	; (8000a9c <MX_I2C1_Init+0x74>)
 8000a64:	f001 ff12 	bl	800288c <HAL_I2C_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a6e:	f000 f9f5 	bl	8000e5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a72:	2100      	movs	r1, #0
 8000a74:	4809      	ldr	r0, [pc, #36]	; (8000a9c <MX_I2C1_Init+0x74>)
 8000a76:	f002 fa9d 	bl	8002fb4 <HAL_I2CEx_ConfigAnalogFilter>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a80:	f000 f9ec 	bl	8000e5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a84:	2100      	movs	r1, #0
 8000a86:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_I2C1_Init+0x74>)
 8000a88:	f002 fadf 	bl	800304a <HAL_I2CEx_ConfigDigitalFilter>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a92:	f000 f9e3 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000830 	.word	0x20000830
 8000aa0:	40005400 	.word	0x40005400
 8000aa4:	2000090e 	.word	0x2000090e

08000aa8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aae:	f107 0310 	add.w	r3, r7, #16
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ac6:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <MX_TIM3_Init+0x94>)
 8000ac8:	4a1d      	ldr	r2, [pc, #116]	; (8000b40 <MX_TIM3_Init+0x98>)
 8000aca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8000acc:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <MX_TIM3_Init+0x94>)
 8000ace:	2248      	movs	r2, #72	; 0x48
 8000ad0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad2:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <MX_TIM3_Init+0x94>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ad8:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <MX_TIM3_Init+0x94>)
 8000ada:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ade:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae0:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <MX_TIM3_Init+0x94>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <MX_TIM3_Init+0x94>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000aec:	4813      	ldr	r0, [pc, #76]	; (8000b3c <MX_TIM3_Init+0x94>)
 8000aee:	f003 ffd3 	bl	8004a98 <HAL_TIM_Base_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000af8:	f000 f9b0 	bl	8000e5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b00:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b02:	f107 0310 	add.w	r3, r7, #16
 8000b06:	4619      	mov	r1, r3
 8000b08:	480c      	ldr	r0, [pc, #48]	; (8000b3c <MX_TIM3_Init+0x94>)
 8000b0a:	f004 f9ac 	bl	8004e66 <HAL_TIM_ConfigClockSource>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000b14:	f000 f9a2 	bl	8000e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	4619      	mov	r1, r3
 8000b24:	4805      	ldr	r0, [pc, #20]	; (8000b3c <MX_TIM3_Init+0x94>)
 8000b26:	f004 fbc7 	bl	80052b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000b30:	f000 f994 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	3720      	adds	r7, #32
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000884 	.word	0x20000884
 8000b40:	40000400 	.word	0x40000400

08000b44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b4a:	4a15      	ldr	r2, [pc, #84]	; (8000ba0 <MX_USART2_UART_Init+0x5c>)
 8000b4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b4e:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b7a:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b88:	f004 fc40 	bl	800540c <HAL_UART_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b92:	f000 f963 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	200008d0 	.word	0x200008d0
 8000ba0:	40004400 	.word	0x40004400

08000ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bba:	4b2c      	ldr	r3, [pc, #176]	; (8000c6c <MX_GPIO_Init+0xc8>)
 8000bbc:	695b      	ldr	r3, [r3, #20]
 8000bbe:	4a2b      	ldr	r2, [pc, #172]	; (8000c6c <MX_GPIO_Init+0xc8>)
 8000bc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000bc4:	6153      	str	r3, [r2, #20]
 8000bc6:	4b29      	ldr	r3, [pc, #164]	; (8000c6c <MX_GPIO_Init+0xc8>)
 8000bc8:	695b      	ldr	r3, [r3, #20]
 8000bca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bd2:	4b26      	ldr	r3, [pc, #152]	; (8000c6c <MX_GPIO_Init+0xc8>)
 8000bd4:	695b      	ldr	r3, [r3, #20]
 8000bd6:	4a25      	ldr	r2, [pc, #148]	; (8000c6c <MX_GPIO_Init+0xc8>)
 8000bd8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bdc:	6153      	str	r3, [r2, #20]
 8000bde:	4b23      	ldr	r3, [pc, #140]	; (8000c6c <MX_GPIO_Init+0xc8>)
 8000be0:	695b      	ldr	r3, [r3, #20]
 8000be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	4b20      	ldr	r3, [pc, #128]	; (8000c6c <MX_GPIO_Init+0xc8>)
 8000bec:	695b      	ldr	r3, [r3, #20]
 8000bee:	4a1f      	ldr	r2, [pc, #124]	; (8000c6c <MX_GPIO_Init+0xc8>)
 8000bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf4:	6153      	str	r3, [r2, #20]
 8000bf6:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <MX_GPIO_Init+0xc8>)
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <MX_GPIO_Init+0xc8>)
 8000c04:	695b      	ldr	r3, [r3, #20]
 8000c06:	4a19      	ldr	r2, [pc, #100]	; (8000c6c <MX_GPIO_Init+0xc8>)
 8000c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c0c:	6153      	str	r3, [r2, #20]
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <MX_GPIO_Init+0xc8>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|ALARM_LED_Pin, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000c20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c24:	f001 fe1a 	bl	800285c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c2e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	480c      	ldr	r0, [pc, #48]	; (8000c70 <MX_GPIO_Init+0xcc>)
 8000c40:	f001 fc82 	bl	8002548 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin ALARM_LED_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|ALARM_LED_Pin;
 8000c44:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8000c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c60:	f001 fc72 	bl	8002548 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c64:	bf00      	nop
 8000c66:	3728      	adds	r7, #40	; 0x28
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	48000800 	.word	0x48000800

08000c74 <Task1_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task1_init */
void Task1_init(void const * argument)
{
 8000c74:	b590      	push	{r4, r7, lr}
 8000c76:	b08b      	sub	sp, #44	; 0x2c
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	uint8_t receivedData;
  /* Infinite loop */
  for(;;)
  {

	  printf("Checking");
 8000c7c:	4821      	ldr	r0, [pc, #132]	; (8000d04 <Task1_init+0x90>)
 8000c7e:	f007 ff1f 	bl	8008ac0 <iprintf>

	  if(HAL_UART_Receive(&huart2, &receivedData, 1, 100) == HAL_OK)
 8000c82:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8000c86:	2364      	movs	r3, #100	; 0x64
 8000c88:	2201      	movs	r2, #1
 8000c8a:	481f      	ldr	r0, [pc, #124]	; (8000d08 <Task1_init+0x94>)
 8000c8c:	f004 fc96 	bl	80055bc <HAL_UART_Receive>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d131      	bne.n	8000cfa <Task1_init+0x86>
	  {
		  uint8_t message1[] = "Diode is ON\r\n";
 8000c96:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <Task1_init+0x98>)
 8000c98:	f107 0418 	add.w	r4, r7, #24
 8000c9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c9e:	c407      	stmia	r4!, {r0, r1, r2}
 8000ca0:	8023      	strh	r3, [r4, #0]
		  uint8_t message2[] = "Diode is OFF\r\n";
 8000ca2:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <Task1_init+0x9c>)
 8000ca4:	f107 0408 	add.w	r4, r7, #8
 8000ca8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000caa:	c407      	stmia	r4!, {r0, r1, r2}
 8000cac:	8023      	strh	r3, [r4, #0]
 8000cae:	3402      	adds	r4, #2
 8000cb0:	0c1b      	lsrs	r3, r3, #16
 8000cb2:	7023      	strb	r3, [r4, #0]
		  //HAL_UART_Transmit(&huart2, message, sizeof(message), 500);
		  if(receivedData == 'e')
 8000cb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cb8:	2b65      	cmp	r3, #101	; 0x65
 8000cba:	d10d      	bne.n	8000cd8 <Task1_init+0x64>
			{
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2120      	movs	r1, #32
 8000cc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc4:	f001 fdca 	bl	800285c <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart2, message1, sizeof(message1), 200);
 8000cc8:	f107 0118 	add.w	r1, r7, #24
 8000ccc:	23c8      	movs	r3, #200	; 0xc8
 8000cce:	220e      	movs	r2, #14
 8000cd0:	480d      	ldr	r0, [pc, #52]	; (8000d08 <Task1_init+0x94>)
 8000cd2:	f004 fbe9 	bl	80054a8 <HAL_UART_Transmit>
 8000cd6:	e010      	b.n	8000cfa <Task1_init+0x86>
			}else if(receivedData == 'd')
 8000cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cdc:	2b64      	cmp	r3, #100	; 0x64
 8000cde:	d10c      	bne.n	8000cfa <Task1_init+0x86>
			{
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2120      	movs	r1, #32
 8000ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce8:	f001 fdb8 	bl	800285c <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart2, message2, sizeof(message2), 200);
 8000cec:	f107 0108 	add.w	r1, r7, #8
 8000cf0:	23c8      	movs	r3, #200	; 0xc8
 8000cf2:	220f      	movs	r2, #15
 8000cf4:	4804      	ldr	r0, [pc, #16]	; (8000d08 <Task1_init+0x94>)
 8000cf6:	f004 fbd7 	bl	80054a8 <HAL_UART_Transmit>
				//dl_kom = sizeof(komunikat);
			}
	  }
	  //uint8_t text[] = "text from TASK1\r\n";
	  //HAL_UART_Transmit(&huart2, text, sizeof(text), 500);
	  osDelay(500);
 8000cfa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cfe:	f005 f97b 	bl	8005ff8 <osDelay>
	  printf("Checking");
 8000d02:	e7bb      	b.n	8000c7c <Task1_init+0x8>
 8000d04:	08009d98 	.word	0x08009d98
 8000d08:	200008d0 	.word	0x200008d0
 8000d0c:	08009da4 	.word	0x08009da4
 8000d10:	08009db4 	.word	0x08009db4

08000d14 <StartLCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLCD */
void StartLCD(void const * argument)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	uint16_t receivedRaw;
	char lcd_msg[10];
  /* Infinite loop */
  for(;;)
  {
	xQueueReceive(myQueue01Handle, &receivedRaw, portMAX_DELAY);
 8000d1c:	4b1b      	ldr	r3, [pc, #108]	; (8000d8c <StartLCD+0x78>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f107 0116 	add.w	r1, r7, #22
 8000d24:	f04f 32ff 	mov.w	r2, #4294967295
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f005 fd59 	bl	80067e0 <xQueueReceive>
	sprintf(lcd_msg, "%hu", receivedRaw);
 8000d2e:	8afb      	ldrh	r3, [r7, #22]
 8000d30:	461a      	mov	r2, r3
 8000d32:	f107 030c 	add.w	r3, r7, #12
 8000d36:	4916      	ldr	r1, [pc, #88]	; (8000d90 <StartLCD+0x7c>)
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f007 ff2f 	bl	8008b9c <siprintf>
    HD44780_Clear();
 8000d3e:	f7ff fb57 	bl	80003f0 <HD44780_Clear>
    HD44780_SetCursor(0,0);
 8000d42:	2100      	movs	r1, #0
 8000d44:	2000      	movs	r0, #0
 8000d46:	f7ff fb69 	bl	800041c <HD44780_SetCursor>
    HD44780_PrintStr("Water sensor:");
 8000d4a:	4812      	ldr	r0, [pc, #72]	; (8000d94 <StartLCD+0x80>)
 8000d4c:	f7ff fbd7 	bl	80004fe <HD44780_PrintStr>
    HD44780_SetCursor(0,1);
 8000d50:	2101      	movs	r1, #1
 8000d52:	2000      	movs	r0, #0
 8000d54:	f7ff fb62 	bl	800041c <HD44780_SetCursor>
    HD44780_PrintStr(lcd_msg);
 8000d58:	f107 030c 	add.w	r3, r7, #12
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fbce 	bl	80004fe <HD44780_PrintStr>
    HD44780_SetCursor(5,1);
 8000d62:	2101      	movs	r1, #1
 8000d64:	2005      	movs	r0, #5
 8000d66:	f7ff fb59 	bl	800041c <HD44780_SetCursor>
    if(receivedRaw>1000){
 8000d6a:	8afb      	ldrh	r3, [r7, #22]
 8000d6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d70:	d903      	bls.n	8000d7a <StartLCD+0x66>
    	HD44780_PrintStr("Woda obecna");
 8000d72:	4809      	ldr	r0, [pc, #36]	; (8000d98 <StartLCD+0x84>)
 8000d74:	f7ff fbc3 	bl	80004fe <HD44780_PrintStr>
 8000d78:	e002      	b.n	8000d80 <StartLCD+0x6c>
    }
    else{
    	HD44780_PrintStr("Sucho");
 8000d7a:	4808      	ldr	r0, [pc, #32]	; (8000d9c <StartLCD+0x88>)
 8000d7c:	f7ff fbbf 	bl	80004fe <HD44780_PrintStr>
    }
    osDelay(500);
 8000d80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d84:	f005 f938 	bl	8005ff8 <osDelay>
	xQueueReceive(myQueue01Handle, &receivedRaw, portMAX_DELAY);
 8000d88:	e7c8      	b.n	8000d1c <StartLCD+0x8>
 8000d8a:	bf00      	nop
 8000d8c:	20000968 	.word	0x20000968
 8000d90:	08009dc4 	.word	0x08009dc4
 8000d94:	08009dc8 	.word	0x08009dc8
 8000d98:	08009dd8 	.word	0x08009dd8
 8000d9c:	08009de4 	.word	0x08009de4

08000da0 <StartWaterSensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWaterSensor */
void StartWaterSensor(void const * argument)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	uint16_t raw;
  /* Infinite loop */
  for(;;)
  {

    HAL_ADC_Start(&hadc2);
 8000da8:	480d      	ldr	r0, [pc, #52]	; (8000de0 <StartWaterSensor+0x40>)
 8000daa:	f000 fd11 	bl	80017d0 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8000dae:	f04f 31ff 	mov.w	r1, #4294967295
 8000db2:	480b      	ldr	r0, [pc, #44]	; (8000de0 <StartWaterSensor+0x40>)
 8000db4:	f000 fe22 	bl	80019fc <HAL_ADC_PollForConversion>
    raw = HAL_ADC_GetValue(&hadc2);
 8000db8:	4809      	ldr	r0, [pc, #36]	; (8000de0 <StartWaterSensor+0x40>)
 8000dba:	f000 ff21 	bl	8001c00 <HAL_ADC_GetValue>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	81fb      	strh	r3, [r7, #14]

    // Wyślij wartość "raw" do kolejki
    xQueueSend(myQueue01Handle, &raw, portMAX_DELAY);
 8000dc4:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <StartWaterSensor+0x44>)
 8000dc6:	6818      	ldr	r0, [r3, #0]
 8000dc8:	f107 010e 	add.w	r1, r7, #14
 8000dcc:	2300      	movs	r3, #0
 8000dce:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd2:	f005 fb6f 	bl	80064b4 <xQueueGenericSend>

    osDelay(300);
 8000dd6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000dda:	f005 f90d 	bl	8005ff8 <osDelay>
    HAL_ADC_Start(&hadc2);
 8000dde:	e7e3      	b.n	8000da8 <StartWaterSensor+0x8>
 8000de0:	200007e0 	.word	0x200007e0
 8000de4:	20000968 	.word	0x20000968

08000de8 <StartAlarmLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAlarmLED */
void StartAlarmLED(void const * argument)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAlarmLED */
	uint16_t receivedRaw;
  /* Infinite loop */
  for(;;)
  {
	xQueueReceive(myQueue01Handle, &receivedRaw, portMAX_DELAY);
 8000df0:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <StartAlarmLED+0x4c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f107 010e 	add.w	r1, r7, #14
 8000df8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f005 fcef 	bl	80067e0 <xQueueReceive>

    if(receivedRaw>1000){
 8000e02:	89fb      	ldrh	r3, [r7, #14]
 8000e04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e08:	d907      	bls.n	8000e1a <StartAlarmLED+0x32>
    	HAL_GPIO_WritePin(ALARM_LED_GPIO_Port, ALARM_LED_Pin, GPIO_PIN_SET);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e14:	f001 fd22 	bl	800285c <HAL_GPIO_WritePin>
 8000e18:	e006      	b.n	8000e28 <StartAlarmLED+0x40>
    }
    else{
    	HAL_GPIO_WritePin(ALARM_LED_GPIO_Port, ALARM_LED_Pin, GPIO_PIN_RESET);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e24:	f001 fd1a 	bl	800285c <HAL_GPIO_WritePin>
    }
    osDelay(300);
 8000e28:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000e2c:	f005 f8e4 	bl	8005ff8 <osDelay>
	xQueueReceive(myQueue01Handle, &receivedRaw, portMAX_DELAY);
 8000e30:	e7de      	b.n	8000df0 <StartAlarmLED+0x8>
 8000e32:	bf00      	nop
 8000e34:	20000968 	.word	0x20000968

08000e38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d101      	bne.n	8000e4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e4a:	f000 fa83 	bl	8001354 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40012c00 	.word	0x40012c00

08000e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e60:	b672      	cpsid	i
}
 8000e62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <Error_Handler+0x8>
	...

08000e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6e:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <HAL_MspInit+0x4c>)
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	4a10      	ldr	r2, [pc, #64]	; (8000eb4 <HAL_MspInit+0x4c>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6193      	str	r3, [r2, #24]
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <HAL_MspInit+0x4c>)
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <HAL_MspInit+0x4c>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <HAL_MspInit+0x4c>)
 8000e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e90:	61d3      	str	r3, [r2, #28]
 8000e92:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <HAL_MspInit+0x4c>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	210f      	movs	r1, #15
 8000ea2:	f06f 0001 	mvn.w	r0, #1
 8000ea6:	f001 fb25 	bl	80024f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40021000 	.word	0x40021000

08000eb8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	; 0x28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a15      	ldr	r2, [pc, #84]	; (8000f2c <HAL_ADC_MspInit+0x74>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d124      	bne.n	8000f24 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <HAL_ADC_MspInit+0x78>)
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	4a14      	ldr	r2, [pc, #80]	; (8000f30 <HAL_ADC_MspInit+0x78>)
 8000ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	6153      	str	r3, [r2, #20]
 8000ee6:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <HAL_ADC_MspInit+0x78>)
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <HAL_ADC_MspInit+0x78>)
 8000ef4:	695b      	ldr	r3, [r3, #20]
 8000ef6:	4a0e      	ldr	r2, [pc, #56]	; (8000f30 <HAL_ADC_MspInit+0x78>)
 8000ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000efc:	6153      	str	r3, [r2, #20]
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <HAL_ADC_MspInit+0x78>)
 8000f00:	695b      	ldr	r3, [r3, #20]
 8000f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA4     ------> ADC2_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f0a:	2310      	movs	r3, #16
 8000f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f20:	f001 fb12 	bl	8002548 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000f24:	bf00      	nop
 8000f26:	3728      	adds	r7, #40	; 0x28
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	50000100 	.word	0x50000100
 8000f30:	40021000 	.word	0x40021000

08000f34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08a      	sub	sp, #40	; 0x28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a17      	ldr	r2, [pc, #92]	; (8000fb0 <HAL_I2C_MspInit+0x7c>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d128      	bne.n	8000fa8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f56:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <HAL_I2C_MspInit+0x80>)
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	4a16      	ldr	r2, [pc, #88]	; (8000fb4 <HAL_I2C_MspInit+0x80>)
 8000f5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f60:	6153      	str	r3, [r2, #20]
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <HAL_I2C_MspInit+0x80>)
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f74:	2312      	movs	r3, #18
 8000f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f80:	2304      	movs	r3, #4
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	4619      	mov	r1, r3
 8000f8a:	480b      	ldr	r0, [pc, #44]	; (8000fb8 <HAL_I2C_MspInit+0x84>)
 8000f8c:	f001 fadc 	bl	8002548 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <HAL_I2C_MspInit+0x80>)
 8000f92:	69db      	ldr	r3, [r3, #28]
 8000f94:	4a07      	ldr	r2, [pc, #28]	; (8000fb4 <HAL_I2C_MspInit+0x80>)
 8000f96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f9a:	61d3      	str	r3, [r2, #28]
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <HAL_I2C_MspInit+0x80>)
 8000f9e:	69db      	ldr	r3, [r3, #28]
 8000fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fa8:	bf00      	nop
 8000faa:	3728      	adds	r7, #40	; 0x28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40005400 	.word	0x40005400
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	48000400 	.word	0x48000400

08000fbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <HAL_TIM_Base_MspInit+0x38>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d10b      	bne.n	8000fe6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fce:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <HAL_TIM_Base_MspInit+0x3c>)
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	4a09      	ldr	r2, [pc, #36]	; (8000ff8 <HAL_TIM_Base_MspInit+0x3c>)
 8000fd4:	f043 0302 	orr.w	r3, r3, #2
 8000fd8:	61d3      	str	r3, [r2, #28]
 8000fda:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <HAL_TIM_Base_MspInit+0x3c>)
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000fe6:	bf00      	nop
 8000fe8:	3714      	adds	r7, #20
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	40000400 	.word	0x40000400
 8000ff8:	40021000 	.word	0x40021000

08000ffc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	; 0x28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a17      	ldr	r2, [pc, #92]	; (8001078 <HAL_UART_MspInit+0x7c>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d128      	bne.n	8001070 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800101e:	4b17      	ldr	r3, [pc, #92]	; (800107c <HAL_UART_MspInit+0x80>)
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	4a16      	ldr	r2, [pc, #88]	; (800107c <HAL_UART_MspInit+0x80>)
 8001024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001028:	61d3      	str	r3, [r2, #28]
 800102a:	4b14      	ldr	r3, [pc, #80]	; (800107c <HAL_UART_MspInit+0x80>)
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <HAL_UART_MspInit+0x80>)
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	4a10      	ldr	r2, [pc, #64]	; (800107c <HAL_UART_MspInit+0x80>)
 800103c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001040:	6153      	str	r3, [r2, #20]
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <HAL_UART_MspInit+0x80>)
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800104e:	230c      	movs	r3, #12
 8001050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800105e:	2307      	movs	r3, #7
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	4619      	mov	r1, r3
 8001068:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106c:	f001 fa6c 	bl	8002548 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001070:	bf00      	nop
 8001072:	3728      	adds	r7, #40	; 0x28
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40004400 	.word	0x40004400
 800107c:	40021000 	.word	0x40021000

08001080 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08c      	sub	sp, #48	; 0x30
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001088:	2300      	movs	r3, #0
 800108a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800108c:	2300      	movs	r3, #0
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001090:	4b2e      	ldr	r3, [pc, #184]	; (800114c <HAL_InitTick+0xcc>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4a2d      	ldr	r2, [pc, #180]	; (800114c <HAL_InitTick+0xcc>)
 8001096:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800109a:	6193      	str	r3, [r2, #24]
 800109c:	4b2b      	ldr	r3, [pc, #172]	; (800114c <HAL_InitTick+0xcc>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010a8:	f107 020c 	add.w	r2, r7, #12
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	4611      	mov	r1, r2
 80010b2:	4618      	mov	r0, r3
 80010b4:	f003 faa0 	bl	80045f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80010b8:	f003 fa7c 	bl	80045b4 <HAL_RCC_GetPCLK2Freq>
 80010bc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010c0:	4a23      	ldr	r2, [pc, #140]	; (8001150 <HAL_InitTick+0xd0>)
 80010c2:	fba2 2303 	umull	r2, r3, r2, r3
 80010c6:	0c9b      	lsrs	r3, r3, #18
 80010c8:	3b01      	subs	r3, #1
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80010cc:	4b21      	ldr	r3, [pc, #132]	; (8001154 <HAL_InitTick+0xd4>)
 80010ce:	4a22      	ldr	r2, [pc, #136]	; (8001158 <HAL_InitTick+0xd8>)
 80010d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80010d2:	4b20      	ldr	r3, [pc, #128]	; (8001154 <HAL_InitTick+0xd4>)
 80010d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010d8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80010da:	4a1e      	ldr	r2, [pc, #120]	; (8001154 <HAL_InitTick+0xd4>)
 80010dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010de:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80010e0:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <HAL_InitTick+0xd4>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e6:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <HAL_InitTick+0xd4>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ec:	4b19      	ldr	r3, [pc, #100]	; (8001154 <HAL_InitTick+0xd4>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80010f2:	4818      	ldr	r0, [pc, #96]	; (8001154 <HAL_InitTick+0xd4>)
 80010f4:	f003 fcd0 	bl	8004a98 <HAL_TIM_Base_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80010fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001102:	2b00      	cmp	r3, #0
 8001104:	d11b      	bne.n	800113e <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001106:	4813      	ldr	r0, [pc, #76]	; (8001154 <HAL_InitTick+0xd4>)
 8001108:	f003 fd1e 	bl	8004b48 <HAL_TIM_Base_Start_IT>
 800110c:	4603      	mov	r3, r0
 800110e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001112:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001116:	2b00      	cmp	r3, #0
 8001118:	d111      	bne.n	800113e <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800111a:	2019      	movs	r0, #25
 800111c:	f001 fa06 	bl	800252c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b0f      	cmp	r3, #15
 8001124:	d808      	bhi.n	8001138 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001126:	2200      	movs	r2, #0
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	2019      	movs	r0, #25
 800112c:	f001 f9e2 	bl	80024f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001130:	4a0a      	ldr	r2, [pc, #40]	; (800115c <HAL_InitTick+0xdc>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	e002      	b.n	800113e <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800113e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001142:	4618      	mov	r0, r3
 8001144:	3730      	adds	r7, #48	; 0x30
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40021000 	.word	0x40021000
 8001150:	431bde83 	.word	0x431bde83
 8001154:	20000970 	.word	0x20000970
 8001158:	40012c00 	.word	0x40012c00
 800115c:	20000014 	.word	0x20000014

08001160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001164:	e7fe      	b.n	8001164 <NMI_Handler+0x4>

08001166 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800116a:	e7fe      	b.n	800116a <HardFault_Handler+0x4>

0800116c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001170:	e7fe      	b.n	8001170 <MemManage_Handler+0x4>

08001172 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001176:	e7fe      	b.n	8001176 <BusFault_Handler+0x4>

08001178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800117c:	e7fe      	b.n	800117c <UsageFault_Handler+0x4>

0800117e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001190:	4802      	ldr	r0, [pc, #8]	; (800119c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001192:	f003 fd49 	bl	8004c28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000970 	.word	0x20000970

080011a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	e00a      	b.n	80011c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011b2:	f3af 8000 	nop.w
 80011b6:	4601      	mov	r1, r0
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	1c5a      	adds	r2, r3, #1
 80011bc:	60ba      	str	r2, [r7, #8]
 80011be:	b2ca      	uxtb	r2, r1
 80011c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	3301      	adds	r3, #1
 80011c6:	617b      	str	r3, [r7, #20]
 80011c8:	697a      	ldr	r2, [r7, #20]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	dbf0      	blt.n	80011b2 <_read+0x12>
  }

  return len;
 80011d0:	687b      	ldr	r3, [r7, #4]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <_close>:
  }
  return len;
}

int _close(int file)
{
 80011da:	b480      	push	{r7}
 80011dc:	b083      	sub	sp, #12
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011f2:	b480      	push	{r7}
 80011f4:	b083      	sub	sp, #12
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
 80011fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001202:	605a      	str	r2, [r3, #4]
  return 0;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <_isatty>:

int _isatty(int file)
{
 8001212:	b480      	push	{r7}
 8001214:	b083      	sub	sp, #12
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800121a:	2301      	movs	r3, #1
}
 800121c:	4618      	mov	r0, r3
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800124c:	4a14      	ldr	r2, [pc, #80]	; (80012a0 <_sbrk+0x5c>)
 800124e:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <_sbrk+0x60>)
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001258:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <_sbrk+0x64>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d102      	bne.n	8001266 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001260:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <_sbrk+0x64>)
 8001262:	4a12      	ldr	r2, [pc, #72]	; (80012ac <_sbrk+0x68>)
 8001264:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001266:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <_sbrk+0x64>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	429a      	cmp	r2, r3
 8001272:	d207      	bcs.n	8001284 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001274:	f007 fe2e 	bl	8008ed4 <__errno>
 8001278:	4603      	mov	r3, r0
 800127a:	220c      	movs	r2, #12
 800127c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800127e:	f04f 33ff 	mov.w	r3, #4294967295
 8001282:	e009      	b.n	8001298 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001284:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <_sbrk+0x64>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800128a:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <_sbrk+0x64>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	4a05      	ldr	r2, [pc, #20]	; (80012a8 <_sbrk+0x64>)
 8001294:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001296:	68fb      	ldr	r3, [r7, #12]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3718      	adds	r7, #24
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20010000 	.word	0x20010000
 80012a4:	00000400 	.word	0x00000400
 80012a8:	200009bc 	.word	0x200009bc
 80012ac:	20001998 	.word	0x20001998

080012b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <SystemInit+0x20>)
 80012b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ba:	4a05      	ldr	r2, [pc, #20]	; (80012d0 <SystemInit+0x20>)
 80012bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800130c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80012d8:	f7ff ffea 	bl	80012b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012dc:	480c      	ldr	r0, [pc, #48]	; (8001310 <LoopForever+0x6>)
  ldr r1, =_edata
 80012de:	490d      	ldr	r1, [pc, #52]	; (8001314 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012e0:	4a0d      	ldr	r2, [pc, #52]	; (8001318 <LoopForever+0xe>)
  movs r3, #0
 80012e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e4:	e002      	b.n	80012ec <LoopCopyDataInit>

080012e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ea:	3304      	adds	r3, #4

080012ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f0:	d3f9      	bcc.n	80012e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012f2:	4a0a      	ldr	r2, [pc, #40]	; (800131c <LoopForever+0x12>)
  ldr r4, =_ebss
 80012f4:	4c0a      	ldr	r4, [pc, #40]	; (8001320 <LoopForever+0x16>)
  movs r3, #0
 80012f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f8:	e001      	b.n	80012fe <LoopFillZerobss>

080012fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012fc:	3204      	adds	r2, #4

080012fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001300:	d3fb      	bcc.n	80012fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001302:	f007 fded 	bl	8008ee0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001306:	f7ff fa2f 	bl	8000768 <main>

0800130a <LoopForever>:

LoopForever:
    b LoopForever
 800130a:	e7fe      	b.n	800130a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800130c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001314:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001318:	08009e78 	.word	0x08009e78
  ldr r2, =_sbss
 800131c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001320:	20001998 	.word	0x20001998

08001324 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001324:	e7fe      	b.n	8001324 <ADC1_2_IRQHandler>
	...

08001328 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800132c:	4b08      	ldr	r3, [pc, #32]	; (8001350 <HAL_Init+0x28>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a07      	ldr	r2, [pc, #28]	; (8001350 <HAL_Init+0x28>)
 8001332:	f043 0310 	orr.w	r3, r3, #16
 8001336:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001338:	2003      	movs	r0, #3
 800133a:	f001 f8d0 	bl	80024de <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800133e:	200f      	movs	r0, #15
 8001340:	f7ff fe9e 	bl	8001080 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001344:	f7ff fd90 	bl	8000e68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40022000 	.word	0x40022000

08001354 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_IncTick+0x20>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_IncTick+0x24>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4413      	add	r3, r2
 8001364:	4a04      	ldr	r2, [pc, #16]	; (8001378 <HAL_IncTick+0x24>)
 8001366:	6013      	str	r3, [r2, #0]
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	20000018 	.word	0x20000018
 8001378:	200009c0 	.word	0x200009c0

0800137c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001380:	4b03      	ldr	r3, [pc, #12]	; (8001390 <HAL_GetTick+0x14>)
 8001382:	681b      	ldr	r3, [r3, #0]
}
 8001384:	4618      	mov	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	200009c0 	.word	0x200009c0

08001394 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800139c:	f7ff ffee 	bl	800137c <HAL_GetTick>
 80013a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ac:	d005      	beq.n	80013ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <HAL_Delay+0x44>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	461a      	mov	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4413      	add	r3, r2
 80013b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80013ba:	bf00      	nop
 80013bc:	f7ff ffde 	bl	800137c <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d8f7      	bhi.n	80013bc <HAL_Delay+0x28>
  {
  }
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000018 	.word	0x20000018

080013dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b09a      	sub	sp, #104	; 0x68
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80013ea:	2300      	movs	r3, #0
 80013ec:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d101      	bne.n	80013fc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e1e3      	b.n	80017c4 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f003 0310 	and.w	r3, r3, #16
 800140a:	2b00      	cmp	r3, #0
 800140c:	d176      	bne.n	80014fc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	2b00      	cmp	r3, #0
 8001414:	d152      	bne.n	80014bc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff fd41 	bl	8000eb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d13b      	bne.n	80014bc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f000 ff37 	bl	80022b8 <ADC_Disable>
 800144a:	4603      	mov	r3, r0
 800144c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	f003 0310 	and.w	r3, r3, #16
 8001458:	2b00      	cmp	r3, #0
 800145a:	d12f      	bne.n	80014bc <HAL_ADC_Init+0xe0>
 800145c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001460:	2b00      	cmp	r3, #0
 8001462:	d12b      	bne.n	80014bc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001468:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800146c:	f023 0302 	bic.w	r3, r3, #2
 8001470:	f043 0202 	orr.w	r2, r3, #2
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	689a      	ldr	r2, [r3, #8]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001486:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001496:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001498:	4b92      	ldr	r3, [pc, #584]	; (80016e4 <HAL_ADC_Init+0x308>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a92      	ldr	r2, [pc, #584]	; (80016e8 <HAL_ADC_Init+0x30c>)
 800149e:	fba2 2303 	umull	r2, r3, r2, r3
 80014a2:	0c9a      	lsrs	r2, r3, #18
 80014a4:	4613      	mov	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014ae:	e002      	b.n	80014b6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1f9      	bne.n	80014b0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d007      	beq.n	80014da <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80014d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014d8:	d110      	bne.n	80014fc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f023 0312 	bic.w	r3, r3, #18
 80014e2:	f043 0210 	orr.w	r2, r3, #16
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	f043 0201 	orr.w	r2, r3, #1
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	f003 0310 	and.w	r3, r3, #16
 8001504:	2b00      	cmp	r3, #0
 8001506:	f040 8150 	bne.w	80017aa <HAL_ADC_Init+0x3ce>
 800150a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800150e:	2b00      	cmp	r3, #0
 8001510:	f040 814b 	bne.w	80017aa <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800151e:	2b00      	cmp	r3, #0
 8001520:	f040 8143 	bne.w	80017aa <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800152c:	f043 0202 	orr.w	r2, r3, #2
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800153c:	d004      	beq.n	8001548 <HAL_ADC_Init+0x16c>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a6a      	ldr	r2, [pc, #424]	; (80016ec <HAL_ADC_Init+0x310>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d101      	bne.n	800154c <HAL_ADC_Init+0x170>
 8001548:	4b69      	ldr	r3, [pc, #420]	; (80016f0 <HAL_ADC_Init+0x314>)
 800154a:	e000      	b.n	800154e <HAL_ADC_Init+0x172>
 800154c:	4b69      	ldr	r3, [pc, #420]	; (80016f4 <HAL_ADC_Init+0x318>)
 800154e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001558:	d102      	bne.n	8001560 <HAL_ADC_Init+0x184>
 800155a:	4b64      	ldr	r3, [pc, #400]	; (80016ec <HAL_ADC_Init+0x310>)
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	e01a      	b.n	8001596 <HAL_ADC_Init+0x1ba>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a61      	ldr	r2, [pc, #388]	; (80016ec <HAL_ADC_Init+0x310>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d103      	bne.n	8001572 <HAL_ADC_Init+0x196>
 800156a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	e011      	b.n	8001596 <HAL_ADC_Init+0x1ba>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a60      	ldr	r2, [pc, #384]	; (80016f8 <HAL_ADC_Init+0x31c>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d102      	bne.n	8001582 <HAL_ADC_Init+0x1a6>
 800157c:	4b5f      	ldr	r3, [pc, #380]	; (80016fc <HAL_ADC_Init+0x320>)
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	e009      	b.n	8001596 <HAL_ADC_Init+0x1ba>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a5d      	ldr	r2, [pc, #372]	; (80016fc <HAL_ADC_Init+0x320>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d102      	bne.n	8001592 <HAL_ADC_Init+0x1b6>
 800158c:	4b5a      	ldr	r3, [pc, #360]	; (80016f8 <HAL_ADC_Init+0x31c>)
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	e001      	b.n	8001596 <HAL_ADC_Init+0x1ba>
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f003 0303 	and.w	r3, r3, #3
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d108      	bne.n	80015b6 <HAL_ADC_Init+0x1da>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d101      	bne.n	80015b6 <HAL_ADC_Init+0x1da>
 80015b2:	2301      	movs	r3, #1
 80015b4:	e000      	b.n	80015b8 <HAL_ADC_Init+0x1dc>
 80015b6:	2300      	movs	r3, #0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d11c      	bne.n	80015f6 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80015bc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d010      	beq.n	80015e4 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 0303 	and.w	r3, r3, #3
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d107      	bne.n	80015de <HAL_ADC_Init+0x202>
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d101      	bne.n	80015de <HAL_ADC_Init+0x202>
 80015da:	2301      	movs	r3, #1
 80015dc:	e000      	b.n	80015e0 <HAL_ADC_Init+0x204>
 80015de:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d108      	bne.n	80015f6 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80015e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	431a      	orrs	r2, r3
 80015f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015f4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	7e5b      	ldrb	r3, [r3, #25]
 80015fa:	035b      	lsls	r3, r3, #13
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001600:	2a01      	cmp	r2, #1
 8001602:	d002      	beq.n	800160a <HAL_ADC_Init+0x22e>
 8001604:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001608:	e000      	b.n	800160c <HAL_ADC_Init+0x230>
 800160a:	2200      	movs	r2, #0
 800160c:	431a      	orrs	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	431a      	orrs	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	4313      	orrs	r3, r2
 800161a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800161c:	4313      	orrs	r3, r2
 800161e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d11b      	bne.n	8001662 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	7e5b      	ldrb	r3, [r3, #25]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d109      	bne.n	8001646 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	3b01      	subs	r3, #1
 8001638:	045a      	lsls	r2, r3, #17
 800163a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800163c:	4313      	orrs	r3, r2
 800163e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001642:	663b      	str	r3, [r7, #96]	; 0x60
 8001644:	e00d      	b.n	8001662 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800164e:	f043 0220 	orr.w	r2, r3, #32
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	f043 0201 	orr.w	r2, r3, #1
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001666:	2b01      	cmp	r3, #1
 8001668:	d054      	beq.n	8001714 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a22      	ldr	r2, [pc, #136]	; (80016f8 <HAL_ADC_Init+0x31c>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d004      	beq.n	800167e <HAL_ADC_Init+0x2a2>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a20      	ldr	r2, [pc, #128]	; (80016fc <HAL_ADC_Init+0x320>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d140      	bne.n	8001700 <HAL_ADC_Init+0x324>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001682:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001686:	d02a      	beq.n	80016de <HAL_ADC_Init+0x302>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001690:	d022      	beq.n	80016d8 <HAL_ADC_Init+0x2fc>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001696:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800169a:	d01a      	beq.n	80016d2 <HAL_ADC_Init+0x2f6>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a0:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80016a4:	d012      	beq.n	80016cc <HAL_ADC_Init+0x2f0>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016aa:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80016ae:	d00a      	beq.n	80016c6 <HAL_ADC_Init+0x2ea>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b4:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80016b8:	d002      	beq.n	80016c0 <HAL_ADC_Init+0x2e4>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016be:	e023      	b.n	8001708 <HAL_ADC_Init+0x32c>
 80016c0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80016c4:	e020      	b.n	8001708 <HAL_ADC_Init+0x32c>
 80016c6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80016ca:	e01d      	b.n	8001708 <HAL_ADC_Init+0x32c>
 80016cc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80016d0:	e01a      	b.n	8001708 <HAL_ADC_Init+0x32c>
 80016d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016d6:	e017      	b.n	8001708 <HAL_ADC_Init+0x32c>
 80016d8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80016dc:	e014      	b.n	8001708 <HAL_ADC_Init+0x32c>
 80016de:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80016e2:	e011      	b.n	8001708 <HAL_ADC_Init+0x32c>
 80016e4:	20000010 	.word	0x20000010
 80016e8:	431bde83 	.word	0x431bde83
 80016ec:	50000100 	.word	0x50000100
 80016f0:	50000300 	.word	0x50000300
 80016f4:	50000700 	.word	0x50000700
 80016f8:	50000400 	.word	0x50000400
 80016fc:	50000500 	.word	0x50000500
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001704:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800170c:	4313      	orrs	r3, r2
 800170e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001710:	4313      	orrs	r3, r2
 8001712:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 030c 	and.w	r3, r3, #12
 800171e:	2b00      	cmp	r3, #0
 8001720:	d114      	bne.n	800174c <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	6812      	ldr	r2, [r2, #0]
 800172c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001730:	f023 0302 	bic.w	r3, r3, #2
 8001734:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	7e1b      	ldrb	r3, [r3, #24]
 800173a:	039a      	lsls	r2, r3, #14
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	4313      	orrs	r3, r2
 8001746:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001748:	4313      	orrs	r3, r2
 800174a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	68da      	ldr	r2, [r3, #12]
 8001752:	4b1e      	ldr	r3, [pc, #120]	; (80017cc <HAL_ADC_Init+0x3f0>)
 8001754:	4013      	ands	r3, r2
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6812      	ldr	r2, [r2, #0]
 800175a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800175c:	430b      	orrs	r3, r1
 800175e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d10c      	bne.n	8001782 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f023 010f 	bic.w	r1, r3, #15
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	1e5a      	subs	r2, r3, #1
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	631a      	str	r2, [r3, #48]	; 0x30
 8001780:	e007      	b.n	8001792 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 020f 	bic.w	r2, r2, #15
 8001790:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	f023 0303 	bic.w	r3, r3, #3
 80017a0:	f043 0201 	orr.w	r2, r3, #1
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	641a      	str	r2, [r3, #64]	; 0x40
 80017a8:	e00a      	b.n	80017c0 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f023 0312 	bic.w	r3, r3, #18
 80017b2:	f043 0210 	orr.w	r2, r3, #16
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80017ba:	2301      	movs	r3, #1
 80017bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80017c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3768      	adds	r7, #104	; 0x68
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	fff0c007 	.word	0xfff0c007

080017d0 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017d8:	2300      	movs	r3, #0
 80017da:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f040 80f9 	bne.w	80019de <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d101      	bne.n	80017fa <HAL_ADC_Start+0x2a>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e0f4      	b.n	80019e4 <HAL_ADC_Start+0x214>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 fcf4 	bl	80021f0 <ADC_Enable>
 8001808:	4603      	mov	r3, r0
 800180a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800180c:	7bfb      	ldrb	r3, [r7, #15]
 800180e:	2b00      	cmp	r3, #0
 8001810:	f040 80e0 	bne.w	80019d4 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001818:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800181c:	f023 0301 	bic.w	r3, r3, #1
 8001820:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001830:	d004      	beq.n	800183c <HAL_ADC_Start+0x6c>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a6d      	ldr	r2, [pc, #436]	; (80019ec <HAL_ADC_Start+0x21c>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d106      	bne.n	800184a <HAL_ADC_Start+0x7a>
 800183c:	4b6c      	ldr	r3, [pc, #432]	; (80019f0 <HAL_ADC_Start+0x220>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f003 031f 	and.w	r3, r3, #31
 8001844:	2b00      	cmp	r3, #0
 8001846:	d010      	beq.n	800186a <HAL_ADC_Start+0x9a>
 8001848:	e005      	b.n	8001856 <HAL_ADC_Start+0x86>
 800184a:	4b6a      	ldr	r3, [pc, #424]	; (80019f4 <HAL_ADC_Start+0x224>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 031f 	and.w	r3, r3, #31
 8001852:	2b00      	cmp	r3, #0
 8001854:	d009      	beq.n	800186a <HAL_ADC_Start+0x9a>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800185e:	d004      	beq.n	800186a <HAL_ADC_Start+0x9a>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a64      	ldr	r2, [pc, #400]	; (80019f8 <HAL_ADC_Start+0x228>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d115      	bne.n	8001896 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d036      	beq.n	80018f2 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800188c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001894:	e02d      	b.n	80018f2 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018aa:	d004      	beq.n	80018b6 <HAL_ADC_Start+0xe6>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a4e      	ldr	r2, [pc, #312]	; (80019ec <HAL_ADC_Start+0x21c>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d10a      	bne.n	80018cc <HAL_ADC_Start+0xfc>
 80018b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	bf14      	ite	ne
 80018c4:	2301      	movne	r3, #1
 80018c6:	2300      	moveq	r3, #0
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	e008      	b.n	80018de <HAL_ADC_Start+0x10e>
 80018cc:	4b4a      	ldr	r3, [pc, #296]	; (80019f8 <HAL_ADC_Start+0x228>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	bf14      	ite	ne
 80018d8:	2301      	movne	r3, #1
 80018da:	2300      	moveq	r3, #0
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d007      	beq.n	80018f2 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018fe:	d106      	bne.n	800190e <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001904:	f023 0206 	bic.w	r2, r3, #6
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	645a      	str	r2, [r3, #68]	; 0x44
 800190c:	e002      	b.n	8001914 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	221c      	movs	r2, #28
 8001922:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800192c:	d004      	beq.n	8001938 <HAL_ADC_Start+0x168>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a2e      	ldr	r2, [pc, #184]	; (80019ec <HAL_ADC_Start+0x21c>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d106      	bne.n	8001946 <HAL_ADC_Start+0x176>
 8001938:	4b2d      	ldr	r3, [pc, #180]	; (80019f0 <HAL_ADC_Start+0x220>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 031f 	and.w	r3, r3, #31
 8001940:	2b00      	cmp	r3, #0
 8001942:	d03e      	beq.n	80019c2 <HAL_ADC_Start+0x1f2>
 8001944:	e005      	b.n	8001952 <HAL_ADC_Start+0x182>
 8001946:	4b2b      	ldr	r3, [pc, #172]	; (80019f4 <HAL_ADC_Start+0x224>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 031f 	and.w	r3, r3, #31
 800194e:	2b00      	cmp	r3, #0
 8001950:	d037      	beq.n	80019c2 <HAL_ADC_Start+0x1f2>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800195a:	d004      	beq.n	8001966 <HAL_ADC_Start+0x196>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a22      	ldr	r2, [pc, #136]	; (80019ec <HAL_ADC_Start+0x21c>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d106      	bne.n	8001974 <HAL_ADC_Start+0x1a4>
 8001966:	4b22      	ldr	r3, [pc, #136]	; (80019f0 <HAL_ADC_Start+0x220>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 031f 	and.w	r3, r3, #31
 800196e:	2b05      	cmp	r3, #5
 8001970:	d027      	beq.n	80019c2 <HAL_ADC_Start+0x1f2>
 8001972:	e005      	b.n	8001980 <HAL_ADC_Start+0x1b0>
 8001974:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <HAL_ADC_Start+0x224>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 031f 	and.w	r3, r3, #31
 800197c:	2b05      	cmp	r3, #5
 800197e:	d020      	beq.n	80019c2 <HAL_ADC_Start+0x1f2>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001988:	d004      	beq.n	8001994 <HAL_ADC_Start+0x1c4>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a17      	ldr	r2, [pc, #92]	; (80019ec <HAL_ADC_Start+0x21c>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d106      	bne.n	80019a2 <HAL_ADC_Start+0x1d2>
 8001994:	4b16      	ldr	r3, [pc, #88]	; (80019f0 <HAL_ADC_Start+0x220>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 031f 	and.w	r3, r3, #31
 800199c:	2b09      	cmp	r3, #9
 800199e:	d010      	beq.n	80019c2 <HAL_ADC_Start+0x1f2>
 80019a0:	e005      	b.n	80019ae <HAL_ADC_Start+0x1de>
 80019a2:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <HAL_ADC_Start+0x224>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 031f 	and.w	r3, r3, #31
 80019aa:	2b09      	cmp	r3, #9
 80019ac:	d009      	beq.n	80019c2 <HAL_ADC_Start+0x1f2>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019b6:	d004      	beq.n	80019c2 <HAL_ADC_Start+0x1f2>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a0e      	ldr	r2, [pc, #56]	; (80019f8 <HAL_ADC_Start+0x228>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d10f      	bne.n	80019e2 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f042 0204 	orr.w	r2, r2, #4
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	e006      	b.n	80019e2 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80019dc:	e001      	b.n	80019e2 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80019de:	2302      	movs	r3, #2
 80019e0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	50000100 	.word	0x50000100
 80019f0:	50000300 	.word	0x50000300
 80019f4:	50000700 	.word	0x50000700
 80019f8:	50000400 	.word	0x50000400

080019fc <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	2b08      	cmp	r3, #8
 8001a10:	d102      	bne.n	8001a18 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001a12:	2308      	movs	r3, #8
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	e03a      	b.n	8001a8e <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a20:	d004      	beq.n	8001a2c <HAL_ADC_PollForConversion+0x30>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a72      	ldr	r2, [pc, #456]	; (8001bf0 <HAL_ADC_PollForConversion+0x1f4>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d101      	bne.n	8001a30 <HAL_ADC_PollForConversion+0x34>
 8001a2c:	4b71      	ldr	r3, [pc, #452]	; (8001bf4 <HAL_ADC_PollForConversion+0x1f8>)
 8001a2e:	e000      	b.n	8001a32 <HAL_ADC_PollForConversion+0x36>
 8001a30:	4b71      	ldr	r3, [pc, #452]	; (8001bf8 <HAL_ADC_PollForConversion+0x1fc>)
 8001a32:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 031f 	and.w	r3, r3, #31
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d112      	bne.n	8001a66 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d11d      	bne.n	8001a8a <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	f043 0220 	orr.w	r2, r3, #32
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e0bf      	b.n	8001be6 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00b      	beq.n	8001a8a <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f043 0220 	orr.w	r2, r3, #32
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e0ad      	b.n	8001be6 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001a8a:	230c      	movs	r3, #12
 8001a8c:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a96:	d004      	beq.n	8001aa2 <HAL_ADC_PollForConversion+0xa6>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a54      	ldr	r2, [pc, #336]	; (8001bf0 <HAL_ADC_PollForConversion+0x1f4>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d106      	bne.n	8001ab0 <HAL_ADC_PollForConversion+0xb4>
 8001aa2:	4b54      	ldr	r3, [pc, #336]	; (8001bf4 <HAL_ADC_PollForConversion+0x1f8>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 031f 	and.w	r3, r3, #31
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d010      	beq.n	8001ad0 <HAL_ADC_PollForConversion+0xd4>
 8001aae:	e005      	b.n	8001abc <HAL_ADC_PollForConversion+0xc0>
 8001ab0:	4b51      	ldr	r3, [pc, #324]	; (8001bf8 <HAL_ADC_PollForConversion+0x1fc>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 031f 	and.w	r3, r3, #31
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d009      	beq.n	8001ad0 <HAL_ADC_PollForConversion+0xd4>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ac4:	d004      	beq.n	8001ad0 <HAL_ADC_PollForConversion+0xd4>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a4c      	ldr	r2, [pc, #304]	; (8001bfc <HAL_ADC_PollForConversion+0x200>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d104      	bne.n	8001ada <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	e00f      	b.n	8001afa <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ae2:	d004      	beq.n	8001aee <HAL_ADC_PollForConversion+0xf2>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a41      	ldr	r2, [pc, #260]	; (8001bf0 <HAL_ADC_PollForConversion+0x1f4>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d102      	bne.n	8001af4 <HAL_ADC_PollForConversion+0xf8>
 8001aee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001af2:	e000      	b.n	8001af6 <HAL_ADC_PollForConversion+0xfa>
 8001af4:	4b41      	ldr	r3, [pc, #260]	; (8001bfc <HAL_ADC_PollForConversion+0x200>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001afa:	f7ff fc3f 	bl	800137c <HAL_GetTick>
 8001afe:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001b00:	e021      	b.n	8001b46 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b08:	d01d      	beq.n	8001b46 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d007      	beq.n	8001b20 <HAL_ADC_PollForConversion+0x124>
 8001b10:	f7ff fc34 	bl	800137c <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d212      	bcs.n	8001b46 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10b      	bne.n	8001b46 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f043 0204 	orr.w	r2, r3, #4
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e04f      	b.n	8001be6 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d0d6      	beq.n	8001b02 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d131      	bne.n	8001bd2 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d12c      	bne.n	8001bd2 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	d125      	bne.n	8001bd2 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d112      	bne.n	8001bba <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d112      	bne.n	8001bd2 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	f043 0201 	orr.w	r2, r3, #1
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	641a      	str	r2, [r3, #64]	; 0x40
 8001bb8:	e00b      	b.n	8001bd2 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	f043 0220 	orr.w	r2, r3, #32
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bca:	f043 0201 	orr.w	r2, r3, #1
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d103      	bne.n	8001be4 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	50000100 	.word	0x50000100
 8001bf4:	50000300 	.word	0x50000300
 8001bf8:	50000700 	.word	0x50000700
 8001bfc:	50000400 	.word	0x50000400

08001c00 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b09b      	sub	sp, #108	; 0x6c
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c26:	2300      	movs	r3, #0
 8001c28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d101      	bne.n	8001c3e <HAL_ADC_ConfigChannel+0x22>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e2c8      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x5b4>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f040 82ac 	bne.w	80021ae <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d81c      	bhi.n	8001c98 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	4413      	add	r3, r2
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	461a      	mov	r2, r3
 8001c72:	231f      	movs	r3, #31
 8001c74:	4093      	lsls	r3, r2
 8001c76:	43db      	mvns	r3, r3
 8001c78:	4019      	ands	r1, r3
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	6818      	ldr	r0, [r3, #0]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	4613      	mov	r3, r2
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	4413      	add	r3, r2
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	631a      	str	r2, [r3, #48]	; 0x30
 8001c96:	e063      	b.n	8001d60 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b09      	cmp	r3, #9
 8001c9e:	d81e      	bhi.n	8001cde <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	4613      	mov	r3, r2
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4413      	add	r3, r2
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	3b1e      	subs	r3, #30
 8001cb4:	221f      	movs	r2, #31
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	4019      	ands	r1, r3
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	6818      	ldr	r0, [r3, #0]
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	4413      	add	r3, r2
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	3b1e      	subs	r3, #30
 8001cd0:	fa00 f203 	lsl.w	r2, r0, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	635a      	str	r2, [r3, #52]	; 0x34
 8001cdc:	e040      	b.n	8001d60 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b0e      	cmp	r3, #14
 8001ce4:	d81e      	bhi.n	8001d24 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	4413      	add	r3, r2
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	3b3c      	subs	r3, #60	; 0x3c
 8001cfa:	221f      	movs	r2, #31
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	4019      	ands	r1, r3
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	6818      	ldr	r0, [r3, #0]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	4413      	add	r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	3b3c      	subs	r3, #60	; 0x3c
 8001d16:	fa00 f203 	lsl.w	r2, r0, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	639a      	str	r2, [r3, #56]	; 0x38
 8001d22:	e01d      	b.n	8001d60 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	4413      	add	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	3b5a      	subs	r3, #90	; 0x5a
 8001d38:	221f      	movs	r2, #31
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	4019      	ands	r1, r3
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	6818      	ldr	r0, [r3, #0]
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	4413      	add	r3, r2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	3b5a      	subs	r3, #90	; 0x5a
 8001d54:	fa00 f203 	lsl.w	r2, r0, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 030c 	and.w	r3, r3, #12
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f040 80e5 	bne.w	8001f3a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b09      	cmp	r3, #9
 8001d76:	d91c      	bls.n	8001db2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6999      	ldr	r1, [r3, #24]
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	4613      	mov	r3, r2
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4413      	add	r3, r2
 8001d88:	3b1e      	subs	r3, #30
 8001d8a:	2207      	movs	r2, #7
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	4019      	ands	r1, r3
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	6898      	ldr	r0, [r3, #8]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	4413      	add	r3, r2
 8001da2:	3b1e      	subs	r3, #30
 8001da4:	fa00 f203 	lsl.w	r2, r0, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	619a      	str	r2, [r3, #24]
 8001db0:	e019      	b.n	8001de6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6959      	ldr	r1, [r3, #20]
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	4413      	add	r3, r2
 8001dc2:	2207      	movs	r2, #7
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	4019      	ands	r1, r3
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	6898      	ldr	r0, [r3, #8]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	4413      	add	r3, r2
 8001dda:	fa00 f203 	lsl.w	r2, r0, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	695a      	ldr	r2, [r3, #20]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	08db      	lsrs	r3, r3, #3
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	d84f      	bhi.n	8001ea8 <HAL_ADC_ConfigChannel+0x28c>
 8001e08:	a201      	add	r2, pc, #4	; (adr r2, 8001e10 <HAL_ADC_ConfigChannel+0x1f4>)
 8001e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e0e:	bf00      	nop
 8001e10:	08001e21 	.word	0x08001e21
 8001e14:	08001e43 	.word	0x08001e43
 8001e18:	08001e65 	.word	0x08001e65
 8001e1c:	08001e87 	.word	0x08001e87
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e26:	4b99      	ldr	r3, [pc, #612]	; (800208c <HAL_ADC_ConfigChannel+0x470>)
 8001e28:	4013      	ands	r3, r2
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	6812      	ldr	r2, [r2, #0]
 8001e2e:	0691      	lsls	r1, r2, #26
 8001e30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e32:	430a      	orrs	r2, r1
 8001e34:	431a      	orrs	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e3e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e40:	e07b      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e48:	4b90      	ldr	r3, [pc, #576]	; (800208c <HAL_ADC_ConfigChannel+0x470>)
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	6812      	ldr	r2, [r2, #0]
 8001e50:	0691      	lsls	r1, r2, #26
 8001e52:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e54:	430a      	orrs	r2, r1
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e60:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e62:	e06a      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001e6a:	4b88      	ldr	r3, [pc, #544]	; (800208c <HAL_ADC_ConfigChannel+0x470>)
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	6812      	ldr	r2, [r2, #0]
 8001e72:	0691      	lsls	r1, r2, #26
 8001e74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e76:	430a      	orrs	r2, r1
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e82:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e84:	e059      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001e8c:	4b7f      	ldr	r3, [pc, #508]	; (800208c <HAL_ADC_ConfigChannel+0x470>)
 8001e8e:	4013      	ands	r3, r2
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	0691      	lsls	r1, r2, #26
 8001e96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ea4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ea6:	e048      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	069b      	lsls	r3, r3, #26
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d107      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001eca:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ed2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	069b      	lsls	r3, r3, #26
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d107      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001eee:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ef6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	069b      	lsls	r3, r3, #26
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d107      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f12:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	069b      	lsls	r3, r3, #26
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d107      	bne.n	8001f38 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f36:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001f38:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d108      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x33e>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d101      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x33e>
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x340>
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f040 8131 	bne.w	80021c4 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d00f      	beq.n	8001f8a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2201      	movs	r2, #1
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43da      	mvns	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	400a      	ands	r2, r1
 8001f84:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001f88:	e049      	b.n	800201e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2201      	movs	r2, #1
 8001f98:	409a      	lsls	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b09      	cmp	r3, #9
 8001faa:	d91c      	bls.n	8001fe6 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6999      	ldr	r1, [r3, #24]
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	4413      	add	r3, r2
 8001fbc:	3b1b      	subs	r3, #27
 8001fbe:	2207      	movs	r2, #7
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	4019      	ands	r1, r3
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	6898      	ldr	r0, [r3, #8]
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3b1b      	subs	r3, #27
 8001fd8:	fa00 f203 	lsl.w	r2, r0, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	619a      	str	r2, [r3, #24]
 8001fe4:	e01b      	b.n	800201e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6959      	ldr	r1, [r3, #20]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	1c5a      	adds	r2, r3, #1
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	4413      	add	r3, r2
 8001ff8:	2207      	movs	r2, #7
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	4019      	ands	r1, r3
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	6898      	ldr	r0, [r3, #8]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	1c5a      	adds	r2, r3, #1
 800200c:	4613      	mov	r3, r2
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	4413      	add	r3, r2
 8002012:	fa00 f203 	lsl.w	r2, r0, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002026:	d004      	beq.n	8002032 <HAL_ADC_ConfigChannel+0x416>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a18      	ldr	r2, [pc, #96]	; (8002090 <HAL_ADC_ConfigChannel+0x474>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d101      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x41a>
 8002032:	4b18      	ldr	r3, [pc, #96]	; (8002094 <HAL_ADC_ConfigChannel+0x478>)
 8002034:	e000      	b.n	8002038 <HAL_ADC_ConfigChannel+0x41c>
 8002036:	4b18      	ldr	r3, [pc, #96]	; (8002098 <HAL_ADC_ConfigChannel+0x47c>)
 8002038:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2b10      	cmp	r3, #16
 8002040:	d105      	bne.n	800204e <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002042:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800204a:	2b00      	cmp	r3, #0
 800204c:	d015      	beq.n	800207a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002052:	2b11      	cmp	r3, #17
 8002054:	d105      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002056:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00b      	beq.n	800207a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002066:	2b12      	cmp	r3, #18
 8002068:	f040 80ac 	bne.w	80021c4 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800206c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002074:	2b00      	cmp	r3, #0
 8002076:	f040 80a5 	bne.w	80021c4 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002082:	d10b      	bne.n	800209c <HAL_ADC_ConfigChannel+0x480>
 8002084:	4b02      	ldr	r3, [pc, #8]	; (8002090 <HAL_ADC_ConfigChannel+0x474>)
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	e023      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x4b6>
 800208a:	bf00      	nop
 800208c:	83fff000 	.word	0x83fff000
 8002090:	50000100 	.word	0x50000100
 8002094:	50000300 	.word	0x50000300
 8002098:	50000700 	.word	0x50000700
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a4e      	ldr	r2, [pc, #312]	; (80021dc <HAL_ADC_ConfigChannel+0x5c0>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d103      	bne.n	80020ae <HAL_ADC_ConfigChannel+0x492>
 80020a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	e011      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x4b6>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a4b      	ldr	r2, [pc, #300]	; (80021e0 <HAL_ADC_ConfigChannel+0x5c4>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d102      	bne.n	80020be <HAL_ADC_ConfigChannel+0x4a2>
 80020b8:	4b4a      	ldr	r3, [pc, #296]	; (80021e4 <HAL_ADC_ConfigChannel+0x5c8>)
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	e009      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x4b6>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a48      	ldr	r2, [pc, #288]	; (80021e4 <HAL_ADC_ConfigChannel+0x5c8>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d102      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x4b2>
 80020c8:	4b45      	ldr	r3, [pc, #276]	; (80021e0 <HAL_ADC_ConfigChannel+0x5c4>)
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	e001      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x4b6>
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 0303 	and.w	r3, r3, #3
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d108      	bne.n	80020f2 <HAL_ADC_ConfigChannel+0x4d6>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d101      	bne.n	80020f2 <HAL_ADC_ConfigChannel+0x4d6>
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <HAL_ADC_ConfigChannel+0x4d8>
 80020f2:	2300      	movs	r3, #0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d150      	bne.n	800219a <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80020f8:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d010      	beq.n	8002120 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	2b01      	cmp	r3, #1
 8002108:	d107      	bne.n	800211a <HAL_ADC_ConfigChannel+0x4fe>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b01      	cmp	r3, #1
 8002114:	d101      	bne.n	800211a <HAL_ADC_ConfigChannel+0x4fe>
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <HAL_ADC_ConfigChannel+0x500>
 800211a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800211c:	2b00      	cmp	r3, #0
 800211e:	d13c      	bne.n	800219a <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2b10      	cmp	r3, #16
 8002126:	d11d      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x548>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002130:	d118      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002132:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800213a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800213c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800213e:	4b2a      	ldr	r3, [pc, #168]	; (80021e8 <HAL_ADC_ConfigChannel+0x5cc>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a2a      	ldr	r2, [pc, #168]	; (80021ec <HAL_ADC_ConfigChannel+0x5d0>)
 8002144:	fba2 2303 	umull	r2, r3, r2, r3
 8002148:	0c9a      	lsrs	r2, r3, #18
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002154:	e002      	b.n	800215c <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	3b01      	subs	r3, #1
 800215a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f9      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002162:	e02e      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b11      	cmp	r3, #17
 800216a:	d10b      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x568>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002174:	d106      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002176:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800217e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002180:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002182:	e01e      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b12      	cmp	r3, #18
 800218a:	d11a      	bne.n	80021c2 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800218c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002194:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002196:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002198:	e013      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	f043 0220 	orr.w	r2, r3, #32
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80021ac:	e00a      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	f043 0220 	orr.w	r2, r3, #32
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80021c0:	e000      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021c2:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80021cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	376c      	adds	r7, #108	; 0x6c
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	50000100 	.word	0x50000100
 80021e0:	50000400 	.word	0x50000400
 80021e4:	50000500 	.word	0x50000500
 80021e8:	20000010 	.word	0x20000010
 80021ec:	431bde83 	.word	0x431bde83

080021f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	2b01      	cmp	r3, #1
 8002208:	d108      	bne.n	800221c <ADC_Enable+0x2c>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b01      	cmp	r3, #1
 8002216:	d101      	bne.n	800221c <ADC_Enable+0x2c>
 8002218:	2301      	movs	r3, #1
 800221a:	e000      	b.n	800221e <ADC_Enable+0x2e>
 800221c:	2300      	movs	r3, #0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d143      	bne.n	80022aa <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	4b22      	ldr	r3, [pc, #136]	; (80022b4 <ADC_Enable+0xc4>)
 800222a:	4013      	ands	r3, r2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00d      	beq.n	800224c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	f043 0210 	orr.w	r2, r3, #16
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002240:	f043 0201 	orr.w	r2, r3, #1
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e02f      	b.n	80022ac <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0201 	orr.w	r2, r2, #1
 800225a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800225c:	f7ff f88e 	bl	800137c <HAL_GetTick>
 8002260:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002262:	e01b      	b.n	800229c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002264:	f7ff f88a 	bl	800137c <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d914      	bls.n	800229c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b01      	cmp	r3, #1
 800227e:	d00d      	beq.n	800229c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	f043 0210 	orr.w	r2, r3, #16
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002290:	f043 0201 	orr.w	r2, r3, #1
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e007      	b.n	80022ac <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d1dc      	bne.n	8002264 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	8000003f 	.word	0x8000003f

080022b8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d108      	bne.n	80022e4 <ADC_Disable+0x2c>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d101      	bne.n	80022e4 <ADC_Disable+0x2c>
 80022e0:	2301      	movs	r3, #1
 80022e2:	e000      	b.n	80022e6 <ADC_Disable+0x2e>
 80022e4:	2300      	movs	r3, #0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d047      	beq.n	800237a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 030d 	and.w	r3, r3, #13
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d10f      	bne.n	8002318 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f042 0202 	orr.w	r2, r2, #2
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2203      	movs	r2, #3
 800230e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002310:	f7ff f834 	bl	800137c <HAL_GetTick>
 8002314:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002316:	e029      	b.n	800236c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	f043 0210 	orr.w	r2, r3, #16
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002328:	f043 0201 	orr.w	r2, r3, #1
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e023      	b.n	800237c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002334:	f7ff f822 	bl	800137c <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d914      	bls.n	800236c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b01      	cmp	r3, #1
 800234e:	d10d      	bne.n	800236c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002354:	f043 0210 	orr.w	r2, r3, #16
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002360:	f043 0201 	orr.w	r2, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e007      	b.n	800237c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b01      	cmp	r3, #1
 8002378:	d0dc      	beq.n	8002334 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <__NVIC_SetPriorityGrouping>:
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002394:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023a0:	4013      	ands	r3, r2
 80023a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023b6:	4a04      	ldr	r2, [pc, #16]	; (80023c8 <__NVIC_SetPriorityGrouping+0x44>)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	60d3      	str	r3, [r2, #12]
}
 80023bc:	bf00      	nop
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <__NVIC_GetPriorityGrouping>:
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d0:	4b04      	ldr	r3, [pc, #16]	; (80023e4 <__NVIC_GetPriorityGrouping+0x18>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	0a1b      	lsrs	r3, r3, #8
 80023d6:	f003 0307 	and.w	r3, r3, #7
}
 80023da:	4618      	mov	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <__NVIC_EnableIRQ>:
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	db0b      	blt.n	8002412 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	f003 021f 	and.w	r2, r3, #31
 8002400:	4907      	ldr	r1, [pc, #28]	; (8002420 <__NVIC_EnableIRQ+0x38>)
 8002402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002406:	095b      	lsrs	r3, r3, #5
 8002408:	2001      	movs	r0, #1
 800240a:	fa00 f202 	lsl.w	r2, r0, r2
 800240e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	e000e100 	.word	0xe000e100

08002424 <__NVIC_SetPriority>:
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	6039      	str	r1, [r7, #0]
 800242e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002434:	2b00      	cmp	r3, #0
 8002436:	db0a      	blt.n	800244e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	b2da      	uxtb	r2, r3
 800243c:	490c      	ldr	r1, [pc, #48]	; (8002470 <__NVIC_SetPriority+0x4c>)
 800243e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002442:	0112      	lsls	r2, r2, #4
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	440b      	add	r3, r1
 8002448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800244c:	e00a      	b.n	8002464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	b2da      	uxtb	r2, r3
 8002452:	4908      	ldr	r1, [pc, #32]	; (8002474 <__NVIC_SetPriority+0x50>)
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	3b04      	subs	r3, #4
 800245c:	0112      	lsls	r2, r2, #4
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	440b      	add	r3, r1
 8002462:	761a      	strb	r2, [r3, #24]
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	e000e100 	.word	0xe000e100
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <NVIC_EncodePriority>:
{
 8002478:	b480      	push	{r7}
 800247a:	b089      	sub	sp, #36	; 0x24
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	f1c3 0307 	rsb	r3, r3, #7
 8002492:	2b04      	cmp	r3, #4
 8002494:	bf28      	it	cs
 8002496:	2304      	movcs	r3, #4
 8002498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	3304      	adds	r3, #4
 800249e:	2b06      	cmp	r3, #6
 80024a0:	d902      	bls.n	80024a8 <NVIC_EncodePriority+0x30>
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	3b03      	subs	r3, #3
 80024a6:	e000      	b.n	80024aa <NVIC_EncodePriority+0x32>
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ac:	f04f 32ff 	mov.w	r2, #4294967295
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43da      	mvns	r2, r3
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	401a      	ands	r2, r3
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024c0:	f04f 31ff 	mov.w	r1, #4294967295
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ca:	43d9      	mvns	r1, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d0:	4313      	orrs	r3, r2
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3724      	adds	r7, #36	; 0x24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff ff4c 	bl	8002384 <__NVIC_SetPriorityGrouping>
}
 80024ec:	bf00      	nop
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
 8002500:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002506:	f7ff ff61 	bl	80023cc <__NVIC_GetPriorityGrouping>
 800250a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	68b9      	ldr	r1, [r7, #8]
 8002510:	6978      	ldr	r0, [r7, #20]
 8002512:	f7ff ffb1 	bl	8002478 <NVIC_EncodePriority>
 8002516:	4602      	mov	r2, r0
 8002518:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800251c:	4611      	mov	r1, r2
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff ff80 	bl	8002424 <__NVIC_SetPriority>
}
 8002524:	bf00      	nop
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff ff54 	bl	80023e8 <__NVIC_EnableIRQ>
}
 8002540:	bf00      	nop
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002548:	b480      	push	{r7}
 800254a:	b087      	sub	sp, #28
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002552:	2300      	movs	r3, #0
 8002554:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002556:	e160      	b.n	800281a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	2101      	movs	r1, #1
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	fa01 f303 	lsl.w	r3, r1, r3
 8002564:	4013      	ands	r3, r2
 8002566:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 8152 	beq.w	8002814 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 0303 	and.w	r3, r3, #3
 8002578:	2b01      	cmp	r3, #1
 800257a:	d005      	beq.n	8002588 <HAL_GPIO_Init+0x40>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d130      	bne.n	80025ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	2203      	movs	r2, #3
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4013      	ands	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	68da      	ldr	r2, [r3, #12]
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025be:	2201      	movs	r2, #1
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43db      	mvns	r3, r3
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4013      	ands	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	091b      	lsrs	r3, r3, #4
 80025d4:	f003 0201 	and.w	r2, r3, #1
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	2b03      	cmp	r3, #3
 80025f4:	d017      	beq.n	8002626 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	2203      	movs	r2, #3
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43db      	mvns	r3, r3
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4013      	ands	r3, r2
 800260c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	4313      	orrs	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f003 0303 	and.w	r3, r3, #3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d123      	bne.n	800267a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	08da      	lsrs	r2, r3, #3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3208      	adds	r2, #8
 800263a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800263e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	220f      	movs	r2, #15
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43db      	mvns	r3, r3
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4013      	ands	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	691a      	ldr	r2, [r3, #16]
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	4313      	orrs	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	08da      	lsrs	r2, r3, #3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3208      	adds	r2, #8
 8002674:	6939      	ldr	r1, [r7, #16]
 8002676:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	2203      	movs	r2, #3
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43db      	mvns	r3, r3
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	4013      	ands	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f003 0203 	and.w	r2, r3, #3
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 80ac 	beq.w	8002814 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026bc:	4b5e      	ldr	r3, [pc, #376]	; (8002838 <HAL_GPIO_Init+0x2f0>)
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	4a5d      	ldr	r2, [pc, #372]	; (8002838 <HAL_GPIO_Init+0x2f0>)
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	6193      	str	r3, [r2, #24]
 80026c8:	4b5b      	ldr	r3, [pc, #364]	; (8002838 <HAL_GPIO_Init+0x2f0>)
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026d4:	4a59      	ldr	r2, [pc, #356]	; (800283c <HAL_GPIO_Init+0x2f4>)
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	089b      	lsrs	r3, r3, #2
 80026da:	3302      	adds	r3, #2
 80026dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f003 0303 	and.w	r3, r3, #3
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	220f      	movs	r2, #15
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	43db      	mvns	r3, r3
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	4013      	ands	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80026fe:	d025      	beq.n	800274c <HAL_GPIO_Init+0x204>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a4f      	ldr	r2, [pc, #316]	; (8002840 <HAL_GPIO_Init+0x2f8>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d01f      	beq.n	8002748 <HAL_GPIO_Init+0x200>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a4e      	ldr	r2, [pc, #312]	; (8002844 <HAL_GPIO_Init+0x2fc>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d019      	beq.n	8002744 <HAL_GPIO_Init+0x1fc>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a4d      	ldr	r2, [pc, #308]	; (8002848 <HAL_GPIO_Init+0x300>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d013      	beq.n	8002740 <HAL_GPIO_Init+0x1f8>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a4c      	ldr	r2, [pc, #304]	; (800284c <HAL_GPIO_Init+0x304>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d00d      	beq.n	800273c <HAL_GPIO_Init+0x1f4>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a4b      	ldr	r2, [pc, #300]	; (8002850 <HAL_GPIO_Init+0x308>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d007      	beq.n	8002738 <HAL_GPIO_Init+0x1f0>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a4a      	ldr	r2, [pc, #296]	; (8002854 <HAL_GPIO_Init+0x30c>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d101      	bne.n	8002734 <HAL_GPIO_Init+0x1ec>
 8002730:	2306      	movs	r3, #6
 8002732:	e00c      	b.n	800274e <HAL_GPIO_Init+0x206>
 8002734:	2307      	movs	r3, #7
 8002736:	e00a      	b.n	800274e <HAL_GPIO_Init+0x206>
 8002738:	2305      	movs	r3, #5
 800273a:	e008      	b.n	800274e <HAL_GPIO_Init+0x206>
 800273c:	2304      	movs	r3, #4
 800273e:	e006      	b.n	800274e <HAL_GPIO_Init+0x206>
 8002740:	2303      	movs	r3, #3
 8002742:	e004      	b.n	800274e <HAL_GPIO_Init+0x206>
 8002744:	2302      	movs	r3, #2
 8002746:	e002      	b.n	800274e <HAL_GPIO_Init+0x206>
 8002748:	2301      	movs	r3, #1
 800274a:	e000      	b.n	800274e <HAL_GPIO_Init+0x206>
 800274c:	2300      	movs	r3, #0
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	f002 0203 	and.w	r2, r2, #3
 8002754:	0092      	lsls	r2, r2, #2
 8002756:	4093      	lsls	r3, r2
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	4313      	orrs	r3, r2
 800275c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800275e:	4937      	ldr	r1, [pc, #220]	; (800283c <HAL_GPIO_Init+0x2f4>)
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	089b      	lsrs	r3, r3, #2
 8002764:	3302      	adds	r3, #2
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800276c:	4b3a      	ldr	r3, [pc, #232]	; (8002858 <HAL_GPIO_Init+0x310>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	43db      	mvns	r3, r3
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	4013      	ands	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	4313      	orrs	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002790:	4a31      	ldr	r2, [pc, #196]	; (8002858 <HAL_GPIO_Init+0x310>)
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002796:	4b30      	ldr	r3, [pc, #192]	; (8002858 <HAL_GPIO_Init+0x310>)
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	43db      	mvns	r3, r3
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	4013      	ands	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80027ba:	4a27      	ldr	r2, [pc, #156]	; (8002858 <HAL_GPIO_Init+0x310>)
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027c0:	4b25      	ldr	r3, [pc, #148]	; (8002858 <HAL_GPIO_Init+0x310>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	43db      	mvns	r3, r3
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	4013      	ands	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80027e4:	4a1c      	ldr	r2, [pc, #112]	; (8002858 <HAL_GPIO_Init+0x310>)
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027ea:	4b1b      	ldr	r3, [pc, #108]	; (8002858 <HAL_GPIO_Init+0x310>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	43db      	mvns	r3, r3
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	4013      	ands	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4313      	orrs	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800280e:	4a12      	ldr	r2, [pc, #72]	; (8002858 <HAL_GPIO_Init+0x310>)
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	3301      	adds	r3, #1
 8002818:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	fa22 f303 	lsr.w	r3, r2, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	f47f ae97 	bne.w	8002558 <HAL_GPIO_Init+0x10>
  }
}
 800282a:	bf00      	nop
 800282c:	bf00      	nop
 800282e:	371c      	adds	r7, #28
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	40021000 	.word	0x40021000
 800283c:	40010000 	.word	0x40010000
 8002840:	48000400 	.word	0x48000400
 8002844:	48000800 	.word	0x48000800
 8002848:	48000c00 	.word	0x48000c00
 800284c:	48001000 	.word	0x48001000
 8002850:	48001400 	.word	0x48001400
 8002854:	48001800 	.word	0x48001800
 8002858:	40010400 	.word	0x40010400

0800285c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	460b      	mov	r3, r1
 8002866:	807b      	strh	r3, [r7, #2]
 8002868:	4613      	mov	r3, r2
 800286a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800286c:	787b      	ldrb	r3, [r7, #1]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002872:	887a      	ldrh	r2, [r7, #2]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002878:	e002      	b.n	8002880 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800287a:	887a      	ldrh	r2, [r7, #2]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e081      	b.n	80029a2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d106      	bne.n	80028b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7fe fb3e 	bl	8000f34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2224      	movs	r2, #36	; 0x24
 80028bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0201 	bic.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d107      	bne.n	8002906 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	e006      	b.n	8002914 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002912:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	2b02      	cmp	r3, #2
 800291a:	d104      	bne.n	8002926 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002924:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6812      	ldr	r2, [r2, #0]
 8002930:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002934:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002938:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68da      	ldr	r2, [r3, #12]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002948:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691a      	ldr	r2, [r3, #16]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	69d9      	ldr	r1, [r3, #28]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a1a      	ldr	r2, [r3, #32]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2220      	movs	r2, #32
 800298e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
	...

080029ac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b088      	sub	sp, #32
 80029b0:	af02      	add	r7, sp, #8
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	607a      	str	r2, [r7, #4]
 80029b6:	461a      	mov	r2, r3
 80029b8:	460b      	mov	r3, r1
 80029ba:	817b      	strh	r3, [r7, #10]
 80029bc:	4613      	mov	r3, r2
 80029be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b20      	cmp	r3, #32
 80029ca:	f040 80da 	bne.w	8002b82 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_I2C_Master_Transmit+0x30>
 80029d8:	2302      	movs	r3, #2
 80029da:	e0d3      	b.n	8002b84 <HAL_I2C_Master_Transmit+0x1d8>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029e4:	f7fe fcca 	bl	800137c <HAL_GetTick>
 80029e8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	2319      	movs	r3, #25
 80029f0:	2201      	movs	r2, #1
 80029f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f000 f8f0 	bl	8002bdc <I2C_WaitOnFlagUntilTimeout>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e0be      	b.n	8002b84 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2221      	movs	r2, #33	; 0x21
 8002a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2210      	movs	r2, #16
 8002a12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	893a      	ldrh	r2, [r7, #8]
 8002a26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	2bff      	cmp	r3, #255	; 0xff
 8002a36:	d90e      	bls.n	8002a56 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	22ff      	movs	r2, #255	; 0xff
 8002a3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	8979      	ldrh	r1, [r7, #10]
 8002a46:	4b51      	ldr	r3, [pc, #324]	; (8002b8c <HAL_I2C_Master_Transmit+0x1e0>)
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 fa7e 	bl	8002f50 <I2C_TransferConfig>
 8002a54:	e06c      	b.n	8002b30 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	8979      	ldrh	r1, [r7, #10]
 8002a68:	4b48      	ldr	r3, [pc, #288]	; (8002b8c <HAL_I2C_Master_Transmit+0x1e0>)
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f000 fa6d 	bl	8002f50 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002a76:	e05b      	b.n	8002b30 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	6a39      	ldr	r1, [r7, #32]
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f000 f8fc 	bl	8002c7a <I2C_WaitOnTXISFlagUntilTimeout>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e07b      	b.n	8002b84 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	781a      	ldrb	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d034      	beq.n	8002b30 <HAL_I2C_Master_Transmit+0x184>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d130      	bne.n	8002b30 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	6a3b      	ldr	r3, [r7, #32]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2180      	movs	r1, #128	; 0x80
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 f87f 	bl	8002bdc <I2C_WaitOnFlagUntilTimeout>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e04d      	b.n	8002b84 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	2bff      	cmp	r3, #255	; 0xff
 8002af0:	d90e      	bls.n	8002b10 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	22ff      	movs	r2, #255	; 0xff
 8002af6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	8979      	ldrh	r1, [r7, #10]
 8002b00:	2300      	movs	r3, #0
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f000 fa21 	bl	8002f50 <I2C_TransferConfig>
 8002b0e:	e00f      	b.n	8002b30 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	8979      	ldrh	r1, [r7, #10]
 8002b22:	2300      	movs	r3, #0
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 fa10 	bl	8002f50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d19e      	bne.n	8002a78 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	6a39      	ldr	r1, [r7, #32]
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 f8e2 	bl	8002d08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e01a      	b.n	8002b84 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2220      	movs	r2, #32
 8002b54:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6859      	ldr	r1, [r3, #4]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <HAL_I2C_Master_Transmit+0x1e4>)
 8002b62:	400b      	ands	r3, r1
 8002b64:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	e000      	b.n	8002b84 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002b82:	2302      	movs	r3, #2
  }
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	80002000 	.word	0x80002000
 8002b90:	fe00e800 	.word	0xfe00e800

08002b94 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d103      	bne.n	8002bb2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d007      	beq.n	8002bd0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699a      	ldr	r2, [r3, #24]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0201 	orr.w	r2, r2, #1
 8002bce:	619a      	str	r2, [r3, #24]
  }
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	603b      	str	r3, [r7, #0]
 8002be8:	4613      	mov	r3, r2
 8002bea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bec:	e031      	b.n	8002c52 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf4:	d02d      	beq.n	8002c52 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bf6:	f7fe fbc1 	bl	800137c <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d302      	bcc.n	8002c0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d122      	bne.n	8002c52 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	699a      	ldr	r2, [r3, #24]
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	4013      	ands	r3, r2
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	bf0c      	ite	eq
 8002c1c:	2301      	moveq	r3, #1
 8002c1e:	2300      	movne	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	461a      	mov	r2, r3
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d113      	bne.n	8002c52 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2e:	f043 0220 	orr.w	r2, r3, #32
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2220      	movs	r2, #32
 8002c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e00f      	b.n	8002c72 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	699a      	ldr	r2, [r3, #24]
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	bf0c      	ite	eq
 8002c62:	2301      	moveq	r3, #1
 8002c64:	2300      	movne	r3, #0
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	461a      	mov	r2, r3
 8002c6a:	79fb      	ldrb	r3, [r7, #7]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d0be      	beq.n	8002bee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b084      	sub	sp, #16
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	60f8      	str	r0, [r7, #12]
 8002c82:	60b9      	str	r1, [r7, #8]
 8002c84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c86:	e033      	b.n	8002cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	68b9      	ldr	r1, [r7, #8]
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 f87f 	bl	8002d90 <I2C_IsErrorOccurred>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e031      	b.n	8002d00 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca2:	d025      	beq.n	8002cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ca4:	f7fe fb6a 	bl	800137c <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d302      	bcc.n	8002cba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d11a      	bne.n	8002cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d013      	beq.n	8002cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ccc:	f043 0220 	orr.w	r2, r3, #32
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e007      	b.n	8002d00 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d1c4      	bne.n	8002c88 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d14:	e02f      	b.n	8002d76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	68b9      	ldr	r1, [r7, #8]
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 f838 	bl	8002d90 <I2C_IsErrorOccurred>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e02d      	b.n	8002d86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d2a:	f7fe fb27 	bl	800137c <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d302      	bcc.n	8002d40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d11a      	bne.n	8002d76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	f003 0320 	and.w	r3, r3, #32
 8002d4a:	2b20      	cmp	r3, #32
 8002d4c:	d013      	beq.n	8002d76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d52:	f043 0220 	orr.w	r2, r3, #32
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e007      	b.n	8002d86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	f003 0320 	and.w	r3, r3, #32
 8002d80:	2b20      	cmp	r3, #32
 8002d82:	d1c8      	bne.n	8002d16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
	...

08002d90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08a      	sub	sp, #40	; 0x28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002daa:	2300      	movs	r3, #0
 8002dac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	f003 0310 	and.w	r3, r3, #16
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d068      	beq.n	8002e8e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2210      	movs	r2, #16
 8002dc2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002dc4:	e049      	b.n	8002e5a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dcc:	d045      	beq.n	8002e5a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002dce:	f7fe fad5 	bl	800137c <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d302      	bcc.n	8002de4 <I2C_IsErrorOccurred+0x54>
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d13a      	bne.n	8002e5a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002df6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e06:	d121      	bne.n	8002e4c <I2C_IsErrorOccurred+0xbc>
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e0e:	d01d      	beq.n	8002e4c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002e10:	7cfb      	ldrb	r3, [r7, #19]
 8002e12:	2b20      	cmp	r3, #32
 8002e14:	d01a      	beq.n	8002e4c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e24:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e26:	f7fe faa9 	bl	800137c <HAL_GetTick>
 8002e2a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e2c:	e00e      	b.n	8002e4c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e2e:	f7fe faa5 	bl	800137c <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b19      	cmp	r3, #25
 8002e3a:	d907      	bls.n	8002e4c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	f043 0320 	orr.w	r3, r3, #32
 8002e42:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002e4a:	e006      	b.n	8002e5a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	f003 0320 	and.w	r3, r3, #32
 8002e56:	2b20      	cmp	r3, #32
 8002e58:	d1e9      	bne.n	8002e2e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	f003 0320 	and.w	r3, r3, #32
 8002e64:	2b20      	cmp	r3, #32
 8002e66:	d003      	beq.n	8002e70 <I2C_IsErrorOccurred+0xe0>
 8002e68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0aa      	beq.n	8002dc6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002e70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d103      	bne.n	8002e80 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002e80:	6a3b      	ldr	r3, [r7, #32]
 8002e82:	f043 0304 	orr.w	r3, r3, #4
 8002e86:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00b      	beq.n	8002eb8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ea0:	6a3b      	ldr	r3, [r7, #32]
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002eb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00b      	beq.n	8002eda <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	f043 0308 	orr.w	r3, r3, #8
 8002ec8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ed2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00b      	beq.n	8002efc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
 8002ee6:	f043 0302 	orr.w	r3, r3, #2
 8002eea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ef4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002efc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d01c      	beq.n	8002f3e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f7ff fe45 	bl	8002b94 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6859      	ldr	r1, [r3, #4]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	4b0d      	ldr	r3, [pc, #52]	; (8002f4c <I2C_IsErrorOccurred+0x1bc>)
 8002f16:	400b      	ands	r3, r1
 8002f18:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	431a      	orrs	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002f3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3728      	adds	r7, #40	; 0x28
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	fe00e800 	.word	0xfe00e800

08002f50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b087      	sub	sp, #28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	607b      	str	r3, [r7, #4]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	817b      	strh	r3, [r7, #10]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f62:	897b      	ldrh	r3, [r7, #10]
 8002f64:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f68:	7a7b      	ldrb	r3, [r7, #9]
 8002f6a:	041b      	lsls	r3, r3, #16
 8002f6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f70:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f7e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	0d5b      	lsrs	r3, r3, #21
 8002f8a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002f8e:	4b08      	ldr	r3, [pc, #32]	; (8002fb0 <I2C_TransferConfig+0x60>)
 8002f90:	430b      	orrs	r3, r1
 8002f92:	43db      	mvns	r3, r3
 8002f94:	ea02 0103 	and.w	r1, r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002fa2:	bf00      	nop
 8002fa4:	371c      	adds	r7, #28
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	03ff63ff 	.word	0x03ff63ff

08002fb4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b20      	cmp	r3, #32
 8002fc8:	d138      	bne.n	800303c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	e032      	b.n	800303e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2224      	movs	r2, #36	; 0x24
 8002fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0201 	bic.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003006:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6819      	ldr	r1, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0201 	orr.w	r2, r2, #1
 8003026:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003038:	2300      	movs	r3, #0
 800303a:	e000      	b.n	800303e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800303c:	2302      	movs	r3, #2
  }
}
 800303e:	4618      	mov	r0, r3
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800304a:	b480      	push	{r7}
 800304c:	b085      	sub	sp, #20
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b20      	cmp	r3, #32
 800305e:	d139      	bne.n	80030d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003066:	2b01      	cmp	r3, #1
 8003068:	d101      	bne.n	800306e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800306a:	2302      	movs	r3, #2
 800306c:	e033      	b.n	80030d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2224      	movs	r2, #36	; 0x24
 800307a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 0201 	bic.w	r2, r2, #1
 800308c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800309c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	021b      	lsls	r3, r3, #8
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0201 	orr.w	r2, r2, #1
 80030be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	e000      	b.n	80030d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030d4:	2302      	movs	r3, #2
  }
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
	...

080030e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030f4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d102      	bne.n	800310a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	f001 b83a 	b.w	800417e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800310a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800310e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 816f 	beq.w	80033fe <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003120:	4bb5      	ldr	r3, [pc, #724]	; (80033f8 <HAL_RCC_OscConfig+0x314>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 030c 	and.w	r3, r3, #12
 8003128:	2b04      	cmp	r3, #4
 800312a:	d00c      	beq.n	8003146 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800312c:	4bb2      	ldr	r3, [pc, #712]	; (80033f8 <HAL_RCC_OscConfig+0x314>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 030c 	and.w	r3, r3, #12
 8003134:	2b08      	cmp	r3, #8
 8003136:	d15c      	bne.n	80031f2 <HAL_RCC_OscConfig+0x10e>
 8003138:	4baf      	ldr	r3, [pc, #700]	; (80033f8 <HAL_RCC_OscConfig+0x314>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003144:	d155      	bne.n	80031f2 <HAL_RCC_OscConfig+0x10e>
 8003146:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800314a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003152:	fa93 f3a3 	rbit	r3, r3
 8003156:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800315a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800315e:	fab3 f383 	clz	r3, r3
 8003162:	b2db      	uxtb	r3, r3
 8003164:	095b      	lsrs	r3, r3, #5
 8003166:	b2db      	uxtb	r3, r3
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b01      	cmp	r3, #1
 8003170:	d102      	bne.n	8003178 <HAL_RCC_OscConfig+0x94>
 8003172:	4ba1      	ldr	r3, [pc, #644]	; (80033f8 <HAL_RCC_OscConfig+0x314>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	e015      	b.n	80031a4 <HAL_RCC_OscConfig+0xc0>
 8003178:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800317c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003180:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003184:	fa93 f3a3 	rbit	r3, r3
 8003188:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800318c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003190:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003194:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003198:	fa93 f3a3 	rbit	r3, r3
 800319c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80031a0:	4b95      	ldr	r3, [pc, #596]	; (80033f8 <HAL_RCC_OscConfig+0x314>)
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031a8:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80031ac:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80031b0:	fa92 f2a2 	rbit	r2, r2
 80031b4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80031b8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80031bc:	fab2 f282 	clz	r2, r2
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	f042 0220 	orr.w	r2, r2, #32
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	f002 021f 	and.w	r2, r2, #31
 80031cc:	2101      	movs	r1, #1
 80031ce:	fa01 f202 	lsl.w	r2, r1, r2
 80031d2:	4013      	ands	r3, r2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 8111 	beq.w	80033fc <HAL_RCC_OscConfig+0x318>
 80031da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031de:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f040 8108 	bne.w	80033fc <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	f000 bfc6 	b.w	800417e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003202:	d106      	bne.n	8003212 <HAL_RCC_OscConfig+0x12e>
 8003204:	4b7c      	ldr	r3, [pc, #496]	; (80033f8 <HAL_RCC_OscConfig+0x314>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a7b      	ldr	r2, [pc, #492]	; (80033f8 <HAL_RCC_OscConfig+0x314>)
 800320a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800320e:	6013      	str	r3, [r2, #0]
 8003210:	e036      	b.n	8003280 <HAL_RCC_OscConfig+0x19c>
 8003212:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003216:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10c      	bne.n	800323c <HAL_RCC_OscConfig+0x158>
 8003222:	4b75      	ldr	r3, [pc, #468]	; (80033f8 <HAL_RCC_OscConfig+0x314>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a74      	ldr	r2, [pc, #464]	; (80033f8 <HAL_RCC_OscConfig+0x314>)
 8003228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	4b72      	ldr	r3, [pc, #456]	; (80033f8 <HAL_RCC_OscConfig+0x314>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a71      	ldr	r2, [pc, #452]	; (80033f8 <HAL_RCC_OscConfig+0x314>)
 8003234:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	e021      	b.n	8003280 <HAL_RCC_OscConfig+0x19c>
 800323c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003240:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800324c:	d10c      	bne.n	8003268 <HAL_RCC_OscConfig+0x184>
 800324e:	4b6a      	ldr	r3, [pc, #424]	; (80033f8 <HAL_RCC_OscConfig+0x314>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a69      	ldr	r2, [pc, #420]	; (80033f8 <HAL_RCC_OscConfig+0x314>)
 8003254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	4b67      	ldr	r3, [pc, #412]	; (80033f8 <HAL_RCC_OscConfig+0x314>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a66      	ldr	r2, [pc, #408]	; (80033f8 <HAL_RCC_OscConfig+0x314>)
 8003260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	e00b      	b.n	8003280 <HAL_RCC_OscConfig+0x19c>
 8003268:	4b63      	ldr	r3, [pc, #396]	; (80033f8 <HAL_RCC_OscConfig+0x314>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a62      	ldr	r2, [pc, #392]	; (80033f8 <HAL_RCC_OscConfig+0x314>)
 800326e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003272:	6013      	str	r3, [r2, #0]
 8003274:	4b60      	ldr	r3, [pc, #384]	; (80033f8 <HAL_RCC_OscConfig+0x314>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a5f      	ldr	r2, [pc, #380]	; (80033f8 <HAL_RCC_OscConfig+0x314>)
 800327a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800327e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003280:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003284:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d059      	beq.n	8003344 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003290:	f7fe f874 	bl	800137c <HAL_GetTick>
 8003294:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003298:	e00a      	b.n	80032b0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800329a:	f7fe f86f 	bl	800137c <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b64      	cmp	r3, #100	; 0x64
 80032a8:	d902      	bls.n	80032b0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	f000 bf67 	b.w	800417e <HAL_RCC_OscConfig+0x109a>
 80032b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032b4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80032bc:	fa93 f3a3 	rbit	r3, r3
 80032c0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80032c4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c8:	fab3 f383 	clz	r3, r3
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	f043 0301 	orr.w	r3, r3, #1
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d102      	bne.n	80032e2 <HAL_RCC_OscConfig+0x1fe>
 80032dc:	4b46      	ldr	r3, [pc, #280]	; (80033f8 <HAL_RCC_OscConfig+0x314>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	e015      	b.n	800330e <HAL_RCC_OscConfig+0x22a>
 80032e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032e6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ea:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80032ee:	fa93 f3a3 	rbit	r3, r3
 80032f2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80032f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032fa:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80032fe:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003302:	fa93 f3a3 	rbit	r3, r3
 8003306:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800330a:	4b3b      	ldr	r3, [pc, #236]	; (80033f8 <HAL_RCC_OscConfig+0x314>)
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003312:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003316:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800331a:	fa92 f2a2 	rbit	r2, r2
 800331e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003322:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003326:	fab2 f282 	clz	r2, r2
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	f042 0220 	orr.w	r2, r2, #32
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	f002 021f 	and.w	r2, r2, #31
 8003336:	2101      	movs	r1, #1
 8003338:	fa01 f202 	lsl.w	r2, r1, r2
 800333c:	4013      	ands	r3, r2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0ab      	beq.n	800329a <HAL_RCC_OscConfig+0x1b6>
 8003342:	e05c      	b.n	80033fe <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003344:	f7fe f81a 	bl	800137c <HAL_GetTick>
 8003348:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800334c:	e00a      	b.n	8003364 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800334e:	f7fe f815 	bl	800137c <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b64      	cmp	r3, #100	; 0x64
 800335c:	d902      	bls.n	8003364 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	f000 bf0d 	b.w	800417e <HAL_RCC_OscConfig+0x109a>
 8003364:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003368:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003370:	fa93 f3a3 	rbit	r3, r3
 8003374:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003378:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800337c:	fab3 f383 	clz	r3, r3
 8003380:	b2db      	uxtb	r3, r3
 8003382:	095b      	lsrs	r3, r3, #5
 8003384:	b2db      	uxtb	r3, r3
 8003386:	f043 0301 	orr.w	r3, r3, #1
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b01      	cmp	r3, #1
 800338e:	d102      	bne.n	8003396 <HAL_RCC_OscConfig+0x2b2>
 8003390:	4b19      	ldr	r3, [pc, #100]	; (80033f8 <HAL_RCC_OscConfig+0x314>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	e015      	b.n	80033c2 <HAL_RCC_OscConfig+0x2de>
 8003396:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800339a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80033a2:	fa93 f3a3 	rbit	r3, r3
 80033a6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80033aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033ae:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80033b2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80033b6:	fa93 f3a3 	rbit	r3, r3
 80033ba:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80033be:	4b0e      	ldr	r3, [pc, #56]	; (80033f8 <HAL_RCC_OscConfig+0x314>)
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033c6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80033ca:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80033ce:	fa92 f2a2 	rbit	r2, r2
 80033d2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80033d6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80033da:	fab2 f282 	clz	r2, r2
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	f042 0220 	orr.w	r2, r2, #32
 80033e4:	b2d2      	uxtb	r2, r2
 80033e6:	f002 021f 	and.w	r2, r2, #31
 80033ea:	2101      	movs	r1, #1
 80033ec:	fa01 f202 	lsl.w	r2, r1, r2
 80033f0:	4013      	ands	r3, r2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1ab      	bne.n	800334e <HAL_RCC_OscConfig+0x26a>
 80033f6:	e002      	b.n	80033fe <HAL_RCC_OscConfig+0x31a>
 80033f8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003402:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 817f 	beq.w	8003712 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003414:	4ba7      	ldr	r3, [pc, #668]	; (80036b4 <HAL_RCC_OscConfig+0x5d0>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f003 030c 	and.w	r3, r3, #12
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00c      	beq.n	800343a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003420:	4ba4      	ldr	r3, [pc, #656]	; (80036b4 <HAL_RCC_OscConfig+0x5d0>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f003 030c 	and.w	r3, r3, #12
 8003428:	2b08      	cmp	r3, #8
 800342a:	d173      	bne.n	8003514 <HAL_RCC_OscConfig+0x430>
 800342c:	4ba1      	ldr	r3, [pc, #644]	; (80036b4 <HAL_RCC_OscConfig+0x5d0>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003438:	d16c      	bne.n	8003514 <HAL_RCC_OscConfig+0x430>
 800343a:	2302      	movs	r3, #2
 800343c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003440:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003444:	fa93 f3a3 	rbit	r3, r3
 8003448:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800344c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003450:	fab3 f383 	clz	r3, r3
 8003454:	b2db      	uxtb	r3, r3
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	b2db      	uxtb	r3, r3
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b01      	cmp	r3, #1
 8003462:	d102      	bne.n	800346a <HAL_RCC_OscConfig+0x386>
 8003464:	4b93      	ldr	r3, [pc, #588]	; (80036b4 <HAL_RCC_OscConfig+0x5d0>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	e013      	b.n	8003492 <HAL_RCC_OscConfig+0x3ae>
 800346a:	2302      	movs	r3, #2
 800346c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003470:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003474:	fa93 f3a3 	rbit	r3, r3
 8003478:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800347c:	2302      	movs	r3, #2
 800347e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003482:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003486:	fa93 f3a3 	rbit	r3, r3
 800348a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800348e:	4b89      	ldr	r3, [pc, #548]	; (80036b4 <HAL_RCC_OscConfig+0x5d0>)
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	2202      	movs	r2, #2
 8003494:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003498:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800349c:	fa92 f2a2 	rbit	r2, r2
 80034a0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80034a4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80034a8:	fab2 f282 	clz	r2, r2
 80034ac:	b2d2      	uxtb	r2, r2
 80034ae:	f042 0220 	orr.w	r2, r2, #32
 80034b2:	b2d2      	uxtb	r2, r2
 80034b4:	f002 021f 	and.w	r2, r2, #31
 80034b8:	2101      	movs	r1, #1
 80034ba:	fa01 f202 	lsl.w	r2, r1, r2
 80034be:	4013      	ands	r3, r2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <HAL_RCC_OscConfig+0x3f6>
 80034c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034c8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d002      	beq.n	80034da <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	f000 be52 	b.w	800417e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034da:	4b76      	ldr	r3, [pc, #472]	; (80036b4 <HAL_RCC_OscConfig+0x5d0>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	21f8      	movs	r1, #248	; 0xf8
 80034f0:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f4:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80034f8:	fa91 f1a1 	rbit	r1, r1
 80034fc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003500:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003504:	fab1 f181 	clz	r1, r1
 8003508:	b2c9      	uxtb	r1, r1
 800350a:	408b      	lsls	r3, r1
 800350c:	4969      	ldr	r1, [pc, #420]	; (80036b4 <HAL_RCC_OscConfig+0x5d0>)
 800350e:	4313      	orrs	r3, r2
 8003510:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003512:	e0fe      	b.n	8003712 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003514:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003518:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 8088 	beq.w	8003636 <HAL_RCC_OscConfig+0x552>
 8003526:	2301      	movs	r3, #1
 8003528:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003530:	fa93 f3a3 	rbit	r3, r3
 8003534:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003538:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800353c:	fab3 f383 	clz	r3, r3
 8003540:	b2db      	uxtb	r3, r3
 8003542:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003546:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	461a      	mov	r2, r3
 800354e:	2301      	movs	r3, #1
 8003550:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003552:	f7fd ff13 	bl	800137c <HAL_GetTick>
 8003556:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800355a:	e00a      	b.n	8003572 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800355c:	f7fd ff0e 	bl	800137c <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d902      	bls.n	8003572 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	f000 be06 	b.w	800417e <HAL_RCC_OscConfig+0x109a>
 8003572:	2302      	movs	r3, #2
 8003574:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003578:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800357c:	fa93 f3a3 	rbit	r3, r3
 8003580:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003584:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003588:	fab3 f383 	clz	r3, r3
 800358c:	b2db      	uxtb	r3, r3
 800358e:	095b      	lsrs	r3, r3, #5
 8003590:	b2db      	uxtb	r3, r3
 8003592:	f043 0301 	orr.w	r3, r3, #1
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b01      	cmp	r3, #1
 800359a:	d102      	bne.n	80035a2 <HAL_RCC_OscConfig+0x4be>
 800359c:	4b45      	ldr	r3, [pc, #276]	; (80036b4 <HAL_RCC_OscConfig+0x5d0>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	e013      	b.n	80035ca <HAL_RCC_OscConfig+0x4e6>
 80035a2:	2302      	movs	r3, #2
 80035a4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80035ac:	fa93 f3a3 	rbit	r3, r3
 80035b0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80035b4:	2302      	movs	r3, #2
 80035b6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80035ba:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80035be:	fa93 f3a3 	rbit	r3, r3
 80035c2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80035c6:	4b3b      	ldr	r3, [pc, #236]	; (80036b4 <HAL_RCC_OscConfig+0x5d0>)
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ca:	2202      	movs	r2, #2
 80035cc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80035d0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80035d4:	fa92 f2a2 	rbit	r2, r2
 80035d8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80035dc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80035e0:	fab2 f282 	clz	r2, r2
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	f042 0220 	orr.w	r2, r2, #32
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	f002 021f 	and.w	r2, r2, #31
 80035f0:	2101      	movs	r1, #1
 80035f2:	fa01 f202 	lsl.w	r2, r1, r2
 80035f6:	4013      	ands	r3, r2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0af      	beq.n	800355c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035fc:	4b2d      	ldr	r3, [pc, #180]	; (80036b4 <HAL_RCC_OscConfig+0x5d0>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003604:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003608:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	21f8      	movs	r1, #248	; 0xf8
 8003612:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003616:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800361a:	fa91 f1a1 	rbit	r1, r1
 800361e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003622:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003626:	fab1 f181 	clz	r1, r1
 800362a:	b2c9      	uxtb	r1, r1
 800362c:	408b      	lsls	r3, r1
 800362e:	4921      	ldr	r1, [pc, #132]	; (80036b4 <HAL_RCC_OscConfig+0x5d0>)
 8003630:	4313      	orrs	r3, r2
 8003632:	600b      	str	r3, [r1, #0]
 8003634:	e06d      	b.n	8003712 <HAL_RCC_OscConfig+0x62e>
 8003636:	2301      	movs	r3, #1
 8003638:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003640:	fa93 f3a3 	rbit	r3, r3
 8003644:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003648:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800364c:	fab3 f383 	clz	r3, r3
 8003650:	b2db      	uxtb	r3, r3
 8003652:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003656:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	461a      	mov	r2, r3
 800365e:	2300      	movs	r3, #0
 8003660:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003662:	f7fd fe8b 	bl	800137c <HAL_GetTick>
 8003666:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800366a:	e00a      	b.n	8003682 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800366c:	f7fd fe86 	bl	800137c <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d902      	bls.n	8003682 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	f000 bd7e 	b.w	800417e <HAL_RCC_OscConfig+0x109a>
 8003682:	2302      	movs	r3, #2
 8003684:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003688:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800368c:	fa93 f3a3 	rbit	r3, r3
 8003690:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003694:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003698:	fab3 f383 	clz	r3, r3
 800369c:	b2db      	uxtb	r3, r3
 800369e:	095b      	lsrs	r3, r3, #5
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	f043 0301 	orr.w	r3, r3, #1
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d105      	bne.n	80036b8 <HAL_RCC_OscConfig+0x5d4>
 80036ac:	4b01      	ldr	r3, [pc, #4]	; (80036b4 <HAL_RCC_OscConfig+0x5d0>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	e016      	b.n	80036e0 <HAL_RCC_OscConfig+0x5fc>
 80036b2:	bf00      	nop
 80036b4:	40021000 	.word	0x40021000
 80036b8:	2302      	movs	r3, #2
 80036ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80036c2:	fa93 f3a3 	rbit	r3, r3
 80036c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80036ca:	2302      	movs	r3, #2
 80036cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80036d0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80036d4:	fa93 f3a3 	rbit	r3, r3
 80036d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80036dc:	4bbf      	ldr	r3, [pc, #764]	; (80039dc <HAL_RCC_OscConfig+0x8f8>)
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	2202      	movs	r2, #2
 80036e2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80036e6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80036ea:	fa92 f2a2 	rbit	r2, r2
 80036ee:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80036f2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80036f6:	fab2 f282 	clz	r2, r2
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	f042 0220 	orr.w	r2, r2, #32
 8003700:	b2d2      	uxtb	r2, r2
 8003702:	f002 021f 	and.w	r2, r2, #31
 8003706:	2101      	movs	r1, #1
 8003708:	fa01 f202 	lsl.w	r2, r1, r2
 800370c:	4013      	ands	r3, r2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1ac      	bne.n	800366c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003712:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003716:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 8113 	beq.w	800394e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003728:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800372c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d07c      	beq.n	8003832 <HAL_RCC_OscConfig+0x74e>
 8003738:	2301      	movs	r3, #1
 800373a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003742:	fa93 f3a3 	rbit	r3, r3
 8003746:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800374a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800374e:	fab3 f383 	clz	r3, r3
 8003752:	b2db      	uxtb	r3, r3
 8003754:	461a      	mov	r2, r3
 8003756:	4ba2      	ldr	r3, [pc, #648]	; (80039e0 <HAL_RCC_OscConfig+0x8fc>)
 8003758:	4413      	add	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	461a      	mov	r2, r3
 800375e:	2301      	movs	r3, #1
 8003760:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003762:	f7fd fe0b 	bl	800137c <HAL_GetTick>
 8003766:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800376a:	e00a      	b.n	8003782 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800376c:	f7fd fe06 	bl	800137c <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d902      	bls.n	8003782 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	f000 bcfe 	b.w	800417e <HAL_RCC_OscConfig+0x109a>
 8003782:	2302      	movs	r3, #2
 8003784:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003788:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800378c:	fa93 f2a3 	rbit	r2, r3
 8003790:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003794:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800379e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80037a2:	2202      	movs	r2, #2
 80037a4:	601a      	str	r2, [r3, #0]
 80037a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	fa93 f2a3 	rbit	r2, r3
 80037b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80037c6:	2202      	movs	r2, #2
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	fa93 f2a3 	rbit	r2, r3
 80037d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037dc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80037e0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037e2:	4b7e      	ldr	r3, [pc, #504]	; (80039dc <HAL_RCC_OscConfig+0x8f8>)
 80037e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80037ee:	2102      	movs	r1, #2
 80037f0:	6019      	str	r1, [r3, #0]
 80037f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037f6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	fa93 f1a3 	rbit	r1, r3
 8003800:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003804:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003808:	6019      	str	r1, [r3, #0]
  return result;
 800380a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800380e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	fab3 f383 	clz	r3, r3
 8003818:	b2db      	uxtb	r3, r3
 800381a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800381e:	b2db      	uxtb	r3, r3
 8003820:	f003 031f 	and.w	r3, r3, #31
 8003824:	2101      	movs	r1, #1
 8003826:	fa01 f303 	lsl.w	r3, r1, r3
 800382a:	4013      	ands	r3, r2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d09d      	beq.n	800376c <HAL_RCC_OscConfig+0x688>
 8003830:	e08d      	b.n	800394e <HAL_RCC_OscConfig+0x86a>
 8003832:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003836:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800383a:	2201      	movs	r2, #1
 800383c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003842:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	fa93 f2a3 	rbit	r2, r3
 800384c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003850:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003854:	601a      	str	r2, [r3, #0]
  return result;
 8003856:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800385a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800385e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003860:	fab3 f383 	clz	r3, r3
 8003864:	b2db      	uxtb	r3, r3
 8003866:	461a      	mov	r2, r3
 8003868:	4b5d      	ldr	r3, [pc, #372]	; (80039e0 <HAL_RCC_OscConfig+0x8fc>)
 800386a:	4413      	add	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	461a      	mov	r2, r3
 8003870:	2300      	movs	r3, #0
 8003872:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003874:	f7fd fd82 	bl	800137c <HAL_GetTick>
 8003878:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800387c:	e00a      	b.n	8003894 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800387e:	f7fd fd7d 	bl	800137c <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d902      	bls.n	8003894 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	f000 bc75 	b.w	800417e <HAL_RCC_OscConfig+0x109a>
 8003894:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003898:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800389c:	2202      	movs	r2, #2
 800389e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038a4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	fa93 f2a3 	rbit	r2, r3
 80038ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038b2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80038c0:	2202      	movs	r2, #2
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	fa93 f2a3 	rbit	r2, r3
 80038d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038e0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80038e4:	2202      	movs	r2, #2
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038ec:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	fa93 f2a3 	rbit	r2, r3
 80038f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038fa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80038fe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003900:	4b36      	ldr	r3, [pc, #216]	; (80039dc <HAL_RCC_OscConfig+0x8f8>)
 8003902:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003904:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003908:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800390c:	2102      	movs	r1, #2
 800390e:	6019      	str	r1, [r3, #0]
 8003910:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003914:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	fa93 f1a3 	rbit	r1, r3
 800391e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003922:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003926:	6019      	str	r1, [r3, #0]
  return result;
 8003928:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800392c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	fab3 f383 	clz	r3, r3
 8003936:	b2db      	uxtb	r3, r3
 8003938:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800393c:	b2db      	uxtb	r3, r3
 800393e:	f003 031f 	and.w	r3, r3, #31
 8003942:	2101      	movs	r1, #1
 8003944:	fa01 f303 	lsl.w	r3, r1, r3
 8003948:	4013      	ands	r3, r2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d197      	bne.n	800387e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800394e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003952:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0304 	and.w	r3, r3, #4
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 81a5 	beq.w	8003cae <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003964:	2300      	movs	r3, #0
 8003966:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800396a:	4b1c      	ldr	r3, [pc, #112]	; (80039dc <HAL_RCC_OscConfig+0x8f8>)
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d116      	bne.n	80039a4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003976:	4b19      	ldr	r3, [pc, #100]	; (80039dc <HAL_RCC_OscConfig+0x8f8>)
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	4a18      	ldr	r2, [pc, #96]	; (80039dc <HAL_RCC_OscConfig+0x8f8>)
 800397c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003980:	61d3      	str	r3, [r2, #28]
 8003982:	4b16      	ldr	r3, [pc, #88]	; (80039dc <HAL_RCC_OscConfig+0x8f8>)
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800398a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800398e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003998:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800399c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800399e:	2301      	movs	r3, #1
 80039a0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a4:	4b0f      	ldr	r3, [pc, #60]	; (80039e4 <HAL_RCC_OscConfig+0x900>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d121      	bne.n	80039f4 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039b0:	4b0c      	ldr	r3, [pc, #48]	; (80039e4 <HAL_RCC_OscConfig+0x900>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a0b      	ldr	r2, [pc, #44]	; (80039e4 <HAL_RCC_OscConfig+0x900>)
 80039b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ba:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039bc:	f7fd fcde 	bl	800137c <HAL_GetTick>
 80039c0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c4:	e010      	b.n	80039e8 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039c6:	f7fd fcd9 	bl	800137c <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b64      	cmp	r3, #100	; 0x64
 80039d4:	d908      	bls.n	80039e8 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e3d1      	b.n	800417e <HAL_RCC_OscConfig+0x109a>
 80039da:	bf00      	nop
 80039dc:	40021000 	.word	0x40021000
 80039e0:	10908120 	.word	0x10908120
 80039e4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e8:	4b8d      	ldr	r3, [pc, #564]	; (8003c20 <HAL_RCC_OscConfig+0xb3c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d0e8      	beq.n	80039c6 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d106      	bne.n	8003a12 <HAL_RCC_OscConfig+0x92e>
 8003a04:	4b87      	ldr	r3, [pc, #540]	; (8003c24 <HAL_RCC_OscConfig+0xb40>)
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	4a86      	ldr	r2, [pc, #536]	; (8003c24 <HAL_RCC_OscConfig+0xb40>)
 8003a0a:	f043 0301 	orr.w	r3, r3, #1
 8003a0e:	6213      	str	r3, [r2, #32]
 8003a10:	e035      	b.n	8003a7e <HAL_RCC_OscConfig+0x99a>
 8003a12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a16:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10c      	bne.n	8003a3c <HAL_RCC_OscConfig+0x958>
 8003a22:	4b80      	ldr	r3, [pc, #512]	; (8003c24 <HAL_RCC_OscConfig+0xb40>)
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	4a7f      	ldr	r2, [pc, #508]	; (8003c24 <HAL_RCC_OscConfig+0xb40>)
 8003a28:	f023 0301 	bic.w	r3, r3, #1
 8003a2c:	6213      	str	r3, [r2, #32]
 8003a2e:	4b7d      	ldr	r3, [pc, #500]	; (8003c24 <HAL_RCC_OscConfig+0xb40>)
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	4a7c      	ldr	r2, [pc, #496]	; (8003c24 <HAL_RCC_OscConfig+0xb40>)
 8003a34:	f023 0304 	bic.w	r3, r3, #4
 8003a38:	6213      	str	r3, [r2, #32]
 8003a3a:	e020      	b.n	8003a7e <HAL_RCC_OscConfig+0x99a>
 8003a3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a40:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	2b05      	cmp	r3, #5
 8003a4a:	d10c      	bne.n	8003a66 <HAL_RCC_OscConfig+0x982>
 8003a4c:	4b75      	ldr	r3, [pc, #468]	; (8003c24 <HAL_RCC_OscConfig+0xb40>)
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	4a74      	ldr	r2, [pc, #464]	; (8003c24 <HAL_RCC_OscConfig+0xb40>)
 8003a52:	f043 0304 	orr.w	r3, r3, #4
 8003a56:	6213      	str	r3, [r2, #32]
 8003a58:	4b72      	ldr	r3, [pc, #456]	; (8003c24 <HAL_RCC_OscConfig+0xb40>)
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	4a71      	ldr	r2, [pc, #452]	; (8003c24 <HAL_RCC_OscConfig+0xb40>)
 8003a5e:	f043 0301 	orr.w	r3, r3, #1
 8003a62:	6213      	str	r3, [r2, #32]
 8003a64:	e00b      	b.n	8003a7e <HAL_RCC_OscConfig+0x99a>
 8003a66:	4b6f      	ldr	r3, [pc, #444]	; (8003c24 <HAL_RCC_OscConfig+0xb40>)
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	4a6e      	ldr	r2, [pc, #440]	; (8003c24 <HAL_RCC_OscConfig+0xb40>)
 8003a6c:	f023 0301 	bic.w	r3, r3, #1
 8003a70:	6213      	str	r3, [r2, #32]
 8003a72:	4b6c      	ldr	r3, [pc, #432]	; (8003c24 <HAL_RCC_OscConfig+0xb40>)
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	4a6b      	ldr	r2, [pc, #428]	; (8003c24 <HAL_RCC_OscConfig+0xb40>)
 8003a78:	f023 0304 	bic.w	r3, r3, #4
 8003a7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a82:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 8081 	beq.w	8003b92 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a90:	f7fd fc74 	bl	800137c <HAL_GetTick>
 8003a94:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a98:	e00b      	b.n	8003ab2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a9a:	f7fd fc6f 	bl	800137c <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e365      	b.n	800417e <HAL_RCC_OscConfig+0x109a>
 8003ab2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ab6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003aba:	2202      	movs	r2, #2
 8003abc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ac2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	fa93 f2a3 	rbit	r2, r3
 8003acc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ad0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ada:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003ade:	2202      	movs	r2, #2
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ae6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	fa93 f2a3 	rbit	r2, r3
 8003af0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003af4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003af8:	601a      	str	r2, [r3, #0]
  return result;
 8003afa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003afe:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003b02:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b04:	fab3 f383 	clz	r3, r3
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	095b      	lsrs	r3, r3, #5
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	f043 0302 	orr.w	r3, r3, #2
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d102      	bne.n	8003b1e <HAL_RCC_OscConfig+0xa3a>
 8003b18:	4b42      	ldr	r3, [pc, #264]	; (8003c24 <HAL_RCC_OscConfig+0xb40>)
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	e013      	b.n	8003b46 <HAL_RCC_OscConfig+0xa62>
 8003b1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b22:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003b26:	2202      	movs	r2, #2
 8003b28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b2e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	fa93 f2a3 	rbit	r2, r3
 8003b38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b3c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	4b38      	ldr	r3, [pc, #224]	; (8003c24 <HAL_RCC_OscConfig+0xb40>)
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b4a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003b4e:	2102      	movs	r1, #2
 8003b50:	6011      	str	r1, [r2, #0]
 8003b52:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b56:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003b5a:	6812      	ldr	r2, [r2, #0]
 8003b5c:	fa92 f1a2 	rbit	r1, r2
 8003b60:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b64:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003b68:	6011      	str	r1, [r2, #0]
  return result;
 8003b6a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b6e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003b72:	6812      	ldr	r2, [r2, #0]
 8003b74:	fab2 f282 	clz	r2, r2
 8003b78:	b2d2      	uxtb	r2, r2
 8003b7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	f002 021f 	and.w	r2, r2, #31
 8003b84:	2101      	movs	r1, #1
 8003b86:	fa01 f202 	lsl.w	r2, r1, r2
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d084      	beq.n	8003a9a <HAL_RCC_OscConfig+0x9b6>
 8003b90:	e083      	b.n	8003c9a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b92:	f7fd fbf3 	bl	800137c <HAL_GetTick>
 8003b96:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b9a:	e00b      	b.n	8003bb4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b9c:	f7fd fbee 	bl	800137c <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e2e4      	b.n	800417e <HAL_RCC_OscConfig+0x109a>
 8003bb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bb8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003bbc:	2202      	movs	r2, #2
 8003bbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bc4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	fa93 f2a3 	rbit	r2, r3
 8003bce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bd2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bdc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003be0:	2202      	movs	r2, #2
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003be8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	fa93 f2a3 	rbit	r2, r3
 8003bf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bf6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003bfa:	601a      	str	r2, [r3, #0]
  return result;
 8003bfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c00:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003c04:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c06:	fab3 f383 	clz	r3, r3
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	095b      	lsrs	r3, r3, #5
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	f043 0302 	orr.w	r3, r3, #2
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d106      	bne.n	8003c28 <HAL_RCC_OscConfig+0xb44>
 8003c1a:	4b02      	ldr	r3, [pc, #8]	; (8003c24 <HAL_RCC_OscConfig+0xb40>)
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	e017      	b.n	8003c50 <HAL_RCC_OscConfig+0xb6c>
 8003c20:	40007000 	.word	0x40007000
 8003c24:	40021000 	.word	0x40021000
 8003c28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c2c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003c30:	2202      	movs	r2, #2
 8003c32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c38:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	fa93 f2a3 	rbit	r2, r3
 8003c42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c46:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	4bb3      	ldr	r3, [pc, #716]	; (8003f1c <HAL_RCC_OscConfig+0xe38>)
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c54:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003c58:	2102      	movs	r1, #2
 8003c5a:	6011      	str	r1, [r2, #0]
 8003c5c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c60:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003c64:	6812      	ldr	r2, [r2, #0]
 8003c66:	fa92 f1a2 	rbit	r1, r2
 8003c6a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c6e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003c72:	6011      	str	r1, [r2, #0]
  return result;
 8003c74:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c78:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003c7c:	6812      	ldr	r2, [r2, #0]
 8003c7e:	fab2 f282 	clz	r2, r2
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c88:	b2d2      	uxtb	r2, r2
 8003c8a:	f002 021f 	and.w	r2, r2, #31
 8003c8e:	2101      	movs	r1, #1
 8003c90:	fa01 f202 	lsl.w	r2, r1, r2
 8003c94:	4013      	ands	r3, r2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d180      	bne.n	8003b9c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c9a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d105      	bne.n	8003cae <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ca2:	4b9e      	ldr	r3, [pc, #632]	; (8003f1c <HAL_RCC_OscConfig+0xe38>)
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	4a9d      	ldr	r2, [pc, #628]	; (8003f1c <HAL_RCC_OscConfig+0xe38>)
 8003ca8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cac:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cb2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 825e 	beq.w	800417c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cc0:	4b96      	ldr	r3, [pc, #600]	; (8003f1c <HAL_RCC_OscConfig+0xe38>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f003 030c 	and.w	r3, r3, #12
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	f000 821f 	beq.w	800410c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cd2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	f040 8170 	bne.w	8003fc0 <HAL_RCC_OscConfig+0xedc>
 8003ce0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ce4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003ce8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003cec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cf2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	fa93 f2a3 	rbit	r2, r3
 8003cfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d00:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003d04:	601a      	str	r2, [r3, #0]
  return result;
 8003d06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d0a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003d0e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d10:	fab3 f383 	clz	r3, r3
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d1a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	461a      	mov	r2, r3
 8003d22:	2300      	movs	r3, #0
 8003d24:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d26:	f7fd fb29 	bl	800137c <HAL_GetTick>
 8003d2a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d2e:	e009      	b.n	8003d44 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d30:	f7fd fb24 	bl	800137c <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e21c      	b.n	800417e <HAL_RCC_OscConfig+0x109a>
 8003d44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d48:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003d4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d56:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	fa93 f2a3 	rbit	r2, r3
 8003d60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d64:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003d68:	601a      	str	r2, [r3, #0]
  return result;
 8003d6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d6e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003d72:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d74:	fab3 f383 	clz	r3, r3
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	095b      	lsrs	r3, r3, #5
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	f043 0301 	orr.w	r3, r3, #1
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d102      	bne.n	8003d8e <HAL_RCC_OscConfig+0xcaa>
 8003d88:	4b64      	ldr	r3, [pc, #400]	; (8003f1c <HAL_RCC_OscConfig+0xe38>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	e027      	b.n	8003dde <HAL_RCC_OscConfig+0xcfa>
 8003d8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d92:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003d96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003da0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	fa93 f2a3 	rbit	r2, r3
 8003daa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dae:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003db8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003dbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dc0:	601a      	str	r2, [r3, #0]
 8003dc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dc6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	fa93 f2a3 	rbit	r2, r3
 8003dd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dd4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	4b50      	ldr	r3, [pc, #320]	; (8003f1c <HAL_RCC_OscConfig+0xe38>)
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003de2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003de6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003dea:	6011      	str	r1, [r2, #0]
 8003dec:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003df0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003df4:	6812      	ldr	r2, [r2, #0]
 8003df6:	fa92 f1a2 	rbit	r1, r2
 8003dfa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003dfe:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003e02:	6011      	str	r1, [r2, #0]
  return result;
 8003e04:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e08:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003e0c:	6812      	ldr	r2, [r2, #0]
 8003e0e:	fab2 f282 	clz	r2, r2
 8003e12:	b2d2      	uxtb	r2, r2
 8003e14:	f042 0220 	orr.w	r2, r2, #32
 8003e18:	b2d2      	uxtb	r2, r2
 8003e1a:	f002 021f 	and.w	r2, r2, #31
 8003e1e:	2101      	movs	r1, #1
 8003e20:	fa01 f202 	lsl.w	r2, r1, r2
 8003e24:	4013      	ands	r3, r2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d182      	bne.n	8003d30 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e2a:	4b3c      	ldr	r3, [pc, #240]	; (8003f1c <HAL_RCC_OscConfig+0xe38>)
 8003e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2e:	f023 020f 	bic.w	r2, r3, #15
 8003e32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e36:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	4937      	ldr	r1, [pc, #220]	; (8003f1c <HAL_RCC_OscConfig+0xe38>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003e44:	4b35      	ldr	r3, [pc, #212]	; (8003f1c <HAL_RCC_OscConfig+0xe38>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003e4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e50:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6a19      	ldr	r1, [r3, #32]
 8003e58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e5c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	430b      	orrs	r3, r1
 8003e66:	492d      	ldr	r1, [pc, #180]	; (8003f1c <HAL_RCC_OscConfig+0xe38>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	604b      	str	r3, [r1, #4]
 8003e6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e70:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003e74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e7e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	fa93 f2a3 	rbit	r2, r3
 8003e88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e8c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003e90:	601a      	str	r2, [r3, #0]
  return result;
 8003e92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e96:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003e9a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e9c:	fab3 f383 	clz	r3, r3
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ea6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	461a      	mov	r2, r3
 8003eae:	2301      	movs	r3, #1
 8003eb0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb2:	f7fd fa63 	bl	800137c <HAL_GetTick>
 8003eb6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003eba:	e009      	b.n	8003ed0 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ebc:	f7fd fa5e 	bl	800137c <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e156      	b.n	800417e <HAL_RCC_OscConfig+0x109a>
 8003ed0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ed4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003ed8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003edc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ede:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ee2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	fa93 f2a3 	rbit	r2, r3
 8003eec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ef0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003ef4:	601a      	str	r2, [r3, #0]
  return result;
 8003ef6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003efa:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003efe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f00:	fab3 f383 	clz	r3, r3
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	095b      	lsrs	r3, r3, #5
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	f043 0301 	orr.w	r3, r3, #1
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d105      	bne.n	8003f20 <HAL_RCC_OscConfig+0xe3c>
 8003f14:	4b01      	ldr	r3, [pc, #4]	; (8003f1c <HAL_RCC_OscConfig+0xe38>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	e02a      	b.n	8003f70 <HAL_RCC_OscConfig+0xe8c>
 8003f1a:	bf00      	nop
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f24:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003f28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f32:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	fa93 f2a3 	rbit	r2, r3
 8003f3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f40:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f4a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003f4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f58:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	fa93 f2a3 	rbit	r2, r3
 8003f62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f66:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	4b86      	ldr	r3, [pc, #536]	; (8004188 <HAL_RCC_OscConfig+0x10a4>)
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f74:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003f78:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f7c:	6011      	str	r1, [r2, #0]
 8003f7e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f82:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003f86:	6812      	ldr	r2, [r2, #0]
 8003f88:	fa92 f1a2 	rbit	r1, r2
 8003f8c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f90:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003f94:	6011      	str	r1, [r2, #0]
  return result;
 8003f96:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f9a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003f9e:	6812      	ldr	r2, [r2, #0]
 8003fa0:	fab2 f282 	clz	r2, r2
 8003fa4:	b2d2      	uxtb	r2, r2
 8003fa6:	f042 0220 	orr.w	r2, r2, #32
 8003faa:	b2d2      	uxtb	r2, r2
 8003fac:	f002 021f 	and.w	r2, r2, #31
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	fa01 f202 	lsl.w	r2, r1, r2
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f43f af7f 	beq.w	8003ebc <HAL_RCC_OscConfig+0xdd8>
 8003fbe:	e0dd      	b.n	800417c <HAL_RCC_OscConfig+0x1098>
 8003fc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fc4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003fc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fd2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	fa93 f2a3 	rbit	r2, r3
 8003fdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fe0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003fe4:	601a      	str	r2, [r3, #0]
  return result;
 8003fe6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fea:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003fee:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ff0:	fab3 f383 	clz	r3, r3
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ffa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	461a      	mov	r2, r3
 8004002:	2300      	movs	r3, #0
 8004004:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004006:	f7fd f9b9 	bl	800137c <HAL_GetTick>
 800400a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800400e:	e009      	b.n	8004024 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004010:	f7fd f9b4 	bl	800137c <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d901      	bls.n	8004024 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e0ac      	b.n	800417e <HAL_RCC_OscConfig+0x109a>
 8004024:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004028:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800402c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004030:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004032:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004036:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	fa93 f2a3 	rbit	r2, r3
 8004040:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004044:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004048:	601a      	str	r2, [r3, #0]
  return result;
 800404a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800404e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004052:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004054:	fab3 f383 	clz	r3, r3
 8004058:	b2db      	uxtb	r3, r3
 800405a:	095b      	lsrs	r3, r3, #5
 800405c:	b2db      	uxtb	r3, r3
 800405e:	f043 0301 	orr.w	r3, r3, #1
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b01      	cmp	r3, #1
 8004066:	d102      	bne.n	800406e <HAL_RCC_OscConfig+0xf8a>
 8004068:	4b47      	ldr	r3, [pc, #284]	; (8004188 <HAL_RCC_OscConfig+0x10a4>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	e027      	b.n	80040be <HAL_RCC_OscConfig+0xfda>
 800406e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004072:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004076:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800407a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004080:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	fa93 f2a3 	rbit	r2, r3
 800408a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800408e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004098:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800409c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040a6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	fa93 f2a3 	rbit	r2, r3
 80040b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040b4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	4b33      	ldr	r3, [pc, #204]	; (8004188 <HAL_RCC_OscConfig+0x10a4>)
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80040c2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80040c6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80040ca:	6011      	str	r1, [r2, #0]
 80040cc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80040d0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80040d4:	6812      	ldr	r2, [r2, #0]
 80040d6:	fa92 f1a2 	rbit	r1, r2
 80040da:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80040de:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80040e2:	6011      	str	r1, [r2, #0]
  return result;
 80040e4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80040e8:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80040ec:	6812      	ldr	r2, [r2, #0]
 80040ee:	fab2 f282 	clz	r2, r2
 80040f2:	b2d2      	uxtb	r2, r2
 80040f4:	f042 0220 	orr.w	r2, r2, #32
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	f002 021f 	and.w	r2, r2, #31
 80040fe:	2101      	movs	r1, #1
 8004100:	fa01 f202 	lsl.w	r2, r1, r2
 8004104:	4013      	ands	r3, r2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d182      	bne.n	8004010 <HAL_RCC_OscConfig+0xf2c>
 800410a:	e037      	b.n	800417c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800410c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004110:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d101      	bne.n	8004120 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e02e      	b.n	800417e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004120:	4b19      	ldr	r3, [pc, #100]	; (8004188 <HAL_RCC_OscConfig+0x10a4>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004128:	4b17      	ldr	r3, [pc, #92]	; (8004188 <HAL_RCC_OscConfig+0x10a4>)
 800412a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004130:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004134:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004138:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800413c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	429a      	cmp	r2, r3
 8004146:	d117      	bne.n	8004178 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004148:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800414c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004150:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004154:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800415c:	429a      	cmp	r2, r3
 800415e:	d10b      	bne.n	8004178 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004160:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004164:	f003 020f 	and.w	r2, r3, #15
 8004168:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800416c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004174:	429a      	cmp	r2, r3
 8004176:	d001      	beq.n	800417c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e000      	b.n	800417e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40021000 	.word	0x40021000

0800418c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b09e      	sub	sp, #120	; 0x78
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004196:	2300      	movs	r3, #0
 8004198:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e162      	b.n	800446a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041a4:	4b90      	ldr	r3, [pc, #576]	; (80043e8 <HAL_RCC_ClockConfig+0x25c>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d910      	bls.n	80041d4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b2:	4b8d      	ldr	r3, [pc, #564]	; (80043e8 <HAL_RCC_ClockConfig+0x25c>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f023 0207 	bic.w	r2, r3, #7
 80041ba:	498b      	ldr	r1, [pc, #556]	; (80043e8 <HAL_RCC_ClockConfig+0x25c>)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	4313      	orrs	r3, r2
 80041c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c2:	4b89      	ldr	r3, [pc, #548]	; (80043e8 <HAL_RCC_ClockConfig+0x25c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0307 	and.w	r3, r3, #7
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d001      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e14a      	b.n	800446a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d008      	beq.n	80041f2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041e0:	4b82      	ldr	r3, [pc, #520]	; (80043ec <HAL_RCC_ClockConfig+0x260>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	497f      	ldr	r1, [pc, #508]	; (80043ec <HAL_RCC_ClockConfig+0x260>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 80dc 	beq.w	80043b8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d13c      	bne.n	8004282 <HAL_RCC_ClockConfig+0xf6>
 8004208:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800420c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004210:	fa93 f3a3 	rbit	r3, r3
 8004214:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004218:	fab3 f383 	clz	r3, r3
 800421c:	b2db      	uxtb	r3, r3
 800421e:	095b      	lsrs	r3, r3, #5
 8004220:	b2db      	uxtb	r3, r3
 8004222:	f043 0301 	orr.w	r3, r3, #1
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b01      	cmp	r3, #1
 800422a:	d102      	bne.n	8004232 <HAL_RCC_ClockConfig+0xa6>
 800422c:	4b6f      	ldr	r3, [pc, #444]	; (80043ec <HAL_RCC_ClockConfig+0x260>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	e00f      	b.n	8004252 <HAL_RCC_ClockConfig+0xc6>
 8004232:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004236:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004238:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800423a:	fa93 f3a3 	rbit	r3, r3
 800423e:	667b      	str	r3, [r7, #100]	; 0x64
 8004240:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004244:	663b      	str	r3, [r7, #96]	; 0x60
 8004246:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004248:	fa93 f3a3 	rbit	r3, r3
 800424c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800424e:	4b67      	ldr	r3, [pc, #412]	; (80043ec <HAL_RCC_ClockConfig+0x260>)
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004256:	65ba      	str	r2, [r7, #88]	; 0x58
 8004258:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800425a:	fa92 f2a2 	rbit	r2, r2
 800425e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004260:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004262:	fab2 f282 	clz	r2, r2
 8004266:	b2d2      	uxtb	r2, r2
 8004268:	f042 0220 	orr.w	r2, r2, #32
 800426c:	b2d2      	uxtb	r2, r2
 800426e:	f002 021f 	and.w	r2, r2, #31
 8004272:	2101      	movs	r1, #1
 8004274:	fa01 f202 	lsl.w	r2, r1, r2
 8004278:	4013      	ands	r3, r2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d17b      	bne.n	8004376 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e0f3      	b.n	800446a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	2b02      	cmp	r3, #2
 8004288:	d13c      	bne.n	8004304 <HAL_RCC_ClockConfig+0x178>
 800428a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800428e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004292:	fa93 f3a3 	rbit	r3, r3
 8004296:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800429a:	fab3 f383 	clz	r3, r3
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	095b      	lsrs	r3, r3, #5
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	f043 0301 	orr.w	r3, r3, #1
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d102      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x128>
 80042ae:	4b4f      	ldr	r3, [pc, #316]	; (80043ec <HAL_RCC_ClockConfig+0x260>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	e00f      	b.n	80042d4 <HAL_RCC_ClockConfig+0x148>
 80042b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042b8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042bc:	fa93 f3a3 	rbit	r3, r3
 80042c0:	647b      	str	r3, [r7, #68]	; 0x44
 80042c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042c6:	643b      	str	r3, [r7, #64]	; 0x40
 80042c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042ca:	fa93 f3a3 	rbit	r3, r3
 80042ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042d0:	4b46      	ldr	r3, [pc, #280]	; (80043ec <HAL_RCC_ClockConfig+0x260>)
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042d8:	63ba      	str	r2, [r7, #56]	; 0x38
 80042da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042dc:	fa92 f2a2 	rbit	r2, r2
 80042e0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80042e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042e4:	fab2 f282 	clz	r2, r2
 80042e8:	b2d2      	uxtb	r2, r2
 80042ea:	f042 0220 	orr.w	r2, r2, #32
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	f002 021f 	and.w	r2, r2, #31
 80042f4:	2101      	movs	r1, #1
 80042f6:	fa01 f202 	lsl.w	r2, r1, r2
 80042fa:	4013      	ands	r3, r2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d13a      	bne.n	8004376 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e0b2      	b.n	800446a <HAL_RCC_ClockConfig+0x2de>
 8004304:	2302      	movs	r3, #2
 8004306:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430a:	fa93 f3a3 	rbit	r3, r3
 800430e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004312:	fab3 f383 	clz	r3, r3
 8004316:	b2db      	uxtb	r3, r3
 8004318:	095b      	lsrs	r3, r3, #5
 800431a:	b2db      	uxtb	r3, r3
 800431c:	f043 0301 	orr.w	r3, r3, #1
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b01      	cmp	r3, #1
 8004324:	d102      	bne.n	800432c <HAL_RCC_ClockConfig+0x1a0>
 8004326:	4b31      	ldr	r3, [pc, #196]	; (80043ec <HAL_RCC_ClockConfig+0x260>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	e00d      	b.n	8004348 <HAL_RCC_ClockConfig+0x1bc>
 800432c:	2302      	movs	r3, #2
 800432e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004332:	fa93 f3a3 	rbit	r3, r3
 8004336:	627b      	str	r3, [r7, #36]	; 0x24
 8004338:	2302      	movs	r3, #2
 800433a:	623b      	str	r3, [r7, #32]
 800433c:	6a3b      	ldr	r3, [r7, #32]
 800433e:	fa93 f3a3 	rbit	r3, r3
 8004342:	61fb      	str	r3, [r7, #28]
 8004344:	4b29      	ldr	r3, [pc, #164]	; (80043ec <HAL_RCC_ClockConfig+0x260>)
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004348:	2202      	movs	r2, #2
 800434a:	61ba      	str	r2, [r7, #24]
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	fa92 f2a2 	rbit	r2, r2
 8004352:	617a      	str	r2, [r7, #20]
  return result;
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	fab2 f282 	clz	r2, r2
 800435a:	b2d2      	uxtb	r2, r2
 800435c:	f042 0220 	orr.w	r2, r2, #32
 8004360:	b2d2      	uxtb	r2, r2
 8004362:	f002 021f 	and.w	r2, r2, #31
 8004366:	2101      	movs	r1, #1
 8004368:	fa01 f202 	lsl.w	r2, r1, r2
 800436c:	4013      	ands	r3, r2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e079      	b.n	800446a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004376:	4b1d      	ldr	r3, [pc, #116]	; (80043ec <HAL_RCC_ClockConfig+0x260>)
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f023 0203 	bic.w	r2, r3, #3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	491a      	ldr	r1, [pc, #104]	; (80043ec <HAL_RCC_ClockConfig+0x260>)
 8004384:	4313      	orrs	r3, r2
 8004386:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004388:	f7fc fff8 	bl	800137c <HAL_GetTick>
 800438c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800438e:	e00a      	b.n	80043a6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004390:	f7fc fff4 	bl	800137c <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	f241 3288 	movw	r2, #5000	; 0x1388
 800439e:	4293      	cmp	r3, r2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e061      	b.n	800446a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a6:	4b11      	ldr	r3, [pc, #68]	; (80043ec <HAL_RCC_ClockConfig+0x260>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f003 020c 	and.w	r2, r3, #12
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d1eb      	bne.n	8004390 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043b8:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <HAL_RCC_ClockConfig+0x25c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0307 	and.w	r3, r3, #7
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d214      	bcs.n	80043f0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043c6:	4b08      	ldr	r3, [pc, #32]	; (80043e8 <HAL_RCC_ClockConfig+0x25c>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f023 0207 	bic.w	r2, r3, #7
 80043ce:	4906      	ldr	r1, [pc, #24]	; (80043e8 <HAL_RCC_ClockConfig+0x25c>)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043d6:	4b04      	ldr	r3, [pc, #16]	; (80043e8 <HAL_RCC_ClockConfig+0x25c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0307 	and.w	r3, r3, #7
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d005      	beq.n	80043f0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e040      	b.n	800446a <HAL_RCC_ClockConfig+0x2de>
 80043e8:	40022000 	.word	0x40022000
 80043ec:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0304 	and.w	r3, r3, #4
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d008      	beq.n	800440e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043fc:	4b1d      	ldr	r3, [pc, #116]	; (8004474 <HAL_RCC_ClockConfig+0x2e8>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	491a      	ldr	r1, [pc, #104]	; (8004474 <HAL_RCC_ClockConfig+0x2e8>)
 800440a:	4313      	orrs	r3, r2
 800440c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0308 	and.w	r3, r3, #8
 8004416:	2b00      	cmp	r3, #0
 8004418:	d009      	beq.n	800442e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800441a:	4b16      	ldr	r3, [pc, #88]	; (8004474 <HAL_RCC_ClockConfig+0x2e8>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	4912      	ldr	r1, [pc, #72]	; (8004474 <HAL_RCC_ClockConfig+0x2e8>)
 800442a:	4313      	orrs	r3, r2
 800442c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800442e:	f000 f829 	bl	8004484 <HAL_RCC_GetSysClockFreq>
 8004432:	4601      	mov	r1, r0
 8004434:	4b0f      	ldr	r3, [pc, #60]	; (8004474 <HAL_RCC_ClockConfig+0x2e8>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800443c:	22f0      	movs	r2, #240	; 0xf0
 800443e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	fa92 f2a2 	rbit	r2, r2
 8004446:	60fa      	str	r2, [r7, #12]
  return result;
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	fab2 f282 	clz	r2, r2
 800444e:	b2d2      	uxtb	r2, r2
 8004450:	40d3      	lsrs	r3, r2
 8004452:	4a09      	ldr	r2, [pc, #36]	; (8004478 <HAL_RCC_ClockConfig+0x2ec>)
 8004454:	5cd3      	ldrb	r3, [r2, r3]
 8004456:	fa21 f303 	lsr.w	r3, r1, r3
 800445a:	4a08      	ldr	r2, [pc, #32]	; (800447c <HAL_RCC_ClockConfig+0x2f0>)
 800445c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800445e:	4b08      	ldr	r3, [pc, #32]	; (8004480 <HAL_RCC_ClockConfig+0x2f4>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4618      	mov	r0, r3
 8004464:	f7fc fe0c 	bl	8001080 <HAL_InitTick>
  
  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3778      	adds	r7, #120	; 0x78
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	40021000 	.word	0x40021000
 8004478:	08009e04 	.word	0x08009e04
 800447c:	20000010 	.word	0x20000010
 8004480:	20000014 	.word	0x20000014

08004484 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004484:	b480      	push	{r7}
 8004486:	b08b      	sub	sp, #44	; 0x2c
 8004488:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800448a:	2300      	movs	r3, #0
 800448c:	61fb      	str	r3, [r7, #28]
 800448e:	2300      	movs	r3, #0
 8004490:	61bb      	str	r3, [r7, #24]
 8004492:	2300      	movs	r3, #0
 8004494:	627b      	str	r3, [r7, #36]	; 0x24
 8004496:	2300      	movs	r3, #0
 8004498:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800449a:	2300      	movs	r3, #0
 800449c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800449e:	4b2a      	ldr	r3, [pc, #168]	; (8004548 <HAL_RCC_GetSysClockFreq+0xc4>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	f003 030c 	and.w	r3, r3, #12
 80044aa:	2b04      	cmp	r3, #4
 80044ac:	d002      	beq.n	80044b4 <HAL_RCC_GetSysClockFreq+0x30>
 80044ae:	2b08      	cmp	r3, #8
 80044b0:	d003      	beq.n	80044ba <HAL_RCC_GetSysClockFreq+0x36>
 80044b2:	e03f      	b.n	8004534 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044b4:	4b25      	ldr	r3, [pc, #148]	; (800454c <HAL_RCC_GetSysClockFreq+0xc8>)
 80044b6:	623b      	str	r3, [r7, #32]
      break;
 80044b8:	e03f      	b.n	800453a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80044c0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80044c4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	fa92 f2a2 	rbit	r2, r2
 80044cc:	607a      	str	r2, [r7, #4]
  return result;
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	fab2 f282 	clz	r2, r2
 80044d4:	b2d2      	uxtb	r2, r2
 80044d6:	40d3      	lsrs	r3, r2
 80044d8:	4a1d      	ldr	r2, [pc, #116]	; (8004550 <HAL_RCC_GetSysClockFreq+0xcc>)
 80044da:	5cd3      	ldrb	r3, [r2, r3]
 80044dc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80044de:	4b1a      	ldr	r3, [pc, #104]	; (8004548 <HAL_RCC_GetSysClockFreq+0xc4>)
 80044e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e2:	f003 030f 	and.w	r3, r3, #15
 80044e6:	220f      	movs	r2, #15
 80044e8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	fa92 f2a2 	rbit	r2, r2
 80044f0:	60fa      	str	r2, [r7, #12]
  return result;
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	fab2 f282 	clz	r2, r2
 80044f8:	b2d2      	uxtb	r2, r2
 80044fa:	40d3      	lsrs	r3, r2
 80044fc:	4a15      	ldr	r2, [pc, #84]	; (8004554 <HAL_RCC_GetSysClockFreq+0xd0>)
 80044fe:	5cd3      	ldrb	r3, [r2, r3]
 8004500:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d008      	beq.n	800451e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800450c:	4a0f      	ldr	r2, [pc, #60]	; (800454c <HAL_RCC_GetSysClockFreq+0xc8>)
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	fbb2 f2f3 	udiv	r2, r2, r3
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	fb02 f303 	mul.w	r3, r2, r3
 800451a:	627b      	str	r3, [r7, #36]	; 0x24
 800451c:	e007      	b.n	800452e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800451e:	4a0b      	ldr	r2, [pc, #44]	; (800454c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	fbb2 f2f3 	udiv	r2, r2, r3
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	fb02 f303 	mul.w	r3, r2, r3
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800452e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004530:	623b      	str	r3, [r7, #32]
      break;
 8004532:	e002      	b.n	800453a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004534:	4b05      	ldr	r3, [pc, #20]	; (800454c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004536:	623b      	str	r3, [r7, #32]
      break;
 8004538:	bf00      	nop
    }
  }
  return sysclockfreq;
 800453a:	6a3b      	ldr	r3, [r7, #32]
}
 800453c:	4618      	mov	r0, r3
 800453e:	372c      	adds	r7, #44	; 0x2c
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	40021000 	.word	0x40021000
 800454c:	007a1200 	.word	0x007a1200
 8004550:	08009e1c 	.word	0x08009e1c
 8004554:	08009e2c 	.word	0x08009e2c

08004558 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800455c:	4b03      	ldr	r3, [pc, #12]	; (800456c <HAL_RCC_GetHCLKFreq+0x14>)
 800455e:	681b      	ldr	r3, [r3, #0]
}
 8004560:	4618      	mov	r0, r3
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	20000010 	.word	0x20000010

08004570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004576:	f7ff ffef 	bl	8004558 <HAL_RCC_GetHCLKFreq>
 800457a:	4601      	mov	r1, r0
 800457c:	4b0b      	ldr	r3, [pc, #44]	; (80045ac <HAL_RCC_GetPCLK1Freq+0x3c>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004584:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004588:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	fa92 f2a2 	rbit	r2, r2
 8004590:	603a      	str	r2, [r7, #0]
  return result;
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	fab2 f282 	clz	r2, r2
 8004598:	b2d2      	uxtb	r2, r2
 800459a:	40d3      	lsrs	r3, r2
 800459c:	4a04      	ldr	r2, [pc, #16]	; (80045b0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800459e:	5cd3      	ldrb	r3, [r2, r3]
 80045a0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80045a4:	4618      	mov	r0, r3
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	40021000 	.word	0x40021000
 80045b0:	08009e14 	.word	0x08009e14

080045b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80045ba:	f7ff ffcd 	bl	8004558 <HAL_RCC_GetHCLKFreq>
 80045be:	4601      	mov	r1, r0
 80045c0:	4b0b      	ldr	r3, [pc, #44]	; (80045f0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80045c8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80045cc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	fa92 f2a2 	rbit	r2, r2
 80045d4:	603a      	str	r2, [r7, #0]
  return result;
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	fab2 f282 	clz	r2, r2
 80045dc:	b2d2      	uxtb	r2, r2
 80045de:	40d3      	lsrs	r3, r2
 80045e0:	4a04      	ldr	r2, [pc, #16]	; (80045f4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80045e2:	5cd3      	ldrb	r3, [r2, r3]
 80045e4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80045e8:	4618      	mov	r0, r3
 80045ea:	3708      	adds	r7, #8
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	40021000 	.word	0x40021000
 80045f4:	08009e14 	.word	0x08009e14

080045f8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	220f      	movs	r2, #15
 8004606:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004608:	4b12      	ldr	r3, [pc, #72]	; (8004654 <HAL_RCC_GetClockConfig+0x5c>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f003 0203 	and.w	r2, r3, #3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004614:	4b0f      	ldr	r3, [pc, #60]	; (8004654 <HAL_RCC_GetClockConfig+0x5c>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8004620:	4b0c      	ldr	r3, [pc, #48]	; (8004654 <HAL_RCC_GetClockConfig+0x5c>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800462c:	4b09      	ldr	r3, [pc, #36]	; (8004654 <HAL_RCC_GetClockConfig+0x5c>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	08db      	lsrs	r3, r3, #3
 8004632:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800463a:	4b07      	ldr	r3, [pc, #28]	; (8004658 <HAL_RCC_GetClockConfig+0x60>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0207 	and.w	r2, r3, #7
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	601a      	str	r2, [r3, #0]
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	40021000 	.word	0x40021000
 8004658:	40022000 	.word	0x40022000

0800465c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b092      	sub	sp, #72	; 0x48
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004664:	2300      	movs	r3, #0
 8004666:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004668:	2300      	movs	r3, #0
 800466a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800466c:	2300      	movs	r3, #0
 800466e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800467a:	2b00      	cmp	r3, #0
 800467c:	f000 80d4 	beq.w	8004828 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004680:	4b4e      	ldr	r3, [pc, #312]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004682:	69db      	ldr	r3, [r3, #28]
 8004684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10e      	bne.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800468c:	4b4b      	ldr	r3, [pc, #300]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800468e:	69db      	ldr	r3, [r3, #28]
 8004690:	4a4a      	ldr	r2, [pc, #296]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004696:	61d3      	str	r3, [r2, #28]
 8004698:	4b48      	ldr	r3, [pc, #288]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a0:	60bb      	str	r3, [r7, #8]
 80046a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046a4:	2301      	movs	r3, #1
 80046a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046aa:	4b45      	ldr	r3, [pc, #276]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d118      	bne.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046b6:	4b42      	ldr	r3, [pc, #264]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a41      	ldr	r2, [pc, #260]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046c0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046c2:	f7fc fe5b 	bl	800137c <HAL_GetTick>
 80046c6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c8:	e008      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ca:	f7fc fe57 	bl	800137c <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b64      	cmp	r3, #100	; 0x64
 80046d6:	d901      	bls.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e1d6      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046dc:	4b38      	ldr	r3, [pc, #224]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d0f0      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046e8:	4b34      	ldr	r3, [pc, #208]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 8084 	beq.w	8004802 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004702:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004704:	429a      	cmp	r2, r3
 8004706:	d07c      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004708:	4b2c      	ldr	r3, [pc, #176]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004710:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004712:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004716:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471a:	fa93 f3a3 	rbit	r3, r3
 800471e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004722:	fab3 f383 	clz	r3, r3
 8004726:	b2db      	uxtb	r3, r3
 8004728:	461a      	mov	r2, r3
 800472a:	4b26      	ldr	r3, [pc, #152]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800472c:	4413      	add	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	461a      	mov	r2, r3
 8004732:	2301      	movs	r3, #1
 8004734:	6013      	str	r3, [r2, #0]
 8004736:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800473a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800473c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473e:	fa93 f3a3 	rbit	r3, r3
 8004742:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004746:	fab3 f383 	clz	r3, r3
 800474a:	b2db      	uxtb	r3, r3
 800474c:	461a      	mov	r2, r3
 800474e:	4b1d      	ldr	r3, [pc, #116]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004750:	4413      	add	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	461a      	mov	r2, r3
 8004756:	2300      	movs	r3, #0
 8004758:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800475a:	4a18      	ldr	r2, [pc, #96]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800475c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800475e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d04b      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800476a:	f7fc fe07 	bl	800137c <HAL_GetTick>
 800476e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004770:	e00a      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004772:	f7fc fe03 	bl	800137c <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004780:	4293      	cmp	r3, r2
 8004782:	d901      	bls.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e180      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004788:	2302      	movs	r3, #2
 800478a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478e:	fa93 f3a3 	rbit	r3, r3
 8004792:	627b      	str	r3, [r7, #36]	; 0x24
 8004794:	2302      	movs	r3, #2
 8004796:	623b      	str	r3, [r7, #32]
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	fa93 f3a3 	rbit	r3, r3
 800479e:	61fb      	str	r3, [r7, #28]
  return result;
 80047a0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a2:	fab3 f383 	clz	r3, r3
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	095b      	lsrs	r3, r3, #5
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	f043 0302 	orr.w	r3, r3, #2
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d108      	bne.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80047b6:	4b01      	ldr	r3, [pc, #4]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	e00d      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80047bc:	40021000 	.word	0x40021000
 80047c0:	40007000 	.word	0x40007000
 80047c4:	10908100 	.word	0x10908100
 80047c8:	2302      	movs	r3, #2
 80047ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	fa93 f3a3 	rbit	r3, r3
 80047d2:	617b      	str	r3, [r7, #20]
 80047d4:	4b9a      	ldr	r3, [pc, #616]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d8:	2202      	movs	r2, #2
 80047da:	613a      	str	r2, [r7, #16]
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	fa92 f2a2 	rbit	r2, r2
 80047e2:	60fa      	str	r2, [r7, #12]
  return result;
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	fab2 f282 	clz	r2, r2
 80047ea:	b2d2      	uxtb	r2, r2
 80047ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047f0:	b2d2      	uxtb	r2, r2
 80047f2:	f002 021f 	and.w	r2, r2, #31
 80047f6:	2101      	movs	r1, #1
 80047f8:	fa01 f202 	lsl.w	r2, r1, r2
 80047fc:	4013      	ands	r3, r2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d0b7      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004802:	4b8f      	ldr	r3, [pc, #572]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	498c      	ldr	r1, [pc, #560]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004810:	4313      	orrs	r3, r2
 8004812:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004814:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004818:	2b01      	cmp	r3, #1
 800481a:	d105      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800481c:	4b88      	ldr	r3, [pc, #544]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	4a87      	ldr	r2, [pc, #540]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004822:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004826:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	2b00      	cmp	r3, #0
 8004832:	d008      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004834:	4b82      	ldr	r3, [pc, #520]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004838:	f023 0203 	bic.w	r2, r3, #3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	497f      	ldr	r1, [pc, #508]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004842:	4313      	orrs	r3, r2
 8004844:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d008      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004852:	4b7b      	ldr	r3, [pc, #492]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004856:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	4978      	ldr	r1, [pc, #480]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004860:	4313      	orrs	r3, r2
 8004862:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0304 	and.w	r3, r3, #4
 800486c:	2b00      	cmp	r3, #0
 800486e:	d008      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004870:	4b73      	ldr	r3, [pc, #460]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004874:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	4970      	ldr	r1, [pc, #448]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800487e:	4313      	orrs	r3, r2
 8004880:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0320 	and.w	r3, r3, #32
 800488a:	2b00      	cmp	r3, #0
 800488c:	d008      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800488e:	4b6c      	ldr	r3, [pc, #432]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004892:	f023 0210 	bic.w	r2, r3, #16
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	4969      	ldr	r1, [pc, #420]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800489c:	4313      	orrs	r3, r2
 800489e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d008      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80048ac:	4b64      	ldr	r3, [pc, #400]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b8:	4961      	ldr	r1, [pc, #388]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d008      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048ca:	4b5d      	ldr	r3, [pc, #372]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ce:	f023 0220 	bic.w	r2, r3, #32
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	495a      	ldr	r1, [pc, #360]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d008      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048e8:	4b55      	ldr	r3, [pc, #340]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ec:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f4:	4952      	ldr	r1, [pc, #328]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b00      	cmp	r3, #0
 8004904:	d008      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004906:	4b4e      	ldr	r3, [pc, #312]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	494b      	ldr	r1, [pc, #300]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004914:	4313      	orrs	r3, r2
 8004916:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0310 	and.w	r3, r3, #16
 8004920:	2b00      	cmp	r3, #0
 8004922:	d008      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004924:	4b46      	ldr	r3, [pc, #280]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004928:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	4943      	ldr	r1, [pc, #268]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004932:	4313      	orrs	r3, r2
 8004934:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800493e:	2b00      	cmp	r3, #0
 8004940:	d008      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004942:	4b3f      	ldr	r3, [pc, #252]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494e:	493c      	ldr	r1, [pc, #240]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004950:	4313      	orrs	r3, r2
 8004952:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800495c:	2b00      	cmp	r3, #0
 800495e:	d008      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004960:	4b37      	ldr	r3, [pc, #220]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004964:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496c:	4934      	ldr	r1, [pc, #208]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800496e:	4313      	orrs	r3, r2
 8004970:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497a:	2b00      	cmp	r3, #0
 800497c:	d008      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800497e:	4b30      	ldr	r3, [pc, #192]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004982:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498a:	492d      	ldr	r1, [pc, #180]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800498c:	4313      	orrs	r3, r2
 800498e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d008      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800499c:	4b28      	ldr	r3, [pc, #160]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800499e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a8:	4925      	ldr	r1, [pc, #148]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d008      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80049ba:	4b21      	ldr	r3, [pc, #132]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049be:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	491e      	ldr	r1, [pc, #120]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d008      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80049d8:	4b19      	ldr	r3, [pc, #100]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049dc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e4:	4916      	ldr	r1, [pc, #88]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d008      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80049f6:	4b12      	ldr	r3, [pc, #72]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a02:	490f      	ldr	r1, [pc, #60]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d008      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004a14:	4b0a      	ldr	r3, [pc, #40]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a18:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a20:	4907      	ldr	r1, [pc, #28]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00c      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004a32:	4b03      	ldr	r3, [pc, #12]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a36:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	e002      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004a3e:	bf00      	nop
 8004a40:	40021000 	.word	0x40021000
 8004a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a46:	4913      	ldr	r1, [pc, #76]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d008      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004a58:	4b0e      	ldr	r3, [pc, #56]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a64:	490b      	ldr	r1, [pc, #44]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d008      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004a76:	4b07      	ldr	r3, [pc, #28]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a82:	4904      	ldr	r1, [pc, #16]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3748      	adds	r7, #72	; 0x48
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	40021000 	.word	0x40021000

08004a98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e049      	b.n	8004b3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d106      	bne.n	8004ac4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7fc fa7c 	bl	8000fbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	4610      	mov	r0, r2
 8004ad8:	f000 fab6 	bl	8005048 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
	...

08004b48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d001      	beq.n	8004b60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e04f      	b.n	8004c00 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68da      	ldr	r2, [r3, #12]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f042 0201 	orr.w	r2, r2, #1
 8004b76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a23      	ldr	r2, [pc, #140]	; (8004c0c <HAL_TIM_Base_Start_IT+0xc4>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d01d      	beq.n	8004bbe <HAL_TIM_Base_Start_IT+0x76>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b8a:	d018      	beq.n	8004bbe <HAL_TIM_Base_Start_IT+0x76>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a1f      	ldr	r2, [pc, #124]	; (8004c10 <HAL_TIM_Base_Start_IT+0xc8>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d013      	beq.n	8004bbe <HAL_TIM_Base_Start_IT+0x76>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a1e      	ldr	r2, [pc, #120]	; (8004c14 <HAL_TIM_Base_Start_IT+0xcc>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d00e      	beq.n	8004bbe <HAL_TIM_Base_Start_IT+0x76>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a1c      	ldr	r2, [pc, #112]	; (8004c18 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d009      	beq.n	8004bbe <HAL_TIM_Base_Start_IT+0x76>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a1b      	ldr	r2, [pc, #108]	; (8004c1c <HAL_TIM_Base_Start_IT+0xd4>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d004      	beq.n	8004bbe <HAL_TIM_Base_Start_IT+0x76>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a19      	ldr	r2, [pc, #100]	; (8004c20 <HAL_TIM_Base_Start_IT+0xd8>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d115      	bne.n	8004bea <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	4b17      	ldr	r3, [pc, #92]	; (8004c24 <HAL_TIM_Base_Start_IT+0xdc>)
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2b06      	cmp	r3, #6
 8004bce:	d015      	beq.n	8004bfc <HAL_TIM_Base_Start_IT+0xb4>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bd6:	d011      	beq.n	8004bfc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f042 0201 	orr.w	r2, r2, #1
 8004be6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004be8:	e008      	b.n	8004bfc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f042 0201 	orr.w	r2, r2, #1
 8004bf8:	601a      	str	r2, [r3, #0]
 8004bfa:	e000      	b.n	8004bfe <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bfc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	40012c00 	.word	0x40012c00
 8004c10:	40000400 	.word	0x40000400
 8004c14:	40000800 	.word	0x40000800
 8004c18:	40013400 	.word	0x40013400
 8004c1c:	40014000 	.word	0x40014000
 8004c20:	40015000 	.word	0x40015000
 8004c24:	00010007 	.word	0x00010007

08004c28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d122      	bne.n	8004c84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d11b      	bne.n	8004c84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f06f 0202 	mvn.w	r2, #2
 8004c54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	f003 0303 	and.w	r3, r3, #3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f9ce 	bl	800500c <HAL_TIM_IC_CaptureCallback>
 8004c70:	e005      	b.n	8004c7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f9c0 	bl	8004ff8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 f9d1 	bl	8005020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	f003 0304 	and.w	r3, r3, #4
 8004c8e:	2b04      	cmp	r3, #4
 8004c90:	d122      	bne.n	8004cd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b04      	cmp	r3, #4
 8004c9e:	d11b      	bne.n	8004cd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f06f 0204 	mvn.w	r2, #4
 8004ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2202      	movs	r2, #2
 8004cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f9a4 	bl	800500c <HAL_TIM_IC_CaptureCallback>
 8004cc4:	e005      	b.n	8004cd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f996 	bl	8004ff8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f9a7 	bl	8005020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	f003 0308 	and.w	r3, r3, #8
 8004ce2:	2b08      	cmp	r3, #8
 8004ce4:	d122      	bne.n	8004d2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	f003 0308 	and.w	r3, r3, #8
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d11b      	bne.n	8004d2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f06f 0208 	mvn.w	r2, #8
 8004cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2204      	movs	r2, #4
 8004d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	f003 0303 	and.w	r3, r3, #3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f97a 	bl	800500c <HAL_TIM_IC_CaptureCallback>
 8004d18:	e005      	b.n	8004d26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f96c 	bl	8004ff8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f97d 	bl	8005020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	f003 0310 	and.w	r3, r3, #16
 8004d36:	2b10      	cmp	r3, #16
 8004d38:	d122      	bne.n	8004d80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	f003 0310 	and.w	r3, r3, #16
 8004d44:	2b10      	cmp	r3, #16
 8004d46:	d11b      	bne.n	8004d80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f06f 0210 	mvn.w	r2, #16
 8004d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2208      	movs	r2, #8
 8004d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d003      	beq.n	8004d6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f950 	bl	800500c <HAL_TIM_IC_CaptureCallback>
 8004d6c:	e005      	b.n	8004d7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f942 	bl	8004ff8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 f953 	bl	8005020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d10e      	bne.n	8004dac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d107      	bne.n	8004dac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f06f 0201 	mvn.w	r2, #1
 8004da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f7fc f846 	bl	8000e38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db6:	2b80      	cmp	r3, #128	; 0x80
 8004db8:	d10e      	bne.n	8004dd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc4:	2b80      	cmp	r3, #128	; 0x80
 8004dc6:	d107      	bne.n	8004dd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 fb06 	bl	80053e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004de6:	d10e      	bne.n	8004e06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df2:	2b80      	cmp	r3, #128	; 0x80
 8004df4:	d107      	bne.n	8004e06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 faf9 	bl	80053f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e10:	2b40      	cmp	r3, #64	; 0x40
 8004e12:	d10e      	bne.n	8004e32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e1e:	2b40      	cmp	r3, #64	; 0x40
 8004e20:	d107      	bne.n	8004e32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 f901 	bl	8005034 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	f003 0320 	and.w	r3, r3, #32
 8004e3c:	2b20      	cmp	r3, #32
 8004e3e:	d10e      	bne.n	8004e5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	f003 0320 	and.w	r3, r3, #32
 8004e4a:	2b20      	cmp	r3, #32
 8004e4c:	d107      	bne.n	8004e5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f06f 0220 	mvn.w	r2, #32
 8004e56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 fab9 	bl	80053d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e5e:	bf00      	nop
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b084      	sub	sp, #16
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
 8004e6e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e70:	2300      	movs	r3, #0
 8004e72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d101      	bne.n	8004e82 <HAL_TIM_ConfigClockSource+0x1c>
 8004e7e:	2302      	movs	r3, #2
 8004e80:	e0b6      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x18a>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2202      	movs	r2, #2
 8004e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ea0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ea4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004eac:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ebe:	d03e      	beq.n	8004f3e <HAL_TIM_ConfigClockSource+0xd8>
 8004ec0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ec4:	f200 8087 	bhi.w	8004fd6 <HAL_TIM_ConfigClockSource+0x170>
 8004ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ecc:	f000 8086 	beq.w	8004fdc <HAL_TIM_ConfigClockSource+0x176>
 8004ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed4:	d87f      	bhi.n	8004fd6 <HAL_TIM_ConfigClockSource+0x170>
 8004ed6:	2b70      	cmp	r3, #112	; 0x70
 8004ed8:	d01a      	beq.n	8004f10 <HAL_TIM_ConfigClockSource+0xaa>
 8004eda:	2b70      	cmp	r3, #112	; 0x70
 8004edc:	d87b      	bhi.n	8004fd6 <HAL_TIM_ConfigClockSource+0x170>
 8004ede:	2b60      	cmp	r3, #96	; 0x60
 8004ee0:	d050      	beq.n	8004f84 <HAL_TIM_ConfigClockSource+0x11e>
 8004ee2:	2b60      	cmp	r3, #96	; 0x60
 8004ee4:	d877      	bhi.n	8004fd6 <HAL_TIM_ConfigClockSource+0x170>
 8004ee6:	2b50      	cmp	r3, #80	; 0x50
 8004ee8:	d03c      	beq.n	8004f64 <HAL_TIM_ConfigClockSource+0xfe>
 8004eea:	2b50      	cmp	r3, #80	; 0x50
 8004eec:	d873      	bhi.n	8004fd6 <HAL_TIM_ConfigClockSource+0x170>
 8004eee:	2b40      	cmp	r3, #64	; 0x40
 8004ef0:	d058      	beq.n	8004fa4 <HAL_TIM_ConfigClockSource+0x13e>
 8004ef2:	2b40      	cmp	r3, #64	; 0x40
 8004ef4:	d86f      	bhi.n	8004fd6 <HAL_TIM_ConfigClockSource+0x170>
 8004ef6:	2b30      	cmp	r3, #48	; 0x30
 8004ef8:	d064      	beq.n	8004fc4 <HAL_TIM_ConfigClockSource+0x15e>
 8004efa:	2b30      	cmp	r3, #48	; 0x30
 8004efc:	d86b      	bhi.n	8004fd6 <HAL_TIM_ConfigClockSource+0x170>
 8004efe:	2b20      	cmp	r3, #32
 8004f00:	d060      	beq.n	8004fc4 <HAL_TIM_ConfigClockSource+0x15e>
 8004f02:	2b20      	cmp	r3, #32
 8004f04:	d867      	bhi.n	8004fd6 <HAL_TIM_ConfigClockSource+0x170>
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d05c      	beq.n	8004fc4 <HAL_TIM_ConfigClockSource+0x15e>
 8004f0a:	2b10      	cmp	r3, #16
 8004f0c:	d05a      	beq.n	8004fc4 <HAL_TIM_ConfigClockSource+0x15e>
 8004f0e:	e062      	b.n	8004fd6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f20:	f000 f9aa 	bl	8005278 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f32:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	609a      	str	r2, [r3, #8]
      break;
 8004f3c:	e04f      	b.n	8004fde <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f4e:	f000 f993 	bl	8005278 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f60:	609a      	str	r2, [r3, #8]
      break;
 8004f62:	e03c      	b.n	8004fde <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f70:	461a      	mov	r2, r3
 8004f72:	f000 f907 	bl	8005184 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2150      	movs	r1, #80	; 0x50
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f000 f960 	bl	8005242 <TIM_ITRx_SetConfig>
      break;
 8004f82:	e02c      	b.n	8004fde <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f90:	461a      	mov	r2, r3
 8004f92:	f000 f926 	bl	80051e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2160      	movs	r1, #96	; 0x60
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f000 f950 	bl	8005242 <TIM_ITRx_SetConfig>
      break;
 8004fa2:	e01c      	b.n	8004fde <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	f000 f8e7 	bl	8005184 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2140      	movs	r1, #64	; 0x40
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 f940 	bl	8005242 <TIM_ITRx_SetConfig>
      break;
 8004fc2:	e00c      	b.n	8004fde <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4619      	mov	r1, r3
 8004fce:	4610      	mov	r0, r2
 8004fd0:	f000 f937 	bl	8005242 <TIM_ITRx_SetConfig>
      break;
 8004fd4:	e003      	b.n	8004fde <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	73fb      	strb	r3, [r7, #15]
      break;
 8004fda:	e000      	b.n	8004fde <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004fdc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a42      	ldr	r2, [pc, #264]	; (8005164 <TIM_Base_SetConfig+0x11c>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d013      	beq.n	8005088 <TIM_Base_SetConfig+0x40>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005066:	d00f      	beq.n	8005088 <TIM_Base_SetConfig+0x40>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a3f      	ldr	r2, [pc, #252]	; (8005168 <TIM_Base_SetConfig+0x120>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d00b      	beq.n	8005088 <TIM_Base_SetConfig+0x40>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a3e      	ldr	r2, [pc, #248]	; (800516c <TIM_Base_SetConfig+0x124>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d007      	beq.n	8005088 <TIM_Base_SetConfig+0x40>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a3d      	ldr	r2, [pc, #244]	; (8005170 <TIM_Base_SetConfig+0x128>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d003      	beq.n	8005088 <TIM_Base_SetConfig+0x40>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a3c      	ldr	r2, [pc, #240]	; (8005174 <TIM_Base_SetConfig+0x12c>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d108      	bne.n	800509a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	4313      	orrs	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a31      	ldr	r2, [pc, #196]	; (8005164 <TIM_Base_SetConfig+0x11c>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d01f      	beq.n	80050e2 <TIM_Base_SetConfig+0x9a>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a8:	d01b      	beq.n	80050e2 <TIM_Base_SetConfig+0x9a>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a2e      	ldr	r2, [pc, #184]	; (8005168 <TIM_Base_SetConfig+0x120>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d017      	beq.n	80050e2 <TIM_Base_SetConfig+0x9a>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a2d      	ldr	r2, [pc, #180]	; (800516c <TIM_Base_SetConfig+0x124>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d013      	beq.n	80050e2 <TIM_Base_SetConfig+0x9a>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a2c      	ldr	r2, [pc, #176]	; (8005170 <TIM_Base_SetConfig+0x128>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d00f      	beq.n	80050e2 <TIM_Base_SetConfig+0x9a>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a2c      	ldr	r2, [pc, #176]	; (8005178 <TIM_Base_SetConfig+0x130>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d00b      	beq.n	80050e2 <TIM_Base_SetConfig+0x9a>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a2b      	ldr	r2, [pc, #172]	; (800517c <TIM_Base_SetConfig+0x134>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d007      	beq.n	80050e2 <TIM_Base_SetConfig+0x9a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a2a      	ldr	r2, [pc, #168]	; (8005180 <TIM_Base_SetConfig+0x138>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d003      	beq.n	80050e2 <TIM_Base_SetConfig+0x9a>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a25      	ldr	r2, [pc, #148]	; (8005174 <TIM_Base_SetConfig+0x12c>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d108      	bne.n	80050f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	4313      	orrs	r3, r2
 8005100:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	689a      	ldr	r2, [r3, #8]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a12      	ldr	r2, [pc, #72]	; (8005164 <TIM_Base_SetConfig+0x11c>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d013      	beq.n	8005148 <TIM_Base_SetConfig+0x100>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a13      	ldr	r2, [pc, #76]	; (8005170 <TIM_Base_SetConfig+0x128>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d00f      	beq.n	8005148 <TIM_Base_SetConfig+0x100>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a13      	ldr	r2, [pc, #76]	; (8005178 <TIM_Base_SetConfig+0x130>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d00b      	beq.n	8005148 <TIM_Base_SetConfig+0x100>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a12      	ldr	r2, [pc, #72]	; (800517c <TIM_Base_SetConfig+0x134>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d007      	beq.n	8005148 <TIM_Base_SetConfig+0x100>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a11      	ldr	r2, [pc, #68]	; (8005180 <TIM_Base_SetConfig+0x138>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d003      	beq.n	8005148 <TIM_Base_SetConfig+0x100>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a0c      	ldr	r2, [pc, #48]	; (8005174 <TIM_Base_SetConfig+0x12c>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d103      	bne.n	8005150 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	691a      	ldr	r2, [r3, #16]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	615a      	str	r2, [r3, #20]
}
 8005156:	bf00      	nop
 8005158:	3714      	adds	r7, #20
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	40012c00 	.word	0x40012c00
 8005168:	40000400 	.word	0x40000400
 800516c:	40000800 	.word	0x40000800
 8005170:	40013400 	.word	0x40013400
 8005174:	40015000 	.word	0x40015000
 8005178:	40014000 	.word	0x40014000
 800517c:	40014400 	.word	0x40014400
 8005180:	40014800 	.word	0x40014800

08005184 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005184:	b480      	push	{r7}
 8005186:	b087      	sub	sp, #28
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6a1b      	ldr	r3, [r3, #32]
 8005194:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	f023 0201 	bic.w	r2, r3, #1
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	011b      	lsls	r3, r3, #4
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f023 030a 	bic.w	r3, r3, #10
 80051c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	621a      	str	r2, [r3, #32]
}
 80051d6:	bf00      	nop
 80051d8:	371c      	adds	r7, #28
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b087      	sub	sp, #28
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	60f8      	str	r0, [r7, #12]
 80051ea:	60b9      	str	r1, [r7, #8]
 80051ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	f023 0210 	bic.w	r2, r3, #16
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800520c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	031b      	lsls	r3, r3, #12
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	4313      	orrs	r3, r2
 8005216:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800521e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	011b      	lsls	r3, r3, #4
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	4313      	orrs	r3, r2
 8005228:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	621a      	str	r2, [r3, #32]
}
 8005236:	bf00      	nop
 8005238:	371c      	adds	r7, #28
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005242:	b480      	push	{r7}
 8005244:	b085      	sub	sp, #20
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
 800524a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005258:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800525a:	683a      	ldr	r2, [r7, #0]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	4313      	orrs	r3, r2
 8005260:	f043 0307 	orr.w	r3, r3, #7
 8005264:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	609a      	str	r2, [r3, #8]
}
 800526c:	bf00      	nop
 800526e:	3714      	adds	r7, #20
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005278:	b480      	push	{r7}
 800527a:	b087      	sub	sp, #28
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
 8005284:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005292:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	021a      	lsls	r2, r3, #8
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	431a      	orrs	r2, r3
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	4313      	orrs	r3, r2
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	609a      	str	r2, [r3, #8]
}
 80052ac:	bf00      	nop
 80052ae:	371c      	adds	r7, #28
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d101      	bne.n	80052d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052cc:	2302      	movs	r3, #2
 80052ce:	e06d      	b.n	80053ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a30      	ldr	r2, [pc, #192]	; (80053b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d009      	beq.n	800530e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a2f      	ldr	r2, [pc, #188]	; (80053bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d004      	beq.n	800530e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a2d      	ldr	r2, [pc, #180]	; (80053c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d108      	bne.n	8005320 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005314:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	4313      	orrs	r3, r2
 800531e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005326:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	4313      	orrs	r3, r2
 8005330:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a1e      	ldr	r2, [pc, #120]	; (80053b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d01d      	beq.n	8005380 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800534c:	d018      	beq.n	8005380 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a1c      	ldr	r2, [pc, #112]	; (80053c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d013      	beq.n	8005380 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a1a      	ldr	r2, [pc, #104]	; (80053c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d00e      	beq.n	8005380 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a15      	ldr	r2, [pc, #84]	; (80053bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d009      	beq.n	8005380 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a16      	ldr	r2, [pc, #88]	; (80053cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d004      	beq.n	8005380 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a11      	ldr	r2, [pc, #68]	; (80053c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d10c      	bne.n	800539a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005386:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	4313      	orrs	r3, r2
 8005390:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	40012c00 	.word	0x40012c00
 80053bc:	40013400 	.word	0x40013400
 80053c0:	40015000 	.word	0x40015000
 80053c4:	40000400 	.word	0x40000400
 80053c8:	40000800 	.word	0x40000800
 80053cc:	40014000 	.word	0x40014000

080053d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053d8:	bf00      	nop
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e040      	b.n	80054a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005422:	2b00      	cmp	r3, #0
 8005424:	d106      	bne.n	8005434 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7fb fde4 	bl	8000ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2224      	movs	r2, #36	; 0x24
 8005438:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 0201 	bic.w	r2, r2, #1
 8005448:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f980 	bl	8005750 <UART_SetConfig>
 8005450:	4603      	mov	r3, r0
 8005452:	2b01      	cmp	r3, #1
 8005454:	d101      	bne.n	800545a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e022      	b.n	80054a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	2b00      	cmp	r3, #0
 8005460:	d002      	beq.n	8005468 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 fb48 	bl	8005af8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685a      	ldr	r2, [r3, #4]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005476:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689a      	ldr	r2, [r3, #8]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005486:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f042 0201 	orr.w	r2, r2, #1
 8005496:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 fbcf 	bl	8005c3c <UART_CheckIdleState>
 800549e:	4603      	mov	r3, r0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3708      	adds	r7, #8
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b08a      	sub	sp, #40	; 0x28
 80054ac:	af02      	add	r7, sp, #8
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	603b      	str	r3, [r7, #0]
 80054b4:	4613      	mov	r3, r2
 80054b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054bc:	2b20      	cmp	r3, #32
 80054be:	d178      	bne.n	80055b2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d002      	beq.n	80054cc <HAL_UART_Transmit+0x24>
 80054c6:	88fb      	ldrh	r3, [r7, #6]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d101      	bne.n	80054d0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e071      	b.n	80055b4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2221      	movs	r2, #33	; 0x21
 80054dc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054de:	f7fb ff4d 	bl	800137c <HAL_GetTick>
 80054e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	88fa      	ldrh	r2, [r7, #6]
 80054e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	88fa      	ldrh	r2, [r7, #6]
 80054f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054fc:	d108      	bne.n	8005510 <HAL_UART_Transmit+0x68>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d104      	bne.n	8005510 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005506:	2300      	movs	r3, #0
 8005508:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	61bb      	str	r3, [r7, #24]
 800550e:	e003      	b.n	8005518 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005514:	2300      	movs	r3, #0
 8005516:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005518:	e030      	b.n	800557c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	2200      	movs	r2, #0
 8005522:	2180      	movs	r1, #128	; 0x80
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f000 fc31 	bl	8005d8c <UART_WaitOnFlagUntilTimeout>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d004      	beq.n	800553a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2220      	movs	r2, #32
 8005534:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e03c      	b.n	80055b4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10b      	bne.n	8005558 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	881a      	ldrh	r2, [r3, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800554c:	b292      	uxth	r2, r2
 800554e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	3302      	adds	r3, #2
 8005554:	61bb      	str	r3, [r7, #24]
 8005556:	e008      	b.n	800556a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	781a      	ldrb	r2, [r3, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	b292      	uxth	r2, r2
 8005562:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	3301      	adds	r3, #1
 8005568:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005570:	b29b      	uxth	r3, r3
 8005572:	3b01      	subs	r3, #1
 8005574:	b29a      	uxth	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005582:	b29b      	uxth	r3, r3
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1c8      	bne.n	800551a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	2200      	movs	r2, #0
 8005590:	2140      	movs	r1, #64	; 0x40
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f000 fbfa 	bl	8005d8c <UART_WaitOnFlagUntilTimeout>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d004      	beq.n	80055a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2220      	movs	r2, #32
 80055a2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e005      	b.n	80055b4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2220      	movs	r2, #32
 80055ac:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80055ae:	2300      	movs	r3, #0
 80055b0:	e000      	b.n	80055b4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80055b2:	2302      	movs	r3, #2
  }
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3720      	adds	r7, #32
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b08a      	sub	sp, #40	; 0x28
 80055c0:	af02      	add	r7, sp, #8
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	603b      	str	r3, [r7, #0]
 80055c8:	4613      	mov	r3, r2
 80055ca:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055d2:	2b20      	cmp	r3, #32
 80055d4:	f040 80b6 	bne.w	8005744 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d002      	beq.n	80055e4 <HAL_UART_Receive+0x28>
 80055de:	88fb      	ldrh	r3, [r7, #6]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d101      	bne.n	80055e8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e0ae      	b.n	8005746 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2222      	movs	r2, #34	; 0x22
 80055f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055fe:	f7fb febd 	bl	800137c <HAL_GetTick>
 8005602:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	88fa      	ldrh	r2, [r7, #6]
 8005608:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	88fa      	ldrh	r2, [r7, #6]
 8005610:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800561c:	d10e      	bne.n	800563c <HAL_UART_Receive+0x80>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d105      	bne.n	8005632 <HAL_UART_Receive+0x76>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f240 12ff 	movw	r2, #511	; 0x1ff
 800562c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005630:	e02d      	b.n	800568e <HAL_UART_Receive+0xd2>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	22ff      	movs	r2, #255	; 0xff
 8005636:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800563a:	e028      	b.n	800568e <HAL_UART_Receive+0xd2>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10d      	bne.n	8005660 <HAL_UART_Receive+0xa4>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d104      	bne.n	8005656 <HAL_UART_Receive+0x9a>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	22ff      	movs	r2, #255	; 0xff
 8005650:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005654:	e01b      	b.n	800568e <HAL_UART_Receive+0xd2>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	227f      	movs	r2, #127	; 0x7f
 800565a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800565e:	e016      	b.n	800568e <HAL_UART_Receive+0xd2>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005668:	d10d      	bne.n	8005686 <HAL_UART_Receive+0xca>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d104      	bne.n	800567c <HAL_UART_Receive+0xc0>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	227f      	movs	r2, #127	; 0x7f
 8005676:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800567a:	e008      	b.n	800568e <HAL_UART_Receive+0xd2>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	223f      	movs	r2, #63	; 0x3f
 8005680:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005684:	e003      	b.n	800568e <HAL_UART_Receive+0xd2>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005694:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800569e:	d108      	bne.n	80056b2 <HAL_UART_Receive+0xf6>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d104      	bne.n	80056b2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80056a8:	2300      	movs	r3, #0
 80056aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	61bb      	str	r3, [r7, #24]
 80056b0:	e003      	b.n	80056ba <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056b6:	2300      	movs	r3, #0
 80056b8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80056ba:	e037      	b.n	800572c <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	2200      	movs	r2, #0
 80056c4:	2120      	movs	r1, #32
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f000 fb60 	bl	8005d8c <UART_WaitOnFlagUntilTimeout>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d005      	beq.n	80056de <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2220      	movs	r2, #32
 80056d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e033      	b.n	8005746 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10c      	bne.n	80056fe <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	8a7b      	ldrh	r3, [r7, #18]
 80056ee:	4013      	ands	r3, r2
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	3302      	adds	r3, #2
 80056fa:	61bb      	str	r3, [r7, #24]
 80056fc:	e00d      	b.n	800571a <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005704:	b29b      	uxth	r3, r3
 8005706:	b2da      	uxtb	r2, r3
 8005708:	8a7b      	ldrh	r3, [r7, #18]
 800570a:	b2db      	uxtb	r3, r3
 800570c:	4013      	ands	r3, r2
 800570e:	b2da      	uxtb	r2, r3
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	3301      	adds	r3, #1
 8005718:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005720:	b29b      	uxth	r3, r3
 8005722:	3b01      	subs	r3, #1
 8005724:	b29a      	uxth	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005732:	b29b      	uxth	r3, r3
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1c1      	bne.n	80056bc <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2220      	movs	r2, #32
 800573c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005740:	2300      	movs	r3, #0
 8005742:	e000      	b.n	8005746 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8005744:	2302      	movs	r3, #2
  }
}
 8005746:	4618      	mov	r0, r3
 8005748:	3720      	adds	r7, #32
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
	...

08005750 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b088      	sub	sp, #32
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005758:	2300      	movs	r3, #0
 800575a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689a      	ldr	r2, [r3, #8]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	431a      	orrs	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	431a      	orrs	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	69db      	ldr	r3, [r3, #28]
 8005770:	4313      	orrs	r3, r2
 8005772:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	4b92      	ldr	r3, [pc, #584]	; (80059c4 <UART_SetConfig+0x274>)
 800577c:	4013      	ands	r3, r2
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	6812      	ldr	r2, [r2, #0]
 8005782:	6979      	ldr	r1, [r7, #20]
 8005784:	430b      	orrs	r3, r1
 8005786:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68da      	ldr	r2, [r3, #12]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	430a      	orrs	r2, r1
 800579c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a1b      	ldr	r3, [r3, #32]
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	430a      	orrs	r2, r1
 80057c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a80      	ldr	r2, [pc, #512]	; (80059c8 <UART_SetConfig+0x278>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d120      	bne.n	800580e <UART_SetConfig+0xbe>
 80057cc:	4b7f      	ldr	r3, [pc, #508]	; (80059cc <UART_SetConfig+0x27c>)
 80057ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d0:	f003 0303 	and.w	r3, r3, #3
 80057d4:	2b03      	cmp	r3, #3
 80057d6:	d817      	bhi.n	8005808 <UART_SetConfig+0xb8>
 80057d8:	a201      	add	r2, pc, #4	; (adr r2, 80057e0 <UART_SetConfig+0x90>)
 80057da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057de:	bf00      	nop
 80057e0:	080057f1 	.word	0x080057f1
 80057e4:	080057fd 	.word	0x080057fd
 80057e8:	08005803 	.word	0x08005803
 80057ec:	080057f7 	.word	0x080057f7
 80057f0:	2301      	movs	r3, #1
 80057f2:	77fb      	strb	r3, [r7, #31]
 80057f4:	e0b5      	b.n	8005962 <UART_SetConfig+0x212>
 80057f6:	2302      	movs	r3, #2
 80057f8:	77fb      	strb	r3, [r7, #31]
 80057fa:	e0b2      	b.n	8005962 <UART_SetConfig+0x212>
 80057fc:	2304      	movs	r3, #4
 80057fe:	77fb      	strb	r3, [r7, #31]
 8005800:	e0af      	b.n	8005962 <UART_SetConfig+0x212>
 8005802:	2308      	movs	r3, #8
 8005804:	77fb      	strb	r3, [r7, #31]
 8005806:	e0ac      	b.n	8005962 <UART_SetConfig+0x212>
 8005808:	2310      	movs	r3, #16
 800580a:	77fb      	strb	r3, [r7, #31]
 800580c:	e0a9      	b.n	8005962 <UART_SetConfig+0x212>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a6f      	ldr	r2, [pc, #444]	; (80059d0 <UART_SetConfig+0x280>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d124      	bne.n	8005862 <UART_SetConfig+0x112>
 8005818:	4b6c      	ldr	r3, [pc, #432]	; (80059cc <UART_SetConfig+0x27c>)
 800581a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005820:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005824:	d011      	beq.n	800584a <UART_SetConfig+0xfa>
 8005826:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800582a:	d817      	bhi.n	800585c <UART_SetConfig+0x10c>
 800582c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005830:	d011      	beq.n	8005856 <UART_SetConfig+0x106>
 8005832:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005836:	d811      	bhi.n	800585c <UART_SetConfig+0x10c>
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <UART_SetConfig+0xf4>
 800583c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005840:	d006      	beq.n	8005850 <UART_SetConfig+0x100>
 8005842:	e00b      	b.n	800585c <UART_SetConfig+0x10c>
 8005844:	2300      	movs	r3, #0
 8005846:	77fb      	strb	r3, [r7, #31]
 8005848:	e08b      	b.n	8005962 <UART_SetConfig+0x212>
 800584a:	2302      	movs	r3, #2
 800584c:	77fb      	strb	r3, [r7, #31]
 800584e:	e088      	b.n	8005962 <UART_SetConfig+0x212>
 8005850:	2304      	movs	r3, #4
 8005852:	77fb      	strb	r3, [r7, #31]
 8005854:	e085      	b.n	8005962 <UART_SetConfig+0x212>
 8005856:	2308      	movs	r3, #8
 8005858:	77fb      	strb	r3, [r7, #31]
 800585a:	e082      	b.n	8005962 <UART_SetConfig+0x212>
 800585c:	2310      	movs	r3, #16
 800585e:	77fb      	strb	r3, [r7, #31]
 8005860:	e07f      	b.n	8005962 <UART_SetConfig+0x212>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a5b      	ldr	r2, [pc, #364]	; (80059d4 <UART_SetConfig+0x284>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d124      	bne.n	80058b6 <UART_SetConfig+0x166>
 800586c:	4b57      	ldr	r3, [pc, #348]	; (80059cc <UART_SetConfig+0x27c>)
 800586e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005870:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005874:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005878:	d011      	beq.n	800589e <UART_SetConfig+0x14e>
 800587a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800587e:	d817      	bhi.n	80058b0 <UART_SetConfig+0x160>
 8005880:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005884:	d011      	beq.n	80058aa <UART_SetConfig+0x15a>
 8005886:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800588a:	d811      	bhi.n	80058b0 <UART_SetConfig+0x160>
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <UART_SetConfig+0x148>
 8005890:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005894:	d006      	beq.n	80058a4 <UART_SetConfig+0x154>
 8005896:	e00b      	b.n	80058b0 <UART_SetConfig+0x160>
 8005898:	2300      	movs	r3, #0
 800589a:	77fb      	strb	r3, [r7, #31]
 800589c:	e061      	b.n	8005962 <UART_SetConfig+0x212>
 800589e:	2302      	movs	r3, #2
 80058a0:	77fb      	strb	r3, [r7, #31]
 80058a2:	e05e      	b.n	8005962 <UART_SetConfig+0x212>
 80058a4:	2304      	movs	r3, #4
 80058a6:	77fb      	strb	r3, [r7, #31]
 80058a8:	e05b      	b.n	8005962 <UART_SetConfig+0x212>
 80058aa:	2308      	movs	r3, #8
 80058ac:	77fb      	strb	r3, [r7, #31]
 80058ae:	e058      	b.n	8005962 <UART_SetConfig+0x212>
 80058b0:	2310      	movs	r3, #16
 80058b2:	77fb      	strb	r3, [r7, #31]
 80058b4:	e055      	b.n	8005962 <UART_SetConfig+0x212>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a47      	ldr	r2, [pc, #284]	; (80059d8 <UART_SetConfig+0x288>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d124      	bne.n	800590a <UART_SetConfig+0x1ba>
 80058c0:	4b42      	ldr	r3, [pc, #264]	; (80059cc <UART_SetConfig+0x27c>)
 80058c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80058c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058cc:	d011      	beq.n	80058f2 <UART_SetConfig+0x1a2>
 80058ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058d2:	d817      	bhi.n	8005904 <UART_SetConfig+0x1b4>
 80058d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058d8:	d011      	beq.n	80058fe <UART_SetConfig+0x1ae>
 80058da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058de:	d811      	bhi.n	8005904 <UART_SetConfig+0x1b4>
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d003      	beq.n	80058ec <UART_SetConfig+0x19c>
 80058e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058e8:	d006      	beq.n	80058f8 <UART_SetConfig+0x1a8>
 80058ea:	e00b      	b.n	8005904 <UART_SetConfig+0x1b4>
 80058ec:	2300      	movs	r3, #0
 80058ee:	77fb      	strb	r3, [r7, #31]
 80058f0:	e037      	b.n	8005962 <UART_SetConfig+0x212>
 80058f2:	2302      	movs	r3, #2
 80058f4:	77fb      	strb	r3, [r7, #31]
 80058f6:	e034      	b.n	8005962 <UART_SetConfig+0x212>
 80058f8:	2304      	movs	r3, #4
 80058fa:	77fb      	strb	r3, [r7, #31]
 80058fc:	e031      	b.n	8005962 <UART_SetConfig+0x212>
 80058fe:	2308      	movs	r3, #8
 8005900:	77fb      	strb	r3, [r7, #31]
 8005902:	e02e      	b.n	8005962 <UART_SetConfig+0x212>
 8005904:	2310      	movs	r3, #16
 8005906:	77fb      	strb	r3, [r7, #31]
 8005908:	e02b      	b.n	8005962 <UART_SetConfig+0x212>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a33      	ldr	r2, [pc, #204]	; (80059dc <UART_SetConfig+0x28c>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d124      	bne.n	800595e <UART_SetConfig+0x20e>
 8005914:	4b2d      	ldr	r3, [pc, #180]	; (80059cc <UART_SetConfig+0x27c>)
 8005916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005918:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800591c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005920:	d011      	beq.n	8005946 <UART_SetConfig+0x1f6>
 8005922:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005926:	d817      	bhi.n	8005958 <UART_SetConfig+0x208>
 8005928:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800592c:	d011      	beq.n	8005952 <UART_SetConfig+0x202>
 800592e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005932:	d811      	bhi.n	8005958 <UART_SetConfig+0x208>
 8005934:	2b00      	cmp	r3, #0
 8005936:	d003      	beq.n	8005940 <UART_SetConfig+0x1f0>
 8005938:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800593c:	d006      	beq.n	800594c <UART_SetConfig+0x1fc>
 800593e:	e00b      	b.n	8005958 <UART_SetConfig+0x208>
 8005940:	2300      	movs	r3, #0
 8005942:	77fb      	strb	r3, [r7, #31]
 8005944:	e00d      	b.n	8005962 <UART_SetConfig+0x212>
 8005946:	2302      	movs	r3, #2
 8005948:	77fb      	strb	r3, [r7, #31]
 800594a:	e00a      	b.n	8005962 <UART_SetConfig+0x212>
 800594c:	2304      	movs	r3, #4
 800594e:	77fb      	strb	r3, [r7, #31]
 8005950:	e007      	b.n	8005962 <UART_SetConfig+0x212>
 8005952:	2308      	movs	r3, #8
 8005954:	77fb      	strb	r3, [r7, #31]
 8005956:	e004      	b.n	8005962 <UART_SetConfig+0x212>
 8005958:	2310      	movs	r3, #16
 800595a:	77fb      	strb	r3, [r7, #31]
 800595c:	e001      	b.n	8005962 <UART_SetConfig+0x212>
 800595e:	2310      	movs	r3, #16
 8005960:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	69db      	ldr	r3, [r3, #28]
 8005966:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800596a:	d16b      	bne.n	8005a44 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800596c:	7ffb      	ldrb	r3, [r7, #31]
 800596e:	2b08      	cmp	r3, #8
 8005970:	d838      	bhi.n	80059e4 <UART_SetConfig+0x294>
 8005972:	a201      	add	r2, pc, #4	; (adr r2, 8005978 <UART_SetConfig+0x228>)
 8005974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005978:	0800599d 	.word	0x0800599d
 800597c:	080059a5 	.word	0x080059a5
 8005980:	080059ad 	.word	0x080059ad
 8005984:	080059e5 	.word	0x080059e5
 8005988:	080059b3 	.word	0x080059b3
 800598c:	080059e5 	.word	0x080059e5
 8005990:	080059e5 	.word	0x080059e5
 8005994:	080059e5 	.word	0x080059e5
 8005998:	080059bb 	.word	0x080059bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800599c:	f7fe fde8 	bl	8004570 <HAL_RCC_GetPCLK1Freq>
 80059a0:	61b8      	str	r0, [r7, #24]
        break;
 80059a2:	e024      	b.n	80059ee <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059a4:	f7fe fe06 	bl	80045b4 <HAL_RCC_GetPCLK2Freq>
 80059a8:	61b8      	str	r0, [r7, #24]
        break;
 80059aa:	e020      	b.n	80059ee <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059ac:	4b0c      	ldr	r3, [pc, #48]	; (80059e0 <UART_SetConfig+0x290>)
 80059ae:	61bb      	str	r3, [r7, #24]
        break;
 80059b0:	e01d      	b.n	80059ee <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059b2:	f7fe fd67 	bl	8004484 <HAL_RCC_GetSysClockFreq>
 80059b6:	61b8      	str	r0, [r7, #24]
        break;
 80059b8:	e019      	b.n	80059ee <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059be:	61bb      	str	r3, [r7, #24]
        break;
 80059c0:	e015      	b.n	80059ee <UART_SetConfig+0x29e>
 80059c2:	bf00      	nop
 80059c4:	efff69f3 	.word	0xefff69f3
 80059c8:	40013800 	.word	0x40013800
 80059cc:	40021000 	.word	0x40021000
 80059d0:	40004400 	.word	0x40004400
 80059d4:	40004800 	.word	0x40004800
 80059d8:	40004c00 	.word	0x40004c00
 80059dc:	40005000 	.word	0x40005000
 80059e0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80059e4:	2300      	movs	r3, #0
 80059e6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	77bb      	strb	r3, [r7, #30]
        break;
 80059ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d073      	beq.n	8005adc <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	005a      	lsls	r2, r3, #1
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	085b      	lsrs	r3, r3, #1
 80059fe:	441a      	add	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a08:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	2b0f      	cmp	r3, #15
 8005a0e:	d916      	bls.n	8005a3e <UART_SetConfig+0x2ee>
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a16:	d212      	bcs.n	8005a3e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	f023 030f 	bic.w	r3, r3, #15
 8005a20:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	085b      	lsrs	r3, r3, #1
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	f003 0307 	and.w	r3, r3, #7
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	89fb      	ldrh	r3, [r7, #14]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	89fa      	ldrh	r2, [r7, #14]
 8005a3a:	60da      	str	r2, [r3, #12]
 8005a3c:	e04e      	b.n	8005adc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	77bb      	strb	r3, [r7, #30]
 8005a42:	e04b      	b.n	8005adc <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a44:	7ffb      	ldrb	r3, [r7, #31]
 8005a46:	2b08      	cmp	r3, #8
 8005a48:	d827      	bhi.n	8005a9a <UART_SetConfig+0x34a>
 8005a4a:	a201      	add	r2, pc, #4	; (adr r2, 8005a50 <UART_SetConfig+0x300>)
 8005a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a50:	08005a75 	.word	0x08005a75
 8005a54:	08005a7d 	.word	0x08005a7d
 8005a58:	08005a85 	.word	0x08005a85
 8005a5c:	08005a9b 	.word	0x08005a9b
 8005a60:	08005a8b 	.word	0x08005a8b
 8005a64:	08005a9b 	.word	0x08005a9b
 8005a68:	08005a9b 	.word	0x08005a9b
 8005a6c:	08005a9b 	.word	0x08005a9b
 8005a70:	08005a93 	.word	0x08005a93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a74:	f7fe fd7c 	bl	8004570 <HAL_RCC_GetPCLK1Freq>
 8005a78:	61b8      	str	r0, [r7, #24]
        break;
 8005a7a:	e013      	b.n	8005aa4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a7c:	f7fe fd9a 	bl	80045b4 <HAL_RCC_GetPCLK2Freq>
 8005a80:	61b8      	str	r0, [r7, #24]
        break;
 8005a82:	e00f      	b.n	8005aa4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a84:	4b1b      	ldr	r3, [pc, #108]	; (8005af4 <UART_SetConfig+0x3a4>)
 8005a86:	61bb      	str	r3, [r7, #24]
        break;
 8005a88:	e00c      	b.n	8005aa4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a8a:	f7fe fcfb 	bl	8004484 <HAL_RCC_GetSysClockFreq>
 8005a8e:	61b8      	str	r0, [r7, #24]
        break;
 8005a90:	e008      	b.n	8005aa4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a96:	61bb      	str	r3, [r7, #24]
        break;
 8005a98:	e004      	b.n	8005aa4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	77bb      	strb	r3, [r7, #30]
        break;
 8005aa2:	bf00      	nop
    }

    if (pclk != 0U)
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d018      	beq.n	8005adc <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	085a      	lsrs	r2, r3, #1
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	441a      	add	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005abc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	2b0f      	cmp	r3, #15
 8005ac2:	d909      	bls.n	8005ad8 <UART_SetConfig+0x388>
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aca:	d205      	bcs.n	8005ad8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	60da      	str	r2, [r3, #12]
 8005ad6:	e001      	b.n	8005adc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005ae8:	7fbb      	ldrb	r3, [r7, #30]
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3720      	adds	r7, #32
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	007a1200 	.word	0x007a1200

08005af8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00a      	beq.n	8005b22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00a      	beq.n	8005b44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b48:	f003 0304 	and.w	r3, r3, #4
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00a      	beq.n	8005b66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6a:	f003 0308 	and.w	r3, r3, #8
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00a      	beq.n	8005b88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	430a      	orrs	r2, r1
 8005b86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8c:	f003 0310 	and.w	r3, r3, #16
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00a      	beq.n	8005baa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bae:	f003 0320 	and.w	r3, r3, #32
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00a      	beq.n	8005bcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d01a      	beq.n	8005c0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	430a      	orrs	r2, r1
 8005bec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bf6:	d10a      	bne.n	8005c0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00a      	beq.n	8005c30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	605a      	str	r2, [r3, #4]
  }
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b098      	sub	sp, #96	; 0x60
 8005c40:	af02      	add	r7, sp, #8
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c4c:	f7fb fb96 	bl	800137c <HAL_GetTick>
 8005c50:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0308 	and.w	r3, r3, #8
 8005c5c:	2b08      	cmp	r3, #8
 8005c5e:	d12e      	bne.n	8005cbe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f88c 	bl	8005d8c <UART_WaitOnFlagUntilTimeout>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d021      	beq.n	8005cbe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c82:	e853 3f00 	ldrex	r3, [r3]
 8005c86:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c8e:	653b      	str	r3, [r7, #80]	; 0x50
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	461a      	mov	r2, r3
 8005c96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c98:	647b      	str	r3, [r7, #68]	; 0x44
 8005c9a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ca0:	e841 2300 	strex	r3, r2, [r1]
 8005ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1e6      	bne.n	8005c7a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2220      	movs	r2, #32
 8005cb0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e062      	b.n	8005d84 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0304 	and.w	r3, r3, #4
 8005cc8:	2b04      	cmp	r3, #4
 8005cca:	d149      	bne.n	8005d60 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ccc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cd0:	9300      	str	r3, [sp, #0]
 8005cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f856 	bl	8005d8c <UART_WaitOnFlagUntilTimeout>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d03c      	beq.n	8005d60 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cee:	e853 3f00 	ldrex	r3, [r3]
 8005cf2:	623b      	str	r3, [r7, #32]
   return(result);
 8005cf4:	6a3b      	ldr	r3, [r7, #32]
 8005cf6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	461a      	mov	r2, r3
 8005d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d04:	633b      	str	r3, [r7, #48]	; 0x30
 8005d06:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d0c:	e841 2300 	strex	r3, r2, [r1]
 8005d10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1e6      	bne.n	8005ce6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	3308      	adds	r3, #8
 8005d1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	e853 3f00 	ldrex	r3, [r3]
 8005d26:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f023 0301 	bic.w	r3, r3, #1
 8005d2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3308      	adds	r3, #8
 8005d36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d38:	61fa      	str	r2, [r7, #28]
 8005d3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3c:	69b9      	ldr	r1, [r7, #24]
 8005d3e:	69fa      	ldr	r2, [r7, #28]
 8005d40:	e841 2300 	strex	r3, r2, [r1]
 8005d44:	617b      	str	r3, [r7, #20]
   return(result);
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1e5      	bne.n	8005d18 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2220      	movs	r2, #32
 8005d50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e011      	b.n	8005d84 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2220      	movs	r2, #32
 8005d64:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2220      	movs	r2, #32
 8005d6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3758      	adds	r7, #88	; 0x58
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	603b      	str	r3, [r7, #0]
 8005d98:	4613      	mov	r3, r2
 8005d9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d9c:	e049      	b.n	8005e32 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da4:	d045      	beq.n	8005e32 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005da6:	f7fb fae9 	bl	800137c <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	69ba      	ldr	r2, [r7, #24]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d302      	bcc.n	8005dbc <UART_WaitOnFlagUntilTimeout+0x30>
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d101      	bne.n	8005dc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e048      	b.n	8005e52 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0304 	and.w	r3, r3, #4
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d031      	beq.n	8005e32 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	69db      	ldr	r3, [r3, #28]
 8005dd4:	f003 0308 	and.w	r3, r3, #8
 8005dd8:	2b08      	cmp	r3, #8
 8005dda:	d110      	bne.n	8005dfe <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2208      	movs	r2, #8
 8005de2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f000 f838 	bl	8005e5a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2208      	movs	r2, #8
 8005dee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e029      	b.n	8005e52 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	69db      	ldr	r3, [r3, #28]
 8005e04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e0c:	d111      	bne.n	8005e32 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f000 f81e 	bl	8005e5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2220      	movs	r2, #32
 8005e22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e00f      	b.n	8005e52 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	69da      	ldr	r2, [r3, #28]
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	68ba      	ldr	r2, [r7, #8]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	bf0c      	ite	eq
 8005e42:	2301      	moveq	r3, #1
 8005e44:	2300      	movne	r3, #0
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	461a      	mov	r2, r3
 8005e4a:	79fb      	ldrb	r3, [r7, #7]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d0a6      	beq.n	8005d9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b095      	sub	sp, #84	; 0x54
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e6a:	e853 3f00 	ldrex	r3, [r3]
 8005e6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e80:	643b      	str	r3, [r7, #64]	; 0x40
 8005e82:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e88:	e841 2300 	strex	r3, r2, [r1]
 8005e8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1e6      	bne.n	8005e62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	3308      	adds	r3, #8
 8005e9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9c:	6a3b      	ldr	r3, [r7, #32]
 8005e9e:	e853 3f00 	ldrex	r3, [r3]
 8005ea2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	f023 0301 	bic.w	r3, r3, #1
 8005eaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	3308      	adds	r3, #8
 8005eb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005eb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005eb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005eba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ebc:	e841 2300 	strex	r3, r2, [r1]
 8005ec0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1e5      	bne.n	8005e94 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d118      	bne.n	8005f02 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	e853 3f00 	ldrex	r3, [r3]
 8005edc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	f023 0310 	bic.w	r3, r3, #16
 8005ee4:	647b      	str	r3, [r7, #68]	; 0x44
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	461a      	mov	r2, r3
 8005eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eee:	61bb      	str	r3, [r7, #24]
 8005ef0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef2:	6979      	ldr	r1, [r7, #20]
 8005ef4:	69ba      	ldr	r2, [r7, #24]
 8005ef6:	e841 2300 	strex	r3, r2, [r1]
 8005efa:	613b      	str	r3, [r7, #16]
   return(result);
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1e6      	bne.n	8005ed0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2220      	movs	r2, #32
 8005f06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005f16:	bf00      	nop
 8005f18:	3754      	adds	r7, #84	; 0x54
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b085      	sub	sp, #20
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	4603      	mov	r3, r0
 8005f2a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005f30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f34:	2b84      	cmp	r3, #132	; 0x84
 8005f36:	d005      	beq.n	8005f44 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005f38:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	4413      	add	r3, r2
 8005f40:	3303      	adds	r3, #3
 8005f42:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005f44:	68fb      	ldr	r3, [r7, #12]
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005f56:	f001 f867 	bl	8007028 <vTaskStartScheduler>
  
  return osOK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f62:	b089      	sub	sp, #36	; 0x24
 8005f64:	af04      	add	r7, sp, #16
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d020      	beq.n	8005fb4 <osThreadCreate+0x54>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d01c      	beq.n	8005fb4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685c      	ldr	r4, [r3, #4]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	691e      	ldr	r6, [r3, #16]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7ff ffc8 	bl	8005f22 <makeFreeRtosPriority>
 8005f92:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f9c:	9202      	str	r2, [sp, #8]
 8005f9e:	9301      	str	r3, [sp, #4]
 8005fa0:	9100      	str	r1, [sp, #0]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	4632      	mov	r2, r6
 8005fa6:	4629      	mov	r1, r5
 8005fa8:	4620      	mov	r0, r4
 8005faa:	f000 fe67 	bl	8006c7c <xTaskCreateStatic>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	60fb      	str	r3, [r7, #12]
 8005fb2:	e01c      	b.n	8005fee <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685c      	ldr	r4, [r3, #4]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005fc0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7ff ffaa 	bl	8005f22 <makeFreeRtosPriority>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	f107 030c 	add.w	r3, r7, #12
 8005fd4:	9301      	str	r3, [sp, #4]
 8005fd6:	9200      	str	r2, [sp, #0]
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	4632      	mov	r2, r6
 8005fdc:	4629      	mov	r1, r5
 8005fde:	4620      	mov	r0, r4
 8005fe0:	f000 fea8 	bl	8006d34 <xTaskCreate>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d001      	beq.n	8005fee <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005fea:	2300      	movs	r3, #0
 8005fec:	e000      	b.n	8005ff0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005fee:	68fb      	ldr	r3, [r7, #12]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3714      	adds	r7, #20
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ff8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d001      	beq.n	800600e <osDelay+0x16>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	e000      	b.n	8006010 <osDelay+0x18>
 800600e:	2301      	movs	r3, #1
 8006010:	4618      	mov	r0, r3
 8006012:	f000 ffd5 	bl	8006fc0 <vTaskDelay>
  
  return osOK;
 8006016:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006018:	4618      	mov	r0, r3
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af02      	add	r7, sp, #8
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00f      	beq.n	8006052 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2b01      	cmp	r3, #1
 8006036:	d10a      	bne.n	800604e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	2203      	movs	r2, #3
 800603e:	9200      	str	r2, [sp, #0]
 8006040:	2200      	movs	r2, #0
 8006042:	2100      	movs	r1, #0
 8006044:	2001      	movs	r0, #1
 8006046:	f000 f961 	bl	800630c <xQueueGenericCreateStatic>
 800604a:	4603      	mov	r3, r0
 800604c:	e016      	b.n	800607c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800604e:	2300      	movs	r3, #0
 8006050:	e014      	b.n	800607c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d110      	bne.n	800607a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006058:	2203      	movs	r2, #3
 800605a:	2100      	movs	r1, #0
 800605c:	2001      	movs	r0, #1
 800605e:	f000 f9cc 	bl	80063fa <xQueueGenericCreate>
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d005      	beq.n	8006076 <osSemaphoreCreate+0x56>
 800606a:	2300      	movs	r3, #0
 800606c:	2200      	movs	r2, #0
 800606e:	2100      	movs	r1, #0
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f000 fa1f 	bl	80064b4 <xQueueGenericSend>
      return sema;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	e000      	b.n	800607c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800607a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800607c:	4618      	mov	r0, r3
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006084:	b590      	push	{r4, r7, lr}
 8006086:	b085      	sub	sp, #20
 8006088:	af02      	add	r7, sp, #8
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d011      	beq.n	80060ba <osMessageCreate+0x36>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00d      	beq.n	80060ba <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6818      	ldr	r0, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6859      	ldr	r1, [r3, #4]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	689a      	ldr	r2, [r3, #8]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	2400      	movs	r4, #0
 80060b0:	9400      	str	r4, [sp, #0]
 80060b2:	f000 f92b 	bl	800630c <xQueueGenericCreateStatic>
 80060b6:	4603      	mov	r3, r0
 80060b8:	e008      	b.n	80060cc <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6818      	ldr	r0, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	4619      	mov	r1, r3
 80060c6:	f000 f998 	bl	80063fa <xQueueGenericCreate>
 80060ca:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd90      	pop	{r4, r7, pc}

080060d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f103 0208 	add.w	r2, r3, #8
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f04f 32ff 	mov.w	r2, #4294967295
 80060ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f103 0208 	add.w	r2, r3, #8
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f103 0208 	add.w	r2, r3, #8
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006122:	bf00      	nop
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800612e:	b480      	push	{r7}
 8006130:	b085      	sub	sp, #20
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
 8006136:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	689a      	ldr	r2, [r3, #8]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	683a      	ldr	r2, [r7, #0]
 8006158:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	1c5a      	adds	r2, r3, #1
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	601a      	str	r2, [r3, #0]
}
 800616a:	bf00      	nop
 800616c:	3714      	adds	r7, #20
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006176:	b480      	push	{r7}
 8006178:	b085      	sub	sp, #20
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
 800617e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800618c:	d103      	bne.n	8006196 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	60fb      	str	r3, [r7, #12]
 8006194:	e00c      	b.n	80061b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	3308      	adds	r3, #8
 800619a:	60fb      	str	r3, [r7, #12]
 800619c:	e002      	b.n	80061a4 <vListInsert+0x2e>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	60fb      	str	r3, [r7, #12]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d2f6      	bcs.n	800619e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	683a      	ldr	r2, [r7, #0]
 80061be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	683a      	ldr	r2, [r7, #0]
 80061ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	1c5a      	adds	r2, r3, #1
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	601a      	str	r2, [r3, #0]
}
 80061dc:	bf00      	nop
 80061de:	3714      	adds	r7, #20
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	6892      	ldr	r2, [r2, #8]
 80061fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	6852      	ldr	r2, [r2, #4]
 8006208:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	429a      	cmp	r2, r3
 8006212:	d103      	bne.n	800621c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	689a      	ldr	r2, [r3, #8]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	1e5a      	subs	r2, r3, #1
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
}
 8006230:	4618      	mov	r0, r3
 8006232:	3714      	adds	r7, #20
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10a      	bne.n	8006266 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006254:	f383 8811 	msr	BASEPRI, r3
 8006258:	f3bf 8f6f 	isb	sy
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006262:	bf00      	nop
 8006264:	e7fe      	b.n	8006264 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006266:	f002 f86d 	bl	8008344 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006272:	68f9      	ldr	r1, [r7, #12]
 8006274:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006276:	fb01 f303 	mul.w	r3, r1, r3
 800627a:	441a      	add	r2, r3
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006296:	3b01      	subs	r3, #1
 8006298:	68f9      	ldr	r1, [r7, #12]
 800629a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800629c:	fb01 f303 	mul.w	r3, r1, r3
 80062a0:	441a      	add	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	22ff      	movs	r2, #255	; 0xff
 80062aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	22ff      	movs	r2, #255	; 0xff
 80062b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d114      	bne.n	80062e6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d01a      	beq.n	80062fa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	3310      	adds	r3, #16
 80062c8:	4618      	mov	r0, r3
 80062ca:	f001 f947 	bl	800755c <xTaskRemoveFromEventList>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d012      	beq.n	80062fa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80062d4:	4b0c      	ldr	r3, [pc, #48]	; (8006308 <xQueueGenericReset+0xcc>)
 80062d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062da:	601a      	str	r2, [r3, #0]
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	f3bf 8f6f 	isb	sy
 80062e4:	e009      	b.n	80062fa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	3310      	adds	r3, #16
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7ff fef2 	bl	80060d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	3324      	adds	r3, #36	; 0x24
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7ff feed 	bl	80060d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80062fa:	f002 f853 	bl	80083a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80062fe:	2301      	movs	r3, #1
}
 8006300:	4618      	mov	r0, r3
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	e000ed04 	.word	0xe000ed04

0800630c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800630c:	b580      	push	{r7, lr}
 800630e:	b08e      	sub	sp, #56	; 0x38
 8006310:	af02      	add	r7, sp, #8
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
 8006318:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d10a      	bne.n	8006336 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006324:	f383 8811 	msr	BASEPRI, r3
 8006328:	f3bf 8f6f 	isb	sy
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006332:	bf00      	nop
 8006334:	e7fe      	b.n	8006334 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d10a      	bne.n	8006352 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800633c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006340:	f383 8811 	msr	BASEPRI, r3
 8006344:	f3bf 8f6f 	isb	sy
 8006348:	f3bf 8f4f 	dsb	sy
 800634c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800634e:	bf00      	nop
 8006350:	e7fe      	b.n	8006350 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d002      	beq.n	800635e <xQueueGenericCreateStatic+0x52>
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d001      	beq.n	8006362 <xQueueGenericCreateStatic+0x56>
 800635e:	2301      	movs	r3, #1
 8006360:	e000      	b.n	8006364 <xQueueGenericCreateStatic+0x58>
 8006362:	2300      	movs	r3, #0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10a      	bne.n	800637e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636c:	f383 8811 	msr	BASEPRI, r3
 8006370:	f3bf 8f6f 	isb	sy
 8006374:	f3bf 8f4f 	dsb	sy
 8006378:	623b      	str	r3, [r7, #32]
}
 800637a:	bf00      	nop
 800637c:	e7fe      	b.n	800637c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d102      	bne.n	800638a <xQueueGenericCreateStatic+0x7e>
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <xQueueGenericCreateStatic+0x82>
 800638a:	2301      	movs	r3, #1
 800638c:	e000      	b.n	8006390 <xQueueGenericCreateStatic+0x84>
 800638e:	2300      	movs	r3, #0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d10a      	bne.n	80063aa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006398:	f383 8811 	msr	BASEPRI, r3
 800639c:	f3bf 8f6f 	isb	sy
 80063a0:	f3bf 8f4f 	dsb	sy
 80063a4:	61fb      	str	r3, [r7, #28]
}
 80063a6:	bf00      	nop
 80063a8:	e7fe      	b.n	80063a8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80063aa:	2348      	movs	r3, #72	; 0x48
 80063ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	2b48      	cmp	r3, #72	; 0x48
 80063b2:	d00a      	beq.n	80063ca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80063b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b8:	f383 8811 	msr	BASEPRI, r3
 80063bc:	f3bf 8f6f 	isb	sy
 80063c0:	f3bf 8f4f 	dsb	sy
 80063c4:	61bb      	str	r3, [r7, #24]
}
 80063c6:	bf00      	nop
 80063c8:	e7fe      	b.n	80063c8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80063ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00d      	beq.n	80063f0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80063d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80063dc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80063e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e2:	9300      	str	r3, [sp, #0]
 80063e4:	4613      	mov	r3, r2
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	68b9      	ldr	r1, [r7, #8]
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f000 f843 	bl	8006476 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80063f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3730      	adds	r7, #48	; 0x30
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b08a      	sub	sp, #40	; 0x28
 80063fe:	af02      	add	r7, sp, #8
 8006400:	60f8      	str	r0, [r7, #12]
 8006402:	60b9      	str	r1, [r7, #8]
 8006404:	4613      	mov	r3, r2
 8006406:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10a      	bne.n	8006424 <xQueueGenericCreate+0x2a>
	__asm volatile
 800640e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	613b      	str	r3, [r7, #16]
}
 8006420:	bf00      	nop
 8006422:	e7fe      	b.n	8006422 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d102      	bne.n	8006430 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800642a:	2300      	movs	r3, #0
 800642c:	61fb      	str	r3, [r7, #28]
 800642e:	e004      	b.n	800643a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	68ba      	ldr	r2, [r7, #8]
 8006434:	fb02 f303 	mul.w	r3, r2, r3
 8006438:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	3348      	adds	r3, #72	; 0x48
 800643e:	4618      	mov	r0, r3
 8006440:	f002 f8a2 	bl	8008588 <pvPortMalloc>
 8006444:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00f      	beq.n	800646c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	3348      	adds	r3, #72	; 0x48
 8006450:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800645a:	79fa      	ldrb	r2, [r7, #7]
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	4613      	mov	r3, r2
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	68b9      	ldr	r1, [r7, #8]
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f000 f805 	bl	8006476 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800646c:	69bb      	ldr	r3, [r7, #24]
	}
 800646e:	4618      	mov	r0, r3
 8006470:	3720      	adds	r7, #32
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b084      	sub	sp, #16
 800647a:	af00      	add	r7, sp, #0
 800647c:	60f8      	str	r0, [r7, #12]
 800647e:	60b9      	str	r1, [r7, #8]
 8006480:	607a      	str	r2, [r7, #4]
 8006482:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d103      	bne.n	8006492 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	69ba      	ldr	r2, [r7, #24]
 800648e:	601a      	str	r2, [r3, #0]
 8006490:	e002      	b.n	8006498 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80064a4:	2101      	movs	r1, #1
 80064a6:	69b8      	ldr	r0, [r7, #24]
 80064a8:	f7ff fec8 	bl	800623c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80064ac:	bf00      	nop
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b08e      	sub	sp, #56	; 0x38
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
 80064c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80064c2:	2300      	movs	r3, #0
 80064c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80064ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d10a      	bne.n	80064e6 <xQueueGenericSend+0x32>
	__asm volatile
 80064d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d4:	f383 8811 	msr	BASEPRI, r3
 80064d8:	f3bf 8f6f 	isb	sy
 80064dc:	f3bf 8f4f 	dsb	sy
 80064e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80064e2:	bf00      	nop
 80064e4:	e7fe      	b.n	80064e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d103      	bne.n	80064f4 <xQueueGenericSend+0x40>
 80064ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d101      	bne.n	80064f8 <xQueueGenericSend+0x44>
 80064f4:	2301      	movs	r3, #1
 80064f6:	e000      	b.n	80064fa <xQueueGenericSend+0x46>
 80064f8:	2300      	movs	r3, #0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10a      	bne.n	8006514 <xQueueGenericSend+0x60>
	__asm volatile
 80064fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006510:	bf00      	nop
 8006512:	e7fe      	b.n	8006512 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	2b02      	cmp	r3, #2
 8006518:	d103      	bne.n	8006522 <xQueueGenericSend+0x6e>
 800651a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800651e:	2b01      	cmp	r3, #1
 8006520:	d101      	bne.n	8006526 <xQueueGenericSend+0x72>
 8006522:	2301      	movs	r3, #1
 8006524:	e000      	b.n	8006528 <xQueueGenericSend+0x74>
 8006526:	2300      	movs	r3, #0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10a      	bne.n	8006542 <xQueueGenericSend+0x8e>
	__asm volatile
 800652c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006530:	f383 8811 	msr	BASEPRI, r3
 8006534:	f3bf 8f6f 	isb	sy
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	623b      	str	r3, [r7, #32]
}
 800653e:	bf00      	nop
 8006540:	e7fe      	b.n	8006540 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006542:	f001 f9d1 	bl	80078e8 <xTaskGetSchedulerState>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d102      	bne.n	8006552 <xQueueGenericSend+0x9e>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d101      	bne.n	8006556 <xQueueGenericSend+0xa2>
 8006552:	2301      	movs	r3, #1
 8006554:	e000      	b.n	8006558 <xQueueGenericSend+0xa4>
 8006556:	2300      	movs	r3, #0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10a      	bne.n	8006572 <xQueueGenericSend+0xbe>
	__asm volatile
 800655c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006560:	f383 8811 	msr	BASEPRI, r3
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	61fb      	str	r3, [r7, #28]
}
 800656e:	bf00      	nop
 8006570:	e7fe      	b.n	8006570 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006572:	f001 fee7 	bl	8008344 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800657a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800657e:	429a      	cmp	r2, r3
 8006580:	d302      	bcc.n	8006588 <xQueueGenericSend+0xd4>
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	2b02      	cmp	r3, #2
 8006586:	d129      	bne.n	80065dc <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006588:	683a      	ldr	r2, [r7, #0]
 800658a:	68b9      	ldr	r1, [r7, #8]
 800658c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800658e:	f000 fa07 	bl	80069a0 <prvCopyDataToQueue>
 8006592:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006598:	2b00      	cmp	r3, #0
 800659a:	d010      	beq.n	80065be <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800659c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659e:	3324      	adds	r3, #36	; 0x24
 80065a0:	4618      	mov	r0, r3
 80065a2:	f000 ffdb 	bl	800755c <xTaskRemoveFromEventList>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d013      	beq.n	80065d4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80065ac:	4b3f      	ldr	r3, [pc, #252]	; (80066ac <xQueueGenericSend+0x1f8>)
 80065ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065b2:	601a      	str	r2, [r3, #0]
 80065b4:	f3bf 8f4f 	dsb	sy
 80065b8:	f3bf 8f6f 	isb	sy
 80065bc:	e00a      	b.n	80065d4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80065be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d007      	beq.n	80065d4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80065c4:	4b39      	ldr	r3, [pc, #228]	; (80066ac <xQueueGenericSend+0x1f8>)
 80065c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065ca:	601a      	str	r2, [r3, #0]
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80065d4:	f001 fee6 	bl	80083a4 <vPortExitCritical>
				return pdPASS;
 80065d8:	2301      	movs	r3, #1
 80065da:	e063      	b.n	80066a4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d103      	bne.n	80065ea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80065e2:	f001 fedf 	bl	80083a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80065e6:	2300      	movs	r3, #0
 80065e8:	e05c      	b.n	80066a4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80065ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d106      	bne.n	80065fe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065f0:	f107 0314 	add.w	r3, r7, #20
 80065f4:	4618      	mov	r0, r3
 80065f6:	f001 f813 	bl	8007620 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065fa:	2301      	movs	r3, #1
 80065fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065fe:	f001 fed1 	bl	80083a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006602:	f000 fd81 	bl	8007108 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006606:	f001 fe9d 	bl	8008344 <vPortEnterCritical>
 800660a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006610:	b25b      	sxtb	r3, r3
 8006612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006616:	d103      	bne.n	8006620 <xQueueGenericSend+0x16c>
 8006618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661a:	2200      	movs	r2, #0
 800661c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006622:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006626:	b25b      	sxtb	r3, r3
 8006628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800662c:	d103      	bne.n	8006636 <xQueueGenericSend+0x182>
 800662e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006630:	2200      	movs	r2, #0
 8006632:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006636:	f001 feb5 	bl	80083a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800663a:	1d3a      	adds	r2, r7, #4
 800663c:	f107 0314 	add.w	r3, r7, #20
 8006640:	4611      	mov	r1, r2
 8006642:	4618      	mov	r0, r3
 8006644:	f001 f802 	bl	800764c <xTaskCheckForTimeOut>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d124      	bne.n	8006698 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800664e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006650:	f000 fa9e 	bl	8006b90 <prvIsQueueFull>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d018      	beq.n	800668c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800665a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665c:	3310      	adds	r3, #16
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	4611      	mov	r1, r2
 8006662:	4618      	mov	r0, r3
 8006664:	f000 ff2a 	bl	80074bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006668:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800666a:	f000 fa29 	bl	8006ac0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800666e:	f000 fd59 	bl	8007124 <xTaskResumeAll>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	f47f af7c 	bne.w	8006572 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800667a:	4b0c      	ldr	r3, [pc, #48]	; (80066ac <xQueueGenericSend+0x1f8>)
 800667c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006680:	601a      	str	r2, [r3, #0]
 8006682:	f3bf 8f4f 	dsb	sy
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	e772      	b.n	8006572 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800668c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800668e:	f000 fa17 	bl	8006ac0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006692:	f000 fd47 	bl	8007124 <xTaskResumeAll>
 8006696:	e76c      	b.n	8006572 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006698:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800669a:	f000 fa11 	bl	8006ac0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800669e:	f000 fd41 	bl	8007124 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80066a2:	2300      	movs	r3, #0
		}
	}
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3738      	adds	r7, #56	; 0x38
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	e000ed04 	.word	0xe000ed04

080066b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b08e      	sub	sp, #56	; 0x38
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
 80066bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80066c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d10a      	bne.n	80066de <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80066c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066cc:	f383 8811 	msr	BASEPRI, r3
 80066d0:	f3bf 8f6f 	isb	sy
 80066d4:	f3bf 8f4f 	dsb	sy
 80066d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80066da:	bf00      	nop
 80066dc:	e7fe      	b.n	80066dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d103      	bne.n	80066ec <xQueueGenericSendFromISR+0x3c>
 80066e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d101      	bne.n	80066f0 <xQueueGenericSendFromISR+0x40>
 80066ec:	2301      	movs	r3, #1
 80066ee:	e000      	b.n	80066f2 <xQueueGenericSendFromISR+0x42>
 80066f0:	2300      	movs	r3, #0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10a      	bne.n	800670c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80066f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fa:	f383 8811 	msr	BASEPRI, r3
 80066fe:	f3bf 8f6f 	isb	sy
 8006702:	f3bf 8f4f 	dsb	sy
 8006706:	623b      	str	r3, [r7, #32]
}
 8006708:	bf00      	nop
 800670a:	e7fe      	b.n	800670a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	2b02      	cmp	r3, #2
 8006710:	d103      	bne.n	800671a <xQueueGenericSendFromISR+0x6a>
 8006712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006716:	2b01      	cmp	r3, #1
 8006718:	d101      	bne.n	800671e <xQueueGenericSendFromISR+0x6e>
 800671a:	2301      	movs	r3, #1
 800671c:	e000      	b.n	8006720 <xQueueGenericSendFromISR+0x70>
 800671e:	2300      	movs	r3, #0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10a      	bne.n	800673a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006728:	f383 8811 	msr	BASEPRI, r3
 800672c:	f3bf 8f6f 	isb	sy
 8006730:	f3bf 8f4f 	dsb	sy
 8006734:	61fb      	str	r3, [r7, #28]
}
 8006736:	bf00      	nop
 8006738:	e7fe      	b.n	8006738 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800673a:	f001 fee5 	bl	8008508 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800673e:	f3ef 8211 	mrs	r2, BASEPRI
 8006742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006746:	f383 8811 	msr	BASEPRI, r3
 800674a:	f3bf 8f6f 	isb	sy
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	61ba      	str	r2, [r7, #24]
 8006754:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006756:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006758:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800675a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800675e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006762:	429a      	cmp	r2, r3
 8006764:	d302      	bcc.n	800676c <xQueueGenericSendFromISR+0xbc>
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	2b02      	cmp	r3, #2
 800676a:	d12c      	bne.n	80067c6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800676c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006776:	683a      	ldr	r2, [r7, #0]
 8006778:	68b9      	ldr	r1, [r7, #8]
 800677a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800677c:	f000 f910 	bl	80069a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006780:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006788:	d112      	bne.n	80067b0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800678a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678e:	2b00      	cmp	r3, #0
 8006790:	d016      	beq.n	80067c0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006794:	3324      	adds	r3, #36	; 0x24
 8006796:	4618      	mov	r0, r3
 8006798:	f000 fee0 	bl	800755c <xTaskRemoveFromEventList>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00e      	beq.n	80067c0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00b      	beq.n	80067c0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	601a      	str	r2, [r3, #0]
 80067ae:	e007      	b.n	80067c0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80067b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80067b4:	3301      	adds	r3, #1
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	b25a      	sxtb	r2, r3
 80067ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80067c0:	2301      	movs	r3, #1
 80067c2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80067c4:	e001      	b.n	80067ca <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80067c6:	2300      	movs	r3, #0
 80067c8:	637b      	str	r3, [r7, #52]	; 0x34
 80067ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067cc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80067d4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80067d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3738      	adds	r7, #56	; 0x38
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b08c      	sub	sp, #48	; 0x30
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80067ec:	2300      	movs	r3, #0
 80067ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80067f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10a      	bne.n	8006810 <xQueueReceive+0x30>
	__asm volatile
 80067fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fe:	f383 8811 	msr	BASEPRI, r3
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	f3bf 8f4f 	dsb	sy
 800680a:	623b      	str	r3, [r7, #32]
}
 800680c:	bf00      	nop
 800680e:	e7fe      	b.n	800680e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d103      	bne.n	800681e <xQueueReceive+0x3e>
 8006816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681a:	2b00      	cmp	r3, #0
 800681c:	d101      	bne.n	8006822 <xQueueReceive+0x42>
 800681e:	2301      	movs	r3, #1
 8006820:	e000      	b.n	8006824 <xQueueReceive+0x44>
 8006822:	2300      	movs	r3, #0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d10a      	bne.n	800683e <xQueueReceive+0x5e>
	__asm volatile
 8006828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682c:	f383 8811 	msr	BASEPRI, r3
 8006830:	f3bf 8f6f 	isb	sy
 8006834:	f3bf 8f4f 	dsb	sy
 8006838:	61fb      	str	r3, [r7, #28]
}
 800683a:	bf00      	nop
 800683c:	e7fe      	b.n	800683c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800683e:	f001 f853 	bl	80078e8 <xTaskGetSchedulerState>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d102      	bne.n	800684e <xQueueReceive+0x6e>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d101      	bne.n	8006852 <xQueueReceive+0x72>
 800684e:	2301      	movs	r3, #1
 8006850:	e000      	b.n	8006854 <xQueueReceive+0x74>
 8006852:	2300      	movs	r3, #0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d10a      	bne.n	800686e <xQueueReceive+0x8e>
	__asm volatile
 8006858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685c:	f383 8811 	msr	BASEPRI, r3
 8006860:	f3bf 8f6f 	isb	sy
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	61bb      	str	r3, [r7, #24]
}
 800686a:	bf00      	nop
 800686c:	e7fe      	b.n	800686c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800686e:	f001 fd69 	bl	8008344 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006876:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687a:	2b00      	cmp	r3, #0
 800687c:	d01f      	beq.n	80068be <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800687e:	68b9      	ldr	r1, [r7, #8]
 8006880:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006882:	f000 f8f7 	bl	8006a74 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006888:	1e5a      	subs	r2, r3, #1
 800688a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800688e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00f      	beq.n	80068b6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006898:	3310      	adds	r3, #16
 800689a:	4618      	mov	r0, r3
 800689c:	f000 fe5e 	bl	800755c <xTaskRemoveFromEventList>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d007      	beq.n	80068b6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80068a6:	4b3d      	ldr	r3, [pc, #244]	; (800699c <xQueueReceive+0x1bc>)
 80068a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068ac:	601a      	str	r2, [r3, #0]
 80068ae:	f3bf 8f4f 	dsb	sy
 80068b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80068b6:	f001 fd75 	bl	80083a4 <vPortExitCritical>
				return pdPASS;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e069      	b.n	8006992 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d103      	bne.n	80068cc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80068c4:	f001 fd6e 	bl	80083a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80068c8:	2300      	movs	r3, #0
 80068ca:	e062      	b.n	8006992 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80068cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d106      	bne.n	80068e0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068d2:	f107 0310 	add.w	r3, r7, #16
 80068d6:	4618      	mov	r0, r3
 80068d8:	f000 fea2 	bl	8007620 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068dc:	2301      	movs	r3, #1
 80068de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80068e0:	f001 fd60 	bl	80083a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80068e4:	f000 fc10 	bl	8007108 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068e8:	f001 fd2c 	bl	8008344 <vPortEnterCritical>
 80068ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068f2:	b25b      	sxtb	r3, r3
 80068f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f8:	d103      	bne.n	8006902 <xQueueReceive+0x122>
 80068fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006904:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006908:	b25b      	sxtb	r3, r3
 800690a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800690e:	d103      	bne.n	8006918 <xQueueReceive+0x138>
 8006910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006912:	2200      	movs	r2, #0
 8006914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006918:	f001 fd44 	bl	80083a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800691c:	1d3a      	adds	r2, r7, #4
 800691e:	f107 0310 	add.w	r3, r7, #16
 8006922:	4611      	mov	r1, r2
 8006924:	4618      	mov	r0, r3
 8006926:	f000 fe91 	bl	800764c <xTaskCheckForTimeOut>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d123      	bne.n	8006978 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006930:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006932:	f000 f917 	bl	8006b64 <prvIsQueueEmpty>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d017      	beq.n	800696c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800693c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693e:	3324      	adds	r3, #36	; 0x24
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	4611      	mov	r1, r2
 8006944:	4618      	mov	r0, r3
 8006946:	f000 fdb9 	bl	80074bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800694a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800694c:	f000 f8b8 	bl	8006ac0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006950:	f000 fbe8 	bl	8007124 <xTaskResumeAll>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d189      	bne.n	800686e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800695a:	4b10      	ldr	r3, [pc, #64]	; (800699c <xQueueReceive+0x1bc>)
 800695c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006960:	601a      	str	r2, [r3, #0]
 8006962:	f3bf 8f4f 	dsb	sy
 8006966:	f3bf 8f6f 	isb	sy
 800696a:	e780      	b.n	800686e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800696c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800696e:	f000 f8a7 	bl	8006ac0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006972:	f000 fbd7 	bl	8007124 <xTaskResumeAll>
 8006976:	e77a      	b.n	800686e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006978:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800697a:	f000 f8a1 	bl	8006ac0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800697e:	f000 fbd1 	bl	8007124 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006982:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006984:	f000 f8ee 	bl	8006b64 <prvIsQueueEmpty>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	f43f af6f 	beq.w	800686e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006990:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006992:	4618      	mov	r0, r3
 8006994:	3730      	adds	r7, #48	; 0x30
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	e000ed04 	.word	0xe000ed04

080069a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b086      	sub	sp, #24
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80069ac:	2300      	movs	r3, #0
 80069ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10d      	bne.n	80069da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d14d      	bne.n	8006a62 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	4618      	mov	r0, r3
 80069cc:	f000 ffaa 	bl	8007924 <xTaskPriorityDisinherit>
 80069d0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	605a      	str	r2, [r3, #4]
 80069d8:	e043      	b.n	8006a62 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d119      	bne.n	8006a14 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6898      	ldr	r0, [r3, #8]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e8:	461a      	mov	r2, r3
 80069ea:	68b9      	ldr	r1, [r7, #8]
 80069ec:	f002 fa9f 	bl	8008f2e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	689a      	ldr	r2, [r3, #8]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f8:	441a      	add	r2, r3
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	689a      	ldr	r2, [r3, #8]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d32b      	bcc.n	8006a62 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	609a      	str	r2, [r3, #8]
 8006a12:	e026      	b.n	8006a62 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	68d8      	ldr	r0, [r3, #12]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	68b9      	ldr	r1, [r7, #8]
 8006a20:	f002 fa85 	bl	8008f2e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	68da      	ldr	r2, [r3, #12]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2c:	425b      	negs	r3, r3
 8006a2e:	441a      	add	r2, r3
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	68da      	ldr	r2, [r3, #12]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d207      	bcs.n	8006a50 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	685a      	ldr	r2, [r3, #4]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a48:	425b      	negs	r3, r3
 8006a4a:	441a      	add	r2, r3
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d105      	bne.n	8006a62 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d002      	beq.n	8006a62 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	1c5a      	adds	r2, r3, #1
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006a6a:	697b      	ldr	r3, [r7, #20]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3718      	adds	r7, #24
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d018      	beq.n	8006ab8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68da      	ldr	r2, [r3, #12]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8e:	441a      	add	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	68da      	ldr	r2, [r3, #12]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d303      	bcc.n	8006aa8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	68d9      	ldr	r1, [r3, #12]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	6838      	ldr	r0, [r7, #0]
 8006ab4:	f002 fa3b 	bl	8008f2e <memcpy>
	}
}
 8006ab8:	bf00      	nop
 8006aba:	3708      	adds	r7, #8
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006ac8:	f001 fc3c 	bl	8008344 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ad2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ad4:	e011      	b.n	8006afa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d012      	beq.n	8006b04 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	3324      	adds	r3, #36	; 0x24
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 fd3a 	bl	800755c <xTaskRemoveFromEventList>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d001      	beq.n	8006af2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006aee:	f000 fe0f 	bl	8007710 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006af2:	7bfb      	ldrb	r3, [r7, #15]
 8006af4:	3b01      	subs	r3, #1
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	dce9      	bgt.n	8006ad6 <prvUnlockQueue+0x16>
 8006b02:	e000      	b.n	8006b06 <prvUnlockQueue+0x46>
					break;
 8006b04:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	22ff      	movs	r2, #255	; 0xff
 8006b0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006b0e:	f001 fc49 	bl	80083a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006b12:	f001 fc17 	bl	8008344 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b1c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b1e:	e011      	b.n	8006b44 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d012      	beq.n	8006b4e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	3310      	adds	r3, #16
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f000 fd15 	bl	800755c <xTaskRemoveFromEventList>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d001      	beq.n	8006b3c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006b38:	f000 fdea 	bl	8007710 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006b3c:	7bbb      	ldrb	r3, [r7, #14]
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	dce9      	bgt.n	8006b20 <prvUnlockQueue+0x60>
 8006b4c:	e000      	b.n	8006b50 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006b4e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	22ff      	movs	r2, #255	; 0xff
 8006b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006b58:	f001 fc24 	bl	80083a4 <vPortExitCritical>
}
 8006b5c:	bf00      	nop
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b6c:	f001 fbea 	bl	8008344 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d102      	bne.n	8006b7e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	60fb      	str	r3, [r7, #12]
 8006b7c:	e001      	b.n	8006b82 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006b82:	f001 fc0f 	bl	80083a4 <vPortExitCritical>

	return xReturn;
 8006b86:	68fb      	ldr	r3, [r7, #12]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3710      	adds	r7, #16
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b98:	f001 fbd4 	bl	8008344 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d102      	bne.n	8006bae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	60fb      	str	r3, [r7, #12]
 8006bac:	e001      	b.n	8006bb2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006bb2:	f001 fbf7 	bl	80083a4 <vPortExitCritical>

	return xReturn;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3710      	adds	r7, #16
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006bca:	2300      	movs	r3, #0
 8006bcc:	60fb      	str	r3, [r7, #12]
 8006bce:	e014      	b.n	8006bfa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006bd0:	4a0f      	ldr	r2, [pc, #60]	; (8006c10 <vQueueAddToRegistry+0x50>)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d10b      	bne.n	8006bf4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006bdc:	490c      	ldr	r1, [pc, #48]	; (8006c10 <vQueueAddToRegistry+0x50>)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	683a      	ldr	r2, [r7, #0]
 8006be2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006be6:	4a0a      	ldr	r2, [pc, #40]	; (8006c10 <vQueueAddToRegistry+0x50>)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	00db      	lsls	r3, r3, #3
 8006bec:	4413      	add	r3, r2
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006bf2:	e006      	b.n	8006c02 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	60fb      	str	r3, [r7, #12]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2b07      	cmp	r3, #7
 8006bfe:	d9e7      	bls.n	8006bd0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006c00:	bf00      	nop
 8006c02:	bf00      	nop
 8006c04:	3714      	adds	r7, #20
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	200009c4 	.word	0x200009c4

08006c14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b086      	sub	sp, #24
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006c24:	f001 fb8e 	bl	8008344 <vPortEnterCritical>
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c2e:	b25b      	sxtb	r3, r3
 8006c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c34:	d103      	bne.n	8006c3e <vQueueWaitForMessageRestricted+0x2a>
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c44:	b25b      	sxtb	r3, r3
 8006c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c4a:	d103      	bne.n	8006c54 <vQueueWaitForMessageRestricted+0x40>
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c54:	f001 fba6 	bl	80083a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d106      	bne.n	8006c6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	3324      	adds	r3, #36	; 0x24
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	68b9      	ldr	r1, [r7, #8]
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f000 fc4b 	bl	8007504 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006c6e:	6978      	ldr	r0, [r7, #20]
 8006c70:	f7ff ff26 	bl	8006ac0 <prvUnlockQueue>
	}
 8006c74:	bf00      	nop
 8006c76:	3718      	adds	r7, #24
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b08e      	sub	sp, #56	; 0x38
 8006c80:	af04      	add	r7, sp, #16
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
 8006c88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d10a      	bne.n	8006ca6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c94:	f383 8811 	msr	BASEPRI, r3
 8006c98:	f3bf 8f6f 	isb	sy
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	623b      	str	r3, [r7, #32]
}
 8006ca2:	bf00      	nop
 8006ca4:	e7fe      	b.n	8006ca4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10a      	bne.n	8006cc2 <xTaskCreateStatic+0x46>
	__asm volatile
 8006cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb0:	f383 8811 	msr	BASEPRI, r3
 8006cb4:	f3bf 8f6f 	isb	sy
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	61fb      	str	r3, [r7, #28]
}
 8006cbe:	bf00      	nop
 8006cc0:	e7fe      	b.n	8006cc0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006cc2:	23a0      	movs	r3, #160	; 0xa0
 8006cc4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	2ba0      	cmp	r3, #160	; 0xa0
 8006cca:	d00a      	beq.n	8006ce2 <xTaskCreateStatic+0x66>
	__asm volatile
 8006ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd0:	f383 8811 	msr	BASEPRI, r3
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	61bb      	str	r3, [r7, #24]
}
 8006cde:	bf00      	nop
 8006ce0:	e7fe      	b.n	8006ce0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d01e      	beq.n	8006d26 <xTaskCreateStatic+0xaa>
 8006ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d01b      	beq.n	8006d26 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cf6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006d00:	2300      	movs	r3, #0
 8006d02:	9303      	str	r3, [sp, #12]
 8006d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d06:	9302      	str	r3, [sp, #8]
 8006d08:	f107 0314 	add.w	r3, r7, #20
 8006d0c:	9301      	str	r3, [sp, #4]
 8006d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d10:	9300      	str	r3, [sp, #0]
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	68b9      	ldr	r1, [r7, #8]
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f000 f851 	bl	8006dc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d20:	f000 f8e4 	bl	8006eec <prvAddNewTaskToReadyList>
 8006d24:	e001      	b.n	8006d2a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006d26:	2300      	movs	r3, #0
 8006d28:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006d2a:	697b      	ldr	r3, [r7, #20]
	}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3728      	adds	r7, #40	; 0x28
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b08c      	sub	sp, #48	; 0x30
 8006d38:	af04      	add	r7, sp, #16
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	603b      	str	r3, [r7, #0]
 8006d40:	4613      	mov	r3, r2
 8006d42:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d44:	88fb      	ldrh	r3, [r7, #6]
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f001 fc1d 	bl	8008588 <pvPortMalloc>
 8006d4e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00e      	beq.n	8006d74 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006d56:	20a0      	movs	r0, #160	; 0xa0
 8006d58:	f001 fc16 	bl	8008588 <pvPortMalloc>
 8006d5c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d003      	beq.n	8006d6c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	697a      	ldr	r2, [r7, #20]
 8006d68:	631a      	str	r2, [r3, #48]	; 0x30
 8006d6a:	e005      	b.n	8006d78 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006d6c:	6978      	ldr	r0, [r7, #20]
 8006d6e:	f001 fccf 	bl	8008710 <vPortFree>
 8006d72:	e001      	b.n	8006d78 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006d74:	2300      	movs	r3, #0
 8006d76:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d017      	beq.n	8006dae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006d86:	88fa      	ldrh	r2, [r7, #6]
 8006d88:	2300      	movs	r3, #0
 8006d8a:	9303      	str	r3, [sp, #12]
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	9302      	str	r3, [sp, #8]
 8006d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d92:	9301      	str	r3, [sp, #4]
 8006d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d96:	9300      	str	r3, [sp, #0]
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	68b9      	ldr	r1, [r7, #8]
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f000 f80f 	bl	8006dc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006da2:	69f8      	ldr	r0, [r7, #28]
 8006da4:	f000 f8a2 	bl	8006eec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006da8:	2301      	movs	r3, #1
 8006daa:	61bb      	str	r3, [r7, #24]
 8006dac:	e002      	b.n	8006db4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006dae:	f04f 33ff 	mov.w	r3, #4294967295
 8006db2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006db4:	69bb      	ldr	r3, [r7, #24]
	}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3720      	adds	r7, #32
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
	...

08006dc0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b088      	sub	sp, #32
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
 8006dcc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	4413      	add	r3, r2
 8006dde:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	f023 0307 	bic.w	r3, r3, #7
 8006de6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	f003 0307 	and.w	r3, r3, #7
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00a      	beq.n	8006e08 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df6:	f383 8811 	msr	BASEPRI, r3
 8006dfa:	f3bf 8f6f 	isb	sy
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	617b      	str	r3, [r7, #20]
}
 8006e04:	bf00      	nop
 8006e06:	e7fe      	b.n	8006e06 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e08:	2300      	movs	r3, #0
 8006e0a:	61fb      	str	r3, [r7, #28]
 8006e0c:	e012      	b.n	8006e34 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006e0e:	68ba      	ldr	r2, [r7, #8]
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	4413      	add	r3, r2
 8006e14:	7819      	ldrb	r1, [r3, #0]
 8006e16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	3334      	adds	r3, #52	; 0x34
 8006e1e:	460a      	mov	r2, r1
 8006e20:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006e22:	68ba      	ldr	r2, [r7, #8]
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	4413      	add	r3, r2
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d006      	beq.n	8006e3c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	3301      	adds	r3, #1
 8006e32:	61fb      	str	r3, [r7, #28]
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	2b0f      	cmp	r3, #15
 8006e38:	d9e9      	bls.n	8006e0e <prvInitialiseNewTask+0x4e>
 8006e3a:	e000      	b.n	8006e3e <prvInitialiseNewTask+0x7e>
		{
			break;
 8006e3c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e48:	2b06      	cmp	r3, #6
 8006e4a:	d901      	bls.n	8006e50 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006e4c:	2306      	movs	r3, #6
 8006e4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e5a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5e:	2200      	movs	r2, #0
 8006e60:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e64:	3304      	adds	r3, #4
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7ff f954 	bl	8006114 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6e:	3318      	adds	r3, #24
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7ff f94f 	bl	8006114 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7e:	f1c3 0207 	rsb	r2, r3, #7
 8006e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9e:	334c      	adds	r3, #76	; 0x4c
 8006ea0:	224c      	movs	r2, #76	; 0x4c
 8006ea2:	2100      	movs	r1, #0
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f001 ff71 	bl	8008d8c <memset>
 8006eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eac:	4a0c      	ldr	r2, [pc, #48]	; (8006ee0 <prvInitialiseNewTask+0x120>)
 8006eae:	651a      	str	r2, [r3, #80]	; 0x50
 8006eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb2:	4a0c      	ldr	r2, [pc, #48]	; (8006ee4 <prvInitialiseNewTask+0x124>)
 8006eb4:	655a      	str	r2, [r3, #84]	; 0x54
 8006eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb8:	4a0b      	ldr	r2, [pc, #44]	; (8006ee8 <prvInitialiseNewTask+0x128>)
 8006eba:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006ebc:	683a      	ldr	r2, [r7, #0]
 8006ebe:	68f9      	ldr	r1, [r7, #12]
 8006ec0:	69b8      	ldr	r0, [r7, #24]
 8006ec2:	f001 f913 	bl	80080ec <pxPortInitialiseStack>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eca:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d002      	beq.n	8006ed8 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ed6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ed8:	bf00      	nop
 8006eda:	3720      	adds	r7, #32
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	2000184c 	.word	0x2000184c
 8006ee4:	200018b4 	.word	0x200018b4
 8006ee8:	2000191c 	.word	0x2000191c

08006eec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006ef4:	f001 fa26 	bl	8008344 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006ef8:	4b2a      	ldr	r3, [pc, #168]	; (8006fa4 <prvAddNewTaskToReadyList+0xb8>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	3301      	adds	r3, #1
 8006efe:	4a29      	ldr	r2, [pc, #164]	; (8006fa4 <prvAddNewTaskToReadyList+0xb8>)
 8006f00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006f02:	4b29      	ldr	r3, [pc, #164]	; (8006fa8 <prvAddNewTaskToReadyList+0xbc>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d109      	bne.n	8006f1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006f0a:	4a27      	ldr	r2, [pc, #156]	; (8006fa8 <prvAddNewTaskToReadyList+0xbc>)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006f10:	4b24      	ldr	r3, [pc, #144]	; (8006fa4 <prvAddNewTaskToReadyList+0xb8>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d110      	bne.n	8006f3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006f18:	f000 fc1e 	bl	8007758 <prvInitialiseTaskLists>
 8006f1c:	e00d      	b.n	8006f3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006f1e:	4b23      	ldr	r3, [pc, #140]	; (8006fac <prvAddNewTaskToReadyList+0xc0>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d109      	bne.n	8006f3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006f26:	4b20      	ldr	r3, [pc, #128]	; (8006fa8 <prvAddNewTaskToReadyList+0xbc>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d802      	bhi.n	8006f3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006f34:	4a1c      	ldr	r2, [pc, #112]	; (8006fa8 <prvAddNewTaskToReadyList+0xbc>)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006f3a:	4b1d      	ldr	r3, [pc, #116]	; (8006fb0 <prvAddNewTaskToReadyList+0xc4>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	4a1b      	ldr	r2, [pc, #108]	; (8006fb0 <prvAddNewTaskToReadyList+0xc4>)
 8006f42:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f48:	2201      	movs	r2, #1
 8006f4a:	409a      	lsls	r2, r3
 8006f4c:	4b19      	ldr	r3, [pc, #100]	; (8006fb4 <prvAddNewTaskToReadyList+0xc8>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	4a18      	ldr	r2, [pc, #96]	; (8006fb4 <prvAddNewTaskToReadyList+0xc8>)
 8006f54:	6013      	str	r3, [r2, #0]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	4413      	add	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4a15      	ldr	r2, [pc, #84]	; (8006fb8 <prvAddNewTaskToReadyList+0xcc>)
 8006f64:	441a      	add	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	3304      	adds	r3, #4
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	4610      	mov	r0, r2
 8006f6e:	f7ff f8de 	bl	800612e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006f72:	f001 fa17 	bl	80083a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006f76:	4b0d      	ldr	r3, [pc, #52]	; (8006fac <prvAddNewTaskToReadyList+0xc0>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00e      	beq.n	8006f9c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006f7e:	4b0a      	ldr	r3, [pc, #40]	; (8006fa8 <prvAddNewTaskToReadyList+0xbc>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d207      	bcs.n	8006f9c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006f8c:	4b0b      	ldr	r3, [pc, #44]	; (8006fbc <prvAddNewTaskToReadyList+0xd0>)
 8006f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f92:	601a      	str	r2, [r3, #0]
 8006f94:	f3bf 8f4f 	dsb	sy
 8006f98:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f9c:	bf00      	nop
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	20000b04 	.word	0x20000b04
 8006fa8:	20000a04 	.word	0x20000a04
 8006fac:	20000b10 	.word	0x20000b10
 8006fb0:	20000b20 	.word	0x20000b20
 8006fb4:	20000b0c 	.word	0x20000b0c
 8006fb8:	20000a08 	.word	0x20000a08
 8006fbc:	e000ed04 	.word	0xe000ed04

08006fc0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d017      	beq.n	8007002 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006fd2:	4b13      	ldr	r3, [pc, #76]	; (8007020 <vTaskDelay+0x60>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00a      	beq.n	8006ff0 <vTaskDelay+0x30>
	__asm volatile
 8006fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fde:	f383 8811 	msr	BASEPRI, r3
 8006fe2:	f3bf 8f6f 	isb	sy
 8006fe6:	f3bf 8f4f 	dsb	sy
 8006fea:	60bb      	str	r3, [r7, #8]
}
 8006fec:	bf00      	nop
 8006fee:	e7fe      	b.n	8006fee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006ff0:	f000 f88a 	bl	8007108 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 fd1a 	bl	8007a30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006ffc:	f000 f892 	bl	8007124 <xTaskResumeAll>
 8007000:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d107      	bne.n	8007018 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007008:	4b06      	ldr	r3, [pc, #24]	; (8007024 <vTaskDelay+0x64>)
 800700a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800700e:	601a      	str	r2, [r3, #0]
 8007010:	f3bf 8f4f 	dsb	sy
 8007014:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007018:	bf00      	nop
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	20000b2c 	.word	0x20000b2c
 8007024:	e000ed04 	.word	0xe000ed04

08007028 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b08a      	sub	sp, #40	; 0x28
 800702c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800702e:	2300      	movs	r3, #0
 8007030:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007032:	2300      	movs	r3, #0
 8007034:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007036:	463a      	mov	r2, r7
 8007038:	1d39      	adds	r1, r7, #4
 800703a:	f107 0308 	add.w	r3, r7, #8
 800703e:	4618      	mov	r0, r3
 8007040:	f7f9 f91e 	bl	8000280 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007044:	6839      	ldr	r1, [r7, #0]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	68ba      	ldr	r2, [r7, #8]
 800704a:	9202      	str	r2, [sp, #8]
 800704c:	9301      	str	r3, [sp, #4]
 800704e:	2300      	movs	r3, #0
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	2300      	movs	r3, #0
 8007054:	460a      	mov	r2, r1
 8007056:	4924      	ldr	r1, [pc, #144]	; (80070e8 <vTaskStartScheduler+0xc0>)
 8007058:	4824      	ldr	r0, [pc, #144]	; (80070ec <vTaskStartScheduler+0xc4>)
 800705a:	f7ff fe0f 	bl	8006c7c <xTaskCreateStatic>
 800705e:	4603      	mov	r3, r0
 8007060:	4a23      	ldr	r2, [pc, #140]	; (80070f0 <vTaskStartScheduler+0xc8>)
 8007062:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007064:	4b22      	ldr	r3, [pc, #136]	; (80070f0 <vTaskStartScheduler+0xc8>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d002      	beq.n	8007072 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800706c:	2301      	movs	r3, #1
 800706e:	617b      	str	r3, [r7, #20]
 8007070:	e001      	b.n	8007076 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007072:	2300      	movs	r3, #0
 8007074:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	2b01      	cmp	r3, #1
 800707a:	d102      	bne.n	8007082 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800707c:	f000 fd3e 	bl	8007afc <xTimerCreateTimerTask>
 8007080:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	2b01      	cmp	r3, #1
 8007086:	d11b      	bne.n	80070c0 <vTaskStartScheduler+0x98>
	__asm volatile
 8007088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708c:	f383 8811 	msr	BASEPRI, r3
 8007090:	f3bf 8f6f 	isb	sy
 8007094:	f3bf 8f4f 	dsb	sy
 8007098:	613b      	str	r3, [r7, #16]
}
 800709a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800709c:	4b15      	ldr	r3, [pc, #84]	; (80070f4 <vTaskStartScheduler+0xcc>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	334c      	adds	r3, #76	; 0x4c
 80070a2:	4a15      	ldr	r2, [pc, #84]	; (80070f8 <vTaskStartScheduler+0xd0>)
 80070a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80070a6:	4b15      	ldr	r3, [pc, #84]	; (80070fc <vTaskStartScheduler+0xd4>)
 80070a8:	f04f 32ff 	mov.w	r2, #4294967295
 80070ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80070ae:	4b14      	ldr	r3, [pc, #80]	; (8007100 <vTaskStartScheduler+0xd8>)
 80070b0:	2201      	movs	r2, #1
 80070b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80070b4:	4b13      	ldr	r3, [pc, #76]	; (8007104 <vTaskStartScheduler+0xdc>)
 80070b6:	2200      	movs	r2, #0
 80070b8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80070ba:	f001 f8a1 	bl	8008200 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80070be:	e00e      	b.n	80070de <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c6:	d10a      	bne.n	80070de <vTaskStartScheduler+0xb6>
	__asm volatile
 80070c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070cc:	f383 8811 	msr	BASEPRI, r3
 80070d0:	f3bf 8f6f 	isb	sy
 80070d4:	f3bf 8f4f 	dsb	sy
 80070d8:	60fb      	str	r3, [r7, #12]
}
 80070da:	bf00      	nop
 80070dc:	e7fe      	b.n	80070dc <vTaskStartScheduler+0xb4>
}
 80070de:	bf00      	nop
 80070e0:	3718      	adds	r7, #24
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	08009dec 	.word	0x08009dec
 80070ec:	08007729 	.word	0x08007729
 80070f0:	20000b28 	.word	0x20000b28
 80070f4:	20000a04 	.word	0x20000a04
 80070f8:	20000078 	.word	0x20000078
 80070fc:	20000b24 	.word	0x20000b24
 8007100:	20000b10 	.word	0x20000b10
 8007104:	20000b08 	.word	0x20000b08

08007108 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007108:	b480      	push	{r7}
 800710a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800710c:	4b04      	ldr	r3, [pc, #16]	; (8007120 <vTaskSuspendAll+0x18>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	3301      	adds	r3, #1
 8007112:	4a03      	ldr	r2, [pc, #12]	; (8007120 <vTaskSuspendAll+0x18>)
 8007114:	6013      	str	r3, [r2, #0]
}
 8007116:	bf00      	nop
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	20000b2c 	.word	0x20000b2c

08007124 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800712a:	2300      	movs	r3, #0
 800712c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800712e:	2300      	movs	r3, #0
 8007130:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007132:	4b41      	ldr	r3, [pc, #260]	; (8007238 <xTaskResumeAll+0x114>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d10a      	bne.n	8007150 <xTaskResumeAll+0x2c>
	__asm volatile
 800713a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713e:	f383 8811 	msr	BASEPRI, r3
 8007142:	f3bf 8f6f 	isb	sy
 8007146:	f3bf 8f4f 	dsb	sy
 800714a:	603b      	str	r3, [r7, #0]
}
 800714c:	bf00      	nop
 800714e:	e7fe      	b.n	800714e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007150:	f001 f8f8 	bl	8008344 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007154:	4b38      	ldr	r3, [pc, #224]	; (8007238 <xTaskResumeAll+0x114>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	3b01      	subs	r3, #1
 800715a:	4a37      	ldr	r2, [pc, #220]	; (8007238 <xTaskResumeAll+0x114>)
 800715c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800715e:	4b36      	ldr	r3, [pc, #216]	; (8007238 <xTaskResumeAll+0x114>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d161      	bne.n	800722a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007166:	4b35      	ldr	r3, [pc, #212]	; (800723c <xTaskResumeAll+0x118>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d05d      	beq.n	800722a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800716e:	e02e      	b.n	80071ce <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007170:	4b33      	ldr	r3, [pc, #204]	; (8007240 <xTaskResumeAll+0x11c>)
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	3318      	adds	r3, #24
 800717c:	4618      	mov	r0, r3
 800717e:	f7ff f833 	bl	80061e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	3304      	adds	r3, #4
 8007186:	4618      	mov	r0, r3
 8007188:	f7ff f82e 	bl	80061e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007190:	2201      	movs	r2, #1
 8007192:	409a      	lsls	r2, r3
 8007194:	4b2b      	ldr	r3, [pc, #172]	; (8007244 <xTaskResumeAll+0x120>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4313      	orrs	r3, r2
 800719a:	4a2a      	ldr	r2, [pc, #168]	; (8007244 <xTaskResumeAll+0x120>)
 800719c:	6013      	str	r3, [r2, #0]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071a2:	4613      	mov	r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	4413      	add	r3, r2
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	4a27      	ldr	r2, [pc, #156]	; (8007248 <xTaskResumeAll+0x124>)
 80071ac:	441a      	add	r2, r3
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	3304      	adds	r3, #4
 80071b2:	4619      	mov	r1, r3
 80071b4:	4610      	mov	r0, r2
 80071b6:	f7fe ffba 	bl	800612e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071be:	4b23      	ldr	r3, [pc, #140]	; (800724c <xTaskResumeAll+0x128>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d302      	bcc.n	80071ce <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80071c8:	4b21      	ldr	r3, [pc, #132]	; (8007250 <xTaskResumeAll+0x12c>)
 80071ca:	2201      	movs	r2, #1
 80071cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80071ce:	4b1c      	ldr	r3, [pc, #112]	; (8007240 <xTaskResumeAll+0x11c>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1cc      	bne.n	8007170 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d001      	beq.n	80071e0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80071dc:	f000 fb5e 	bl	800789c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80071e0:	4b1c      	ldr	r3, [pc, #112]	; (8007254 <xTaskResumeAll+0x130>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d010      	beq.n	800720e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80071ec:	f000 f846 	bl	800727c <xTaskIncrementTick>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d002      	beq.n	80071fc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80071f6:	4b16      	ldr	r3, [pc, #88]	; (8007250 <xTaskResumeAll+0x12c>)
 80071f8:	2201      	movs	r2, #1
 80071fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	3b01      	subs	r3, #1
 8007200:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d1f1      	bne.n	80071ec <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007208:	4b12      	ldr	r3, [pc, #72]	; (8007254 <xTaskResumeAll+0x130>)
 800720a:	2200      	movs	r2, #0
 800720c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800720e:	4b10      	ldr	r3, [pc, #64]	; (8007250 <xTaskResumeAll+0x12c>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d009      	beq.n	800722a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007216:	2301      	movs	r3, #1
 8007218:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800721a:	4b0f      	ldr	r3, [pc, #60]	; (8007258 <xTaskResumeAll+0x134>)
 800721c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007220:	601a      	str	r2, [r3, #0]
 8007222:	f3bf 8f4f 	dsb	sy
 8007226:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800722a:	f001 f8bb 	bl	80083a4 <vPortExitCritical>

	return xAlreadyYielded;
 800722e:	68bb      	ldr	r3, [r7, #8]
}
 8007230:	4618      	mov	r0, r3
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	20000b2c 	.word	0x20000b2c
 800723c:	20000b04 	.word	0x20000b04
 8007240:	20000ac4 	.word	0x20000ac4
 8007244:	20000b0c 	.word	0x20000b0c
 8007248:	20000a08 	.word	0x20000a08
 800724c:	20000a04 	.word	0x20000a04
 8007250:	20000b18 	.word	0x20000b18
 8007254:	20000b14 	.word	0x20000b14
 8007258:	e000ed04 	.word	0xe000ed04

0800725c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007262:	4b05      	ldr	r3, [pc, #20]	; (8007278 <xTaskGetTickCount+0x1c>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007268:	687b      	ldr	r3, [r7, #4]
}
 800726a:	4618      	mov	r0, r3
 800726c:	370c      	adds	r7, #12
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	20000b08 	.word	0x20000b08

0800727c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b086      	sub	sp, #24
 8007280:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007282:	2300      	movs	r3, #0
 8007284:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007286:	4b51      	ldr	r3, [pc, #324]	; (80073cc <xTaskIncrementTick+0x150>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	f040 808d 	bne.w	80073aa <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007290:	4b4f      	ldr	r3, [pc, #316]	; (80073d0 <xTaskIncrementTick+0x154>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	3301      	adds	r3, #1
 8007296:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007298:	4a4d      	ldr	r2, [pc, #308]	; (80073d0 <xTaskIncrementTick+0x154>)
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d120      	bne.n	80072e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80072a4:	4b4b      	ldr	r3, [pc, #300]	; (80073d4 <xTaskIncrementTick+0x158>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00a      	beq.n	80072c4 <xTaskIncrementTick+0x48>
	__asm volatile
 80072ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b2:	f383 8811 	msr	BASEPRI, r3
 80072b6:	f3bf 8f6f 	isb	sy
 80072ba:	f3bf 8f4f 	dsb	sy
 80072be:	603b      	str	r3, [r7, #0]
}
 80072c0:	bf00      	nop
 80072c2:	e7fe      	b.n	80072c2 <xTaskIncrementTick+0x46>
 80072c4:	4b43      	ldr	r3, [pc, #268]	; (80073d4 <xTaskIncrementTick+0x158>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	60fb      	str	r3, [r7, #12]
 80072ca:	4b43      	ldr	r3, [pc, #268]	; (80073d8 <xTaskIncrementTick+0x15c>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a41      	ldr	r2, [pc, #260]	; (80073d4 <xTaskIncrementTick+0x158>)
 80072d0:	6013      	str	r3, [r2, #0]
 80072d2:	4a41      	ldr	r2, [pc, #260]	; (80073d8 <xTaskIncrementTick+0x15c>)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6013      	str	r3, [r2, #0]
 80072d8:	4b40      	ldr	r3, [pc, #256]	; (80073dc <xTaskIncrementTick+0x160>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	3301      	adds	r3, #1
 80072de:	4a3f      	ldr	r2, [pc, #252]	; (80073dc <xTaskIncrementTick+0x160>)
 80072e0:	6013      	str	r3, [r2, #0]
 80072e2:	f000 fadb 	bl	800789c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80072e6:	4b3e      	ldr	r3, [pc, #248]	; (80073e0 <xTaskIncrementTick+0x164>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	693a      	ldr	r2, [r7, #16]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d34d      	bcc.n	800738c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072f0:	4b38      	ldr	r3, [pc, #224]	; (80073d4 <xTaskIncrementTick+0x158>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d101      	bne.n	80072fe <xTaskIncrementTick+0x82>
 80072fa:	2301      	movs	r3, #1
 80072fc:	e000      	b.n	8007300 <xTaskIncrementTick+0x84>
 80072fe:	2300      	movs	r3, #0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d004      	beq.n	800730e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007304:	4b36      	ldr	r3, [pc, #216]	; (80073e0 <xTaskIncrementTick+0x164>)
 8007306:	f04f 32ff 	mov.w	r2, #4294967295
 800730a:	601a      	str	r2, [r3, #0]
					break;
 800730c:	e03e      	b.n	800738c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800730e:	4b31      	ldr	r3, [pc, #196]	; (80073d4 <xTaskIncrementTick+0x158>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	429a      	cmp	r2, r3
 8007324:	d203      	bcs.n	800732e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007326:	4a2e      	ldr	r2, [pc, #184]	; (80073e0 <xTaskIncrementTick+0x164>)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6013      	str	r3, [r2, #0]
						break;
 800732c:	e02e      	b.n	800738c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	3304      	adds	r3, #4
 8007332:	4618      	mov	r0, r3
 8007334:	f7fe ff58 	bl	80061e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800733c:	2b00      	cmp	r3, #0
 800733e:	d004      	beq.n	800734a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	3318      	adds	r3, #24
 8007344:	4618      	mov	r0, r3
 8007346:	f7fe ff4f 	bl	80061e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734e:	2201      	movs	r2, #1
 8007350:	409a      	lsls	r2, r3
 8007352:	4b24      	ldr	r3, [pc, #144]	; (80073e4 <xTaskIncrementTick+0x168>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4313      	orrs	r3, r2
 8007358:	4a22      	ldr	r2, [pc, #136]	; (80073e4 <xTaskIncrementTick+0x168>)
 800735a:	6013      	str	r3, [r2, #0]
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007360:	4613      	mov	r3, r2
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	4413      	add	r3, r2
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	4a1f      	ldr	r2, [pc, #124]	; (80073e8 <xTaskIncrementTick+0x16c>)
 800736a:	441a      	add	r2, r3
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	3304      	adds	r3, #4
 8007370:	4619      	mov	r1, r3
 8007372:	4610      	mov	r0, r2
 8007374:	f7fe fedb 	bl	800612e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800737c:	4b1b      	ldr	r3, [pc, #108]	; (80073ec <xTaskIncrementTick+0x170>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007382:	429a      	cmp	r2, r3
 8007384:	d3b4      	bcc.n	80072f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007386:	2301      	movs	r3, #1
 8007388:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800738a:	e7b1      	b.n	80072f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800738c:	4b17      	ldr	r3, [pc, #92]	; (80073ec <xTaskIncrementTick+0x170>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007392:	4915      	ldr	r1, [pc, #84]	; (80073e8 <xTaskIncrementTick+0x16c>)
 8007394:	4613      	mov	r3, r2
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	4413      	add	r3, r2
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	440b      	add	r3, r1
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d907      	bls.n	80073b4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80073a4:	2301      	movs	r3, #1
 80073a6:	617b      	str	r3, [r7, #20]
 80073a8:	e004      	b.n	80073b4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80073aa:	4b11      	ldr	r3, [pc, #68]	; (80073f0 <xTaskIncrementTick+0x174>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	3301      	adds	r3, #1
 80073b0:	4a0f      	ldr	r2, [pc, #60]	; (80073f0 <xTaskIncrementTick+0x174>)
 80073b2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80073b4:	4b0f      	ldr	r3, [pc, #60]	; (80073f4 <xTaskIncrementTick+0x178>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d001      	beq.n	80073c0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80073bc:	2301      	movs	r3, #1
 80073be:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80073c0:	697b      	ldr	r3, [r7, #20]
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3718      	adds	r7, #24
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	20000b2c 	.word	0x20000b2c
 80073d0:	20000b08 	.word	0x20000b08
 80073d4:	20000abc 	.word	0x20000abc
 80073d8:	20000ac0 	.word	0x20000ac0
 80073dc:	20000b1c 	.word	0x20000b1c
 80073e0:	20000b24 	.word	0x20000b24
 80073e4:	20000b0c 	.word	0x20000b0c
 80073e8:	20000a08 	.word	0x20000a08
 80073ec:	20000a04 	.word	0x20000a04
 80073f0:	20000b14 	.word	0x20000b14
 80073f4:	20000b18 	.word	0x20000b18

080073f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80073f8:	b480      	push	{r7}
 80073fa:	b087      	sub	sp, #28
 80073fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80073fe:	4b29      	ldr	r3, [pc, #164]	; (80074a4 <vTaskSwitchContext+0xac>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d003      	beq.n	800740e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007406:	4b28      	ldr	r3, [pc, #160]	; (80074a8 <vTaskSwitchContext+0xb0>)
 8007408:	2201      	movs	r2, #1
 800740a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800740c:	e044      	b.n	8007498 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800740e:	4b26      	ldr	r3, [pc, #152]	; (80074a8 <vTaskSwitchContext+0xb0>)
 8007410:	2200      	movs	r2, #0
 8007412:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007414:	4b25      	ldr	r3, [pc, #148]	; (80074ac <vTaskSwitchContext+0xb4>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	fab3 f383 	clz	r3, r3
 8007420:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007422:	7afb      	ldrb	r3, [r7, #11]
 8007424:	f1c3 031f 	rsb	r3, r3, #31
 8007428:	617b      	str	r3, [r7, #20]
 800742a:	4921      	ldr	r1, [pc, #132]	; (80074b0 <vTaskSwitchContext+0xb8>)
 800742c:	697a      	ldr	r2, [r7, #20]
 800742e:	4613      	mov	r3, r2
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4413      	add	r3, r2
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	440b      	add	r3, r1
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d10a      	bne.n	8007454 <vTaskSwitchContext+0x5c>
	__asm volatile
 800743e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007442:	f383 8811 	msr	BASEPRI, r3
 8007446:	f3bf 8f6f 	isb	sy
 800744a:	f3bf 8f4f 	dsb	sy
 800744e:	607b      	str	r3, [r7, #4]
}
 8007450:	bf00      	nop
 8007452:	e7fe      	b.n	8007452 <vTaskSwitchContext+0x5a>
 8007454:	697a      	ldr	r2, [r7, #20]
 8007456:	4613      	mov	r3, r2
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	4413      	add	r3, r2
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	4a14      	ldr	r2, [pc, #80]	; (80074b0 <vTaskSwitchContext+0xb8>)
 8007460:	4413      	add	r3, r2
 8007462:	613b      	str	r3, [r7, #16]
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	685a      	ldr	r2, [r3, #4]
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	605a      	str	r2, [r3, #4]
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	685a      	ldr	r2, [r3, #4]
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	3308      	adds	r3, #8
 8007476:	429a      	cmp	r2, r3
 8007478:	d104      	bne.n	8007484 <vTaskSwitchContext+0x8c>
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	685a      	ldr	r2, [r3, #4]
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	605a      	str	r2, [r3, #4]
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	4a0a      	ldr	r2, [pc, #40]	; (80074b4 <vTaskSwitchContext+0xbc>)
 800748c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800748e:	4b09      	ldr	r3, [pc, #36]	; (80074b4 <vTaskSwitchContext+0xbc>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	334c      	adds	r3, #76	; 0x4c
 8007494:	4a08      	ldr	r2, [pc, #32]	; (80074b8 <vTaskSwitchContext+0xc0>)
 8007496:	6013      	str	r3, [r2, #0]
}
 8007498:	bf00      	nop
 800749a:	371c      	adds	r7, #28
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr
 80074a4:	20000b2c 	.word	0x20000b2c
 80074a8:	20000b18 	.word	0x20000b18
 80074ac:	20000b0c 	.word	0x20000b0c
 80074b0:	20000a08 	.word	0x20000a08
 80074b4:	20000a04 	.word	0x20000a04
 80074b8:	20000078 	.word	0x20000078

080074bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d10a      	bne.n	80074e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80074cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d0:	f383 8811 	msr	BASEPRI, r3
 80074d4:	f3bf 8f6f 	isb	sy
 80074d8:	f3bf 8f4f 	dsb	sy
 80074dc:	60fb      	str	r3, [r7, #12]
}
 80074de:	bf00      	nop
 80074e0:	e7fe      	b.n	80074e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80074e2:	4b07      	ldr	r3, [pc, #28]	; (8007500 <vTaskPlaceOnEventList+0x44>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	3318      	adds	r3, #24
 80074e8:	4619      	mov	r1, r3
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f7fe fe43 	bl	8006176 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80074f0:	2101      	movs	r1, #1
 80074f2:	6838      	ldr	r0, [r7, #0]
 80074f4:	f000 fa9c 	bl	8007a30 <prvAddCurrentTaskToDelayedList>
}
 80074f8:	bf00      	nop
 80074fa:	3710      	adds	r7, #16
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	20000a04 	.word	0x20000a04

08007504 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007504:	b580      	push	{r7, lr}
 8007506:	b086      	sub	sp, #24
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d10a      	bne.n	800752c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751a:	f383 8811 	msr	BASEPRI, r3
 800751e:	f3bf 8f6f 	isb	sy
 8007522:	f3bf 8f4f 	dsb	sy
 8007526:	617b      	str	r3, [r7, #20]
}
 8007528:	bf00      	nop
 800752a:	e7fe      	b.n	800752a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800752c:	4b0a      	ldr	r3, [pc, #40]	; (8007558 <vTaskPlaceOnEventListRestricted+0x54>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	3318      	adds	r3, #24
 8007532:	4619      	mov	r1, r3
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f7fe fdfa 	bl	800612e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d002      	beq.n	8007546 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007540:	f04f 33ff 	mov.w	r3, #4294967295
 8007544:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007546:	6879      	ldr	r1, [r7, #4]
 8007548:	68b8      	ldr	r0, [r7, #8]
 800754a:	f000 fa71 	bl	8007a30 <prvAddCurrentTaskToDelayedList>
	}
 800754e:	bf00      	nop
 8007550:	3718      	adds	r7, #24
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	20000a04 	.word	0x20000a04

0800755c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b086      	sub	sp, #24
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d10a      	bne.n	8007588 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007576:	f383 8811 	msr	BASEPRI, r3
 800757a:	f3bf 8f6f 	isb	sy
 800757e:	f3bf 8f4f 	dsb	sy
 8007582:	60fb      	str	r3, [r7, #12]
}
 8007584:	bf00      	nop
 8007586:	e7fe      	b.n	8007586 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	3318      	adds	r3, #24
 800758c:	4618      	mov	r0, r3
 800758e:	f7fe fe2b 	bl	80061e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007592:	4b1d      	ldr	r3, [pc, #116]	; (8007608 <xTaskRemoveFromEventList+0xac>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d11c      	bne.n	80075d4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	3304      	adds	r3, #4
 800759e:	4618      	mov	r0, r3
 80075a0:	f7fe fe22 	bl	80061e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a8:	2201      	movs	r2, #1
 80075aa:	409a      	lsls	r2, r3
 80075ac:	4b17      	ldr	r3, [pc, #92]	; (800760c <xTaskRemoveFromEventList+0xb0>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	4a16      	ldr	r2, [pc, #88]	; (800760c <xTaskRemoveFromEventList+0xb0>)
 80075b4:	6013      	str	r3, [r2, #0]
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ba:	4613      	mov	r3, r2
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	4413      	add	r3, r2
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	4a13      	ldr	r2, [pc, #76]	; (8007610 <xTaskRemoveFromEventList+0xb4>)
 80075c4:	441a      	add	r2, r3
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	3304      	adds	r3, #4
 80075ca:	4619      	mov	r1, r3
 80075cc:	4610      	mov	r0, r2
 80075ce:	f7fe fdae 	bl	800612e <vListInsertEnd>
 80075d2:	e005      	b.n	80075e0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	3318      	adds	r3, #24
 80075d8:	4619      	mov	r1, r3
 80075da:	480e      	ldr	r0, [pc, #56]	; (8007614 <xTaskRemoveFromEventList+0xb8>)
 80075dc:	f7fe fda7 	bl	800612e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e4:	4b0c      	ldr	r3, [pc, #48]	; (8007618 <xTaskRemoveFromEventList+0xbc>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d905      	bls.n	80075fa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80075ee:	2301      	movs	r3, #1
 80075f0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80075f2:	4b0a      	ldr	r3, [pc, #40]	; (800761c <xTaskRemoveFromEventList+0xc0>)
 80075f4:	2201      	movs	r2, #1
 80075f6:	601a      	str	r2, [r3, #0]
 80075f8:	e001      	b.n	80075fe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80075fa:	2300      	movs	r3, #0
 80075fc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80075fe:	697b      	ldr	r3, [r7, #20]
}
 8007600:	4618      	mov	r0, r3
 8007602:	3718      	adds	r7, #24
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	20000b2c 	.word	0x20000b2c
 800760c:	20000b0c 	.word	0x20000b0c
 8007610:	20000a08 	.word	0x20000a08
 8007614:	20000ac4 	.word	0x20000ac4
 8007618:	20000a04 	.word	0x20000a04
 800761c:	20000b18 	.word	0x20000b18

08007620 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007628:	4b06      	ldr	r3, [pc, #24]	; (8007644 <vTaskInternalSetTimeOutState+0x24>)
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007630:	4b05      	ldr	r3, [pc, #20]	; (8007648 <vTaskInternalSetTimeOutState+0x28>)
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	605a      	str	r2, [r3, #4]
}
 8007638:	bf00      	nop
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr
 8007644:	20000b1c 	.word	0x20000b1c
 8007648:	20000b08 	.word	0x20000b08

0800764c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b088      	sub	sp, #32
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d10a      	bne.n	8007672 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800765c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007660:	f383 8811 	msr	BASEPRI, r3
 8007664:	f3bf 8f6f 	isb	sy
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	613b      	str	r3, [r7, #16]
}
 800766e:	bf00      	nop
 8007670:	e7fe      	b.n	8007670 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d10a      	bne.n	800768e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767c:	f383 8811 	msr	BASEPRI, r3
 8007680:	f3bf 8f6f 	isb	sy
 8007684:	f3bf 8f4f 	dsb	sy
 8007688:	60fb      	str	r3, [r7, #12]
}
 800768a:	bf00      	nop
 800768c:	e7fe      	b.n	800768c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800768e:	f000 fe59 	bl	8008344 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007692:	4b1d      	ldr	r3, [pc, #116]	; (8007708 <xTaskCheckForTimeOut+0xbc>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	69ba      	ldr	r2, [r7, #24]
 800769e:	1ad3      	subs	r3, r2, r3
 80076a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076aa:	d102      	bne.n	80076b2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80076ac:	2300      	movs	r3, #0
 80076ae:	61fb      	str	r3, [r7, #28]
 80076b0:	e023      	b.n	80076fa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	4b15      	ldr	r3, [pc, #84]	; (800770c <xTaskCheckForTimeOut+0xc0>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d007      	beq.n	80076ce <xTaskCheckForTimeOut+0x82>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	69ba      	ldr	r2, [r7, #24]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d302      	bcc.n	80076ce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80076c8:	2301      	movs	r3, #1
 80076ca:	61fb      	str	r3, [r7, #28]
 80076cc:	e015      	b.n	80076fa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d20b      	bcs.n	80076f0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	1ad2      	subs	r2, r2, r3
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f7ff ff9b 	bl	8007620 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80076ea:	2300      	movs	r3, #0
 80076ec:	61fb      	str	r3, [r7, #28]
 80076ee:	e004      	b.n	80076fa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	2200      	movs	r2, #0
 80076f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80076f6:	2301      	movs	r3, #1
 80076f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80076fa:	f000 fe53 	bl	80083a4 <vPortExitCritical>

	return xReturn;
 80076fe:	69fb      	ldr	r3, [r7, #28]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3720      	adds	r7, #32
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	20000b08 	.word	0x20000b08
 800770c:	20000b1c 	.word	0x20000b1c

08007710 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007710:	b480      	push	{r7}
 8007712:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007714:	4b03      	ldr	r3, [pc, #12]	; (8007724 <vTaskMissedYield+0x14>)
 8007716:	2201      	movs	r2, #1
 8007718:	601a      	str	r2, [r3, #0]
}
 800771a:	bf00      	nop
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr
 8007724:	20000b18 	.word	0x20000b18

08007728 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007730:	f000 f852 	bl	80077d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007734:	4b06      	ldr	r3, [pc, #24]	; (8007750 <prvIdleTask+0x28>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2b01      	cmp	r3, #1
 800773a:	d9f9      	bls.n	8007730 <prvIdleTask+0x8>
			{
				taskYIELD();
 800773c:	4b05      	ldr	r3, [pc, #20]	; (8007754 <prvIdleTask+0x2c>)
 800773e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007742:	601a      	str	r2, [r3, #0]
 8007744:	f3bf 8f4f 	dsb	sy
 8007748:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800774c:	e7f0      	b.n	8007730 <prvIdleTask+0x8>
 800774e:	bf00      	nop
 8007750:	20000a08 	.word	0x20000a08
 8007754:	e000ed04 	.word	0xe000ed04

08007758 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800775e:	2300      	movs	r3, #0
 8007760:	607b      	str	r3, [r7, #4]
 8007762:	e00c      	b.n	800777e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	4613      	mov	r3, r2
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	4413      	add	r3, r2
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	4a12      	ldr	r2, [pc, #72]	; (80077b8 <prvInitialiseTaskLists+0x60>)
 8007770:	4413      	add	r3, r2
 8007772:	4618      	mov	r0, r3
 8007774:	f7fe fcae 	bl	80060d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	3301      	adds	r3, #1
 800777c:	607b      	str	r3, [r7, #4]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2b06      	cmp	r3, #6
 8007782:	d9ef      	bls.n	8007764 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007784:	480d      	ldr	r0, [pc, #52]	; (80077bc <prvInitialiseTaskLists+0x64>)
 8007786:	f7fe fca5 	bl	80060d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800778a:	480d      	ldr	r0, [pc, #52]	; (80077c0 <prvInitialiseTaskLists+0x68>)
 800778c:	f7fe fca2 	bl	80060d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007790:	480c      	ldr	r0, [pc, #48]	; (80077c4 <prvInitialiseTaskLists+0x6c>)
 8007792:	f7fe fc9f 	bl	80060d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007796:	480c      	ldr	r0, [pc, #48]	; (80077c8 <prvInitialiseTaskLists+0x70>)
 8007798:	f7fe fc9c 	bl	80060d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800779c:	480b      	ldr	r0, [pc, #44]	; (80077cc <prvInitialiseTaskLists+0x74>)
 800779e:	f7fe fc99 	bl	80060d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80077a2:	4b0b      	ldr	r3, [pc, #44]	; (80077d0 <prvInitialiseTaskLists+0x78>)
 80077a4:	4a05      	ldr	r2, [pc, #20]	; (80077bc <prvInitialiseTaskLists+0x64>)
 80077a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80077a8:	4b0a      	ldr	r3, [pc, #40]	; (80077d4 <prvInitialiseTaskLists+0x7c>)
 80077aa:	4a05      	ldr	r2, [pc, #20]	; (80077c0 <prvInitialiseTaskLists+0x68>)
 80077ac:	601a      	str	r2, [r3, #0]
}
 80077ae:	bf00      	nop
 80077b0:	3708      	adds	r7, #8
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	20000a08 	.word	0x20000a08
 80077bc:	20000a94 	.word	0x20000a94
 80077c0:	20000aa8 	.word	0x20000aa8
 80077c4:	20000ac4 	.word	0x20000ac4
 80077c8:	20000ad8 	.word	0x20000ad8
 80077cc:	20000af0 	.word	0x20000af0
 80077d0:	20000abc 	.word	0x20000abc
 80077d4:	20000ac0 	.word	0x20000ac0

080077d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077de:	e019      	b.n	8007814 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80077e0:	f000 fdb0 	bl	8008344 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80077e4:	4b10      	ldr	r3, [pc, #64]	; (8007828 <prvCheckTasksWaitingTermination+0x50>)
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	3304      	adds	r3, #4
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7fe fcf9 	bl	80061e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80077f6:	4b0d      	ldr	r3, [pc, #52]	; (800782c <prvCheckTasksWaitingTermination+0x54>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	3b01      	subs	r3, #1
 80077fc:	4a0b      	ldr	r2, [pc, #44]	; (800782c <prvCheckTasksWaitingTermination+0x54>)
 80077fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007800:	4b0b      	ldr	r3, [pc, #44]	; (8007830 <prvCheckTasksWaitingTermination+0x58>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	3b01      	subs	r3, #1
 8007806:	4a0a      	ldr	r2, [pc, #40]	; (8007830 <prvCheckTasksWaitingTermination+0x58>)
 8007808:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800780a:	f000 fdcb 	bl	80083a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f810 	bl	8007834 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007814:	4b06      	ldr	r3, [pc, #24]	; (8007830 <prvCheckTasksWaitingTermination+0x58>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d1e1      	bne.n	80077e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800781c:	bf00      	nop
 800781e:	bf00      	nop
 8007820:	3708      	adds	r7, #8
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	20000ad8 	.word	0x20000ad8
 800782c:	20000b04 	.word	0x20000b04
 8007830:	20000aec 	.word	0x20000aec

08007834 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	334c      	adds	r3, #76	; 0x4c
 8007840:	4618      	mov	r0, r3
 8007842:	f001 fabb 	bl	8008dbc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800784c:	2b00      	cmp	r3, #0
 800784e:	d108      	bne.n	8007862 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007854:	4618      	mov	r0, r3
 8007856:	f000 ff5b 	bl	8008710 <vPortFree>
				vPortFree( pxTCB );
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 ff58 	bl	8008710 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007860:	e018      	b.n	8007894 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007868:	2b01      	cmp	r3, #1
 800786a:	d103      	bne.n	8007874 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 ff4f 	bl	8008710 <vPortFree>
	}
 8007872:	e00f      	b.n	8007894 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800787a:	2b02      	cmp	r3, #2
 800787c:	d00a      	beq.n	8007894 <prvDeleteTCB+0x60>
	__asm volatile
 800787e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007882:	f383 8811 	msr	BASEPRI, r3
 8007886:	f3bf 8f6f 	isb	sy
 800788a:	f3bf 8f4f 	dsb	sy
 800788e:	60fb      	str	r3, [r7, #12]
}
 8007890:	bf00      	nop
 8007892:	e7fe      	b.n	8007892 <prvDeleteTCB+0x5e>
	}
 8007894:	bf00      	nop
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078a2:	4b0f      	ldr	r3, [pc, #60]	; (80078e0 <prvResetNextTaskUnblockTime+0x44>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d101      	bne.n	80078b0 <prvResetNextTaskUnblockTime+0x14>
 80078ac:	2301      	movs	r3, #1
 80078ae:	e000      	b.n	80078b2 <prvResetNextTaskUnblockTime+0x16>
 80078b0:	2300      	movs	r3, #0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d004      	beq.n	80078c0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80078b6:	4b0b      	ldr	r3, [pc, #44]	; (80078e4 <prvResetNextTaskUnblockTime+0x48>)
 80078b8:	f04f 32ff 	mov.w	r2, #4294967295
 80078bc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80078be:	e008      	b.n	80078d2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80078c0:	4b07      	ldr	r3, [pc, #28]	; (80078e0 <prvResetNextTaskUnblockTime+0x44>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	4a05      	ldr	r2, [pc, #20]	; (80078e4 <prvResetNextTaskUnblockTime+0x48>)
 80078d0:	6013      	str	r3, [r2, #0]
}
 80078d2:	bf00      	nop
 80078d4:	370c      	adds	r7, #12
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr
 80078de:	bf00      	nop
 80078e0:	20000abc 	.word	0x20000abc
 80078e4:	20000b24 	.word	0x20000b24

080078e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80078ee:	4b0b      	ldr	r3, [pc, #44]	; (800791c <xTaskGetSchedulerState+0x34>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d102      	bne.n	80078fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80078f6:	2301      	movs	r3, #1
 80078f8:	607b      	str	r3, [r7, #4]
 80078fa:	e008      	b.n	800790e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078fc:	4b08      	ldr	r3, [pc, #32]	; (8007920 <xTaskGetSchedulerState+0x38>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d102      	bne.n	800790a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007904:	2302      	movs	r3, #2
 8007906:	607b      	str	r3, [r7, #4]
 8007908:	e001      	b.n	800790e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800790a:	2300      	movs	r3, #0
 800790c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800790e:	687b      	ldr	r3, [r7, #4]
	}
 8007910:	4618      	mov	r0, r3
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr
 800791c:	20000b10 	.word	0x20000b10
 8007920:	20000b2c 	.word	0x20000b2c

08007924 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007924:	b580      	push	{r7, lr}
 8007926:	b086      	sub	sp, #24
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007930:	2300      	movs	r3, #0
 8007932:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d06e      	beq.n	8007a18 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800793a:	4b3a      	ldr	r3, [pc, #232]	; (8007a24 <xTaskPriorityDisinherit+0x100>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	693a      	ldr	r2, [r7, #16]
 8007940:	429a      	cmp	r2, r3
 8007942:	d00a      	beq.n	800795a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007948:	f383 8811 	msr	BASEPRI, r3
 800794c:	f3bf 8f6f 	isb	sy
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	60fb      	str	r3, [r7, #12]
}
 8007956:	bf00      	nop
 8007958:	e7fe      	b.n	8007958 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800795e:	2b00      	cmp	r3, #0
 8007960:	d10a      	bne.n	8007978 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007966:	f383 8811 	msr	BASEPRI, r3
 800796a:	f3bf 8f6f 	isb	sy
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	60bb      	str	r3, [r7, #8]
}
 8007974:	bf00      	nop
 8007976:	e7fe      	b.n	8007976 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800797c:	1e5a      	subs	r2, r3, #1
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800798a:	429a      	cmp	r2, r3
 800798c:	d044      	beq.n	8007a18 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007992:	2b00      	cmp	r3, #0
 8007994:	d140      	bne.n	8007a18 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	3304      	adds	r3, #4
 800799a:	4618      	mov	r0, r3
 800799c:	f7fe fc24 	bl	80061e8 <uxListRemove>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d115      	bne.n	80079d2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079aa:	491f      	ldr	r1, [pc, #124]	; (8007a28 <xTaskPriorityDisinherit+0x104>)
 80079ac:	4613      	mov	r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	4413      	add	r3, r2
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	440b      	add	r3, r1
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d10a      	bne.n	80079d2 <xTaskPriorityDisinherit+0xae>
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c0:	2201      	movs	r2, #1
 80079c2:	fa02 f303 	lsl.w	r3, r2, r3
 80079c6:	43da      	mvns	r2, r3
 80079c8:	4b18      	ldr	r3, [pc, #96]	; (8007a2c <xTaskPriorityDisinherit+0x108>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4013      	ands	r3, r2
 80079ce:	4a17      	ldr	r2, [pc, #92]	; (8007a2c <xTaskPriorityDisinherit+0x108>)
 80079d0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079de:	f1c3 0207 	rsb	r2, r3, #7
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ea:	2201      	movs	r2, #1
 80079ec:	409a      	lsls	r2, r3
 80079ee:	4b0f      	ldr	r3, [pc, #60]	; (8007a2c <xTaskPriorityDisinherit+0x108>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	4a0d      	ldr	r2, [pc, #52]	; (8007a2c <xTaskPriorityDisinherit+0x108>)
 80079f6:	6013      	str	r3, [r2, #0]
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079fc:	4613      	mov	r3, r2
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	4413      	add	r3, r2
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	4a08      	ldr	r2, [pc, #32]	; (8007a28 <xTaskPriorityDisinherit+0x104>)
 8007a06:	441a      	add	r2, r3
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	3304      	adds	r3, #4
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	4610      	mov	r0, r2
 8007a10:	f7fe fb8d 	bl	800612e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007a14:	2301      	movs	r3, #1
 8007a16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a18:	697b      	ldr	r3, [r7, #20]
	}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3718      	adds	r7, #24
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	20000a04 	.word	0x20000a04
 8007a28:	20000a08 	.word	0x20000a08
 8007a2c:	20000b0c 	.word	0x20000b0c

08007a30 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a3a:	4b29      	ldr	r3, [pc, #164]	; (8007ae0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a40:	4b28      	ldr	r3, [pc, #160]	; (8007ae4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	3304      	adds	r3, #4
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7fe fbce 	bl	80061e8 <uxListRemove>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d10b      	bne.n	8007a6a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007a52:	4b24      	ldr	r3, [pc, #144]	; (8007ae4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a58:	2201      	movs	r2, #1
 8007a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a5e:	43da      	mvns	r2, r3
 8007a60:	4b21      	ldr	r3, [pc, #132]	; (8007ae8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4013      	ands	r3, r2
 8007a66:	4a20      	ldr	r2, [pc, #128]	; (8007ae8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a68:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a70:	d10a      	bne.n	8007a88 <prvAddCurrentTaskToDelayedList+0x58>
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d007      	beq.n	8007a88 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a78:	4b1a      	ldr	r3, [pc, #104]	; (8007ae4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	3304      	adds	r3, #4
 8007a7e:	4619      	mov	r1, r3
 8007a80:	481a      	ldr	r0, [pc, #104]	; (8007aec <prvAddCurrentTaskToDelayedList+0xbc>)
 8007a82:	f7fe fb54 	bl	800612e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007a86:	e026      	b.n	8007ad6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a90:	4b14      	ldr	r3, [pc, #80]	; (8007ae4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007a98:	68ba      	ldr	r2, [r7, #8]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d209      	bcs.n	8007ab4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007aa0:	4b13      	ldr	r3, [pc, #76]	; (8007af0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	4b0f      	ldr	r3, [pc, #60]	; (8007ae4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	3304      	adds	r3, #4
 8007aaa:	4619      	mov	r1, r3
 8007aac:	4610      	mov	r0, r2
 8007aae:	f7fe fb62 	bl	8006176 <vListInsert>
}
 8007ab2:	e010      	b.n	8007ad6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ab4:	4b0f      	ldr	r3, [pc, #60]	; (8007af4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	4b0a      	ldr	r3, [pc, #40]	; (8007ae4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	3304      	adds	r3, #4
 8007abe:	4619      	mov	r1, r3
 8007ac0:	4610      	mov	r0, r2
 8007ac2:	f7fe fb58 	bl	8006176 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ac6:	4b0c      	ldr	r3, [pc, #48]	; (8007af8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68ba      	ldr	r2, [r7, #8]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d202      	bcs.n	8007ad6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007ad0:	4a09      	ldr	r2, [pc, #36]	; (8007af8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	6013      	str	r3, [r2, #0]
}
 8007ad6:	bf00      	nop
 8007ad8:	3710      	adds	r7, #16
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	20000b08 	.word	0x20000b08
 8007ae4:	20000a04 	.word	0x20000a04
 8007ae8:	20000b0c 	.word	0x20000b0c
 8007aec:	20000af0 	.word	0x20000af0
 8007af0:	20000ac0 	.word	0x20000ac0
 8007af4:	20000abc 	.word	0x20000abc
 8007af8:	20000b24 	.word	0x20000b24

08007afc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b08a      	sub	sp, #40	; 0x28
 8007b00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007b02:	2300      	movs	r3, #0
 8007b04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007b06:	f000 fab1 	bl	800806c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007b0a:	4b1c      	ldr	r3, [pc, #112]	; (8007b7c <xTimerCreateTimerTask+0x80>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d021      	beq.n	8007b56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007b12:	2300      	movs	r3, #0
 8007b14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007b16:	2300      	movs	r3, #0
 8007b18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007b1a:	1d3a      	adds	r2, r7, #4
 8007b1c:	f107 0108 	add.w	r1, r7, #8
 8007b20:	f107 030c 	add.w	r3, r7, #12
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7f8 fbc5 	bl	80002b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007b2a:	6879      	ldr	r1, [r7, #4]
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	9202      	str	r2, [sp, #8]
 8007b32:	9301      	str	r3, [sp, #4]
 8007b34:	2302      	movs	r3, #2
 8007b36:	9300      	str	r3, [sp, #0]
 8007b38:	2300      	movs	r3, #0
 8007b3a:	460a      	mov	r2, r1
 8007b3c:	4910      	ldr	r1, [pc, #64]	; (8007b80 <xTimerCreateTimerTask+0x84>)
 8007b3e:	4811      	ldr	r0, [pc, #68]	; (8007b84 <xTimerCreateTimerTask+0x88>)
 8007b40:	f7ff f89c 	bl	8006c7c <xTaskCreateStatic>
 8007b44:	4603      	mov	r3, r0
 8007b46:	4a10      	ldr	r2, [pc, #64]	; (8007b88 <xTimerCreateTimerTask+0x8c>)
 8007b48:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007b4a:	4b0f      	ldr	r3, [pc, #60]	; (8007b88 <xTimerCreateTimerTask+0x8c>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d001      	beq.n	8007b56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007b52:	2301      	movs	r3, #1
 8007b54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10a      	bne.n	8007b72 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b60:	f383 8811 	msr	BASEPRI, r3
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	f3bf 8f4f 	dsb	sy
 8007b6c:	613b      	str	r3, [r7, #16]
}
 8007b6e:	bf00      	nop
 8007b70:	e7fe      	b.n	8007b70 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007b72:	697b      	ldr	r3, [r7, #20]
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3718      	adds	r7, #24
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	20000b60 	.word	0x20000b60
 8007b80:	08009df4 	.word	0x08009df4
 8007b84:	08007ca9 	.word	0x08007ca9
 8007b88:	20000b64 	.word	0x20000b64

08007b8c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b08a      	sub	sp, #40	; 0x28
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
 8007b98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d10a      	bne.n	8007bba <xTimerGenericCommand+0x2e>
	__asm volatile
 8007ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba8:	f383 8811 	msr	BASEPRI, r3
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	623b      	str	r3, [r7, #32]
}
 8007bb6:	bf00      	nop
 8007bb8:	e7fe      	b.n	8007bb8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007bba:	4b1a      	ldr	r3, [pc, #104]	; (8007c24 <xTimerGenericCommand+0x98>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d02a      	beq.n	8007c18 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	2b05      	cmp	r3, #5
 8007bd2:	dc18      	bgt.n	8007c06 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007bd4:	f7ff fe88 	bl	80078e8 <xTaskGetSchedulerState>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d109      	bne.n	8007bf2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007bde:	4b11      	ldr	r3, [pc, #68]	; (8007c24 <xTimerGenericCommand+0x98>)
 8007be0:	6818      	ldr	r0, [r3, #0]
 8007be2:	f107 0114 	add.w	r1, r7, #20
 8007be6:	2300      	movs	r3, #0
 8007be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bea:	f7fe fc63 	bl	80064b4 <xQueueGenericSend>
 8007bee:	6278      	str	r0, [r7, #36]	; 0x24
 8007bf0:	e012      	b.n	8007c18 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007bf2:	4b0c      	ldr	r3, [pc, #48]	; (8007c24 <xTimerGenericCommand+0x98>)
 8007bf4:	6818      	ldr	r0, [r3, #0]
 8007bf6:	f107 0114 	add.w	r1, r7, #20
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f7fe fc59 	bl	80064b4 <xQueueGenericSend>
 8007c02:	6278      	str	r0, [r7, #36]	; 0x24
 8007c04:	e008      	b.n	8007c18 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007c06:	4b07      	ldr	r3, [pc, #28]	; (8007c24 <xTimerGenericCommand+0x98>)
 8007c08:	6818      	ldr	r0, [r3, #0]
 8007c0a:	f107 0114 	add.w	r1, r7, #20
 8007c0e:	2300      	movs	r3, #0
 8007c10:	683a      	ldr	r2, [r7, #0]
 8007c12:	f7fe fd4d 	bl	80066b0 <xQueueGenericSendFromISR>
 8007c16:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3728      	adds	r7, #40	; 0x28
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	20000b60 	.word	0x20000b60

08007c28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b088      	sub	sp, #32
 8007c2c:	af02      	add	r7, sp, #8
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c32:	4b1c      	ldr	r3, [pc, #112]	; (8007ca4 <prvProcessExpiredTimer+0x7c>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	3304      	adds	r3, #4
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7fe fad1 	bl	80061e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	69db      	ldr	r3, [r3, #28]
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d122      	bne.n	8007c94 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	699a      	ldr	r2, [r3, #24]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	18d1      	adds	r1, r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	683a      	ldr	r2, [r7, #0]
 8007c5a:	6978      	ldr	r0, [r7, #20]
 8007c5c:	f000 f8c8 	bl	8007df0 <prvInsertTimerInActiveList>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d016      	beq.n	8007c94 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c66:	2300      	movs	r3, #0
 8007c68:	9300      	str	r3, [sp, #0]
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	2100      	movs	r1, #0
 8007c70:	6978      	ldr	r0, [r7, #20]
 8007c72:	f7ff ff8b 	bl	8007b8c <xTimerGenericCommand>
 8007c76:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d10a      	bne.n	8007c94 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8007c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	60fb      	str	r3, [r7, #12]
}
 8007c90:	bf00      	nop
 8007c92:	e7fe      	b.n	8007c92 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c98:	6978      	ldr	r0, [r7, #20]
 8007c9a:	4798      	blx	r3
}
 8007c9c:	bf00      	nop
 8007c9e:	3718      	adds	r7, #24
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	20000b58 	.word	0x20000b58

08007ca8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007cb0:	f107 0308 	add.w	r3, r7, #8
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f000 f857 	bl	8007d68 <prvGetNextExpireTime>
 8007cba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f000 f803 	bl	8007ccc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007cc6:	f000 f8d5 	bl	8007e74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007cca:	e7f1      	b.n	8007cb0 <prvTimerTask+0x8>

08007ccc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007cd6:	f7ff fa17 	bl	8007108 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007cda:	f107 0308 	add.w	r3, r7, #8
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f000 f866 	bl	8007db0 <prvSampleTimeNow>
 8007ce4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d130      	bne.n	8007d4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d10a      	bne.n	8007d08 <prvProcessTimerOrBlockTask+0x3c>
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d806      	bhi.n	8007d08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007cfa:	f7ff fa13 	bl	8007124 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007cfe:	68f9      	ldr	r1, [r7, #12]
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f7ff ff91 	bl	8007c28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007d06:	e024      	b.n	8007d52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d008      	beq.n	8007d20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007d0e:	4b13      	ldr	r3, [pc, #76]	; (8007d5c <prvProcessTimerOrBlockTask+0x90>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	bf0c      	ite	eq
 8007d18:	2301      	moveq	r3, #1
 8007d1a:	2300      	movne	r3, #0
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007d20:	4b0f      	ldr	r3, [pc, #60]	; (8007d60 <prvProcessTimerOrBlockTask+0x94>)
 8007d22:	6818      	ldr	r0, [r3, #0]
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	1ad3      	subs	r3, r2, r3
 8007d2a:	683a      	ldr	r2, [r7, #0]
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	f7fe ff71 	bl	8006c14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007d32:	f7ff f9f7 	bl	8007124 <xTaskResumeAll>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d10a      	bne.n	8007d52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007d3c:	4b09      	ldr	r3, [pc, #36]	; (8007d64 <prvProcessTimerOrBlockTask+0x98>)
 8007d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d42:	601a      	str	r2, [r3, #0]
 8007d44:	f3bf 8f4f 	dsb	sy
 8007d48:	f3bf 8f6f 	isb	sy
}
 8007d4c:	e001      	b.n	8007d52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007d4e:	f7ff f9e9 	bl	8007124 <xTaskResumeAll>
}
 8007d52:	bf00      	nop
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	20000b5c 	.word	0x20000b5c
 8007d60:	20000b60 	.word	0x20000b60
 8007d64:	e000ed04 	.word	0xe000ed04

08007d68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007d70:	4b0e      	ldr	r3, [pc, #56]	; (8007dac <prvGetNextExpireTime+0x44>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	bf0c      	ite	eq
 8007d7a:	2301      	moveq	r3, #1
 8007d7c:	2300      	movne	r3, #0
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	461a      	mov	r2, r3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d105      	bne.n	8007d9a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d8e:	4b07      	ldr	r3, [pc, #28]	; (8007dac <prvGetNextExpireTime+0x44>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	60fb      	str	r3, [r7, #12]
 8007d98:	e001      	b.n	8007d9e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3714      	adds	r7, #20
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr
 8007dac:	20000b58 	.word	0x20000b58

08007db0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007db8:	f7ff fa50 	bl	800725c <xTaskGetTickCount>
 8007dbc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007dbe:	4b0b      	ldr	r3, [pc, #44]	; (8007dec <prvSampleTimeNow+0x3c>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d205      	bcs.n	8007dd4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007dc8:	f000 f8ee 	bl	8007fa8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	601a      	str	r2, [r3, #0]
 8007dd2:	e002      	b.n	8007dda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007dda:	4a04      	ldr	r2, [pc, #16]	; (8007dec <prvSampleTimeNow+0x3c>)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007de0:	68fb      	ldr	r3, [r7, #12]
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3710      	adds	r7, #16
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	20000b68 	.word	0x20000b68

08007df0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b086      	sub	sp, #24
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]
 8007dfc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	68ba      	ldr	r2, [r7, #8]
 8007e06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007e0e:	68ba      	ldr	r2, [r7, #8]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d812      	bhi.n	8007e3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	1ad2      	subs	r2, r2, r3
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	699b      	ldr	r3, [r3, #24]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d302      	bcc.n	8007e2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007e24:	2301      	movs	r3, #1
 8007e26:	617b      	str	r3, [r7, #20]
 8007e28:	e01b      	b.n	8007e62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007e2a:	4b10      	ldr	r3, [pc, #64]	; (8007e6c <prvInsertTimerInActiveList+0x7c>)
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	3304      	adds	r3, #4
 8007e32:	4619      	mov	r1, r3
 8007e34:	4610      	mov	r0, r2
 8007e36:	f7fe f99e 	bl	8006176 <vListInsert>
 8007e3a:	e012      	b.n	8007e62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d206      	bcs.n	8007e52 <prvInsertTimerInActiveList+0x62>
 8007e44:	68ba      	ldr	r2, [r7, #8]
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d302      	bcc.n	8007e52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	617b      	str	r3, [r7, #20]
 8007e50:	e007      	b.n	8007e62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e52:	4b07      	ldr	r3, [pc, #28]	; (8007e70 <prvInsertTimerInActiveList+0x80>)
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	3304      	adds	r3, #4
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	4610      	mov	r0, r2
 8007e5e:	f7fe f98a 	bl	8006176 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007e62:	697b      	ldr	r3, [r7, #20]
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3718      	adds	r7, #24
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	20000b5c 	.word	0x20000b5c
 8007e70:	20000b58 	.word	0x20000b58

08007e74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b08c      	sub	sp, #48	; 0x30
 8007e78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e7a:	e081      	b.n	8007f80 <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	db7e      	blt.n	8007f80 <prvProcessReceivedCommands+0x10c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e88:	695b      	ldr	r3, [r3, #20]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d004      	beq.n	8007e98 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e90:	3304      	adds	r3, #4
 8007e92:	4618      	mov	r0, r3
 8007e94:	f7fe f9a8 	bl	80061e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e98:	1d3b      	adds	r3, r7, #4
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7ff ff88 	bl	8007db0 <prvSampleTimeNow>
 8007ea0:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	2b09      	cmp	r3, #9
 8007ea6:	d86a      	bhi.n	8007f7e <prvProcessReceivedCommands+0x10a>
 8007ea8:	a201      	add	r2, pc, #4	; (adr r2, 8007eb0 <prvProcessReceivedCommands+0x3c>)
 8007eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eae:	bf00      	nop
 8007eb0:	08007ed9 	.word	0x08007ed9
 8007eb4:	08007ed9 	.word	0x08007ed9
 8007eb8:	08007ed9 	.word	0x08007ed9
 8007ebc:	08007f81 	.word	0x08007f81
 8007ec0:	08007f35 	.word	0x08007f35
 8007ec4:	08007f6d 	.word	0x08007f6d
 8007ec8:	08007ed9 	.word	0x08007ed9
 8007ecc:	08007ed9 	.word	0x08007ed9
 8007ed0:	08007f81 	.word	0x08007f81
 8007ed4:	08007f35 	.word	0x08007f35
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007edc:	699b      	ldr	r3, [r3, #24]
 8007ede:	18d1      	adds	r1, r2, r3
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6a3a      	ldr	r2, [r7, #32]
 8007ee4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ee6:	f7ff ff83 	bl	8007df0 <prvInsertTimerInActiveList>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d047      	beq.n	8007f80 <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ef6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efa:	69db      	ldr	r3, [r3, #28]
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d13f      	bne.n	8007f80 <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f04:	699b      	ldr	r3, [r3, #24]
 8007f06:	441a      	add	r2, r3
 8007f08:	2300      	movs	r3, #0
 8007f0a:	9300      	str	r3, [sp, #0]
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	2100      	movs	r1, #0
 8007f10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f12:	f7ff fe3b 	bl	8007b8c <xTimerGenericCommand>
 8007f16:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d130      	bne.n	8007f80 <prvProcessReceivedCommands+0x10c>
	__asm volatile
 8007f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f22:	f383 8811 	msr	BASEPRI, r3
 8007f26:	f3bf 8f6f 	isb	sy
 8007f2a:	f3bf 8f4f 	dsb	sy
 8007f2e:	61bb      	str	r3, [r7, #24]
}
 8007f30:	bf00      	nop
 8007f32:	e7fe      	b.n	8007f32 <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f38:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	699b      	ldr	r3, [r3, #24]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d10a      	bne.n	8007f58 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 8007f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f46:	f383 8811 	msr	BASEPRI, r3
 8007f4a:	f3bf 8f6f 	isb	sy
 8007f4e:	f3bf 8f4f 	dsb	sy
 8007f52:	617b      	str	r3, [r7, #20]
}
 8007f54:	bf00      	nop
 8007f56:	e7fe      	b.n	8007f56 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5a:	699a      	ldr	r2, [r3, #24]
 8007f5c:	6a3b      	ldr	r3, [r7, #32]
 8007f5e:	18d1      	adds	r1, r2, r3
 8007f60:	6a3b      	ldr	r3, [r7, #32]
 8007f62:	6a3a      	ldr	r2, [r7, #32]
 8007f64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f66:	f7ff ff43 	bl	8007df0 <prvInsertTimerInActiveList>
					break;
 8007f6a:	e009      	b.n	8007f80 <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d104      	bne.n	8007f80 <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 8007f76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f78:	f000 fbca 	bl	8008710 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007f7c:	e000      	b.n	8007f80 <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
 8007f7e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f80:	4b08      	ldr	r3, [pc, #32]	; (8007fa4 <prvProcessReceivedCommands+0x130>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f107 0108 	add.w	r1, r7, #8
 8007f88:	2200      	movs	r2, #0
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7fe fc28 	bl	80067e0 <xQueueReceive>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	f47f af72 	bne.w	8007e7c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007f98:	bf00      	nop
 8007f9a:	bf00      	nop
 8007f9c:	3728      	adds	r7, #40	; 0x28
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	20000b60 	.word	0x20000b60

08007fa8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b088      	sub	sp, #32
 8007fac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007fae:	e045      	b.n	800803c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007fb0:	4b2c      	ldr	r3, [pc, #176]	; (8008064 <prvSwitchTimerLists+0xbc>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007fba:	4b2a      	ldr	r3, [pc, #168]	; (8008064 <prvSwitchTimerLists+0xbc>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	68db      	ldr	r3, [r3, #12]
 8007fc2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	3304      	adds	r3, #4
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f7fe f90d 	bl	80061e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd2:	68f8      	ldr	r0, [r7, #12]
 8007fd4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	69db      	ldr	r3, [r3, #28]
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d12e      	bne.n	800803c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	699b      	ldr	r3, [r3, #24]
 8007fe2:	693a      	ldr	r2, [r7, #16]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007fe8:	68ba      	ldr	r2, [r7, #8]
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d90e      	bls.n	800800e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	68ba      	ldr	r2, [r7, #8]
 8007ff4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	68fa      	ldr	r2, [r7, #12]
 8007ffa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ffc:	4b19      	ldr	r3, [pc, #100]	; (8008064 <prvSwitchTimerLists+0xbc>)
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	3304      	adds	r3, #4
 8008004:	4619      	mov	r1, r3
 8008006:	4610      	mov	r0, r2
 8008008:	f7fe f8b5 	bl	8006176 <vListInsert>
 800800c:	e016      	b.n	800803c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800800e:	2300      	movs	r3, #0
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	2300      	movs	r3, #0
 8008014:	693a      	ldr	r2, [r7, #16]
 8008016:	2100      	movs	r1, #0
 8008018:	68f8      	ldr	r0, [r7, #12]
 800801a:	f7ff fdb7 	bl	8007b8c <xTimerGenericCommand>
 800801e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d10a      	bne.n	800803c <prvSwitchTimerLists+0x94>
	__asm volatile
 8008026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802a:	f383 8811 	msr	BASEPRI, r3
 800802e:	f3bf 8f6f 	isb	sy
 8008032:	f3bf 8f4f 	dsb	sy
 8008036:	603b      	str	r3, [r7, #0]
}
 8008038:	bf00      	nop
 800803a:	e7fe      	b.n	800803a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800803c:	4b09      	ldr	r3, [pc, #36]	; (8008064 <prvSwitchTimerLists+0xbc>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d1b4      	bne.n	8007fb0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008046:	4b07      	ldr	r3, [pc, #28]	; (8008064 <prvSwitchTimerLists+0xbc>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800804c:	4b06      	ldr	r3, [pc, #24]	; (8008068 <prvSwitchTimerLists+0xc0>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a04      	ldr	r2, [pc, #16]	; (8008064 <prvSwitchTimerLists+0xbc>)
 8008052:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008054:	4a04      	ldr	r2, [pc, #16]	; (8008068 <prvSwitchTimerLists+0xc0>)
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	6013      	str	r3, [r2, #0]
}
 800805a:	bf00      	nop
 800805c:	3718      	adds	r7, #24
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	20000b58 	.word	0x20000b58
 8008068:	20000b5c 	.word	0x20000b5c

0800806c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008072:	f000 f967 	bl	8008344 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008076:	4b15      	ldr	r3, [pc, #84]	; (80080cc <prvCheckForValidListAndQueue+0x60>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d120      	bne.n	80080c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800807e:	4814      	ldr	r0, [pc, #80]	; (80080d0 <prvCheckForValidListAndQueue+0x64>)
 8008080:	f7fe f828 	bl	80060d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008084:	4813      	ldr	r0, [pc, #76]	; (80080d4 <prvCheckForValidListAndQueue+0x68>)
 8008086:	f7fe f825 	bl	80060d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800808a:	4b13      	ldr	r3, [pc, #76]	; (80080d8 <prvCheckForValidListAndQueue+0x6c>)
 800808c:	4a10      	ldr	r2, [pc, #64]	; (80080d0 <prvCheckForValidListAndQueue+0x64>)
 800808e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008090:	4b12      	ldr	r3, [pc, #72]	; (80080dc <prvCheckForValidListAndQueue+0x70>)
 8008092:	4a10      	ldr	r2, [pc, #64]	; (80080d4 <prvCheckForValidListAndQueue+0x68>)
 8008094:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008096:	2300      	movs	r3, #0
 8008098:	9300      	str	r3, [sp, #0]
 800809a:	4b11      	ldr	r3, [pc, #68]	; (80080e0 <prvCheckForValidListAndQueue+0x74>)
 800809c:	4a11      	ldr	r2, [pc, #68]	; (80080e4 <prvCheckForValidListAndQueue+0x78>)
 800809e:	210c      	movs	r1, #12
 80080a0:	200a      	movs	r0, #10
 80080a2:	f7fe f933 	bl	800630c <xQueueGenericCreateStatic>
 80080a6:	4603      	mov	r3, r0
 80080a8:	4a08      	ldr	r2, [pc, #32]	; (80080cc <prvCheckForValidListAndQueue+0x60>)
 80080aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80080ac:	4b07      	ldr	r3, [pc, #28]	; (80080cc <prvCheckForValidListAndQueue+0x60>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d005      	beq.n	80080c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80080b4:	4b05      	ldr	r3, [pc, #20]	; (80080cc <prvCheckForValidListAndQueue+0x60>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	490b      	ldr	r1, [pc, #44]	; (80080e8 <prvCheckForValidListAndQueue+0x7c>)
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7fe fd80 	bl	8006bc0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80080c0:	f000 f970 	bl	80083a4 <vPortExitCritical>
}
 80080c4:	bf00      	nop
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	20000b60 	.word	0x20000b60
 80080d0:	20000b30 	.word	0x20000b30
 80080d4:	20000b44 	.word	0x20000b44
 80080d8:	20000b58 	.word	0x20000b58
 80080dc:	20000b5c 	.word	0x20000b5c
 80080e0:	20000be4 	.word	0x20000be4
 80080e4:	20000b6c 	.word	0x20000b6c
 80080e8:	08009dfc 	.word	0x08009dfc

080080ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80080ec:	b480      	push	{r7}
 80080ee:	b085      	sub	sp, #20
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	3b04      	subs	r3, #4
 80080fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008104:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	3b04      	subs	r3, #4
 800810a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	f023 0201 	bic.w	r2, r3, #1
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	3b04      	subs	r3, #4
 800811a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800811c:	4a0c      	ldr	r2, [pc, #48]	; (8008150 <pxPortInitialiseStack+0x64>)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	3b14      	subs	r3, #20
 8008126:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	3b04      	subs	r3, #4
 8008132:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f06f 0202 	mvn.w	r2, #2
 800813a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	3b20      	subs	r3, #32
 8008140:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008142:	68fb      	ldr	r3, [r7, #12]
}
 8008144:	4618      	mov	r0, r3
 8008146:	3714      	adds	r7, #20
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr
 8008150:	08008155 	.word	0x08008155

08008154 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800815a:	2300      	movs	r3, #0
 800815c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800815e:	4b12      	ldr	r3, [pc, #72]	; (80081a8 <prvTaskExitError+0x54>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008166:	d00a      	beq.n	800817e <prvTaskExitError+0x2a>
	__asm volatile
 8008168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816c:	f383 8811 	msr	BASEPRI, r3
 8008170:	f3bf 8f6f 	isb	sy
 8008174:	f3bf 8f4f 	dsb	sy
 8008178:	60fb      	str	r3, [r7, #12]
}
 800817a:	bf00      	nop
 800817c:	e7fe      	b.n	800817c <prvTaskExitError+0x28>
	__asm volatile
 800817e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008182:	f383 8811 	msr	BASEPRI, r3
 8008186:	f3bf 8f6f 	isb	sy
 800818a:	f3bf 8f4f 	dsb	sy
 800818e:	60bb      	str	r3, [r7, #8]
}
 8008190:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008192:	bf00      	nop
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d0fc      	beq.n	8008194 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800819a:	bf00      	nop
 800819c:	bf00      	nop
 800819e:	3714      	adds	r7, #20
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr
 80081a8:	2000001c 	.word	0x2000001c
 80081ac:	00000000 	.word	0x00000000

080081b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80081b0:	4b07      	ldr	r3, [pc, #28]	; (80081d0 <pxCurrentTCBConst2>)
 80081b2:	6819      	ldr	r1, [r3, #0]
 80081b4:	6808      	ldr	r0, [r1, #0]
 80081b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ba:	f380 8809 	msr	PSP, r0
 80081be:	f3bf 8f6f 	isb	sy
 80081c2:	f04f 0000 	mov.w	r0, #0
 80081c6:	f380 8811 	msr	BASEPRI, r0
 80081ca:	4770      	bx	lr
 80081cc:	f3af 8000 	nop.w

080081d0 <pxCurrentTCBConst2>:
 80081d0:	20000a04 	.word	0x20000a04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80081d4:	bf00      	nop
 80081d6:	bf00      	nop

080081d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80081d8:	4808      	ldr	r0, [pc, #32]	; (80081fc <prvPortStartFirstTask+0x24>)
 80081da:	6800      	ldr	r0, [r0, #0]
 80081dc:	6800      	ldr	r0, [r0, #0]
 80081de:	f380 8808 	msr	MSP, r0
 80081e2:	f04f 0000 	mov.w	r0, #0
 80081e6:	f380 8814 	msr	CONTROL, r0
 80081ea:	b662      	cpsie	i
 80081ec:	b661      	cpsie	f
 80081ee:	f3bf 8f4f 	dsb	sy
 80081f2:	f3bf 8f6f 	isb	sy
 80081f6:	df00      	svc	0
 80081f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80081fa:	bf00      	nop
 80081fc:	e000ed08 	.word	0xe000ed08

08008200 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008206:	4b46      	ldr	r3, [pc, #280]	; (8008320 <xPortStartScheduler+0x120>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a46      	ldr	r2, [pc, #280]	; (8008324 <xPortStartScheduler+0x124>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d10a      	bne.n	8008226 <xPortStartScheduler+0x26>
	__asm volatile
 8008210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008214:	f383 8811 	msr	BASEPRI, r3
 8008218:	f3bf 8f6f 	isb	sy
 800821c:	f3bf 8f4f 	dsb	sy
 8008220:	613b      	str	r3, [r7, #16]
}
 8008222:	bf00      	nop
 8008224:	e7fe      	b.n	8008224 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008226:	4b3e      	ldr	r3, [pc, #248]	; (8008320 <xPortStartScheduler+0x120>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a3f      	ldr	r2, [pc, #252]	; (8008328 <xPortStartScheduler+0x128>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d10a      	bne.n	8008246 <xPortStartScheduler+0x46>
	__asm volatile
 8008230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008234:	f383 8811 	msr	BASEPRI, r3
 8008238:	f3bf 8f6f 	isb	sy
 800823c:	f3bf 8f4f 	dsb	sy
 8008240:	60fb      	str	r3, [r7, #12]
}
 8008242:	bf00      	nop
 8008244:	e7fe      	b.n	8008244 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008246:	4b39      	ldr	r3, [pc, #228]	; (800832c <xPortStartScheduler+0x12c>)
 8008248:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	b2db      	uxtb	r3, r3
 8008250:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	22ff      	movs	r2, #255	; 0xff
 8008256:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	b2db      	uxtb	r3, r3
 800825e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008260:	78fb      	ldrb	r3, [r7, #3]
 8008262:	b2db      	uxtb	r3, r3
 8008264:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008268:	b2da      	uxtb	r2, r3
 800826a:	4b31      	ldr	r3, [pc, #196]	; (8008330 <xPortStartScheduler+0x130>)
 800826c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800826e:	4b31      	ldr	r3, [pc, #196]	; (8008334 <xPortStartScheduler+0x134>)
 8008270:	2207      	movs	r2, #7
 8008272:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008274:	e009      	b.n	800828a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008276:	4b2f      	ldr	r3, [pc, #188]	; (8008334 <xPortStartScheduler+0x134>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	3b01      	subs	r3, #1
 800827c:	4a2d      	ldr	r2, [pc, #180]	; (8008334 <xPortStartScheduler+0x134>)
 800827e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008280:	78fb      	ldrb	r3, [r7, #3]
 8008282:	b2db      	uxtb	r3, r3
 8008284:	005b      	lsls	r3, r3, #1
 8008286:	b2db      	uxtb	r3, r3
 8008288:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800828a:	78fb      	ldrb	r3, [r7, #3]
 800828c:	b2db      	uxtb	r3, r3
 800828e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008292:	2b80      	cmp	r3, #128	; 0x80
 8008294:	d0ef      	beq.n	8008276 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008296:	4b27      	ldr	r3, [pc, #156]	; (8008334 <xPortStartScheduler+0x134>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f1c3 0307 	rsb	r3, r3, #7
 800829e:	2b04      	cmp	r3, #4
 80082a0:	d00a      	beq.n	80082b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80082a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a6:	f383 8811 	msr	BASEPRI, r3
 80082aa:	f3bf 8f6f 	isb	sy
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	60bb      	str	r3, [r7, #8]
}
 80082b4:	bf00      	nop
 80082b6:	e7fe      	b.n	80082b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80082b8:	4b1e      	ldr	r3, [pc, #120]	; (8008334 <xPortStartScheduler+0x134>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	021b      	lsls	r3, r3, #8
 80082be:	4a1d      	ldr	r2, [pc, #116]	; (8008334 <xPortStartScheduler+0x134>)
 80082c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80082c2:	4b1c      	ldr	r3, [pc, #112]	; (8008334 <xPortStartScheduler+0x134>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80082ca:	4a1a      	ldr	r2, [pc, #104]	; (8008334 <xPortStartScheduler+0x134>)
 80082cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	b2da      	uxtb	r2, r3
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80082d6:	4b18      	ldr	r3, [pc, #96]	; (8008338 <xPortStartScheduler+0x138>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a17      	ldr	r2, [pc, #92]	; (8008338 <xPortStartScheduler+0x138>)
 80082dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80082e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80082e2:	4b15      	ldr	r3, [pc, #84]	; (8008338 <xPortStartScheduler+0x138>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a14      	ldr	r2, [pc, #80]	; (8008338 <xPortStartScheduler+0x138>)
 80082e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80082ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80082ee:	f000 f8dd 	bl	80084ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80082f2:	4b12      	ldr	r3, [pc, #72]	; (800833c <xPortStartScheduler+0x13c>)
 80082f4:	2200      	movs	r2, #0
 80082f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80082f8:	f000 f8fc 	bl	80084f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80082fc:	4b10      	ldr	r3, [pc, #64]	; (8008340 <xPortStartScheduler+0x140>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a0f      	ldr	r2, [pc, #60]	; (8008340 <xPortStartScheduler+0x140>)
 8008302:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008306:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008308:	f7ff ff66 	bl	80081d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800830c:	f7ff f874 	bl	80073f8 <vTaskSwitchContext>
	prvTaskExitError();
 8008310:	f7ff ff20 	bl	8008154 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3718      	adds	r7, #24
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	e000ed00 	.word	0xe000ed00
 8008324:	410fc271 	.word	0x410fc271
 8008328:	410fc270 	.word	0x410fc270
 800832c:	e000e400 	.word	0xe000e400
 8008330:	20000c2c 	.word	0x20000c2c
 8008334:	20000c30 	.word	0x20000c30
 8008338:	e000ed20 	.word	0xe000ed20
 800833c:	2000001c 	.word	0x2000001c
 8008340:	e000ef34 	.word	0xe000ef34

08008344 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
	__asm volatile
 800834a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800834e:	f383 8811 	msr	BASEPRI, r3
 8008352:	f3bf 8f6f 	isb	sy
 8008356:	f3bf 8f4f 	dsb	sy
 800835a:	607b      	str	r3, [r7, #4]
}
 800835c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800835e:	4b0f      	ldr	r3, [pc, #60]	; (800839c <vPortEnterCritical+0x58>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	3301      	adds	r3, #1
 8008364:	4a0d      	ldr	r2, [pc, #52]	; (800839c <vPortEnterCritical+0x58>)
 8008366:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008368:	4b0c      	ldr	r3, [pc, #48]	; (800839c <vPortEnterCritical+0x58>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2b01      	cmp	r3, #1
 800836e:	d10f      	bne.n	8008390 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008370:	4b0b      	ldr	r3, [pc, #44]	; (80083a0 <vPortEnterCritical+0x5c>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	b2db      	uxtb	r3, r3
 8008376:	2b00      	cmp	r3, #0
 8008378:	d00a      	beq.n	8008390 <vPortEnterCritical+0x4c>
	__asm volatile
 800837a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837e:	f383 8811 	msr	BASEPRI, r3
 8008382:	f3bf 8f6f 	isb	sy
 8008386:	f3bf 8f4f 	dsb	sy
 800838a:	603b      	str	r3, [r7, #0]
}
 800838c:	bf00      	nop
 800838e:	e7fe      	b.n	800838e <vPortEnterCritical+0x4a>
	}
}
 8008390:	bf00      	nop
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr
 800839c:	2000001c 	.word	0x2000001c
 80083a0:	e000ed04 	.word	0xe000ed04

080083a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80083aa:	4b12      	ldr	r3, [pc, #72]	; (80083f4 <vPortExitCritical+0x50>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d10a      	bne.n	80083c8 <vPortExitCritical+0x24>
	__asm volatile
 80083b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b6:	f383 8811 	msr	BASEPRI, r3
 80083ba:	f3bf 8f6f 	isb	sy
 80083be:	f3bf 8f4f 	dsb	sy
 80083c2:	607b      	str	r3, [r7, #4]
}
 80083c4:	bf00      	nop
 80083c6:	e7fe      	b.n	80083c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80083c8:	4b0a      	ldr	r3, [pc, #40]	; (80083f4 <vPortExitCritical+0x50>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	3b01      	subs	r3, #1
 80083ce:	4a09      	ldr	r2, [pc, #36]	; (80083f4 <vPortExitCritical+0x50>)
 80083d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80083d2:	4b08      	ldr	r3, [pc, #32]	; (80083f4 <vPortExitCritical+0x50>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d105      	bne.n	80083e6 <vPortExitCritical+0x42>
 80083da:	2300      	movs	r3, #0
 80083dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	f383 8811 	msr	BASEPRI, r3
}
 80083e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80083e6:	bf00      	nop
 80083e8:	370c      	adds	r7, #12
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr
 80083f2:	bf00      	nop
 80083f4:	2000001c 	.word	0x2000001c
	...

08008400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008400:	f3ef 8009 	mrs	r0, PSP
 8008404:	f3bf 8f6f 	isb	sy
 8008408:	4b15      	ldr	r3, [pc, #84]	; (8008460 <pxCurrentTCBConst>)
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	f01e 0f10 	tst.w	lr, #16
 8008410:	bf08      	it	eq
 8008412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800841a:	6010      	str	r0, [r2, #0]
 800841c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008420:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008424:	f380 8811 	msr	BASEPRI, r0
 8008428:	f3bf 8f4f 	dsb	sy
 800842c:	f3bf 8f6f 	isb	sy
 8008430:	f7fe ffe2 	bl	80073f8 <vTaskSwitchContext>
 8008434:	f04f 0000 	mov.w	r0, #0
 8008438:	f380 8811 	msr	BASEPRI, r0
 800843c:	bc09      	pop	{r0, r3}
 800843e:	6819      	ldr	r1, [r3, #0]
 8008440:	6808      	ldr	r0, [r1, #0]
 8008442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008446:	f01e 0f10 	tst.w	lr, #16
 800844a:	bf08      	it	eq
 800844c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008450:	f380 8809 	msr	PSP, r0
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop
 800845c:	f3af 8000 	nop.w

08008460 <pxCurrentTCBConst>:
 8008460:	20000a04 	.word	0x20000a04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008464:	bf00      	nop
 8008466:	bf00      	nop

08008468 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
	__asm volatile
 800846e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008472:	f383 8811 	msr	BASEPRI, r3
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	607b      	str	r3, [r7, #4]
}
 8008480:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008482:	f7fe fefb 	bl	800727c <xTaskIncrementTick>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d003      	beq.n	8008494 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800848c:	4b06      	ldr	r3, [pc, #24]	; (80084a8 <SysTick_Handler+0x40>)
 800848e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008492:	601a      	str	r2, [r3, #0]
 8008494:	2300      	movs	r3, #0
 8008496:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	f383 8811 	msr	BASEPRI, r3
}
 800849e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80084a0:	bf00      	nop
 80084a2:	3708      	adds	r7, #8
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	e000ed04 	.word	0xe000ed04

080084ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80084ac:	b480      	push	{r7}
 80084ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80084b0:	4b0b      	ldr	r3, [pc, #44]	; (80084e0 <vPortSetupTimerInterrupt+0x34>)
 80084b2:	2200      	movs	r2, #0
 80084b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80084b6:	4b0b      	ldr	r3, [pc, #44]	; (80084e4 <vPortSetupTimerInterrupt+0x38>)
 80084b8:	2200      	movs	r2, #0
 80084ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80084bc:	4b0a      	ldr	r3, [pc, #40]	; (80084e8 <vPortSetupTimerInterrupt+0x3c>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a0a      	ldr	r2, [pc, #40]	; (80084ec <vPortSetupTimerInterrupt+0x40>)
 80084c2:	fba2 2303 	umull	r2, r3, r2, r3
 80084c6:	099b      	lsrs	r3, r3, #6
 80084c8:	4a09      	ldr	r2, [pc, #36]	; (80084f0 <vPortSetupTimerInterrupt+0x44>)
 80084ca:	3b01      	subs	r3, #1
 80084cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80084ce:	4b04      	ldr	r3, [pc, #16]	; (80084e0 <vPortSetupTimerInterrupt+0x34>)
 80084d0:	2207      	movs	r2, #7
 80084d2:	601a      	str	r2, [r3, #0]
}
 80084d4:	bf00      	nop
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop
 80084e0:	e000e010 	.word	0xe000e010
 80084e4:	e000e018 	.word	0xe000e018
 80084e8:	20000010 	.word	0x20000010
 80084ec:	10624dd3 	.word	0x10624dd3
 80084f0:	e000e014 	.word	0xe000e014

080084f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80084f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008504 <vPortEnableVFP+0x10>
 80084f8:	6801      	ldr	r1, [r0, #0]
 80084fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80084fe:	6001      	str	r1, [r0, #0]
 8008500:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008502:	bf00      	nop
 8008504:	e000ed88 	.word	0xe000ed88

08008508 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008508:	b480      	push	{r7}
 800850a:	b085      	sub	sp, #20
 800850c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800850e:	f3ef 8305 	mrs	r3, IPSR
 8008512:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2b0f      	cmp	r3, #15
 8008518:	d914      	bls.n	8008544 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800851a:	4a17      	ldr	r2, [pc, #92]	; (8008578 <vPortValidateInterruptPriority+0x70>)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	4413      	add	r3, r2
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008524:	4b15      	ldr	r3, [pc, #84]	; (800857c <vPortValidateInterruptPriority+0x74>)
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	7afa      	ldrb	r2, [r7, #11]
 800852a:	429a      	cmp	r2, r3
 800852c:	d20a      	bcs.n	8008544 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800852e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008532:	f383 8811 	msr	BASEPRI, r3
 8008536:	f3bf 8f6f 	isb	sy
 800853a:	f3bf 8f4f 	dsb	sy
 800853e:	607b      	str	r3, [r7, #4]
}
 8008540:	bf00      	nop
 8008542:	e7fe      	b.n	8008542 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008544:	4b0e      	ldr	r3, [pc, #56]	; (8008580 <vPortValidateInterruptPriority+0x78>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800854c:	4b0d      	ldr	r3, [pc, #52]	; (8008584 <vPortValidateInterruptPriority+0x7c>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	429a      	cmp	r2, r3
 8008552:	d90a      	bls.n	800856a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008558:	f383 8811 	msr	BASEPRI, r3
 800855c:	f3bf 8f6f 	isb	sy
 8008560:	f3bf 8f4f 	dsb	sy
 8008564:	603b      	str	r3, [r7, #0]
}
 8008566:	bf00      	nop
 8008568:	e7fe      	b.n	8008568 <vPortValidateInterruptPriority+0x60>
	}
 800856a:	bf00      	nop
 800856c:	3714      	adds	r7, #20
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr
 8008576:	bf00      	nop
 8008578:	e000e3f0 	.word	0xe000e3f0
 800857c:	20000c2c 	.word	0x20000c2c
 8008580:	e000ed0c 	.word	0xe000ed0c
 8008584:	20000c30 	.word	0x20000c30

08008588 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b08a      	sub	sp, #40	; 0x28
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008590:	2300      	movs	r3, #0
 8008592:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008594:	f7fe fdb8 	bl	8007108 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008598:	4b58      	ldr	r3, [pc, #352]	; (80086fc <pvPortMalloc+0x174>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d101      	bne.n	80085a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80085a0:	f000 f910 	bl	80087c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80085a4:	4b56      	ldr	r3, [pc, #344]	; (8008700 <pvPortMalloc+0x178>)
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4013      	ands	r3, r2
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f040 808e 	bne.w	80086ce <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d01d      	beq.n	80085f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80085b8:	2208      	movs	r2, #8
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4413      	add	r3, r2
 80085be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f003 0307 	and.w	r3, r3, #7
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d014      	beq.n	80085f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f023 0307 	bic.w	r3, r3, #7
 80085d0:	3308      	adds	r3, #8
 80085d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f003 0307 	and.w	r3, r3, #7
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00a      	beq.n	80085f4 <pvPortMalloc+0x6c>
	__asm volatile
 80085de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e2:	f383 8811 	msr	BASEPRI, r3
 80085e6:	f3bf 8f6f 	isb	sy
 80085ea:	f3bf 8f4f 	dsb	sy
 80085ee:	617b      	str	r3, [r7, #20]
}
 80085f0:	bf00      	nop
 80085f2:	e7fe      	b.n	80085f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d069      	beq.n	80086ce <pvPortMalloc+0x146>
 80085fa:	4b42      	ldr	r3, [pc, #264]	; (8008704 <pvPortMalloc+0x17c>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	429a      	cmp	r2, r3
 8008602:	d864      	bhi.n	80086ce <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008604:	4b40      	ldr	r3, [pc, #256]	; (8008708 <pvPortMalloc+0x180>)
 8008606:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008608:	4b3f      	ldr	r3, [pc, #252]	; (8008708 <pvPortMalloc+0x180>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800860e:	e004      	b.n	800861a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008612:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800861a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	429a      	cmp	r2, r3
 8008622:	d903      	bls.n	800862c <pvPortMalloc+0xa4>
 8008624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d1f1      	bne.n	8008610 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800862c:	4b33      	ldr	r3, [pc, #204]	; (80086fc <pvPortMalloc+0x174>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008632:	429a      	cmp	r2, r3
 8008634:	d04b      	beq.n	80086ce <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008636:	6a3b      	ldr	r3, [r7, #32]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2208      	movs	r2, #8
 800863c:	4413      	add	r3, r2
 800863e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	6a3b      	ldr	r3, [r7, #32]
 8008646:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864a:	685a      	ldr	r2, [r3, #4]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	1ad2      	subs	r2, r2, r3
 8008650:	2308      	movs	r3, #8
 8008652:	005b      	lsls	r3, r3, #1
 8008654:	429a      	cmp	r2, r3
 8008656:	d91f      	bls.n	8008698 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4413      	add	r3, r2
 800865e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	f003 0307 	and.w	r3, r3, #7
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00a      	beq.n	8008680 <pvPortMalloc+0xf8>
	__asm volatile
 800866a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866e:	f383 8811 	msr	BASEPRI, r3
 8008672:	f3bf 8f6f 	isb	sy
 8008676:	f3bf 8f4f 	dsb	sy
 800867a:	613b      	str	r3, [r7, #16]
}
 800867c:	bf00      	nop
 800867e:	e7fe      	b.n	800867e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008682:	685a      	ldr	r2, [r3, #4]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	1ad2      	subs	r2, r2, r3
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800868c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008692:	69b8      	ldr	r0, [r7, #24]
 8008694:	f000 f8f8 	bl	8008888 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008698:	4b1a      	ldr	r3, [pc, #104]	; (8008704 <pvPortMalloc+0x17c>)
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	4a18      	ldr	r2, [pc, #96]	; (8008704 <pvPortMalloc+0x17c>)
 80086a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80086a6:	4b17      	ldr	r3, [pc, #92]	; (8008704 <pvPortMalloc+0x17c>)
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	4b18      	ldr	r3, [pc, #96]	; (800870c <pvPortMalloc+0x184>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d203      	bcs.n	80086ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80086b2:	4b14      	ldr	r3, [pc, #80]	; (8008704 <pvPortMalloc+0x17c>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a15      	ldr	r2, [pc, #84]	; (800870c <pvPortMalloc+0x184>)
 80086b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80086ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086bc:	685a      	ldr	r2, [r3, #4]
 80086be:	4b10      	ldr	r3, [pc, #64]	; (8008700 <pvPortMalloc+0x178>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	431a      	orrs	r2, r3
 80086c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80086c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ca:	2200      	movs	r2, #0
 80086cc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80086ce:	f7fe fd29 	bl	8007124 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	f003 0307 	and.w	r3, r3, #7
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00a      	beq.n	80086f2 <pvPortMalloc+0x16a>
	__asm volatile
 80086dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e0:	f383 8811 	msr	BASEPRI, r3
 80086e4:	f3bf 8f6f 	isb	sy
 80086e8:	f3bf 8f4f 	dsb	sy
 80086ec:	60fb      	str	r3, [r7, #12]
}
 80086ee:	bf00      	nop
 80086f0:	e7fe      	b.n	80086f0 <pvPortMalloc+0x168>
	return pvReturn;
 80086f2:	69fb      	ldr	r3, [r7, #28]
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3728      	adds	r7, #40	; 0x28
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	2000183c 	.word	0x2000183c
 8008700:	20001848 	.word	0x20001848
 8008704:	20001840 	.word	0x20001840
 8008708:	20001834 	.word	0x20001834
 800870c:	20001844 	.word	0x20001844

08008710 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b086      	sub	sp, #24
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d048      	beq.n	80087b4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008722:	2308      	movs	r3, #8
 8008724:	425b      	negs	r3, r3
 8008726:	697a      	ldr	r2, [r7, #20]
 8008728:	4413      	add	r3, r2
 800872a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	685a      	ldr	r2, [r3, #4]
 8008734:	4b21      	ldr	r3, [pc, #132]	; (80087bc <vPortFree+0xac>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4013      	ands	r3, r2
 800873a:	2b00      	cmp	r3, #0
 800873c:	d10a      	bne.n	8008754 <vPortFree+0x44>
	__asm volatile
 800873e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008742:	f383 8811 	msr	BASEPRI, r3
 8008746:	f3bf 8f6f 	isb	sy
 800874a:	f3bf 8f4f 	dsb	sy
 800874e:	60fb      	str	r3, [r7, #12]
}
 8008750:	bf00      	nop
 8008752:	e7fe      	b.n	8008752 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d00a      	beq.n	8008772 <vPortFree+0x62>
	__asm volatile
 800875c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008760:	f383 8811 	msr	BASEPRI, r3
 8008764:	f3bf 8f6f 	isb	sy
 8008768:	f3bf 8f4f 	dsb	sy
 800876c:	60bb      	str	r3, [r7, #8]
}
 800876e:	bf00      	nop
 8008770:	e7fe      	b.n	8008770 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	685a      	ldr	r2, [r3, #4]
 8008776:	4b11      	ldr	r3, [pc, #68]	; (80087bc <vPortFree+0xac>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4013      	ands	r3, r2
 800877c:	2b00      	cmp	r3, #0
 800877e:	d019      	beq.n	80087b4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d115      	bne.n	80087b4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	685a      	ldr	r2, [r3, #4]
 800878c:	4b0b      	ldr	r3, [pc, #44]	; (80087bc <vPortFree+0xac>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	43db      	mvns	r3, r3
 8008792:	401a      	ands	r2, r3
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008798:	f7fe fcb6 	bl	8007108 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	685a      	ldr	r2, [r3, #4]
 80087a0:	4b07      	ldr	r3, [pc, #28]	; (80087c0 <vPortFree+0xb0>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4413      	add	r3, r2
 80087a6:	4a06      	ldr	r2, [pc, #24]	; (80087c0 <vPortFree+0xb0>)
 80087a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80087aa:	6938      	ldr	r0, [r7, #16]
 80087ac:	f000 f86c 	bl	8008888 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80087b0:	f7fe fcb8 	bl	8007124 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80087b4:	bf00      	nop
 80087b6:	3718      	adds	r7, #24
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}
 80087bc:	20001848 	.word	0x20001848
 80087c0:	20001840 	.word	0x20001840

080087c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80087ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80087ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80087d0:	4b27      	ldr	r3, [pc, #156]	; (8008870 <prvHeapInit+0xac>)
 80087d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f003 0307 	and.w	r3, r3, #7
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00c      	beq.n	80087f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	3307      	adds	r3, #7
 80087e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f023 0307 	bic.w	r3, r3, #7
 80087ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80087ec:	68ba      	ldr	r2, [r7, #8]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	4a1f      	ldr	r2, [pc, #124]	; (8008870 <prvHeapInit+0xac>)
 80087f4:	4413      	add	r3, r2
 80087f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80087fc:	4a1d      	ldr	r2, [pc, #116]	; (8008874 <prvHeapInit+0xb0>)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008802:	4b1c      	ldr	r3, [pc, #112]	; (8008874 <prvHeapInit+0xb0>)
 8008804:	2200      	movs	r2, #0
 8008806:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	4413      	add	r3, r2
 800880e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008810:	2208      	movs	r2, #8
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	1a9b      	subs	r3, r3, r2
 8008816:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f023 0307 	bic.w	r3, r3, #7
 800881e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	4a15      	ldr	r2, [pc, #84]	; (8008878 <prvHeapInit+0xb4>)
 8008824:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008826:	4b14      	ldr	r3, [pc, #80]	; (8008878 <prvHeapInit+0xb4>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2200      	movs	r2, #0
 800882c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800882e:	4b12      	ldr	r3, [pc, #72]	; (8008878 <prvHeapInit+0xb4>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	2200      	movs	r2, #0
 8008834:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	68fa      	ldr	r2, [r7, #12]
 800883e:	1ad2      	subs	r2, r2, r3
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008844:	4b0c      	ldr	r3, [pc, #48]	; (8008878 <prvHeapInit+0xb4>)
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	4a0a      	ldr	r2, [pc, #40]	; (800887c <prvHeapInit+0xb8>)
 8008852:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	4a09      	ldr	r2, [pc, #36]	; (8008880 <prvHeapInit+0xbc>)
 800885a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800885c:	4b09      	ldr	r3, [pc, #36]	; (8008884 <prvHeapInit+0xc0>)
 800885e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008862:	601a      	str	r2, [r3, #0]
}
 8008864:	bf00      	nop
 8008866:	3714      	adds	r7, #20
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr
 8008870:	20000c34 	.word	0x20000c34
 8008874:	20001834 	.word	0x20001834
 8008878:	2000183c 	.word	0x2000183c
 800887c:	20001844 	.word	0x20001844
 8008880:	20001840 	.word	0x20001840
 8008884:	20001848 	.word	0x20001848

08008888 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008890:	4b28      	ldr	r3, [pc, #160]	; (8008934 <prvInsertBlockIntoFreeList+0xac>)
 8008892:	60fb      	str	r3, [r7, #12]
 8008894:	e002      	b.n	800889c <prvInsertBlockIntoFreeList+0x14>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	60fb      	str	r3, [r7, #12]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d8f7      	bhi.n	8008896 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	68ba      	ldr	r2, [r7, #8]
 80088b0:	4413      	add	r3, r2
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d108      	bne.n	80088ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	685a      	ldr	r2, [r3, #4]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	441a      	add	r2, r3
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	68ba      	ldr	r2, [r7, #8]
 80088d4:	441a      	add	r2, r3
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d118      	bne.n	8008910 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	4b15      	ldr	r3, [pc, #84]	; (8008938 <prvInsertBlockIntoFreeList+0xb0>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d00d      	beq.n	8008906 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	685a      	ldr	r2, [r3, #4]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	441a      	add	r2, r3
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	601a      	str	r2, [r3, #0]
 8008904:	e008      	b.n	8008918 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008906:	4b0c      	ldr	r3, [pc, #48]	; (8008938 <prvInsertBlockIntoFreeList+0xb0>)
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	601a      	str	r2, [r3, #0]
 800890e:	e003      	b.n	8008918 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	429a      	cmp	r2, r3
 800891e:	d002      	beq.n	8008926 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008926:	bf00      	nop
 8008928:	3714      	adds	r7, #20
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	20001834 	.word	0x20001834
 8008938:	2000183c 	.word	0x2000183c

0800893c <std>:
 800893c:	2300      	movs	r3, #0
 800893e:	b510      	push	{r4, lr}
 8008940:	4604      	mov	r4, r0
 8008942:	e9c0 3300 	strd	r3, r3, [r0]
 8008946:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800894a:	6083      	str	r3, [r0, #8]
 800894c:	8181      	strh	r1, [r0, #12]
 800894e:	6643      	str	r3, [r0, #100]	; 0x64
 8008950:	81c2      	strh	r2, [r0, #14]
 8008952:	6183      	str	r3, [r0, #24]
 8008954:	4619      	mov	r1, r3
 8008956:	2208      	movs	r2, #8
 8008958:	305c      	adds	r0, #92	; 0x5c
 800895a:	f000 fa17 	bl	8008d8c <memset>
 800895e:	4b0d      	ldr	r3, [pc, #52]	; (8008994 <std+0x58>)
 8008960:	6263      	str	r3, [r4, #36]	; 0x24
 8008962:	4b0d      	ldr	r3, [pc, #52]	; (8008998 <std+0x5c>)
 8008964:	62a3      	str	r3, [r4, #40]	; 0x28
 8008966:	4b0d      	ldr	r3, [pc, #52]	; (800899c <std+0x60>)
 8008968:	62e3      	str	r3, [r4, #44]	; 0x2c
 800896a:	4b0d      	ldr	r3, [pc, #52]	; (80089a0 <std+0x64>)
 800896c:	6323      	str	r3, [r4, #48]	; 0x30
 800896e:	4b0d      	ldr	r3, [pc, #52]	; (80089a4 <std+0x68>)
 8008970:	6224      	str	r4, [r4, #32]
 8008972:	429c      	cmp	r4, r3
 8008974:	d006      	beq.n	8008984 <std+0x48>
 8008976:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800897a:	4294      	cmp	r4, r2
 800897c:	d002      	beq.n	8008984 <std+0x48>
 800897e:	33d0      	adds	r3, #208	; 0xd0
 8008980:	429c      	cmp	r4, r3
 8008982:	d105      	bne.n	8008990 <std+0x54>
 8008984:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800898c:	f000 bacc 	b.w	8008f28 <__retarget_lock_init_recursive>
 8008990:	bd10      	pop	{r4, pc}
 8008992:	bf00      	nop
 8008994:	08008bdd 	.word	0x08008bdd
 8008998:	08008bff 	.word	0x08008bff
 800899c:	08008c37 	.word	0x08008c37
 80089a0:	08008c5b 	.word	0x08008c5b
 80089a4:	2000184c 	.word	0x2000184c

080089a8 <stdio_exit_handler>:
 80089a8:	4a02      	ldr	r2, [pc, #8]	; (80089b4 <stdio_exit_handler+0xc>)
 80089aa:	4903      	ldr	r1, [pc, #12]	; (80089b8 <stdio_exit_handler+0x10>)
 80089ac:	4803      	ldr	r0, [pc, #12]	; (80089bc <stdio_exit_handler+0x14>)
 80089ae:	f000 b869 	b.w	8008a84 <_fwalk_sglue>
 80089b2:	bf00      	nop
 80089b4:	20000020 	.word	0x20000020
 80089b8:	08009aa1 	.word	0x08009aa1
 80089bc:	2000002c 	.word	0x2000002c

080089c0 <cleanup_stdio>:
 80089c0:	6841      	ldr	r1, [r0, #4]
 80089c2:	4b0c      	ldr	r3, [pc, #48]	; (80089f4 <cleanup_stdio+0x34>)
 80089c4:	4299      	cmp	r1, r3
 80089c6:	b510      	push	{r4, lr}
 80089c8:	4604      	mov	r4, r0
 80089ca:	d001      	beq.n	80089d0 <cleanup_stdio+0x10>
 80089cc:	f001 f868 	bl	8009aa0 <_fflush_r>
 80089d0:	68a1      	ldr	r1, [r4, #8]
 80089d2:	4b09      	ldr	r3, [pc, #36]	; (80089f8 <cleanup_stdio+0x38>)
 80089d4:	4299      	cmp	r1, r3
 80089d6:	d002      	beq.n	80089de <cleanup_stdio+0x1e>
 80089d8:	4620      	mov	r0, r4
 80089da:	f001 f861 	bl	8009aa0 <_fflush_r>
 80089de:	68e1      	ldr	r1, [r4, #12]
 80089e0:	4b06      	ldr	r3, [pc, #24]	; (80089fc <cleanup_stdio+0x3c>)
 80089e2:	4299      	cmp	r1, r3
 80089e4:	d004      	beq.n	80089f0 <cleanup_stdio+0x30>
 80089e6:	4620      	mov	r0, r4
 80089e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089ec:	f001 b858 	b.w	8009aa0 <_fflush_r>
 80089f0:	bd10      	pop	{r4, pc}
 80089f2:	bf00      	nop
 80089f4:	2000184c 	.word	0x2000184c
 80089f8:	200018b4 	.word	0x200018b4
 80089fc:	2000191c 	.word	0x2000191c

08008a00 <global_stdio_init.part.0>:
 8008a00:	b510      	push	{r4, lr}
 8008a02:	4b0b      	ldr	r3, [pc, #44]	; (8008a30 <global_stdio_init.part.0+0x30>)
 8008a04:	4c0b      	ldr	r4, [pc, #44]	; (8008a34 <global_stdio_init.part.0+0x34>)
 8008a06:	4a0c      	ldr	r2, [pc, #48]	; (8008a38 <global_stdio_init.part.0+0x38>)
 8008a08:	601a      	str	r2, [r3, #0]
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	2104      	movs	r1, #4
 8008a10:	f7ff ff94 	bl	800893c <std>
 8008a14:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008a18:	2201      	movs	r2, #1
 8008a1a:	2109      	movs	r1, #9
 8008a1c:	f7ff ff8e 	bl	800893c <std>
 8008a20:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008a24:	2202      	movs	r2, #2
 8008a26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a2a:	2112      	movs	r1, #18
 8008a2c:	f7ff bf86 	b.w	800893c <std>
 8008a30:	20001984 	.word	0x20001984
 8008a34:	2000184c 	.word	0x2000184c
 8008a38:	080089a9 	.word	0x080089a9

08008a3c <__sfp_lock_acquire>:
 8008a3c:	4801      	ldr	r0, [pc, #4]	; (8008a44 <__sfp_lock_acquire+0x8>)
 8008a3e:	f000 ba74 	b.w	8008f2a <__retarget_lock_acquire_recursive>
 8008a42:	bf00      	nop
 8008a44:	2000198d 	.word	0x2000198d

08008a48 <__sfp_lock_release>:
 8008a48:	4801      	ldr	r0, [pc, #4]	; (8008a50 <__sfp_lock_release+0x8>)
 8008a4a:	f000 ba6f 	b.w	8008f2c <__retarget_lock_release_recursive>
 8008a4e:	bf00      	nop
 8008a50:	2000198d 	.word	0x2000198d

08008a54 <__sinit>:
 8008a54:	b510      	push	{r4, lr}
 8008a56:	4604      	mov	r4, r0
 8008a58:	f7ff fff0 	bl	8008a3c <__sfp_lock_acquire>
 8008a5c:	6a23      	ldr	r3, [r4, #32]
 8008a5e:	b11b      	cbz	r3, 8008a68 <__sinit+0x14>
 8008a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a64:	f7ff bff0 	b.w	8008a48 <__sfp_lock_release>
 8008a68:	4b04      	ldr	r3, [pc, #16]	; (8008a7c <__sinit+0x28>)
 8008a6a:	6223      	str	r3, [r4, #32]
 8008a6c:	4b04      	ldr	r3, [pc, #16]	; (8008a80 <__sinit+0x2c>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d1f5      	bne.n	8008a60 <__sinit+0xc>
 8008a74:	f7ff ffc4 	bl	8008a00 <global_stdio_init.part.0>
 8008a78:	e7f2      	b.n	8008a60 <__sinit+0xc>
 8008a7a:	bf00      	nop
 8008a7c:	080089c1 	.word	0x080089c1
 8008a80:	20001984 	.word	0x20001984

08008a84 <_fwalk_sglue>:
 8008a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a88:	4607      	mov	r7, r0
 8008a8a:	4688      	mov	r8, r1
 8008a8c:	4614      	mov	r4, r2
 8008a8e:	2600      	movs	r6, #0
 8008a90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a94:	f1b9 0901 	subs.w	r9, r9, #1
 8008a98:	d505      	bpl.n	8008aa6 <_fwalk_sglue+0x22>
 8008a9a:	6824      	ldr	r4, [r4, #0]
 8008a9c:	2c00      	cmp	r4, #0
 8008a9e:	d1f7      	bne.n	8008a90 <_fwalk_sglue+0xc>
 8008aa0:	4630      	mov	r0, r6
 8008aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008aa6:	89ab      	ldrh	r3, [r5, #12]
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d907      	bls.n	8008abc <_fwalk_sglue+0x38>
 8008aac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	d003      	beq.n	8008abc <_fwalk_sglue+0x38>
 8008ab4:	4629      	mov	r1, r5
 8008ab6:	4638      	mov	r0, r7
 8008ab8:	47c0      	blx	r8
 8008aba:	4306      	orrs	r6, r0
 8008abc:	3568      	adds	r5, #104	; 0x68
 8008abe:	e7e9      	b.n	8008a94 <_fwalk_sglue+0x10>

08008ac0 <iprintf>:
 8008ac0:	b40f      	push	{r0, r1, r2, r3}
 8008ac2:	b507      	push	{r0, r1, r2, lr}
 8008ac4:	4906      	ldr	r1, [pc, #24]	; (8008ae0 <iprintf+0x20>)
 8008ac6:	ab04      	add	r3, sp, #16
 8008ac8:	6808      	ldr	r0, [r1, #0]
 8008aca:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ace:	6881      	ldr	r1, [r0, #8]
 8008ad0:	9301      	str	r3, [sp, #4]
 8008ad2:	f000 fcb5 	bl	8009440 <_vfiprintf_r>
 8008ad6:	b003      	add	sp, #12
 8008ad8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008adc:	b004      	add	sp, #16
 8008ade:	4770      	bx	lr
 8008ae0:	20000078 	.word	0x20000078

08008ae4 <_puts_r>:
 8008ae4:	6a03      	ldr	r3, [r0, #32]
 8008ae6:	b570      	push	{r4, r5, r6, lr}
 8008ae8:	6884      	ldr	r4, [r0, #8]
 8008aea:	4605      	mov	r5, r0
 8008aec:	460e      	mov	r6, r1
 8008aee:	b90b      	cbnz	r3, 8008af4 <_puts_r+0x10>
 8008af0:	f7ff ffb0 	bl	8008a54 <__sinit>
 8008af4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008af6:	07db      	lsls	r3, r3, #31
 8008af8:	d405      	bmi.n	8008b06 <_puts_r+0x22>
 8008afa:	89a3      	ldrh	r3, [r4, #12]
 8008afc:	0598      	lsls	r0, r3, #22
 8008afe:	d402      	bmi.n	8008b06 <_puts_r+0x22>
 8008b00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b02:	f000 fa12 	bl	8008f2a <__retarget_lock_acquire_recursive>
 8008b06:	89a3      	ldrh	r3, [r4, #12]
 8008b08:	0719      	lsls	r1, r3, #28
 8008b0a:	d513      	bpl.n	8008b34 <_puts_r+0x50>
 8008b0c:	6923      	ldr	r3, [r4, #16]
 8008b0e:	b18b      	cbz	r3, 8008b34 <_puts_r+0x50>
 8008b10:	3e01      	subs	r6, #1
 8008b12:	68a3      	ldr	r3, [r4, #8]
 8008b14:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	60a3      	str	r3, [r4, #8]
 8008b1c:	b9e9      	cbnz	r1, 8008b5a <_puts_r+0x76>
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	da2e      	bge.n	8008b80 <_puts_r+0x9c>
 8008b22:	4622      	mov	r2, r4
 8008b24:	210a      	movs	r1, #10
 8008b26:	4628      	mov	r0, r5
 8008b28:	f000 f89b 	bl	8008c62 <__swbuf_r>
 8008b2c:	3001      	adds	r0, #1
 8008b2e:	d007      	beq.n	8008b40 <_puts_r+0x5c>
 8008b30:	250a      	movs	r5, #10
 8008b32:	e007      	b.n	8008b44 <_puts_r+0x60>
 8008b34:	4621      	mov	r1, r4
 8008b36:	4628      	mov	r0, r5
 8008b38:	f000 f8d0 	bl	8008cdc <__swsetup_r>
 8008b3c:	2800      	cmp	r0, #0
 8008b3e:	d0e7      	beq.n	8008b10 <_puts_r+0x2c>
 8008b40:	f04f 35ff 	mov.w	r5, #4294967295
 8008b44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b46:	07da      	lsls	r2, r3, #31
 8008b48:	d405      	bmi.n	8008b56 <_puts_r+0x72>
 8008b4a:	89a3      	ldrh	r3, [r4, #12]
 8008b4c:	059b      	lsls	r3, r3, #22
 8008b4e:	d402      	bmi.n	8008b56 <_puts_r+0x72>
 8008b50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b52:	f000 f9eb 	bl	8008f2c <__retarget_lock_release_recursive>
 8008b56:	4628      	mov	r0, r5
 8008b58:	bd70      	pop	{r4, r5, r6, pc}
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	da04      	bge.n	8008b68 <_puts_r+0x84>
 8008b5e:	69a2      	ldr	r2, [r4, #24]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	dc06      	bgt.n	8008b72 <_puts_r+0x8e>
 8008b64:	290a      	cmp	r1, #10
 8008b66:	d004      	beq.n	8008b72 <_puts_r+0x8e>
 8008b68:	6823      	ldr	r3, [r4, #0]
 8008b6a:	1c5a      	adds	r2, r3, #1
 8008b6c:	6022      	str	r2, [r4, #0]
 8008b6e:	7019      	strb	r1, [r3, #0]
 8008b70:	e7cf      	b.n	8008b12 <_puts_r+0x2e>
 8008b72:	4622      	mov	r2, r4
 8008b74:	4628      	mov	r0, r5
 8008b76:	f000 f874 	bl	8008c62 <__swbuf_r>
 8008b7a:	3001      	adds	r0, #1
 8008b7c:	d1c9      	bne.n	8008b12 <_puts_r+0x2e>
 8008b7e:	e7df      	b.n	8008b40 <_puts_r+0x5c>
 8008b80:	6823      	ldr	r3, [r4, #0]
 8008b82:	250a      	movs	r5, #10
 8008b84:	1c5a      	adds	r2, r3, #1
 8008b86:	6022      	str	r2, [r4, #0]
 8008b88:	701d      	strb	r5, [r3, #0]
 8008b8a:	e7db      	b.n	8008b44 <_puts_r+0x60>

08008b8c <puts>:
 8008b8c:	4b02      	ldr	r3, [pc, #8]	; (8008b98 <puts+0xc>)
 8008b8e:	4601      	mov	r1, r0
 8008b90:	6818      	ldr	r0, [r3, #0]
 8008b92:	f7ff bfa7 	b.w	8008ae4 <_puts_r>
 8008b96:	bf00      	nop
 8008b98:	20000078 	.word	0x20000078

08008b9c <siprintf>:
 8008b9c:	b40e      	push	{r1, r2, r3}
 8008b9e:	b500      	push	{lr}
 8008ba0:	b09c      	sub	sp, #112	; 0x70
 8008ba2:	ab1d      	add	r3, sp, #116	; 0x74
 8008ba4:	9002      	str	r0, [sp, #8]
 8008ba6:	9006      	str	r0, [sp, #24]
 8008ba8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008bac:	4809      	ldr	r0, [pc, #36]	; (8008bd4 <siprintf+0x38>)
 8008bae:	9107      	str	r1, [sp, #28]
 8008bb0:	9104      	str	r1, [sp, #16]
 8008bb2:	4909      	ldr	r1, [pc, #36]	; (8008bd8 <siprintf+0x3c>)
 8008bb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bb8:	9105      	str	r1, [sp, #20]
 8008bba:	6800      	ldr	r0, [r0, #0]
 8008bbc:	9301      	str	r3, [sp, #4]
 8008bbe:	a902      	add	r1, sp, #8
 8008bc0:	f000 fb16 	bl	80091f0 <_svfiprintf_r>
 8008bc4:	9b02      	ldr	r3, [sp, #8]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	701a      	strb	r2, [r3, #0]
 8008bca:	b01c      	add	sp, #112	; 0x70
 8008bcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bd0:	b003      	add	sp, #12
 8008bd2:	4770      	bx	lr
 8008bd4:	20000078 	.word	0x20000078
 8008bd8:	ffff0208 	.word	0xffff0208

08008bdc <__sread>:
 8008bdc:	b510      	push	{r4, lr}
 8008bde:	460c      	mov	r4, r1
 8008be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008be4:	f000 f952 	bl	8008e8c <_read_r>
 8008be8:	2800      	cmp	r0, #0
 8008bea:	bfab      	itete	ge
 8008bec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008bee:	89a3      	ldrhlt	r3, [r4, #12]
 8008bf0:	181b      	addge	r3, r3, r0
 8008bf2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008bf6:	bfac      	ite	ge
 8008bf8:	6563      	strge	r3, [r4, #84]	; 0x54
 8008bfa:	81a3      	strhlt	r3, [r4, #12]
 8008bfc:	bd10      	pop	{r4, pc}

08008bfe <__swrite>:
 8008bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c02:	461f      	mov	r7, r3
 8008c04:	898b      	ldrh	r3, [r1, #12]
 8008c06:	05db      	lsls	r3, r3, #23
 8008c08:	4605      	mov	r5, r0
 8008c0a:	460c      	mov	r4, r1
 8008c0c:	4616      	mov	r6, r2
 8008c0e:	d505      	bpl.n	8008c1c <__swrite+0x1e>
 8008c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c14:	2302      	movs	r3, #2
 8008c16:	2200      	movs	r2, #0
 8008c18:	f000 f926 	bl	8008e68 <_lseek_r>
 8008c1c:	89a3      	ldrh	r3, [r4, #12]
 8008c1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c26:	81a3      	strh	r3, [r4, #12]
 8008c28:	4632      	mov	r2, r6
 8008c2a:	463b      	mov	r3, r7
 8008c2c:	4628      	mov	r0, r5
 8008c2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c32:	f000 b93d 	b.w	8008eb0 <_write_r>

08008c36 <__sseek>:
 8008c36:	b510      	push	{r4, lr}
 8008c38:	460c      	mov	r4, r1
 8008c3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c3e:	f000 f913 	bl	8008e68 <_lseek_r>
 8008c42:	1c43      	adds	r3, r0, #1
 8008c44:	89a3      	ldrh	r3, [r4, #12]
 8008c46:	bf15      	itete	ne
 8008c48:	6560      	strne	r0, [r4, #84]	; 0x54
 8008c4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008c4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008c52:	81a3      	strheq	r3, [r4, #12]
 8008c54:	bf18      	it	ne
 8008c56:	81a3      	strhne	r3, [r4, #12]
 8008c58:	bd10      	pop	{r4, pc}

08008c5a <__sclose>:
 8008c5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c5e:	f000 b89d 	b.w	8008d9c <_close_r>

08008c62 <__swbuf_r>:
 8008c62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c64:	460e      	mov	r6, r1
 8008c66:	4614      	mov	r4, r2
 8008c68:	4605      	mov	r5, r0
 8008c6a:	b118      	cbz	r0, 8008c74 <__swbuf_r+0x12>
 8008c6c:	6a03      	ldr	r3, [r0, #32]
 8008c6e:	b90b      	cbnz	r3, 8008c74 <__swbuf_r+0x12>
 8008c70:	f7ff fef0 	bl	8008a54 <__sinit>
 8008c74:	69a3      	ldr	r3, [r4, #24]
 8008c76:	60a3      	str	r3, [r4, #8]
 8008c78:	89a3      	ldrh	r3, [r4, #12]
 8008c7a:	071a      	lsls	r2, r3, #28
 8008c7c:	d525      	bpl.n	8008cca <__swbuf_r+0x68>
 8008c7e:	6923      	ldr	r3, [r4, #16]
 8008c80:	b31b      	cbz	r3, 8008cca <__swbuf_r+0x68>
 8008c82:	6823      	ldr	r3, [r4, #0]
 8008c84:	6922      	ldr	r2, [r4, #16]
 8008c86:	1a98      	subs	r0, r3, r2
 8008c88:	6963      	ldr	r3, [r4, #20]
 8008c8a:	b2f6      	uxtb	r6, r6
 8008c8c:	4283      	cmp	r3, r0
 8008c8e:	4637      	mov	r7, r6
 8008c90:	dc04      	bgt.n	8008c9c <__swbuf_r+0x3a>
 8008c92:	4621      	mov	r1, r4
 8008c94:	4628      	mov	r0, r5
 8008c96:	f000 ff03 	bl	8009aa0 <_fflush_r>
 8008c9a:	b9e0      	cbnz	r0, 8008cd6 <__swbuf_r+0x74>
 8008c9c:	68a3      	ldr	r3, [r4, #8]
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	60a3      	str	r3, [r4, #8]
 8008ca2:	6823      	ldr	r3, [r4, #0]
 8008ca4:	1c5a      	adds	r2, r3, #1
 8008ca6:	6022      	str	r2, [r4, #0]
 8008ca8:	701e      	strb	r6, [r3, #0]
 8008caa:	6962      	ldr	r2, [r4, #20]
 8008cac:	1c43      	adds	r3, r0, #1
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d004      	beq.n	8008cbc <__swbuf_r+0x5a>
 8008cb2:	89a3      	ldrh	r3, [r4, #12]
 8008cb4:	07db      	lsls	r3, r3, #31
 8008cb6:	d506      	bpl.n	8008cc6 <__swbuf_r+0x64>
 8008cb8:	2e0a      	cmp	r6, #10
 8008cba:	d104      	bne.n	8008cc6 <__swbuf_r+0x64>
 8008cbc:	4621      	mov	r1, r4
 8008cbe:	4628      	mov	r0, r5
 8008cc0:	f000 feee 	bl	8009aa0 <_fflush_r>
 8008cc4:	b938      	cbnz	r0, 8008cd6 <__swbuf_r+0x74>
 8008cc6:	4638      	mov	r0, r7
 8008cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cca:	4621      	mov	r1, r4
 8008ccc:	4628      	mov	r0, r5
 8008cce:	f000 f805 	bl	8008cdc <__swsetup_r>
 8008cd2:	2800      	cmp	r0, #0
 8008cd4:	d0d5      	beq.n	8008c82 <__swbuf_r+0x20>
 8008cd6:	f04f 37ff 	mov.w	r7, #4294967295
 8008cda:	e7f4      	b.n	8008cc6 <__swbuf_r+0x64>

08008cdc <__swsetup_r>:
 8008cdc:	b538      	push	{r3, r4, r5, lr}
 8008cde:	4b2a      	ldr	r3, [pc, #168]	; (8008d88 <__swsetup_r+0xac>)
 8008ce0:	4605      	mov	r5, r0
 8008ce2:	6818      	ldr	r0, [r3, #0]
 8008ce4:	460c      	mov	r4, r1
 8008ce6:	b118      	cbz	r0, 8008cf0 <__swsetup_r+0x14>
 8008ce8:	6a03      	ldr	r3, [r0, #32]
 8008cea:	b90b      	cbnz	r3, 8008cf0 <__swsetup_r+0x14>
 8008cec:	f7ff feb2 	bl	8008a54 <__sinit>
 8008cf0:	89a3      	ldrh	r3, [r4, #12]
 8008cf2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008cf6:	0718      	lsls	r0, r3, #28
 8008cf8:	d422      	bmi.n	8008d40 <__swsetup_r+0x64>
 8008cfa:	06d9      	lsls	r1, r3, #27
 8008cfc:	d407      	bmi.n	8008d0e <__swsetup_r+0x32>
 8008cfe:	2309      	movs	r3, #9
 8008d00:	602b      	str	r3, [r5, #0]
 8008d02:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008d06:	81a3      	strh	r3, [r4, #12]
 8008d08:	f04f 30ff 	mov.w	r0, #4294967295
 8008d0c:	e034      	b.n	8008d78 <__swsetup_r+0x9c>
 8008d0e:	0758      	lsls	r0, r3, #29
 8008d10:	d512      	bpl.n	8008d38 <__swsetup_r+0x5c>
 8008d12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d14:	b141      	cbz	r1, 8008d28 <__swsetup_r+0x4c>
 8008d16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d1a:	4299      	cmp	r1, r3
 8008d1c:	d002      	beq.n	8008d24 <__swsetup_r+0x48>
 8008d1e:	4628      	mov	r0, r5
 8008d20:	f000 f914 	bl	8008f4c <_free_r>
 8008d24:	2300      	movs	r3, #0
 8008d26:	6363      	str	r3, [r4, #52]	; 0x34
 8008d28:	89a3      	ldrh	r3, [r4, #12]
 8008d2a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008d2e:	81a3      	strh	r3, [r4, #12]
 8008d30:	2300      	movs	r3, #0
 8008d32:	6063      	str	r3, [r4, #4]
 8008d34:	6923      	ldr	r3, [r4, #16]
 8008d36:	6023      	str	r3, [r4, #0]
 8008d38:	89a3      	ldrh	r3, [r4, #12]
 8008d3a:	f043 0308 	orr.w	r3, r3, #8
 8008d3e:	81a3      	strh	r3, [r4, #12]
 8008d40:	6923      	ldr	r3, [r4, #16]
 8008d42:	b94b      	cbnz	r3, 8008d58 <__swsetup_r+0x7c>
 8008d44:	89a3      	ldrh	r3, [r4, #12]
 8008d46:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d4e:	d003      	beq.n	8008d58 <__swsetup_r+0x7c>
 8008d50:	4621      	mov	r1, r4
 8008d52:	4628      	mov	r0, r5
 8008d54:	f000 fef2 	bl	8009b3c <__smakebuf_r>
 8008d58:	89a0      	ldrh	r0, [r4, #12]
 8008d5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d5e:	f010 0301 	ands.w	r3, r0, #1
 8008d62:	d00a      	beq.n	8008d7a <__swsetup_r+0x9e>
 8008d64:	2300      	movs	r3, #0
 8008d66:	60a3      	str	r3, [r4, #8]
 8008d68:	6963      	ldr	r3, [r4, #20]
 8008d6a:	425b      	negs	r3, r3
 8008d6c:	61a3      	str	r3, [r4, #24]
 8008d6e:	6923      	ldr	r3, [r4, #16]
 8008d70:	b943      	cbnz	r3, 8008d84 <__swsetup_r+0xa8>
 8008d72:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008d76:	d1c4      	bne.n	8008d02 <__swsetup_r+0x26>
 8008d78:	bd38      	pop	{r3, r4, r5, pc}
 8008d7a:	0781      	lsls	r1, r0, #30
 8008d7c:	bf58      	it	pl
 8008d7e:	6963      	ldrpl	r3, [r4, #20]
 8008d80:	60a3      	str	r3, [r4, #8]
 8008d82:	e7f4      	b.n	8008d6e <__swsetup_r+0x92>
 8008d84:	2000      	movs	r0, #0
 8008d86:	e7f7      	b.n	8008d78 <__swsetup_r+0x9c>
 8008d88:	20000078 	.word	0x20000078

08008d8c <memset>:
 8008d8c:	4402      	add	r2, r0
 8008d8e:	4603      	mov	r3, r0
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d100      	bne.n	8008d96 <memset+0xa>
 8008d94:	4770      	bx	lr
 8008d96:	f803 1b01 	strb.w	r1, [r3], #1
 8008d9a:	e7f9      	b.n	8008d90 <memset+0x4>

08008d9c <_close_r>:
 8008d9c:	b538      	push	{r3, r4, r5, lr}
 8008d9e:	4d06      	ldr	r5, [pc, #24]	; (8008db8 <_close_r+0x1c>)
 8008da0:	2300      	movs	r3, #0
 8008da2:	4604      	mov	r4, r0
 8008da4:	4608      	mov	r0, r1
 8008da6:	602b      	str	r3, [r5, #0]
 8008da8:	f7f8 fa17 	bl	80011da <_close>
 8008dac:	1c43      	adds	r3, r0, #1
 8008dae:	d102      	bne.n	8008db6 <_close_r+0x1a>
 8008db0:	682b      	ldr	r3, [r5, #0]
 8008db2:	b103      	cbz	r3, 8008db6 <_close_r+0x1a>
 8008db4:	6023      	str	r3, [r4, #0]
 8008db6:	bd38      	pop	{r3, r4, r5, pc}
 8008db8:	20001988 	.word	0x20001988

08008dbc <_reclaim_reent>:
 8008dbc:	4b29      	ldr	r3, [pc, #164]	; (8008e64 <_reclaim_reent+0xa8>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4283      	cmp	r3, r0
 8008dc2:	b570      	push	{r4, r5, r6, lr}
 8008dc4:	4604      	mov	r4, r0
 8008dc6:	d04b      	beq.n	8008e60 <_reclaim_reent+0xa4>
 8008dc8:	69c3      	ldr	r3, [r0, #28]
 8008dca:	b143      	cbz	r3, 8008dde <_reclaim_reent+0x22>
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d144      	bne.n	8008e5c <_reclaim_reent+0xa0>
 8008dd2:	69e3      	ldr	r3, [r4, #28]
 8008dd4:	6819      	ldr	r1, [r3, #0]
 8008dd6:	b111      	cbz	r1, 8008dde <_reclaim_reent+0x22>
 8008dd8:	4620      	mov	r0, r4
 8008dda:	f000 f8b7 	bl	8008f4c <_free_r>
 8008dde:	6961      	ldr	r1, [r4, #20]
 8008de0:	b111      	cbz	r1, 8008de8 <_reclaim_reent+0x2c>
 8008de2:	4620      	mov	r0, r4
 8008de4:	f000 f8b2 	bl	8008f4c <_free_r>
 8008de8:	69e1      	ldr	r1, [r4, #28]
 8008dea:	b111      	cbz	r1, 8008df2 <_reclaim_reent+0x36>
 8008dec:	4620      	mov	r0, r4
 8008dee:	f000 f8ad 	bl	8008f4c <_free_r>
 8008df2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008df4:	b111      	cbz	r1, 8008dfc <_reclaim_reent+0x40>
 8008df6:	4620      	mov	r0, r4
 8008df8:	f000 f8a8 	bl	8008f4c <_free_r>
 8008dfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dfe:	b111      	cbz	r1, 8008e06 <_reclaim_reent+0x4a>
 8008e00:	4620      	mov	r0, r4
 8008e02:	f000 f8a3 	bl	8008f4c <_free_r>
 8008e06:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008e08:	b111      	cbz	r1, 8008e10 <_reclaim_reent+0x54>
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	f000 f89e 	bl	8008f4c <_free_r>
 8008e10:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008e12:	b111      	cbz	r1, 8008e1a <_reclaim_reent+0x5e>
 8008e14:	4620      	mov	r0, r4
 8008e16:	f000 f899 	bl	8008f4c <_free_r>
 8008e1a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008e1c:	b111      	cbz	r1, 8008e24 <_reclaim_reent+0x68>
 8008e1e:	4620      	mov	r0, r4
 8008e20:	f000 f894 	bl	8008f4c <_free_r>
 8008e24:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008e26:	b111      	cbz	r1, 8008e2e <_reclaim_reent+0x72>
 8008e28:	4620      	mov	r0, r4
 8008e2a:	f000 f88f 	bl	8008f4c <_free_r>
 8008e2e:	6a23      	ldr	r3, [r4, #32]
 8008e30:	b1b3      	cbz	r3, 8008e60 <_reclaim_reent+0xa4>
 8008e32:	4620      	mov	r0, r4
 8008e34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008e38:	4718      	bx	r3
 8008e3a:	5949      	ldr	r1, [r1, r5]
 8008e3c:	b941      	cbnz	r1, 8008e50 <_reclaim_reent+0x94>
 8008e3e:	3504      	adds	r5, #4
 8008e40:	69e3      	ldr	r3, [r4, #28]
 8008e42:	2d80      	cmp	r5, #128	; 0x80
 8008e44:	68d9      	ldr	r1, [r3, #12]
 8008e46:	d1f8      	bne.n	8008e3a <_reclaim_reent+0x7e>
 8008e48:	4620      	mov	r0, r4
 8008e4a:	f000 f87f 	bl	8008f4c <_free_r>
 8008e4e:	e7c0      	b.n	8008dd2 <_reclaim_reent+0x16>
 8008e50:	680e      	ldr	r6, [r1, #0]
 8008e52:	4620      	mov	r0, r4
 8008e54:	f000 f87a 	bl	8008f4c <_free_r>
 8008e58:	4631      	mov	r1, r6
 8008e5a:	e7ef      	b.n	8008e3c <_reclaim_reent+0x80>
 8008e5c:	2500      	movs	r5, #0
 8008e5e:	e7ef      	b.n	8008e40 <_reclaim_reent+0x84>
 8008e60:	bd70      	pop	{r4, r5, r6, pc}
 8008e62:	bf00      	nop
 8008e64:	20000078 	.word	0x20000078

08008e68 <_lseek_r>:
 8008e68:	b538      	push	{r3, r4, r5, lr}
 8008e6a:	4d07      	ldr	r5, [pc, #28]	; (8008e88 <_lseek_r+0x20>)
 8008e6c:	4604      	mov	r4, r0
 8008e6e:	4608      	mov	r0, r1
 8008e70:	4611      	mov	r1, r2
 8008e72:	2200      	movs	r2, #0
 8008e74:	602a      	str	r2, [r5, #0]
 8008e76:	461a      	mov	r2, r3
 8008e78:	f7f8 f9d6 	bl	8001228 <_lseek>
 8008e7c:	1c43      	adds	r3, r0, #1
 8008e7e:	d102      	bne.n	8008e86 <_lseek_r+0x1e>
 8008e80:	682b      	ldr	r3, [r5, #0]
 8008e82:	b103      	cbz	r3, 8008e86 <_lseek_r+0x1e>
 8008e84:	6023      	str	r3, [r4, #0]
 8008e86:	bd38      	pop	{r3, r4, r5, pc}
 8008e88:	20001988 	.word	0x20001988

08008e8c <_read_r>:
 8008e8c:	b538      	push	{r3, r4, r5, lr}
 8008e8e:	4d07      	ldr	r5, [pc, #28]	; (8008eac <_read_r+0x20>)
 8008e90:	4604      	mov	r4, r0
 8008e92:	4608      	mov	r0, r1
 8008e94:	4611      	mov	r1, r2
 8008e96:	2200      	movs	r2, #0
 8008e98:	602a      	str	r2, [r5, #0]
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	f7f8 f980 	bl	80011a0 <_read>
 8008ea0:	1c43      	adds	r3, r0, #1
 8008ea2:	d102      	bne.n	8008eaa <_read_r+0x1e>
 8008ea4:	682b      	ldr	r3, [r5, #0]
 8008ea6:	b103      	cbz	r3, 8008eaa <_read_r+0x1e>
 8008ea8:	6023      	str	r3, [r4, #0]
 8008eaa:	bd38      	pop	{r3, r4, r5, pc}
 8008eac:	20001988 	.word	0x20001988

08008eb0 <_write_r>:
 8008eb0:	b538      	push	{r3, r4, r5, lr}
 8008eb2:	4d07      	ldr	r5, [pc, #28]	; (8008ed0 <_write_r+0x20>)
 8008eb4:	4604      	mov	r4, r0
 8008eb6:	4608      	mov	r0, r1
 8008eb8:	4611      	mov	r1, r2
 8008eba:	2200      	movs	r2, #0
 8008ebc:	602a      	str	r2, [r5, #0]
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	f7f7 fc33 	bl	800072a <_write>
 8008ec4:	1c43      	adds	r3, r0, #1
 8008ec6:	d102      	bne.n	8008ece <_write_r+0x1e>
 8008ec8:	682b      	ldr	r3, [r5, #0]
 8008eca:	b103      	cbz	r3, 8008ece <_write_r+0x1e>
 8008ecc:	6023      	str	r3, [r4, #0]
 8008ece:	bd38      	pop	{r3, r4, r5, pc}
 8008ed0:	20001988 	.word	0x20001988

08008ed4 <__errno>:
 8008ed4:	4b01      	ldr	r3, [pc, #4]	; (8008edc <__errno+0x8>)
 8008ed6:	6818      	ldr	r0, [r3, #0]
 8008ed8:	4770      	bx	lr
 8008eda:	bf00      	nop
 8008edc:	20000078 	.word	0x20000078

08008ee0 <__libc_init_array>:
 8008ee0:	b570      	push	{r4, r5, r6, lr}
 8008ee2:	4d0d      	ldr	r5, [pc, #52]	; (8008f18 <__libc_init_array+0x38>)
 8008ee4:	4c0d      	ldr	r4, [pc, #52]	; (8008f1c <__libc_init_array+0x3c>)
 8008ee6:	1b64      	subs	r4, r4, r5
 8008ee8:	10a4      	asrs	r4, r4, #2
 8008eea:	2600      	movs	r6, #0
 8008eec:	42a6      	cmp	r6, r4
 8008eee:	d109      	bne.n	8008f04 <__libc_init_array+0x24>
 8008ef0:	4d0b      	ldr	r5, [pc, #44]	; (8008f20 <__libc_init_array+0x40>)
 8008ef2:	4c0c      	ldr	r4, [pc, #48]	; (8008f24 <__libc_init_array+0x44>)
 8008ef4:	f000 fee2 	bl	8009cbc <_init>
 8008ef8:	1b64      	subs	r4, r4, r5
 8008efa:	10a4      	asrs	r4, r4, #2
 8008efc:	2600      	movs	r6, #0
 8008efe:	42a6      	cmp	r6, r4
 8008f00:	d105      	bne.n	8008f0e <__libc_init_array+0x2e>
 8008f02:	bd70      	pop	{r4, r5, r6, pc}
 8008f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f08:	4798      	blx	r3
 8008f0a:	3601      	adds	r6, #1
 8008f0c:	e7ee      	b.n	8008eec <__libc_init_array+0xc>
 8008f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f12:	4798      	blx	r3
 8008f14:	3601      	adds	r6, #1
 8008f16:	e7f2      	b.n	8008efe <__libc_init_array+0x1e>
 8008f18:	08009e70 	.word	0x08009e70
 8008f1c:	08009e70 	.word	0x08009e70
 8008f20:	08009e70 	.word	0x08009e70
 8008f24:	08009e74 	.word	0x08009e74

08008f28 <__retarget_lock_init_recursive>:
 8008f28:	4770      	bx	lr

08008f2a <__retarget_lock_acquire_recursive>:
 8008f2a:	4770      	bx	lr

08008f2c <__retarget_lock_release_recursive>:
 8008f2c:	4770      	bx	lr

08008f2e <memcpy>:
 8008f2e:	440a      	add	r2, r1
 8008f30:	4291      	cmp	r1, r2
 8008f32:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f36:	d100      	bne.n	8008f3a <memcpy+0xc>
 8008f38:	4770      	bx	lr
 8008f3a:	b510      	push	{r4, lr}
 8008f3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f44:	4291      	cmp	r1, r2
 8008f46:	d1f9      	bne.n	8008f3c <memcpy+0xe>
 8008f48:	bd10      	pop	{r4, pc}
	...

08008f4c <_free_r>:
 8008f4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f4e:	2900      	cmp	r1, #0
 8008f50:	d044      	beq.n	8008fdc <_free_r+0x90>
 8008f52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f56:	9001      	str	r0, [sp, #4]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	f1a1 0404 	sub.w	r4, r1, #4
 8008f5e:	bfb8      	it	lt
 8008f60:	18e4      	addlt	r4, r4, r3
 8008f62:	f000 f8df 	bl	8009124 <__malloc_lock>
 8008f66:	4a1e      	ldr	r2, [pc, #120]	; (8008fe0 <_free_r+0x94>)
 8008f68:	9801      	ldr	r0, [sp, #4]
 8008f6a:	6813      	ldr	r3, [r2, #0]
 8008f6c:	b933      	cbnz	r3, 8008f7c <_free_r+0x30>
 8008f6e:	6063      	str	r3, [r4, #4]
 8008f70:	6014      	str	r4, [r2, #0]
 8008f72:	b003      	add	sp, #12
 8008f74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f78:	f000 b8da 	b.w	8009130 <__malloc_unlock>
 8008f7c:	42a3      	cmp	r3, r4
 8008f7e:	d908      	bls.n	8008f92 <_free_r+0x46>
 8008f80:	6825      	ldr	r5, [r4, #0]
 8008f82:	1961      	adds	r1, r4, r5
 8008f84:	428b      	cmp	r3, r1
 8008f86:	bf01      	itttt	eq
 8008f88:	6819      	ldreq	r1, [r3, #0]
 8008f8a:	685b      	ldreq	r3, [r3, #4]
 8008f8c:	1949      	addeq	r1, r1, r5
 8008f8e:	6021      	streq	r1, [r4, #0]
 8008f90:	e7ed      	b.n	8008f6e <_free_r+0x22>
 8008f92:	461a      	mov	r2, r3
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	b10b      	cbz	r3, 8008f9c <_free_r+0x50>
 8008f98:	42a3      	cmp	r3, r4
 8008f9a:	d9fa      	bls.n	8008f92 <_free_r+0x46>
 8008f9c:	6811      	ldr	r1, [r2, #0]
 8008f9e:	1855      	adds	r5, r2, r1
 8008fa0:	42a5      	cmp	r5, r4
 8008fa2:	d10b      	bne.n	8008fbc <_free_r+0x70>
 8008fa4:	6824      	ldr	r4, [r4, #0]
 8008fa6:	4421      	add	r1, r4
 8008fa8:	1854      	adds	r4, r2, r1
 8008faa:	42a3      	cmp	r3, r4
 8008fac:	6011      	str	r1, [r2, #0]
 8008fae:	d1e0      	bne.n	8008f72 <_free_r+0x26>
 8008fb0:	681c      	ldr	r4, [r3, #0]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	6053      	str	r3, [r2, #4]
 8008fb6:	440c      	add	r4, r1
 8008fb8:	6014      	str	r4, [r2, #0]
 8008fba:	e7da      	b.n	8008f72 <_free_r+0x26>
 8008fbc:	d902      	bls.n	8008fc4 <_free_r+0x78>
 8008fbe:	230c      	movs	r3, #12
 8008fc0:	6003      	str	r3, [r0, #0]
 8008fc2:	e7d6      	b.n	8008f72 <_free_r+0x26>
 8008fc4:	6825      	ldr	r5, [r4, #0]
 8008fc6:	1961      	adds	r1, r4, r5
 8008fc8:	428b      	cmp	r3, r1
 8008fca:	bf04      	itt	eq
 8008fcc:	6819      	ldreq	r1, [r3, #0]
 8008fce:	685b      	ldreq	r3, [r3, #4]
 8008fd0:	6063      	str	r3, [r4, #4]
 8008fd2:	bf04      	itt	eq
 8008fd4:	1949      	addeq	r1, r1, r5
 8008fd6:	6021      	streq	r1, [r4, #0]
 8008fd8:	6054      	str	r4, [r2, #4]
 8008fda:	e7ca      	b.n	8008f72 <_free_r+0x26>
 8008fdc:	b003      	add	sp, #12
 8008fde:	bd30      	pop	{r4, r5, pc}
 8008fe0:	20001990 	.word	0x20001990

08008fe4 <sbrk_aligned>:
 8008fe4:	b570      	push	{r4, r5, r6, lr}
 8008fe6:	4e0e      	ldr	r6, [pc, #56]	; (8009020 <sbrk_aligned+0x3c>)
 8008fe8:	460c      	mov	r4, r1
 8008fea:	6831      	ldr	r1, [r6, #0]
 8008fec:	4605      	mov	r5, r0
 8008fee:	b911      	cbnz	r1, 8008ff6 <sbrk_aligned+0x12>
 8008ff0:	f000 fe1c 	bl	8009c2c <_sbrk_r>
 8008ff4:	6030      	str	r0, [r6, #0]
 8008ff6:	4621      	mov	r1, r4
 8008ff8:	4628      	mov	r0, r5
 8008ffa:	f000 fe17 	bl	8009c2c <_sbrk_r>
 8008ffe:	1c43      	adds	r3, r0, #1
 8009000:	d00a      	beq.n	8009018 <sbrk_aligned+0x34>
 8009002:	1cc4      	adds	r4, r0, #3
 8009004:	f024 0403 	bic.w	r4, r4, #3
 8009008:	42a0      	cmp	r0, r4
 800900a:	d007      	beq.n	800901c <sbrk_aligned+0x38>
 800900c:	1a21      	subs	r1, r4, r0
 800900e:	4628      	mov	r0, r5
 8009010:	f000 fe0c 	bl	8009c2c <_sbrk_r>
 8009014:	3001      	adds	r0, #1
 8009016:	d101      	bne.n	800901c <sbrk_aligned+0x38>
 8009018:	f04f 34ff 	mov.w	r4, #4294967295
 800901c:	4620      	mov	r0, r4
 800901e:	bd70      	pop	{r4, r5, r6, pc}
 8009020:	20001994 	.word	0x20001994

08009024 <_malloc_r>:
 8009024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009028:	1ccd      	adds	r5, r1, #3
 800902a:	f025 0503 	bic.w	r5, r5, #3
 800902e:	3508      	adds	r5, #8
 8009030:	2d0c      	cmp	r5, #12
 8009032:	bf38      	it	cc
 8009034:	250c      	movcc	r5, #12
 8009036:	2d00      	cmp	r5, #0
 8009038:	4607      	mov	r7, r0
 800903a:	db01      	blt.n	8009040 <_malloc_r+0x1c>
 800903c:	42a9      	cmp	r1, r5
 800903e:	d905      	bls.n	800904c <_malloc_r+0x28>
 8009040:	230c      	movs	r3, #12
 8009042:	603b      	str	r3, [r7, #0]
 8009044:	2600      	movs	r6, #0
 8009046:	4630      	mov	r0, r6
 8009048:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800904c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009120 <_malloc_r+0xfc>
 8009050:	f000 f868 	bl	8009124 <__malloc_lock>
 8009054:	f8d8 3000 	ldr.w	r3, [r8]
 8009058:	461c      	mov	r4, r3
 800905a:	bb5c      	cbnz	r4, 80090b4 <_malloc_r+0x90>
 800905c:	4629      	mov	r1, r5
 800905e:	4638      	mov	r0, r7
 8009060:	f7ff ffc0 	bl	8008fe4 <sbrk_aligned>
 8009064:	1c43      	adds	r3, r0, #1
 8009066:	4604      	mov	r4, r0
 8009068:	d155      	bne.n	8009116 <_malloc_r+0xf2>
 800906a:	f8d8 4000 	ldr.w	r4, [r8]
 800906e:	4626      	mov	r6, r4
 8009070:	2e00      	cmp	r6, #0
 8009072:	d145      	bne.n	8009100 <_malloc_r+0xdc>
 8009074:	2c00      	cmp	r4, #0
 8009076:	d048      	beq.n	800910a <_malloc_r+0xe6>
 8009078:	6823      	ldr	r3, [r4, #0]
 800907a:	4631      	mov	r1, r6
 800907c:	4638      	mov	r0, r7
 800907e:	eb04 0903 	add.w	r9, r4, r3
 8009082:	f000 fdd3 	bl	8009c2c <_sbrk_r>
 8009086:	4581      	cmp	r9, r0
 8009088:	d13f      	bne.n	800910a <_malloc_r+0xe6>
 800908a:	6821      	ldr	r1, [r4, #0]
 800908c:	1a6d      	subs	r5, r5, r1
 800908e:	4629      	mov	r1, r5
 8009090:	4638      	mov	r0, r7
 8009092:	f7ff ffa7 	bl	8008fe4 <sbrk_aligned>
 8009096:	3001      	adds	r0, #1
 8009098:	d037      	beq.n	800910a <_malloc_r+0xe6>
 800909a:	6823      	ldr	r3, [r4, #0]
 800909c:	442b      	add	r3, r5
 800909e:	6023      	str	r3, [r4, #0]
 80090a0:	f8d8 3000 	ldr.w	r3, [r8]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d038      	beq.n	800911a <_malloc_r+0xf6>
 80090a8:	685a      	ldr	r2, [r3, #4]
 80090aa:	42a2      	cmp	r2, r4
 80090ac:	d12b      	bne.n	8009106 <_malloc_r+0xe2>
 80090ae:	2200      	movs	r2, #0
 80090b0:	605a      	str	r2, [r3, #4]
 80090b2:	e00f      	b.n	80090d4 <_malloc_r+0xb0>
 80090b4:	6822      	ldr	r2, [r4, #0]
 80090b6:	1b52      	subs	r2, r2, r5
 80090b8:	d41f      	bmi.n	80090fa <_malloc_r+0xd6>
 80090ba:	2a0b      	cmp	r2, #11
 80090bc:	d917      	bls.n	80090ee <_malloc_r+0xca>
 80090be:	1961      	adds	r1, r4, r5
 80090c0:	42a3      	cmp	r3, r4
 80090c2:	6025      	str	r5, [r4, #0]
 80090c4:	bf18      	it	ne
 80090c6:	6059      	strne	r1, [r3, #4]
 80090c8:	6863      	ldr	r3, [r4, #4]
 80090ca:	bf08      	it	eq
 80090cc:	f8c8 1000 	streq.w	r1, [r8]
 80090d0:	5162      	str	r2, [r4, r5]
 80090d2:	604b      	str	r3, [r1, #4]
 80090d4:	4638      	mov	r0, r7
 80090d6:	f104 060b 	add.w	r6, r4, #11
 80090da:	f000 f829 	bl	8009130 <__malloc_unlock>
 80090de:	f026 0607 	bic.w	r6, r6, #7
 80090e2:	1d23      	adds	r3, r4, #4
 80090e4:	1af2      	subs	r2, r6, r3
 80090e6:	d0ae      	beq.n	8009046 <_malloc_r+0x22>
 80090e8:	1b9b      	subs	r3, r3, r6
 80090ea:	50a3      	str	r3, [r4, r2]
 80090ec:	e7ab      	b.n	8009046 <_malloc_r+0x22>
 80090ee:	42a3      	cmp	r3, r4
 80090f0:	6862      	ldr	r2, [r4, #4]
 80090f2:	d1dd      	bne.n	80090b0 <_malloc_r+0x8c>
 80090f4:	f8c8 2000 	str.w	r2, [r8]
 80090f8:	e7ec      	b.n	80090d4 <_malloc_r+0xb0>
 80090fa:	4623      	mov	r3, r4
 80090fc:	6864      	ldr	r4, [r4, #4]
 80090fe:	e7ac      	b.n	800905a <_malloc_r+0x36>
 8009100:	4634      	mov	r4, r6
 8009102:	6876      	ldr	r6, [r6, #4]
 8009104:	e7b4      	b.n	8009070 <_malloc_r+0x4c>
 8009106:	4613      	mov	r3, r2
 8009108:	e7cc      	b.n	80090a4 <_malloc_r+0x80>
 800910a:	230c      	movs	r3, #12
 800910c:	603b      	str	r3, [r7, #0]
 800910e:	4638      	mov	r0, r7
 8009110:	f000 f80e 	bl	8009130 <__malloc_unlock>
 8009114:	e797      	b.n	8009046 <_malloc_r+0x22>
 8009116:	6025      	str	r5, [r4, #0]
 8009118:	e7dc      	b.n	80090d4 <_malloc_r+0xb0>
 800911a:	605b      	str	r3, [r3, #4]
 800911c:	deff      	udf	#255	; 0xff
 800911e:	bf00      	nop
 8009120:	20001990 	.word	0x20001990

08009124 <__malloc_lock>:
 8009124:	4801      	ldr	r0, [pc, #4]	; (800912c <__malloc_lock+0x8>)
 8009126:	f7ff bf00 	b.w	8008f2a <__retarget_lock_acquire_recursive>
 800912a:	bf00      	nop
 800912c:	2000198c 	.word	0x2000198c

08009130 <__malloc_unlock>:
 8009130:	4801      	ldr	r0, [pc, #4]	; (8009138 <__malloc_unlock+0x8>)
 8009132:	f7ff befb 	b.w	8008f2c <__retarget_lock_release_recursive>
 8009136:	bf00      	nop
 8009138:	2000198c 	.word	0x2000198c

0800913c <__ssputs_r>:
 800913c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009140:	688e      	ldr	r6, [r1, #8]
 8009142:	461f      	mov	r7, r3
 8009144:	42be      	cmp	r6, r7
 8009146:	680b      	ldr	r3, [r1, #0]
 8009148:	4682      	mov	sl, r0
 800914a:	460c      	mov	r4, r1
 800914c:	4690      	mov	r8, r2
 800914e:	d82c      	bhi.n	80091aa <__ssputs_r+0x6e>
 8009150:	898a      	ldrh	r2, [r1, #12]
 8009152:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009156:	d026      	beq.n	80091a6 <__ssputs_r+0x6a>
 8009158:	6965      	ldr	r5, [r4, #20]
 800915a:	6909      	ldr	r1, [r1, #16]
 800915c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009160:	eba3 0901 	sub.w	r9, r3, r1
 8009164:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009168:	1c7b      	adds	r3, r7, #1
 800916a:	444b      	add	r3, r9
 800916c:	106d      	asrs	r5, r5, #1
 800916e:	429d      	cmp	r5, r3
 8009170:	bf38      	it	cc
 8009172:	461d      	movcc	r5, r3
 8009174:	0553      	lsls	r3, r2, #21
 8009176:	d527      	bpl.n	80091c8 <__ssputs_r+0x8c>
 8009178:	4629      	mov	r1, r5
 800917a:	f7ff ff53 	bl	8009024 <_malloc_r>
 800917e:	4606      	mov	r6, r0
 8009180:	b360      	cbz	r0, 80091dc <__ssputs_r+0xa0>
 8009182:	6921      	ldr	r1, [r4, #16]
 8009184:	464a      	mov	r2, r9
 8009186:	f7ff fed2 	bl	8008f2e <memcpy>
 800918a:	89a3      	ldrh	r3, [r4, #12]
 800918c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009194:	81a3      	strh	r3, [r4, #12]
 8009196:	6126      	str	r6, [r4, #16]
 8009198:	6165      	str	r5, [r4, #20]
 800919a:	444e      	add	r6, r9
 800919c:	eba5 0509 	sub.w	r5, r5, r9
 80091a0:	6026      	str	r6, [r4, #0]
 80091a2:	60a5      	str	r5, [r4, #8]
 80091a4:	463e      	mov	r6, r7
 80091a6:	42be      	cmp	r6, r7
 80091a8:	d900      	bls.n	80091ac <__ssputs_r+0x70>
 80091aa:	463e      	mov	r6, r7
 80091ac:	6820      	ldr	r0, [r4, #0]
 80091ae:	4632      	mov	r2, r6
 80091b0:	4641      	mov	r1, r8
 80091b2:	f000 fcff 	bl	8009bb4 <memmove>
 80091b6:	68a3      	ldr	r3, [r4, #8]
 80091b8:	1b9b      	subs	r3, r3, r6
 80091ba:	60a3      	str	r3, [r4, #8]
 80091bc:	6823      	ldr	r3, [r4, #0]
 80091be:	4433      	add	r3, r6
 80091c0:	6023      	str	r3, [r4, #0]
 80091c2:	2000      	movs	r0, #0
 80091c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091c8:	462a      	mov	r2, r5
 80091ca:	f000 fd3f 	bl	8009c4c <_realloc_r>
 80091ce:	4606      	mov	r6, r0
 80091d0:	2800      	cmp	r0, #0
 80091d2:	d1e0      	bne.n	8009196 <__ssputs_r+0x5a>
 80091d4:	6921      	ldr	r1, [r4, #16]
 80091d6:	4650      	mov	r0, sl
 80091d8:	f7ff feb8 	bl	8008f4c <_free_r>
 80091dc:	230c      	movs	r3, #12
 80091de:	f8ca 3000 	str.w	r3, [sl]
 80091e2:	89a3      	ldrh	r3, [r4, #12]
 80091e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091e8:	81a3      	strh	r3, [r4, #12]
 80091ea:	f04f 30ff 	mov.w	r0, #4294967295
 80091ee:	e7e9      	b.n	80091c4 <__ssputs_r+0x88>

080091f0 <_svfiprintf_r>:
 80091f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f4:	4698      	mov	r8, r3
 80091f6:	898b      	ldrh	r3, [r1, #12]
 80091f8:	061b      	lsls	r3, r3, #24
 80091fa:	b09d      	sub	sp, #116	; 0x74
 80091fc:	4607      	mov	r7, r0
 80091fe:	460d      	mov	r5, r1
 8009200:	4614      	mov	r4, r2
 8009202:	d50e      	bpl.n	8009222 <_svfiprintf_r+0x32>
 8009204:	690b      	ldr	r3, [r1, #16]
 8009206:	b963      	cbnz	r3, 8009222 <_svfiprintf_r+0x32>
 8009208:	2140      	movs	r1, #64	; 0x40
 800920a:	f7ff ff0b 	bl	8009024 <_malloc_r>
 800920e:	6028      	str	r0, [r5, #0]
 8009210:	6128      	str	r0, [r5, #16]
 8009212:	b920      	cbnz	r0, 800921e <_svfiprintf_r+0x2e>
 8009214:	230c      	movs	r3, #12
 8009216:	603b      	str	r3, [r7, #0]
 8009218:	f04f 30ff 	mov.w	r0, #4294967295
 800921c:	e0d0      	b.n	80093c0 <_svfiprintf_r+0x1d0>
 800921e:	2340      	movs	r3, #64	; 0x40
 8009220:	616b      	str	r3, [r5, #20]
 8009222:	2300      	movs	r3, #0
 8009224:	9309      	str	r3, [sp, #36]	; 0x24
 8009226:	2320      	movs	r3, #32
 8009228:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800922c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009230:	2330      	movs	r3, #48	; 0x30
 8009232:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80093d8 <_svfiprintf_r+0x1e8>
 8009236:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800923a:	f04f 0901 	mov.w	r9, #1
 800923e:	4623      	mov	r3, r4
 8009240:	469a      	mov	sl, r3
 8009242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009246:	b10a      	cbz	r2, 800924c <_svfiprintf_r+0x5c>
 8009248:	2a25      	cmp	r2, #37	; 0x25
 800924a:	d1f9      	bne.n	8009240 <_svfiprintf_r+0x50>
 800924c:	ebba 0b04 	subs.w	fp, sl, r4
 8009250:	d00b      	beq.n	800926a <_svfiprintf_r+0x7a>
 8009252:	465b      	mov	r3, fp
 8009254:	4622      	mov	r2, r4
 8009256:	4629      	mov	r1, r5
 8009258:	4638      	mov	r0, r7
 800925a:	f7ff ff6f 	bl	800913c <__ssputs_r>
 800925e:	3001      	adds	r0, #1
 8009260:	f000 80a9 	beq.w	80093b6 <_svfiprintf_r+0x1c6>
 8009264:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009266:	445a      	add	r2, fp
 8009268:	9209      	str	r2, [sp, #36]	; 0x24
 800926a:	f89a 3000 	ldrb.w	r3, [sl]
 800926e:	2b00      	cmp	r3, #0
 8009270:	f000 80a1 	beq.w	80093b6 <_svfiprintf_r+0x1c6>
 8009274:	2300      	movs	r3, #0
 8009276:	f04f 32ff 	mov.w	r2, #4294967295
 800927a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800927e:	f10a 0a01 	add.w	sl, sl, #1
 8009282:	9304      	str	r3, [sp, #16]
 8009284:	9307      	str	r3, [sp, #28]
 8009286:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800928a:	931a      	str	r3, [sp, #104]	; 0x68
 800928c:	4654      	mov	r4, sl
 800928e:	2205      	movs	r2, #5
 8009290:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009294:	4850      	ldr	r0, [pc, #320]	; (80093d8 <_svfiprintf_r+0x1e8>)
 8009296:	f7f6 ffa3 	bl	80001e0 <memchr>
 800929a:	9a04      	ldr	r2, [sp, #16]
 800929c:	b9d8      	cbnz	r0, 80092d6 <_svfiprintf_r+0xe6>
 800929e:	06d0      	lsls	r0, r2, #27
 80092a0:	bf44      	itt	mi
 80092a2:	2320      	movmi	r3, #32
 80092a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092a8:	0711      	lsls	r1, r2, #28
 80092aa:	bf44      	itt	mi
 80092ac:	232b      	movmi	r3, #43	; 0x2b
 80092ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092b2:	f89a 3000 	ldrb.w	r3, [sl]
 80092b6:	2b2a      	cmp	r3, #42	; 0x2a
 80092b8:	d015      	beq.n	80092e6 <_svfiprintf_r+0xf6>
 80092ba:	9a07      	ldr	r2, [sp, #28]
 80092bc:	4654      	mov	r4, sl
 80092be:	2000      	movs	r0, #0
 80092c0:	f04f 0c0a 	mov.w	ip, #10
 80092c4:	4621      	mov	r1, r4
 80092c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092ca:	3b30      	subs	r3, #48	; 0x30
 80092cc:	2b09      	cmp	r3, #9
 80092ce:	d94d      	bls.n	800936c <_svfiprintf_r+0x17c>
 80092d0:	b1b0      	cbz	r0, 8009300 <_svfiprintf_r+0x110>
 80092d2:	9207      	str	r2, [sp, #28]
 80092d4:	e014      	b.n	8009300 <_svfiprintf_r+0x110>
 80092d6:	eba0 0308 	sub.w	r3, r0, r8
 80092da:	fa09 f303 	lsl.w	r3, r9, r3
 80092de:	4313      	orrs	r3, r2
 80092e0:	9304      	str	r3, [sp, #16]
 80092e2:	46a2      	mov	sl, r4
 80092e4:	e7d2      	b.n	800928c <_svfiprintf_r+0x9c>
 80092e6:	9b03      	ldr	r3, [sp, #12]
 80092e8:	1d19      	adds	r1, r3, #4
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	9103      	str	r1, [sp, #12]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	bfbb      	ittet	lt
 80092f2:	425b      	neglt	r3, r3
 80092f4:	f042 0202 	orrlt.w	r2, r2, #2
 80092f8:	9307      	strge	r3, [sp, #28]
 80092fa:	9307      	strlt	r3, [sp, #28]
 80092fc:	bfb8      	it	lt
 80092fe:	9204      	strlt	r2, [sp, #16]
 8009300:	7823      	ldrb	r3, [r4, #0]
 8009302:	2b2e      	cmp	r3, #46	; 0x2e
 8009304:	d10c      	bne.n	8009320 <_svfiprintf_r+0x130>
 8009306:	7863      	ldrb	r3, [r4, #1]
 8009308:	2b2a      	cmp	r3, #42	; 0x2a
 800930a:	d134      	bne.n	8009376 <_svfiprintf_r+0x186>
 800930c:	9b03      	ldr	r3, [sp, #12]
 800930e:	1d1a      	adds	r2, r3, #4
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	9203      	str	r2, [sp, #12]
 8009314:	2b00      	cmp	r3, #0
 8009316:	bfb8      	it	lt
 8009318:	f04f 33ff 	movlt.w	r3, #4294967295
 800931c:	3402      	adds	r4, #2
 800931e:	9305      	str	r3, [sp, #20]
 8009320:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80093e8 <_svfiprintf_r+0x1f8>
 8009324:	7821      	ldrb	r1, [r4, #0]
 8009326:	2203      	movs	r2, #3
 8009328:	4650      	mov	r0, sl
 800932a:	f7f6 ff59 	bl	80001e0 <memchr>
 800932e:	b138      	cbz	r0, 8009340 <_svfiprintf_r+0x150>
 8009330:	9b04      	ldr	r3, [sp, #16]
 8009332:	eba0 000a 	sub.w	r0, r0, sl
 8009336:	2240      	movs	r2, #64	; 0x40
 8009338:	4082      	lsls	r2, r0
 800933a:	4313      	orrs	r3, r2
 800933c:	3401      	adds	r4, #1
 800933e:	9304      	str	r3, [sp, #16]
 8009340:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009344:	4825      	ldr	r0, [pc, #148]	; (80093dc <_svfiprintf_r+0x1ec>)
 8009346:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800934a:	2206      	movs	r2, #6
 800934c:	f7f6 ff48 	bl	80001e0 <memchr>
 8009350:	2800      	cmp	r0, #0
 8009352:	d038      	beq.n	80093c6 <_svfiprintf_r+0x1d6>
 8009354:	4b22      	ldr	r3, [pc, #136]	; (80093e0 <_svfiprintf_r+0x1f0>)
 8009356:	bb1b      	cbnz	r3, 80093a0 <_svfiprintf_r+0x1b0>
 8009358:	9b03      	ldr	r3, [sp, #12]
 800935a:	3307      	adds	r3, #7
 800935c:	f023 0307 	bic.w	r3, r3, #7
 8009360:	3308      	adds	r3, #8
 8009362:	9303      	str	r3, [sp, #12]
 8009364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009366:	4433      	add	r3, r6
 8009368:	9309      	str	r3, [sp, #36]	; 0x24
 800936a:	e768      	b.n	800923e <_svfiprintf_r+0x4e>
 800936c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009370:	460c      	mov	r4, r1
 8009372:	2001      	movs	r0, #1
 8009374:	e7a6      	b.n	80092c4 <_svfiprintf_r+0xd4>
 8009376:	2300      	movs	r3, #0
 8009378:	3401      	adds	r4, #1
 800937a:	9305      	str	r3, [sp, #20]
 800937c:	4619      	mov	r1, r3
 800937e:	f04f 0c0a 	mov.w	ip, #10
 8009382:	4620      	mov	r0, r4
 8009384:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009388:	3a30      	subs	r2, #48	; 0x30
 800938a:	2a09      	cmp	r2, #9
 800938c:	d903      	bls.n	8009396 <_svfiprintf_r+0x1a6>
 800938e:	2b00      	cmp	r3, #0
 8009390:	d0c6      	beq.n	8009320 <_svfiprintf_r+0x130>
 8009392:	9105      	str	r1, [sp, #20]
 8009394:	e7c4      	b.n	8009320 <_svfiprintf_r+0x130>
 8009396:	fb0c 2101 	mla	r1, ip, r1, r2
 800939a:	4604      	mov	r4, r0
 800939c:	2301      	movs	r3, #1
 800939e:	e7f0      	b.n	8009382 <_svfiprintf_r+0x192>
 80093a0:	ab03      	add	r3, sp, #12
 80093a2:	9300      	str	r3, [sp, #0]
 80093a4:	462a      	mov	r2, r5
 80093a6:	4b0f      	ldr	r3, [pc, #60]	; (80093e4 <_svfiprintf_r+0x1f4>)
 80093a8:	a904      	add	r1, sp, #16
 80093aa:	4638      	mov	r0, r7
 80093ac:	f3af 8000 	nop.w
 80093b0:	1c42      	adds	r2, r0, #1
 80093b2:	4606      	mov	r6, r0
 80093b4:	d1d6      	bne.n	8009364 <_svfiprintf_r+0x174>
 80093b6:	89ab      	ldrh	r3, [r5, #12]
 80093b8:	065b      	lsls	r3, r3, #25
 80093ba:	f53f af2d 	bmi.w	8009218 <_svfiprintf_r+0x28>
 80093be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093c0:	b01d      	add	sp, #116	; 0x74
 80093c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093c6:	ab03      	add	r3, sp, #12
 80093c8:	9300      	str	r3, [sp, #0]
 80093ca:	462a      	mov	r2, r5
 80093cc:	4b05      	ldr	r3, [pc, #20]	; (80093e4 <_svfiprintf_r+0x1f4>)
 80093ce:	a904      	add	r1, sp, #16
 80093d0:	4638      	mov	r0, r7
 80093d2:	f000 f9bd 	bl	8009750 <_printf_i>
 80093d6:	e7eb      	b.n	80093b0 <_svfiprintf_r+0x1c0>
 80093d8:	08009e3c 	.word	0x08009e3c
 80093dc:	08009e46 	.word	0x08009e46
 80093e0:	00000000 	.word	0x00000000
 80093e4:	0800913d 	.word	0x0800913d
 80093e8:	08009e42 	.word	0x08009e42

080093ec <__sfputc_r>:
 80093ec:	6893      	ldr	r3, [r2, #8]
 80093ee:	3b01      	subs	r3, #1
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	b410      	push	{r4}
 80093f4:	6093      	str	r3, [r2, #8]
 80093f6:	da08      	bge.n	800940a <__sfputc_r+0x1e>
 80093f8:	6994      	ldr	r4, [r2, #24]
 80093fa:	42a3      	cmp	r3, r4
 80093fc:	db01      	blt.n	8009402 <__sfputc_r+0x16>
 80093fe:	290a      	cmp	r1, #10
 8009400:	d103      	bne.n	800940a <__sfputc_r+0x1e>
 8009402:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009406:	f7ff bc2c 	b.w	8008c62 <__swbuf_r>
 800940a:	6813      	ldr	r3, [r2, #0]
 800940c:	1c58      	adds	r0, r3, #1
 800940e:	6010      	str	r0, [r2, #0]
 8009410:	7019      	strb	r1, [r3, #0]
 8009412:	4608      	mov	r0, r1
 8009414:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009418:	4770      	bx	lr

0800941a <__sfputs_r>:
 800941a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800941c:	4606      	mov	r6, r0
 800941e:	460f      	mov	r7, r1
 8009420:	4614      	mov	r4, r2
 8009422:	18d5      	adds	r5, r2, r3
 8009424:	42ac      	cmp	r4, r5
 8009426:	d101      	bne.n	800942c <__sfputs_r+0x12>
 8009428:	2000      	movs	r0, #0
 800942a:	e007      	b.n	800943c <__sfputs_r+0x22>
 800942c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009430:	463a      	mov	r2, r7
 8009432:	4630      	mov	r0, r6
 8009434:	f7ff ffda 	bl	80093ec <__sfputc_r>
 8009438:	1c43      	adds	r3, r0, #1
 800943a:	d1f3      	bne.n	8009424 <__sfputs_r+0xa>
 800943c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009440 <_vfiprintf_r>:
 8009440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009444:	460d      	mov	r5, r1
 8009446:	b09d      	sub	sp, #116	; 0x74
 8009448:	4614      	mov	r4, r2
 800944a:	4698      	mov	r8, r3
 800944c:	4606      	mov	r6, r0
 800944e:	b118      	cbz	r0, 8009458 <_vfiprintf_r+0x18>
 8009450:	6a03      	ldr	r3, [r0, #32]
 8009452:	b90b      	cbnz	r3, 8009458 <_vfiprintf_r+0x18>
 8009454:	f7ff fafe 	bl	8008a54 <__sinit>
 8009458:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800945a:	07d9      	lsls	r1, r3, #31
 800945c:	d405      	bmi.n	800946a <_vfiprintf_r+0x2a>
 800945e:	89ab      	ldrh	r3, [r5, #12]
 8009460:	059a      	lsls	r2, r3, #22
 8009462:	d402      	bmi.n	800946a <_vfiprintf_r+0x2a>
 8009464:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009466:	f7ff fd60 	bl	8008f2a <__retarget_lock_acquire_recursive>
 800946a:	89ab      	ldrh	r3, [r5, #12]
 800946c:	071b      	lsls	r3, r3, #28
 800946e:	d501      	bpl.n	8009474 <_vfiprintf_r+0x34>
 8009470:	692b      	ldr	r3, [r5, #16]
 8009472:	b99b      	cbnz	r3, 800949c <_vfiprintf_r+0x5c>
 8009474:	4629      	mov	r1, r5
 8009476:	4630      	mov	r0, r6
 8009478:	f7ff fc30 	bl	8008cdc <__swsetup_r>
 800947c:	b170      	cbz	r0, 800949c <_vfiprintf_r+0x5c>
 800947e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009480:	07dc      	lsls	r4, r3, #31
 8009482:	d504      	bpl.n	800948e <_vfiprintf_r+0x4e>
 8009484:	f04f 30ff 	mov.w	r0, #4294967295
 8009488:	b01d      	add	sp, #116	; 0x74
 800948a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800948e:	89ab      	ldrh	r3, [r5, #12]
 8009490:	0598      	lsls	r0, r3, #22
 8009492:	d4f7      	bmi.n	8009484 <_vfiprintf_r+0x44>
 8009494:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009496:	f7ff fd49 	bl	8008f2c <__retarget_lock_release_recursive>
 800949a:	e7f3      	b.n	8009484 <_vfiprintf_r+0x44>
 800949c:	2300      	movs	r3, #0
 800949e:	9309      	str	r3, [sp, #36]	; 0x24
 80094a0:	2320      	movs	r3, #32
 80094a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80094aa:	2330      	movs	r3, #48	; 0x30
 80094ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009660 <_vfiprintf_r+0x220>
 80094b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094b4:	f04f 0901 	mov.w	r9, #1
 80094b8:	4623      	mov	r3, r4
 80094ba:	469a      	mov	sl, r3
 80094bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094c0:	b10a      	cbz	r2, 80094c6 <_vfiprintf_r+0x86>
 80094c2:	2a25      	cmp	r2, #37	; 0x25
 80094c4:	d1f9      	bne.n	80094ba <_vfiprintf_r+0x7a>
 80094c6:	ebba 0b04 	subs.w	fp, sl, r4
 80094ca:	d00b      	beq.n	80094e4 <_vfiprintf_r+0xa4>
 80094cc:	465b      	mov	r3, fp
 80094ce:	4622      	mov	r2, r4
 80094d0:	4629      	mov	r1, r5
 80094d2:	4630      	mov	r0, r6
 80094d4:	f7ff ffa1 	bl	800941a <__sfputs_r>
 80094d8:	3001      	adds	r0, #1
 80094da:	f000 80a9 	beq.w	8009630 <_vfiprintf_r+0x1f0>
 80094de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094e0:	445a      	add	r2, fp
 80094e2:	9209      	str	r2, [sp, #36]	; 0x24
 80094e4:	f89a 3000 	ldrb.w	r3, [sl]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	f000 80a1 	beq.w	8009630 <_vfiprintf_r+0x1f0>
 80094ee:	2300      	movs	r3, #0
 80094f0:	f04f 32ff 	mov.w	r2, #4294967295
 80094f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094f8:	f10a 0a01 	add.w	sl, sl, #1
 80094fc:	9304      	str	r3, [sp, #16]
 80094fe:	9307      	str	r3, [sp, #28]
 8009500:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009504:	931a      	str	r3, [sp, #104]	; 0x68
 8009506:	4654      	mov	r4, sl
 8009508:	2205      	movs	r2, #5
 800950a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800950e:	4854      	ldr	r0, [pc, #336]	; (8009660 <_vfiprintf_r+0x220>)
 8009510:	f7f6 fe66 	bl	80001e0 <memchr>
 8009514:	9a04      	ldr	r2, [sp, #16]
 8009516:	b9d8      	cbnz	r0, 8009550 <_vfiprintf_r+0x110>
 8009518:	06d1      	lsls	r1, r2, #27
 800951a:	bf44      	itt	mi
 800951c:	2320      	movmi	r3, #32
 800951e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009522:	0713      	lsls	r3, r2, #28
 8009524:	bf44      	itt	mi
 8009526:	232b      	movmi	r3, #43	; 0x2b
 8009528:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800952c:	f89a 3000 	ldrb.w	r3, [sl]
 8009530:	2b2a      	cmp	r3, #42	; 0x2a
 8009532:	d015      	beq.n	8009560 <_vfiprintf_r+0x120>
 8009534:	9a07      	ldr	r2, [sp, #28]
 8009536:	4654      	mov	r4, sl
 8009538:	2000      	movs	r0, #0
 800953a:	f04f 0c0a 	mov.w	ip, #10
 800953e:	4621      	mov	r1, r4
 8009540:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009544:	3b30      	subs	r3, #48	; 0x30
 8009546:	2b09      	cmp	r3, #9
 8009548:	d94d      	bls.n	80095e6 <_vfiprintf_r+0x1a6>
 800954a:	b1b0      	cbz	r0, 800957a <_vfiprintf_r+0x13a>
 800954c:	9207      	str	r2, [sp, #28]
 800954e:	e014      	b.n	800957a <_vfiprintf_r+0x13a>
 8009550:	eba0 0308 	sub.w	r3, r0, r8
 8009554:	fa09 f303 	lsl.w	r3, r9, r3
 8009558:	4313      	orrs	r3, r2
 800955a:	9304      	str	r3, [sp, #16]
 800955c:	46a2      	mov	sl, r4
 800955e:	e7d2      	b.n	8009506 <_vfiprintf_r+0xc6>
 8009560:	9b03      	ldr	r3, [sp, #12]
 8009562:	1d19      	adds	r1, r3, #4
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	9103      	str	r1, [sp, #12]
 8009568:	2b00      	cmp	r3, #0
 800956a:	bfbb      	ittet	lt
 800956c:	425b      	neglt	r3, r3
 800956e:	f042 0202 	orrlt.w	r2, r2, #2
 8009572:	9307      	strge	r3, [sp, #28]
 8009574:	9307      	strlt	r3, [sp, #28]
 8009576:	bfb8      	it	lt
 8009578:	9204      	strlt	r2, [sp, #16]
 800957a:	7823      	ldrb	r3, [r4, #0]
 800957c:	2b2e      	cmp	r3, #46	; 0x2e
 800957e:	d10c      	bne.n	800959a <_vfiprintf_r+0x15a>
 8009580:	7863      	ldrb	r3, [r4, #1]
 8009582:	2b2a      	cmp	r3, #42	; 0x2a
 8009584:	d134      	bne.n	80095f0 <_vfiprintf_r+0x1b0>
 8009586:	9b03      	ldr	r3, [sp, #12]
 8009588:	1d1a      	adds	r2, r3, #4
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	9203      	str	r2, [sp, #12]
 800958e:	2b00      	cmp	r3, #0
 8009590:	bfb8      	it	lt
 8009592:	f04f 33ff 	movlt.w	r3, #4294967295
 8009596:	3402      	adds	r4, #2
 8009598:	9305      	str	r3, [sp, #20]
 800959a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009670 <_vfiprintf_r+0x230>
 800959e:	7821      	ldrb	r1, [r4, #0]
 80095a0:	2203      	movs	r2, #3
 80095a2:	4650      	mov	r0, sl
 80095a4:	f7f6 fe1c 	bl	80001e0 <memchr>
 80095a8:	b138      	cbz	r0, 80095ba <_vfiprintf_r+0x17a>
 80095aa:	9b04      	ldr	r3, [sp, #16]
 80095ac:	eba0 000a 	sub.w	r0, r0, sl
 80095b0:	2240      	movs	r2, #64	; 0x40
 80095b2:	4082      	lsls	r2, r0
 80095b4:	4313      	orrs	r3, r2
 80095b6:	3401      	adds	r4, #1
 80095b8:	9304      	str	r3, [sp, #16]
 80095ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095be:	4829      	ldr	r0, [pc, #164]	; (8009664 <_vfiprintf_r+0x224>)
 80095c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095c4:	2206      	movs	r2, #6
 80095c6:	f7f6 fe0b 	bl	80001e0 <memchr>
 80095ca:	2800      	cmp	r0, #0
 80095cc:	d03f      	beq.n	800964e <_vfiprintf_r+0x20e>
 80095ce:	4b26      	ldr	r3, [pc, #152]	; (8009668 <_vfiprintf_r+0x228>)
 80095d0:	bb1b      	cbnz	r3, 800961a <_vfiprintf_r+0x1da>
 80095d2:	9b03      	ldr	r3, [sp, #12]
 80095d4:	3307      	adds	r3, #7
 80095d6:	f023 0307 	bic.w	r3, r3, #7
 80095da:	3308      	adds	r3, #8
 80095dc:	9303      	str	r3, [sp, #12]
 80095de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095e0:	443b      	add	r3, r7
 80095e2:	9309      	str	r3, [sp, #36]	; 0x24
 80095e4:	e768      	b.n	80094b8 <_vfiprintf_r+0x78>
 80095e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80095ea:	460c      	mov	r4, r1
 80095ec:	2001      	movs	r0, #1
 80095ee:	e7a6      	b.n	800953e <_vfiprintf_r+0xfe>
 80095f0:	2300      	movs	r3, #0
 80095f2:	3401      	adds	r4, #1
 80095f4:	9305      	str	r3, [sp, #20]
 80095f6:	4619      	mov	r1, r3
 80095f8:	f04f 0c0a 	mov.w	ip, #10
 80095fc:	4620      	mov	r0, r4
 80095fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009602:	3a30      	subs	r2, #48	; 0x30
 8009604:	2a09      	cmp	r2, #9
 8009606:	d903      	bls.n	8009610 <_vfiprintf_r+0x1d0>
 8009608:	2b00      	cmp	r3, #0
 800960a:	d0c6      	beq.n	800959a <_vfiprintf_r+0x15a>
 800960c:	9105      	str	r1, [sp, #20]
 800960e:	e7c4      	b.n	800959a <_vfiprintf_r+0x15a>
 8009610:	fb0c 2101 	mla	r1, ip, r1, r2
 8009614:	4604      	mov	r4, r0
 8009616:	2301      	movs	r3, #1
 8009618:	e7f0      	b.n	80095fc <_vfiprintf_r+0x1bc>
 800961a:	ab03      	add	r3, sp, #12
 800961c:	9300      	str	r3, [sp, #0]
 800961e:	462a      	mov	r2, r5
 8009620:	4b12      	ldr	r3, [pc, #72]	; (800966c <_vfiprintf_r+0x22c>)
 8009622:	a904      	add	r1, sp, #16
 8009624:	4630      	mov	r0, r6
 8009626:	f3af 8000 	nop.w
 800962a:	4607      	mov	r7, r0
 800962c:	1c78      	adds	r0, r7, #1
 800962e:	d1d6      	bne.n	80095de <_vfiprintf_r+0x19e>
 8009630:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009632:	07d9      	lsls	r1, r3, #31
 8009634:	d405      	bmi.n	8009642 <_vfiprintf_r+0x202>
 8009636:	89ab      	ldrh	r3, [r5, #12]
 8009638:	059a      	lsls	r2, r3, #22
 800963a:	d402      	bmi.n	8009642 <_vfiprintf_r+0x202>
 800963c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800963e:	f7ff fc75 	bl	8008f2c <__retarget_lock_release_recursive>
 8009642:	89ab      	ldrh	r3, [r5, #12]
 8009644:	065b      	lsls	r3, r3, #25
 8009646:	f53f af1d 	bmi.w	8009484 <_vfiprintf_r+0x44>
 800964a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800964c:	e71c      	b.n	8009488 <_vfiprintf_r+0x48>
 800964e:	ab03      	add	r3, sp, #12
 8009650:	9300      	str	r3, [sp, #0]
 8009652:	462a      	mov	r2, r5
 8009654:	4b05      	ldr	r3, [pc, #20]	; (800966c <_vfiprintf_r+0x22c>)
 8009656:	a904      	add	r1, sp, #16
 8009658:	4630      	mov	r0, r6
 800965a:	f000 f879 	bl	8009750 <_printf_i>
 800965e:	e7e4      	b.n	800962a <_vfiprintf_r+0x1ea>
 8009660:	08009e3c 	.word	0x08009e3c
 8009664:	08009e46 	.word	0x08009e46
 8009668:	00000000 	.word	0x00000000
 800966c:	0800941b 	.word	0x0800941b
 8009670:	08009e42 	.word	0x08009e42

08009674 <_printf_common>:
 8009674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009678:	4616      	mov	r6, r2
 800967a:	4699      	mov	r9, r3
 800967c:	688a      	ldr	r2, [r1, #8]
 800967e:	690b      	ldr	r3, [r1, #16]
 8009680:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009684:	4293      	cmp	r3, r2
 8009686:	bfb8      	it	lt
 8009688:	4613      	movlt	r3, r2
 800968a:	6033      	str	r3, [r6, #0]
 800968c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009690:	4607      	mov	r7, r0
 8009692:	460c      	mov	r4, r1
 8009694:	b10a      	cbz	r2, 800969a <_printf_common+0x26>
 8009696:	3301      	adds	r3, #1
 8009698:	6033      	str	r3, [r6, #0]
 800969a:	6823      	ldr	r3, [r4, #0]
 800969c:	0699      	lsls	r1, r3, #26
 800969e:	bf42      	ittt	mi
 80096a0:	6833      	ldrmi	r3, [r6, #0]
 80096a2:	3302      	addmi	r3, #2
 80096a4:	6033      	strmi	r3, [r6, #0]
 80096a6:	6825      	ldr	r5, [r4, #0]
 80096a8:	f015 0506 	ands.w	r5, r5, #6
 80096ac:	d106      	bne.n	80096bc <_printf_common+0x48>
 80096ae:	f104 0a19 	add.w	sl, r4, #25
 80096b2:	68e3      	ldr	r3, [r4, #12]
 80096b4:	6832      	ldr	r2, [r6, #0]
 80096b6:	1a9b      	subs	r3, r3, r2
 80096b8:	42ab      	cmp	r3, r5
 80096ba:	dc26      	bgt.n	800970a <_printf_common+0x96>
 80096bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80096c0:	1e13      	subs	r3, r2, #0
 80096c2:	6822      	ldr	r2, [r4, #0]
 80096c4:	bf18      	it	ne
 80096c6:	2301      	movne	r3, #1
 80096c8:	0692      	lsls	r2, r2, #26
 80096ca:	d42b      	bmi.n	8009724 <_printf_common+0xb0>
 80096cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096d0:	4649      	mov	r1, r9
 80096d2:	4638      	mov	r0, r7
 80096d4:	47c0      	blx	r8
 80096d6:	3001      	adds	r0, #1
 80096d8:	d01e      	beq.n	8009718 <_printf_common+0xa4>
 80096da:	6823      	ldr	r3, [r4, #0]
 80096dc:	6922      	ldr	r2, [r4, #16]
 80096de:	f003 0306 	and.w	r3, r3, #6
 80096e2:	2b04      	cmp	r3, #4
 80096e4:	bf02      	ittt	eq
 80096e6:	68e5      	ldreq	r5, [r4, #12]
 80096e8:	6833      	ldreq	r3, [r6, #0]
 80096ea:	1aed      	subeq	r5, r5, r3
 80096ec:	68a3      	ldr	r3, [r4, #8]
 80096ee:	bf0c      	ite	eq
 80096f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096f4:	2500      	movne	r5, #0
 80096f6:	4293      	cmp	r3, r2
 80096f8:	bfc4      	itt	gt
 80096fa:	1a9b      	subgt	r3, r3, r2
 80096fc:	18ed      	addgt	r5, r5, r3
 80096fe:	2600      	movs	r6, #0
 8009700:	341a      	adds	r4, #26
 8009702:	42b5      	cmp	r5, r6
 8009704:	d11a      	bne.n	800973c <_printf_common+0xc8>
 8009706:	2000      	movs	r0, #0
 8009708:	e008      	b.n	800971c <_printf_common+0xa8>
 800970a:	2301      	movs	r3, #1
 800970c:	4652      	mov	r2, sl
 800970e:	4649      	mov	r1, r9
 8009710:	4638      	mov	r0, r7
 8009712:	47c0      	blx	r8
 8009714:	3001      	adds	r0, #1
 8009716:	d103      	bne.n	8009720 <_printf_common+0xac>
 8009718:	f04f 30ff 	mov.w	r0, #4294967295
 800971c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009720:	3501      	adds	r5, #1
 8009722:	e7c6      	b.n	80096b2 <_printf_common+0x3e>
 8009724:	18e1      	adds	r1, r4, r3
 8009726:	1c5a      	adds	r2, r3, #1
 8009728:	2030      	movs	r0, #48	; 0x30
 800972a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800972e:	4422      	add	r2, r4
 8009730:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009734:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009738:	3302      	adds	r3, #2
 800973a:	e7c7      	b.n	80096cc <_printf_common+0x58>
 800973c:	2301      	movs	r3, #1
 800973e:	4622      	mov	r2, r4
 8009740:	4649      	mov	r1, r9
 8009742:	4638      	mov	r0, r7
 8009744:	47c0      	blx	r8
 8009746:	3001      	adds	r0, #1
 8009748:	d0e6      	beq.n	8009718 <_printf_common+0xa4>
 800974a:	3601      	adds	r6, #1
 800974c:	e7d9      	b.n	8009702 <_printf_common+0x8e>
	...

08009750 <_printf_i>:
 8009750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009754:	7e0f      	ldrb	r7, [r1, #24]
 8009756:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009758:	2f78      	cmp	r7, #120	; 0x78
 800975a:	4691      	mov	r9, r2
 800975c:	4680      	mov	r8, r0
 800975e:	460c      	mov	r4, r1
 8009760:	469a      	mov	sl, r3
 8009762:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009766:	d807      	bhi.n	8009778 <_printf_i+0x28>
 8009768:	2f62      	cmp	r7, #98	; 0x62
 800976a:	d80a      	bhi.n	8009782 <_printf_i+0x32>
 800976c:	2f00      	cmp	r7, #0
 800976e:	f000 80d4 	beq.w	800991a <_printf_i+0x1ca>
 8009772:	2f58      	cmp	r7, #88	; 0x58
 8009774:	f000 80c0 	beq.w	80098f8 <_printf_i+0x1a8>
 8009778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800977c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009780:	e03a      	b.n	80097f8 <_printf_i+0xa8>
 8009782:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009786:	2b15      	cmp	r3, #21
 8009788:	d8f6      	bhi.n	8009778 <_printf_i+0x28>
 800978a:	a101      	add	r1, pc, #4	; (adr r1, 8009790 <_printf_i+0x40>)
 800978c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009790:	080097e9 	.word	0x080097e9
 8009794:	080097fd 	.word	0x080097fd
 8009798:	08009779 	.word	0x08009779
 800979c:	08009779 	.word	0x08009779
 80097a0:	08009779 	.word	0x08009779
 80097a4:	08009779 	.word	0x08009779
 80097a8:	080097fd 	.word	0x080097fd
 80097ac:	08009779 	.word	0x08009779
 80097b0:	08009779 	.word	0x08009779
 80097b4:	08009779 	.word	0x08009779
 80097b8:	08009779 	.word	0x08009779
 80097bc:	08009901 	.word	0x08009901
 80097c0:	08009829 	.word	0x08009829
 80097c4:	080098bb 	.word	0x080098bb
 80097c8:	08009779 	.word	0x08009779
 80097cc:	08009779 	.word	0x08009779
 80097d0:	08009923 	.word	0x08009923
 80097d4:	08009779 	.word	0x08009779
 80097d8:	08009829 	.word	0x08009829
 80097dc:	08009779 	.word	0x08009779
 80097e0:	08009779 	.word	0x08009779
 80097e4:	080098c3 	.word	0x080098c3
 80097e8:	682b      	ldr	r3, [r5, #0]
 80097ea:	1d1a      	adds	r2, r3, #4
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	602a      	str	r2, [r5, #0]
 80097f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80097f8:	2301      	movs	r3, #1
 80097fa:	e09f      	b.n	800993c <_printf_i+0x1ec>
 80097fc:	6820      	ldr	r0, [r4, #0]
 80097fe:	682b      	ldr	r3, [r5, #0]
 8009800:	0607      	lsls	r7, r0, #24
 8009802:	f103 0104 	add.w	r1, r3, #4
 8009806:	6029      	str	r1, [r5, #0]
 8009808:	d501      	bpl.n	800980e <_printf_i+0xbe>
 800980a:	681e      	ldr	r6, [r3, #0]
 800980c:	e003      	b.n	8009816 <_printf_i+0xc6>
 800980e:	0646      	lsls	r6, r0, #25
 8009810:	d5fb      	bpl.n	800980a <_printf_i+0xba>
 8009812:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009816:	2e00      	cmp	r6, #0
 8009818:	da03      	bge.n	8009822 <_printf_i+0xd2>
 800981a:	232d      	movs	r3, #45	; 0x2d
 800981c:	4276      	negs	r6, r6
 800981e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009822:	485a      	ldr	r0, [pc, #360]	; (800998c <_printf_i+0x23c>)
 8009824:	230a      	movs	r3, #10
 8009826:	e012      	b.n	800984e <_printf_i+0xfe>
 8009828:	682b      	ldr	r3, [r5, #0]
 800982a:	6820      	ldr	r0, [r4, #0]
 800982c:	1d19      	adds	r1, r3, #4
 800982e:	6029      	str	r1, [r5, #0]
 8009830:	0605      	lsls	r5, r0, #24
 8009832:	d501      	bpl.n	8009838 <_printf_i+0xe8>
 8009834:	681e      	ldr	r6, [r3, #0]
 8009836:	e002      	b.n	800983e <_printf_i+0xee>
 8009838:	0641      	lsls	r1, r0, #25
 800983a:	d5fb      	bpl.n	8009834 <_printf_i+0xe4>
 800983c:	881e      	ldrh	r6, [r3, #0]
 800983e:	4853      	ldr	r0, [pc, #332]	; (800998c <_printf_i+0x23c>)
 8009840:	2f6f      	cmp	r7, #111	; 0x6f
 8009842:	bf0c      	ite	eq
 8009844:	2308      	moveq	r3, #8
 8009846:	230a      	movne	r3, #10
 8009848:	2100      	movs	r1, #0
 800984a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800984e:	6865      	ldr	r5, [r4, #4]
 8009850:	60a5      	str	r5, [r4, #8]
 8009852:	2d00      	cmp	r5, #0
 8009854:	bfa2      	ittt	ge
 8009856:	6821      	ldrge	r1, [r4, #0]
 8009858:	f021 0104 	bicge.w	r1, r1, #4
 800985c:	6021      	strge	r1, [r4, #0]
 800985e:	b90e      	cbnz	r6, 8009864 <_printf_i+0x114>
 8009860:	2d00      	cmp	r5, #0
 8009862:	d04b      	beq.n	80098fc <_printf_i+0x1ac>
 8009864:	4615      	mov	r5, r2
 8009866:	fbb6 f1f3 	udiv	r1, r6, r3
 800986a:	fb03 6711 	mls	r7, r3, r1, r6
 800986e:	5dc7      	ldrb	r7, [r0, r7]
 8009870:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009874:	4637      	mov	r7, r6
 8009876:	42bb      	cmp	r3, r7
 8009878:	460e      	mov	r6, r1
 800987a:	d9f4      	bls.n	8009866 <_printf_i+0x116>
 800987c:	2b08      	cmp	r3, #8
 800987e:	d10b      	bne.n	8009898 <_printf_i+0x148>
 8009880:	6823      	ldr	r3, [r4, #0]
 8009882:	07de      	lsls	r6, r3, #31
 8009884:	d508      	bpl.n	8009898 <_printf_i+0x148>
 8009886:	6923      	ldr	r3, [r4, #16]
 8009888:	6861      	ldr	r1, [r4, #4]
 800988a:	4299      	cmp	r1, r3
 800988c:	bfde      	ittt	le
 800988e:	2330      	movle	r3, #48	; 0x30
 8009890:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009894:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009898:	1b52      	subs	r2, r2, r5
 800989a:	6122      	str	r2, [r4, #16]
 800989c:	f8cd a000 	str.w	sl, [sp]
 80098a0:	464b      	mov	r3, r9
 80098a2:	aa03      	add	r2, sp, #12
 80098a4:	4621      	mov	r1, r4
 80098a6:	4640      	mov	r0, r8
 80098a8:	f7ff fee4 	bl	8009674 <_printf_common>
 80098ac:	3001      	adds	r0, #1
 80098ae:	d14a      	bne.n	8009946 <_printf_i+0x1f6>
 80098b0:	f04f 30ff 	mov.w	r0, #4294967295
 80098b4:	b004      	add	sp, #16
 80098b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098ba:	6823      	ldr	r3, [r4, #0]
 80098bc:	f043 0320 	orr.w	r3, r3, #32
 80098c0:	6023      	str	r3, [r4, #0]
 80098c2:	4833      	ldr	r0, [pc, #204]	; (8009990 <_printf_i+0x240>)
 80098c4:	2778      	movs	r7, #120	; 0x78
 80098c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80098ca:	6823      	ldr	r3, [r4, #0]
 80098cc:	6829      	ldr	r1, [r5, #0]
 80098ce:	061f      	lsls	r7, r3, #24
 80098d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80098d4:	d402      	bmi.n	80098dc <_printf_i+0x18c>
 80098d6:	065f      	lsls	r7, r3, #25
 80098d8:	bf48      	it	mi
 80098da:	b2b6      	uxthmi	r6, r6
 80098dc:	07df      	lsls	r7, r3, #31
 80098de:	bf48      	it	mi
 80098e0:	f043 0320 	orrmi.w	r3, r3, #32
 80098e4:	6029      	str	r1, [r5, #0]
 80098e6:	bf48      	it	mi
 80098e8:	6023      	strmi	r3, [r4, #0]
 80098ea:	b91e      	cbnz	r6, 80098f4 <_printf_i+0x1a4>
 80098ec:	6823      	ldr	r3, [r4, #0]
 80098ee:	f023 0320 	bic.w	r3, r3, #32
 80098f2:	6023      	str	r3, [r4, #0]
 80098f4:	2310      	movs	r3, #16
 80098f6:	e7a7      	b.n	8009848 <_printf_i+0xf8>
 80098f8:	4824      	ldr	r0, [pc, #144]	; (800998c <_printf_i+0x23c>)
 80098fa:	e7e4      	b.n	80098c6 <_printf_i+0x176>
 80098fc:	4615      	mov	r5, r2
 80098fe:	e7bd      	b.n	800987c <_printf_i+0x12c>
 8009900:	682b      	ldr	r3, [r5, #0]
 8009902:	6826      	ldr	r6, [r4, #0]
 8009904:	6961      	ldr	r1, [r4, #20]
 8009906:	1d18      	adds	r0, r3, #4
 8009908:	6028      	str	r0, [r5, #0]
 800990a:	0635      	lsls	r5, r6, #24
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	d501      	bpl.n	8009914 <_printf_i+0x1c4>
 8009910:	6019      	str	r1, [r3, #0]
 8009912:	e002      	b.n	800991a <_printf_i+0x1ca>
 8009914:	0670      	lsls	r0, r6, #25
 8009916:	d5fb      	bpl.n	8009910 <_printf_i+0x1c0>
 8009918:	8019      	strh	r1, [r3, #0]
 800991a:	2300      	movs	r3, #0
 800991c:	6123      	str	r3, [r4, #16]
 800991e:	4615      	mov	r5, r2
 8009920:	e7bc      	b.n	800989c <_printf_i+0x14c>
 8009922:	682b      	ldr	r3, [r5, #0]
 8009924:	1d1a      	adds	r2, r3, #4
 8009926:	602a      	str	r2, [r5, #0]
 8009928:	681d      	ldr	r5, [r3, #0]
 800992a:	6862      	ldr	r2, [r4, #4]
 800992c:	2100      	movs	r1, #0
 800992e:	4628      	mov	r0, r5
 8009930:	f7f6 fc56 	bl	80001e0 <memchr>
 8009934:	b108      	cbz	r0, 800993a <_printf_i+0x1ea>
 8009936:	1b40      	subs	r0, r0, r5
 8009938:	6060      	str	r0, [r4, #4]
 800993a:	6863      	ldr	r3, [r4, #4]
 800993c:	6123      	str	r3, [r4, #16]
 800993e:	2300      	movs	r3, #0
 8009940:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009944:	e7aa      	b.n	800989c <_printf_i+0x14c>
 8009946:	6923      	ldr	r3, [r4, #16]
 8009948:	462a      	mov	r2, r5
 800994a:	4649      	mov	r1, r9
 800994c:	4640      	mov	r0, r8
 800994e:	47d0      	blx	sl
 8009950:	3001      	adds	r0, #1
 8009952:	d0ad      	beq.n	80098b0 <_printf_i+0x160>
 8009954:	6823      	ldr	r3, [r4, #0]
 8009956:	079b      	lsls	r3, r3, #30
 8009958:	d413      	bmi.n	8009982 <_printf_i+0x232>
 800995a:	68e0      	ldr	r0, [r4, #12]
 800995c:	9b03      	ldr	r3, [sp, #12]
 800995e:	4298      	cmp	r0, r3
 8009960:	bfb8      	it	lt
 8009962:	4618      	movlt	r0, r3
 8009964:	e7a6      	b.n	80098b4 <_printf_i+0x164>
 8009966:	2301      	movs	r3, #1
 8009968:	4632      	mov	r2, r6
 800996a:	4649      	mov	r1, r9
 800996c:	4640      	mov	r0, r8
 800996e:	47d0      	blx	sl
 8009970:	3001      	adds	r0, #1
 8009972:	d09d      	beq.n	80098b0 <_printf_i+0x160>
 8009974:	3501      	adds	r5, #1
 8009976:	68e3      	ldr	r3, [r4, #12]
 8009978:	9903      	ldr	r1, [sp, #12]
 800997a:	1a5b      	subs	r3, r3, r1
 800997c:	42ab      	cmp	r3, r5
 800997e:	dcf2      	bgt.n	8009966 <_printf_i+0x216>
 8009980:	e7eb      	b.n	800995a <_printf_i+0x20a>
 8009982:	2500      	movs	r5, #0
 8009984:	f104 0619 	add.w	r6, r4, #25
 8009988:	e7f5      	b.n	8009976 <_printf_i+0x226>
 800998a:	bf00      	nop
 800998c:	08009e4d 	.word	0x08009e4d
 8009990:	08009e5e 	.word	0x08009e5e

08009994 <__sflush_r>:
 8009994:	898a      	ldrh	r2, [r1, #12]
 8009996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800999a:	4605      	mov	r5, r0
 800999c:	0710      	lsls	r0, r2, #28
 800999e:	460c      	mov	r4, r1
 80099a0:	d458      	bmi.n	8009a54 <__sflush_r+0xc0>
 80099a2:	684b      	ldr	r3, [r1, #4]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	dc05      	bgt.n	80099b4 <__sflush_r+0x20>
 80099a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	dc02      	bgt.n	80099b4 <__sflush_r+0x20>
 80099ae:	2000      	movs	r0, #0
 80099b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099b6:	2e00      	cmp	r6, #0
 80099b8:	d0f9      	beq.n	80099ae <__sflush_r+0x1a>
 80099ba:	2300      	movs	r3, #0
 80099bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80099c0:	682f      	ldr	r7, [r5, #0]
 80099c2:	6a21      	ldr	r1, [r4, #32]
 80099c4:	602b      	str	r3, [r5, #0]
 80099c6:	d032      	beq.n	8009a2e <__sflush_r+0x9a>
 80099c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80099ca:	89a3      	ldrh	r3, [r4, #12]
 80099cc:	075a      	lsls	r2, r3, #29
 80099ce:	d505      	bpl.n	80099dc <__sflush_r+0x48>
 80099d0:	6863      	ldr	r3, [r4, #4]
 80099d2:	1ac0      	subs	r0, r0, r3
 80099d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099d6:	b10b      	cbz	r3, 80099dc <__sflush_r+0x48>
 80099d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099da:	1ac0      	subs	r0, r0, r3
 80099dc:	2300      	movs	r3, #0
 80099de:	4602      	mov	r2, r0
 80099e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099e2:	6a21      	ldr	r1, [r4, #32]
 80099e4:	4628      	mov	r0, r5
 80099e6:	47b0      	blx	r6
 80099e8:	1c43      	adds	r3, r0, #1
 80099ea:	89a3      	ldrh	r3, [r4, #12]
 80099ec:	d106      	bne.n	80099fc <__sflush_r+0x68>
 80099ee:	6829      	ldr	r1, [r5, #0]
 80099f0:	291d      	cmp	r1, #29
 80099f2:	d82b      	bhi.n	8009a4c <__sflush_r+0xb8>
 80099f4:	4a29      	ldr	r2, [pc, #164]	; (8009a9c <__sflush_r+0x108>)
 80099f6:	410a      	asrs	r2, r1
 80099f8:	07d6      	lsls	r6, r2, #31
 80099fa:	d427      	bmi.n	8009a4c <__sflush_r+0xb8>
 80099fc:	2200      	movs	r2, #0
 80099fe:	6062      	str	r2, [r4, #4]
 8009a00:	04d9      	lsls	r1, r3, #19
 8009a02:	6922      	ldr	r2, [r4, #16]
 8009a04:	6022      	str	r2, [r4, #0]
 8009a06:	d504      	bpl.n	8009a12 <__sflush_r+0x7e>
 8009a08:	1c42      	adds	r2, r0, #1
 8009a0a:	d101      	bne.n	8009a10 <__sflush_r+0x7c>
 8009a0c:	682b      	ldr	r3, [r5, #0]
 8009a0e:	b903      	cbnz	r3, 8009a12 <__sflush_r+0x7e>
 8009a10:	6560      	str	r0, [r4, #84]	; 0x54
 8009a12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a14:	602f      	str	r7, [r5, #0]
 8009a16:	2900      	cmp	r1, #0
 8009a18:	d0c9      	beq.n	80099ae <__sflush_r+0x1a>
 8009a1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a1e:	4299      	cmp	r1, r3
 8009a20:	d002      	beq.n	8009a28 <__sflush_r+0x94>
 8009a22:	4628      	mov	r0, r5
 8009a24:	f7ff fa92 	bl	8008f4c <_free_r>
 8009a28:	2000      	movs	r0, #0
 8009a2a:	6360      	str	r0, [r4, #52]	; 0x34
 8009a2c:	e7c0      	b.n	80099b0 <__sflush_r+0x1c>
 8009a2e:	2301      	movs	r3, #1
 8009a30:	4628      	mov	r0, r5
 8009a32:	47b0      	blx	r6
 8009a34:	1c41      	adds	r1, r0, #1
 8009a36:	d1c8      	bne.n	80099ca <__sflush_r+0x36>
 8009a38:	682b      	ldr	r3, [r5, #0]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d0c5      	beq.n	80099ca <__sflush_r+0x36>
 8009a3e:	2b1d      	cmp	r3, #29
 8009a40:	d001      	beq.n	8009a46 <__sflush_r+0xb2>
 8009a42:	2b16      	cmp	r3, #22
 8009a44:	d101      	bne.n	8009a4a <__sflush_r+0xb6>
 8009a46:	602f      	str	r7, [r5, #0]
 8009a48:	e7b1      	b.n	80099ae <__sflush_r+0x1a>
 8009a4a:	89a3      	ldrh	r3, [r4, #12]
 8009a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a50:	81a3      	strh	r3, [r4, #12]
 8009a52:	e7ad      	b.n	80099b0 <__sflush_r+0x1c>
 8009a54:	690f      	ldr	r7, [r1, #16]
 8009a56:	2f00      	cmp	r7, #0
 8009a58:	d0a9      	beq.n	80099ae <__sflush_r+0x1a>
 8009a5a:	0793      	lsls	r3, r2, #30
 8009a5c:	680e      	ldr	r6, [r1, #0]
 8009a5e:	bf08      	it	eq
 8009a60:	694b      	ldreq	r3, [r1, #20]
 8009a62:	600f      	str	r7, [r1, #0]
 8009a64:	bf18      	it	ne
 8009a66:	2300      	movne	r3, #0
 8009a68:	eba6 0807 	sub.w	r8, r6, r7
 8009a6c:	608b      	str	r3, [r1, #8]
 8009a6e:	f1b8 0f00 	cmp.w	r8, #0
 8009a72:	dd9c      	ble.n	80099ae <__sflush_r+0x1a>
 8009a74:	6a21      	ldr	r1, [r4, #32]
 8009a76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009a78:	4643      	mov	r3, r8
 8009a7a:	463a      	mov	r2, r7
 8009a7c:	4628      	mov	r0, r5
 8009a7e:	47b0      	blx	r6
 8009a80:	2800      	cmp	r0, #0
 8009a82:	dc06      	bgt.n	8009a92 <__sflush_r+0xfe>
 8009a84:	89a3      	ldrh	r3, [r4, #12]
 8009a86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a8a:	81a3      	strh	r3, [r4, #12]
 8009a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a90:	e78e      	b.n	80099b0 <__sflush_r+0x1c>
 8009a92:	4407      	add	r7, r0
 8009a94:	eba8 0800 	sub.w	r8, r8, r0
 8009a98:	e7e9      	b.n	8009a6e <__sflush_r+0xda>
 8009a9a:	bf00      	nop
 8009a9c:	dfbffffe 	.word	0xdfbffffe

08009aa0 <_fflush_r>:
 8009aa0:	b538      	push	{r3, r4, r5, lr}
 8009aa2:	690b      	ldr	r3, [r1, #16]
 8009aa4:	4605      	mov	r5, r0
 8009aa6:	460c      	mov	r4, r1
 8009aa8:	b913      	cbnz	r3, 8009ab0 <_fflush_r+0x10>
 8009aaa:	2500      	movs	r5, #0
 8009aac:	4628      	mov	r0, r5
 8009aae:	bd38      	pop	{r3, r4, r5, pc}
 8009ab0:	b118      	cbz	r0, 8009aba <_fflush_r+0x1a>
 8009ab2:	6a03      	ldr	r3, [r0, #32]
 8009ab4:	b90b      	cbnz	r3, 8009aba <_fflush_r+0x1a>
 8009ab6:	f7fe ffcd 	bl	8008a54 <__sinit>
 8009aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d0f3      	beq.n	8009aaa <_fflush_r+0xa>
 8009ac2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ac4:	07d0      	lsls	r0, r2, #31
 8009ac6:	d404      	bmi.n	8009ad2 <_fflush_r+0x32>
 8009ac8:	0599      	lsls	r1, r3, #22
 8009aca:	d402      	bmi.n	8009ad2 <_fflush_r+0x32>
 8009acc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ace:	f7ff fa2c 	bl	8008f2a <__retarget_lock_acquire_recursive>
 8009ad2:	4628      	mov	r0, r5
 8009ad4:	4621      	mov	r1, r4
 8009ad6:	f7ff ff5d 	bl	8009994 <__sflush_r>
 8009ada:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009adc:	07da      	lsls	r2, r3, #31
 8009ade:	4605      	mov	r5, r0
 8009ae0:	d4e4      	bmi.n	8009aac <_fflush_r+0xc>
 8009ae2:	89a3      	ldrh	r3, [r4, #12]
 8009ae4:	059b      	lsls	r3, r3, #22
 8009ae6:	d4e1      	bmi.n	8009aac <_fflush_r+0xc>
 8009ae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009aea:	f7ff fa1f 	bl	8008f2c <__retarget_lock_release_recursive>
 8009aee:	e7dd      	b.n	8009aac <_fflush_r+0xc>

08009af0 <__swhatbuf_r>:
 8009af0:	b570      	push	{r4, r5, r6, lr}
 8009af2:	460c      	mov	r4, r1
 8009af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009af8:	2900      	cmp	r1, #0
 8009afa:	b096      	sub	sp, #88	; 0x58
 8009afc:	4615      	mov	r5, r2
 8009afe:	461e      	mov	r6, r3
 8009b00:	da0d      	bge.n	8009b1e <__swhatbuf_r+0x2e>
 8009b02:	89a3      	ldrh	r3, [r4, #12]
 8009b04:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009b08:	f04f 0100 	mov.w	r1, #0
 8009b0c:	bf0c      	ite	eq
 8009b0e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009b12:	2340      	movne	r3, #64	; 0x40
 8009b14:	2000      	movs	r0, #0
 8009b16:	6031      	str	r1, [r6, #0]
 8009b18:	602b      	str	r3, [r5, #0]
 8009b1a:	b016      	add	sp, #88	; 0x58
 8009b1c:	bd70      	pop	{r4, r5, r6, pc}
 8009b1e:	466a      	mov	r2, sp
 8009b20:	f000 f862 	bl	8009be8 <_fstat_r>
 8009b24:	2800      	cmp	r0, #0
 8009b26:	dbec      	blt.n	8009b02 <__swhatbuf_r+0x12>
 8009b28:	9901      	ldr	r1, [sp, #4]
 8009b2a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009b2e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009b32:	4259      	negs	r1, r3
 8009b34:	4159      	adcs	r1, r3
 8009b36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b3a:	e7eb      	b.n	8009b14 <__swhatbuf_r+0x24>

08009b3c <__smakebuf_r>:
 8009b3c:	898b      	ldrh	r3, [r1, #12]
 8009b3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b40:	079d      	lsls	r5, r3, #30
 8009b42:	4606      	mov	r6, r0
 8009b44:	460c      	mov	r4, r1
 8009b46:	d507      	bpl.n	8009b58 <__smakebuf_r+0x1c>
 8009b48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b4c:	6023      	str	r3, [r4, #0]
 8009b4e:	6123      	str	r3, [r4, #16]
 8009b50:	2301      	movs	r3, #1
 8009b52:	6163      	str	r3, [r4, #20]
 8009b54:	b002      	add	sp, #8
 8009b56:	bd70      	pop	{r4, r5, r6, pc}
 8009b58:	ab01      	add	r3, sp, #4
 8009b5a:	466a      	mov	r2, sp
 8009b5c:	f7ff ffc8 	bl	8009af0 <__swhatbuf_r>
 8009b60:	9900      	ldr	r1, [sp, #0]
 8009b62:	4605      	mov	r5, r0
 8009b64:	4630      	mov	r0, r6
 8009b66:	f7ff fa5d 	bl	8009024 <_malloc_r>
 8009b6a:	b948      	cbnz	r0, 8009b80 <__smakebuf_r+0x44>
 8009b6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b70:	059a      	lsls	r2, r3, #22
 8009b72:	d4ef      	bmi.n	8009b54 <__smakebuf_r+0x18>
 8009b74:	f023 0303 	bic.w	r3, r3, #3
 8009b78:	f043 0302 	orr.w	r3, r3, #2
 8009b7c:	81a3      	strh	r3, [r4, #12]
 8009b7e:	e7e3      	b.n	8009b48 <__smakebuf_r+0xc>
 8009b80:	89a3      	ldrh	r3, [r4, #12]
 8009b82:	6020      	str	r0, [r4, #0]
 8009b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b88:	81a3      	strh	r3, [r4, #12]
 8009b8a:	9b00      	ldr	r3, [sp, #0]
 8009b8c:	6163      	str	r3, [r4, #20]
 8009b8e:	9b01      	ldr	r3, [sp, #4]
 8009b90:	6120      	str	r0, [r4, #16]
 8009b92:	b15b      	cbz	r3, 8009bac <__smakebuf_r+0x70>
 8009b94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b98:	4630      	mov	r0, r6
 8009b9a:	f000 f837 	bl	8009c0c <_isatty_r>
 8009b9e:	b128      	cbz	r0, 8009bac <__smakebuf_r+0x70>
 8009ba0:	89a3      	ldrh	r3, [r4, #12]
 8009ba2:	f023 0303 	bic.w	r3, r3, #3
 8009ba6:	f043 0301 	orr.w	r3, r3, #1
 8009baa:	81a3      	strh	r3, [r4, #12]
 8009bac:	89a3      	ldrh	r3, [r4, #12]
 8009bae:	431d      	orrs	r5, r3
 8009bb0:	81a5      	strh	r5, [r4, #12]
 8009bb2:	e7cf      	b.n	8009b54 <__smakebuf_r+0x18>

08009bb4 <memmove>:
 8009bb4:	4288      	cmp	r0, r1
 8009bb6:	b510      	push	{r4, lr}
 8009bb8:	eb01 0402 	add.w	r4, r1, r2
 8009bbc:	d902      	bls.n	8009bc4 <memmove+0x10>
 8009bbe:	4284      	cmp	r4, r0
 8009bc0:	4623      	mov	r3, r4
 8009bc2:	d807      	bhi.n	8009bd4 <memmove+0x20>
 8009bc4:	1e43      	subs	r3, r0, #1
 8009bc6:	42a1      	cmp	r1, r4
 8009bc8:	d008      	beq.n	8009bdc <memmove+0x28>
 8009bca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009bd2:	e7f8      	b.n	8009bc6 <memmove+0x12>
 8009bd4:	4402      	add	r2, r0
 8009bd6:	4601      	mov	r1, r0
 8009bd8:	428a      	cmp	r2, r1
 8009bda:	d100      	bne.n	8009bde <memmove+0x2a>
 8009bdc:	bd10      	pop	{r4, pc}
 8009bde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009be2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009be6:	e7f7      	b.n	8009bd8 <memmove+0x24>

08009be8 <_fstat_r>:
 8009be8:	b538      	push	{r3, r4, r5, lr}
 8009bea:	4d07      	ldr	r5, [pc, #28]	; (8009c08 <_fstat_r+0x20>)
 8009bec:	2300      	movs	r3, #0
 8009bee:	4604      	mov	r4, r0
 8009bf0:	4608      	mov	r0, r1
 8009bf2:	4611      	mov	r1, r2
 8009bf4:	602b      	str	r3, [r5, #0]
 8009bf6:	f7f7 fafc 	bl	80011f2 <_fstat>
 8009bfa:	1c43      	adds	r3, r0, #1
 8009bfc:	d102      	bne.n	8009c04 <_fstat_r+0x1c>
 8009bfe:	682b      	ldr	r3, [r5, #0]
 8009c00:	b103      	cbz	r3, 8009c04 <_fstat_r+0x1c>
 8009c02:	6023      	str	r3, [r4, #0]
 8009c04:	bd38      	pop	{r3, r4, r5, pc}
 8009c06:	bf00      	nop
 8009c08:	20001988 	.word	0x20001988

08009c0c <_isatty_r>:
 8009c0c:	b538      	push	{r3, r4, r5, lr}
 8009c0e:	4d06      	ldr	r5, [pc, #24]	; (8009c28 <_isatty_r+0x1c>)
 8009c10:	2300      	movs	r3, #0
 8009c12:	4604      	mov	r4, r0
 8009c14:	4608      	mov	r0, r1
 8009c16:	602b      	str	r3, [r5, #0]
 8009c18:	f7f7 fafb 	bl	8001212 <_isatty>
 8009c1c:	1c43      	adds	r3, r0, #1
 8009c1e:	d102      	bne.n	8009c26 <_isatty_r+0x1a>
 8009c20:	682b      	ldr	r3, [r5, #0]
 8009c22:	b103      	cbz	r3, 8009c26 <_isatty_r+0x1a>
 8009c24:	6023      	str	r3, [r4, #0]
 8009c26:	bd38      	pop	{r3, r4, r5, pc}
 8009c28:	20001988 	.word	0x20001988

08009c2c <_sbrk_r>:
 8009c2c:	b538      	push	{r3, r4, r5, lr}
 8009c2e:	4d06      	ldr	r5, [pc, #24]	; (8009c48 <_sbrk_r+0x1c>)
 8009c30:	2300      	movs	r3, #0
 8009c32:	4604      	mov	r4, r0
 8009c34:	4608      	mov	r0, r1
 8009c36:	602b      	str	r3, [r5, #0]
 8009c38:	f7f7 fb04 	bl	8001244 <_sbrk>
 8009c3c:	1c43      	adds	r3, r0, #1
 8009c3e:	d102      	bne.n	8009c46 <_sbrk_r+0x1a>
 8009c40:	682b      	ldr	r3, [r5, #0]
 8009c42:	b103      	cbz	r3, 8009c46 <_sbrk_r+0x1a>
 8009c44:	6023      	str	r3, [r4, #0]
 8009c46:	bd38      	pop	{r3, r4, r5, pc}
 8009c48:	20001988 	.word	0x20001988

08009c4c <_realloc_r>:
 8009c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c50:	4680      	mov	r8, r0
 8009c52:	4614      	mov	r4, r2
 8009c54:	460e      	mov	r6, r1
 8009c56:	b921      	cbnz	r1, 8009c62 <_realloc_r+0x16>
 8009c58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c5c:	4611      	mov	r1, r2
 8009c5e:	f7ff b9e1 	b.w	8009024 <_malloc_r>
 8009c62:	b92a      	cbnz	r2, 8009c70 <_realloc_r+0x24>
 8009c64:	f7ff f972 	bl	8008f4c <_free_r>
 8009c68:	4625      	mov	r5, r4
 8009c6a:	4628      	mov	r0, r5
 8009c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c70:	f000 f81b 	bl	8009caa <_malloc_usable_size_r>
 8009c74:	4284      	cmp	r4, r0
 8009c76:	4607      	mov	r7, r0
 8009c78:	d802      	bhi.n	8009c80 <_realloc_r+0x34>
 8009c7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009c7e:	d812      	bhi.n	8009ca6 <_realloc_r+0x5a>
 8009c80:	4621      	mov	r1, r4
 8009c82:	4640      	mov	r0, r8
 8009c84:	f7ff f9ce 	bl	8009024 <_malloc_r>
 8009c88:	4605      	mov	r5, r0
 8009c8a:	2800      	cmp	r0, #0
 8009c8c:	d0ed      	beq.n	8009c6a <_realloc_r+0x1e>
 8009c8e:	42bc      	cmp	r4, r7
 8009c90:	4622      	mov	r2, r4
 8009c92:	4631      	mov	r1, r6
 8009c94:	bf28      	it	cs
 8009c96:	463a      	movcs	r2, r7
 8009c98:	f7ff f949 	bl	8008f2e <memcpy>
 8009c9c:	4631      	mov	r1, r6
 8009c9e:	4640      	mov	r0, r8
 8009ca0:	f7ff f954 	bl	8008f4c <_free_r>
 8009ca4:	e7e1      	b.n	8009c6a <_realloc_r+0x1e>
 8009ca6:	4635      	mov	r5, r6
 8009ca8:	e7df      	b.n	8009c6a <_realloc_r+0x1e>

08009caa <_malloc_usable_size_r>:
 8009caa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cae:	1f18      	subs	r0, r3, #4
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	bfbc      	itt	lt
 8009cb4:	580b      	ldrlt	r3, [r1, r0]
 8009cb6:	18c0      	addlt	r0, r0, r3
 8009cb8:	4770      	bx	lr
	...

08009cbc <_init>:
 8009cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cbe:	bf00      	nop
 8009cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cc2:	bc08      	pop	{r3}
 8009cc4:	469e      	mov	lr, r3
 8009cc6:	4770      	bx	lr

08009cc8 <_fini>:
 8009cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cca:	bf00      	nop
 8009ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cce:	bc08      	pop	{r3}
 8009cd0:	469e      	mov	lr, r3
 8009cd2:	4770      	bx	lr
