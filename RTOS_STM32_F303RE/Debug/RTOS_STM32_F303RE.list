
RTOS_STM32_F303RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08004e8c  08004e8c  00014e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f58  08004f58  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08004f58  08004f58  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f58  08004f58  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f58  08004f58  00014f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f5c  08004f5c  00014f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004f60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          0000122c  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000128c  2000128c  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001458f  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002c14  00000000  00000000  00034662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010a0  00000000  00000000  00037278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000cf6  00000000  00000000  00038318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021ef5  00000000  00000000  0003900e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014d83  00000000  00000000  0005af03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d1dc0  00000000  00000000  0006fc86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000047dc  00000000  00000000  00141a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000088  00000000  00000000  00146224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004e74 	.word	0x08004e74

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08004e74 	.word	0x08004e74

080001e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001e0:	b480      	push	{r7}
 80001e2:	b085      	sub	sp, #20
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	60f8      	str	r0, [r7, #12]
 80001e8:	60b9      	str	r1, [r7, #8]
 80001ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	4a07      	ldr	r2, [pc, #28]	; (800020c <vApplicationGetIdleTaskMemory+0x2c>)
 80001f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001f2:	68bb      	ldr	r3, [r7, #8]
 80001f4:	4a06      	ldr	r2, [pc, #24]	; (8000210 <vApplicationGetIdleTaskMemory+0x30>)
 80001f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2280      	movs	r2, #128	; 0x80
 80001fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001fe:	bf00      	nop
 8000200:	3714      	adds	r7, #20
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	2000007c 	.word	0x2000007c
 8000210:	2000011c 	.word	0x2000011c

08000214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000214:	b5b0      	push	{r4, r5, r7, lr}
 8000216:	b096      	sub	sp, #88	; 0x58
 8000218:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021a:	f000 faeb 	bl	80007f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021e:	f000 f84b 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000222:	f000 f8d7 	bl	80003d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000226:	f000 f8a5 	bl	8000374 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, Task1_init, osPriorityNormal, 0, 128);
 800022a:	4b1d      	ldr	r3, [pc, #116]	; (80002a0 <main+0x8c>)
 800022c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000230:	461d      	mov	r5, r3
 8000232:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000234:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000236:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800023a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 800023e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000242:	2100      	movs	r1, #0
 8000244:	4618      	mov	r0, r3
 8000246:	f003 fae9 	bl	800381c <osThreadCreate>
 800024a:	4603      	mov	r3, r0
 800024c:	4a15      	ldr	r2, [pc, #84]	; (80002a4 <main+0x90>)
 800024e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, Task2_init, osPriorityBelowNormal, 0, 128);
 8000250:	4b15      	ldr	r3, [pc, #84]	; (80002a8 <main+0x94>)
 8000252:	f107 0420 	add.w	r4, r7, #32
 8000256:	461d      	mov	r5, r3
 8000258:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800025a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800025c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000260:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8000264:	f107 0320 	add.w	r3, r7, #32
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f003 fad6 	bl	800381c <osThreadCreate>
 8000270:	4603      	mov	r3, r0
 8000272:	4a0e      	ldr	r2, [pc, #56]	; (80002ac <main+0x98>)
 8000274:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task3 */
  osThreadDef(Task3, Task3_init, osPriorityAboveNormal, 0, 128);
 8000276:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <main+0x9c>)
 8000278:	1d3c      	adds	r4, r7, #4
 800027a:	461d      	mov	r5, r3
 800027c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800027e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000280:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000284:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task3Handle = osThreadCreate(osThread(Task3), NULL);
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	2100      	movs	r1, #0
 800028c:	4618      	mov	r0, r3
 800028e:	f003 fac5 	bl	800381c <osThreadCreate>
 8000292:	4603      	mov	r3, r0
 8000294:	4a07      	ldr	r2, [pc, #28]	; (80002b4 <main+0xa0>)
 8000296:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000298:	f003 fab9 	bl	800380e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800029c:	e7fe      	b.n	800029c <main+0x88>
 800029e:	bf00      	nop
 80002a0:	08004e94 	.word	0x08004e94
 80002a4:	200003a4 	.word	0x200003a4
 80002a8:	08004eb8 	.word	0x08004eb8
 80002ac:	200003a8 	.word	0x200003a8
 80002b0:	08004edc 	.word	0x08004edc
 80002b4:	200003ac 	.word	0x200003ac

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b0a6      	sub	sp, #152	; 0x98
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002c2:	2228      	movs	r2, #40	; 0x28
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f004 fcf8 	bl	8004cbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	605a      	str	r2, [r3, #4]
 80002d6:	609a      	str	r2, [r3, #8]
 80002d8:	60da      	str	r2, [r3, #12]
 80002da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2258      	movs	r2, #88	; 0x58
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f004 fcea 	bl	8004cbc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e8:	2302      	movs	r3, #2
 80002ea:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ec:	2301      	movs	r3, #1
 80002ee:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f0:	2310      	movs	r3, #16
 80002f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f6:	2302      	movs	r3, #2
 80002f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000300:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000304:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000308:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800030c:	2300      	movs	r3, #0
 800030e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000312:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000316:	4618      	mov	r0, r3
 8000318:	f000 fd26 	bl	8000d68 <HAL_RCC_OscConfig>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000322:	f000 f92b 	bl	800057c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000326:	230f      	movs	r3, #15
 8000328:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032a:	2302      	movs	r3, #2
 800032c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032e:	2300      	movs	r3, #0
 8000330:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000336:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000338:	2300      	movs	r3, #0
 800033a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800033c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000340:	2102      	movs	r1, #2
 8000342:	4618      	mov	r0, r3
 8000344:	f001 fd64 	bl	8001e10 <HAL_RCC_ClockConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800034e:	f000 f915 	bl	800057c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000352:	2302      	movs	r3, #2
 8000354:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000356:	2300      	movs	r3, #0
 8000358:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	4618      	mov	r0, r3
 800035e:	f001 ffbf 	bl	80022e0 <HAL_RCCEx_PeriphCLKConfig>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000368:	f000 f908 	bl	800057c <Error_Handler>
  }
}
 800036c:	bf00      	nop
 800036e:	3798      	adds	r7, #152	; 0x98
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}

08000374 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000378:	4b14      	ldr	r3, [pc, #80]	; (80003cc <MX_USART2_UART_Init+0x58>)
 800037a:	4a15      	ldr	r2, [pc, #84]	; (80003d0 <MX_USART2_UART_Init+0x5c>)
 800037c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800037e:	4b13      	ldr	r3, [pc, #76]	; (80003cc <MX_USART2_UART_Init+0x58>)
 8000380:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000384:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000386:	4b11      	ldr	r3, [pc, #68]	; (80003cc <MX_USART2_UART_Init+0x58>)
 8000388:	2200      	movs	r2, #0
 800038a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800038c:	4b0f      	ldr	r3, [pc, #60]	; (80003cc <MX_USART2_UART_Init+0x58>)
 800038e:	2200      	movs	r2, #0
 8000390:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000392:	4b0e      	ldr	r3, [pc, #56]	; (80003cc <MX_USART2_UART_Init+0x58>)
 8000394:	2200      	movs	r2, #0
 8000396:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000398:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <MX_USART2_UART_Init+0x58>)
 800039a:	220c      	movs	r2, #12
 800039c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800039e:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <MX_USART2_UART_Init+0x58>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003a4:	4b09      	ldr	r3, [pc, #36]	; (80003cc <MX_USART2_UART_Init+0x58>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003aa:	4b08      	ldr	r3, [pc, #32]	; (80003cc <MX_USART2_UART_Init+0x58>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <MX_USART2_UART_Init+0x58>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003b6:	4805      	ldr	r0, [pc, #20]	; (80003cc <MX_USART2_UART_Init+0x58>)
 80003b8:	f002 fc86 	bl	8002cc8 <HAL_UART_Init>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003c2:	f000 f8db 	bl	800057c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	2000031c 	.word	0x2000031c
 80003d0:	40004400 	.word	0x40004400

080003d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b08a      	sub	sp, #40	; 0x28
 80003d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003da:	f107 0314 	add.w	r3, r7, #20
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]
 80003e4:	609a      	str	r2, [r3, #8]
 80003e6:	60da      	str	r2, [r3, #12]
 80003e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ea:	4b2b      	ldr	r3, [pc, #172]	; (8000498 <MX_GPIO_Init+0xc4>)
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	4a2a      	ldr	r2, [pc, #168]	; (8000498 <MX_GPIO_Init+0xc4>)
 80003f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003f4:	6153      	str	r3, [r2, #20]
 80003f6:	4b28      	ldr	r3, [pc, #160]	; (8000498 <MX_GPIO_Init+0xc4>)
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003fe:	613b      	str	r3, [r7, #16]
 8000400:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000402:	4b25      	ldr	r3, [pc, #148]	; (8000498 <MX_GPIO_Init+0xc4>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	4a24      	ldr	r2, [pc, #144]	; (8000498 <MX_GPIO_Init+0xc4>)
 8000408:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800040c:	6153      	str	r3, [r2, #20]
 800040e:	4b22      	ldr	r3, [pc, #136]	; (8000498 <MX_GPIO_Init+0xc4>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041a:	4b1f      	ldr	r3, [pc, #124]	; (8000498 <MX_GPIO_Init+0xc4>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	4a1e      	ldr	r2, [pc, #120]	; (8000498 <MX_GPIO_Init+0xc4>)
 8000420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000424:	6153      	str	r3, [r2, #20]
 8000426:	4b1c      	ldr	r3, [pc, #112]	; (8000498 <MX_GPIO_Init+0xc4>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800042e:	60bb      	str	r3, [r7, #8]
 8000430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000432:	4b19      	ldr	r3, [pc, #100]	; (8000498 <MX_GPIO_Init+0xc4>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	4a18      	ldr	r2, [pc, #96]	; (8000498 <MX_GPIO_Init+0xc4>)
 8000438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800043c:	6153      	str	r3, [r2, #20]
 800043e:	4b16      	ldr	r3, [pc, #88]	; (8000498 <MX_GPIO_Init+0xc4>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000446:	607b      	str	r3, [r7, #4]
 8000448:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800044a:	2200      	movs	r2, #0
 800044c:	2120      	movs	r1, #32
 800044e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000452:	f000 fc71 	bl	8000d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000456:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800045a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800045c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000462:	2300      	movs	r3, #0
 8000464:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000466:	f107 0314 	add.w	r3, r7, #20
 800046a:	4619      	mov	r1, r3
 800046c:	480b      	ldr	r0, [pc, #44]	; (800049c <MX_GPIO_Init+0xc8>)
 800046e:	f000 fad9 	bl	8000a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000472:	2320      	movs	r3, #32
 8000474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000476:	2301      	movs	r3, #1
 8000478:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047a:	2300      	movs	r3, #0
 800047c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047e:	2300      	movs	r3, #0
 8000480:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000482:	f107 0314 	add.w	r3, r7, #20
 8000486:	4619      	mov	r1, r3
 8000488:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800048c:	f000 faca 	bl	8000a24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000490:	bf00      	nop
 8000492:	3728      	adds	r7, #40	; 0x28
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	40021000 	.word	0x40021000
 800049c:	48000800 	.word	0x48000800

080004a0 <Task1_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task1_init */
void Task1_init(void const * argument)
{
 80004a0:	b590      	push	{r4, r7, lr}
 80004a2:	b08b      	sub	sp, #44	; 0x2c
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t receivedData;
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_UART_Receive(&huart2, &receivedData, 1, 100) == HAL_OK)
 80004a8:	f107 0127 	add.w	r1, r7, #39	; 0x27
 80004ac:	2364      	movs	r3, #100	; 0x64
 80004ae:	2201      	movs	r2, #1
 80004b0:	481e      	ldr	r0, [pc, #120]	; (800052c <Task1_init+0x8c>)
 80004b2:	f002 fce1 	bl	8002e78 <HAL_UART_Receive>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d131      	bne.n	8000520 <Task1_init+0x80>
	  {
		  uint8_t message1[] = "Diode is ON\r\n";
 80004bc:	4b1c      	ldr	r3, [pc, #112]	; (8000530 <Task1_init+0x90>)
 80004be:	f107 0418 	add.w	r4, r7, #24
 80004c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004c4:	c407      	stmia	r4!, {r0, r1, r2}
 80004c6:	8023      	strh	r3, [r4, #0]
		  uint8_t message2[] = "Diode is OFF\r\n";
 80004c8:	4b1a      	ldr	r3, [pc, #104]	; (8000534 <Task1_init+0x94>)
 80004ca:	f107 0408 	add.w	r4, r7, #8
 80004ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004d0:	c407      	stmia	r4!, {r0, r1, r2}
 80004d2:	8023      	strh	r3, [r4, #0]
 80004d4:	3402      	adds	r4, #2
 80004d6:	0c1b      	lsrs	r3, r3, #16
 80004d8:	7023      	strb	r3, [r4, #0]
		  //HAL_UART_Transmit(&huart2, message, sizeof(message), 500);
		  if(receivedData == 'e')
 80004da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80004de:	2b65      	cmp	r3, #101	; 0x65
 80004e0:	d10d      	bne.n	80004fe <Task1_init+0x5e>
			{
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80004e2:	2201      	movs	r2, #1
 80004e4:	2120      	movs	r1, #32
 80004e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ea:	f000 fc25 	bl	8000d38 <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart2, message1, sizeof(message1), 200);
 80004ee:	f107 0118 	add.w	r1, r7, #24
 80004f2:	23c8      	movs	r3, #200	; 0xc8
 80004f4:	220e      	movs	r2, #14
 80004f6:	480d      	ldr	r0, [pc, #52]	; (800052c <Task1_init+0x8c>)
 80004f8:	f002 fc34 	bl	8002d64 <HAL_UART_Transmit>
 80004fc:	e010      	b.n	8000520 <Task1_init+0x80>
			}else if(receivedData == 'd')
 80004fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000502:	2b64      	cmp	r3, #100	; 0x64
 8000504:	d10c      	bne.n	8000520 <Task1_init+0x80>
			{
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	2120      	movs	r1, #32
 800050a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050e:	f000 fc13 	bl	8000d38 <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart2, message2, sizeof(message2), 200);
 8000512:	f107 0108 	add.w	r1, r7, #8
 8000516:	23c8      	movs	r3, #200	; 0xc8
 8000518:	220f      	movs	r2, #15
 800051a:	4804      	ldr	r0, [pc, #16]	; (800052c <Task1_init+0x8c>)
 800051c:	f002 fc22 	bl	8002d64 <HAL_UART_Transmit>
				//dl_kom = sizeof(komunikat);
			}
	  }
	  //uint8_t text[] = "text from TASK1\r\n";
	  //HAL_UART_Transmit(&huart2, text, sizeof(text), 500);
	  osDelay(500);
 8000520:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000524:	f003 f9c6 	bl	80038b4 <osDelay>
	  if(HAL_UART_Receive(&huart2, &receivedData, 1, 100) == HAL_OK)
 8000528:	e7be      	b.n	80004a8 <Task1_init+0x8>
 800052a:	bf00      	nop
 800052c:	2000031c 	.word	0x2000031c
 8000530:	08004ef8 	.word	0x08004ef8
 8000534:	08004f08 	.word	0x08004f08

08000538 <Task2_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_init */
void Task2_init(void const * argument)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000540:	2001      	movs	r0, #1
 8000542:	f003 f9b7 	bl	80038b4 <osDelay>
 8000546:	e7fb      	b.n	8000540 <Task2_init+0x8>

08000548 <Task3_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task3_init */
void Task3_init(void const * argument)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task3_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000550:	2001      	movs	r0, #1
 8000552:	f003 f9af 	bl	80038b4 <osDelay>
 8000556:	e7fb      	b.n	8000550 <Task3_init+0x8>

08000558 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a04      	ldr	r2, [pc, #16]	; (8000578 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d101      	bne.n	800056e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800056a:	f000 f959 	bl	8000820 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40012c00 	.word	0x40012c00

0800057c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000580:	b672      	cpsid	i
}
 8000582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000584:	e7fe      	b.n	8000584 <Error_Handler+0x8>
	...

08000588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800058e:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <HAL_MspInit+0x4c>)
 8000590:	699b      	ldr	r3, [r3, #24]
 8000592:	4a10      	ldr	r2, [pc, #64]	; (80005d4 <HAL_MspInit+0x4c>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6193      	str	r3, [r2, #24]
 800059a:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <HAL_MspInit+0x4c>)
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <HAL_MspInit+0x4c>)
 80005a8:	69db      	ldr	r3, [r3, #28]
 80005aa:	4a0a      	ldr	r2, [pc, #40]	; (80005d4 <HAL_MspInit+0x4c>)
 80005ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b0:	61d3      	str	r3, [r2, #28]
 80005b2:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <HAL_MspInit+0x4c>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	210f      	movs	r1, #15
 80005c2:	f06f 0001 	mvn.w	r0, #1
 80005c6:	f000 fa03 	bl	80009d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40021000 	.word	0x40021000

080005d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08a      	sub	sp, #40	; 0x28
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a17      	ldr	r2, [pc, #92]	; (8000654 <HAL_UART_MspInit+0x7c>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d128      	bne.n	800064c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005fa:	4b17      	ldr	r3, [pc, #92]	; (8000658 <HAL_UART_MspInit+0x80>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	4a16      	ldr	r2, [pc, #88]	; (8000658 <HAL_UART_MspInit+0x80>)
 8000600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000604:	61d3      	str	r3, [r2, #28]
 8000606:	4b14      	ldr	r3, [pc, #80]	; (8000658 <HAL_UART_MspInit+0x80>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	4b11      	ldr	r3, [pc, #68]	; (8000658 <HAL_UART_MspInit+0x80>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	4a10      	ldr	r2, [pc, #64]	; (8000658 <HAL_UART_MspInit+0x80>)
 8000618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800061c:	6153      	str	r3, [r2, #20]
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <HAL_UART_MspInit+0x80>)
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800062a:	230c      	movs	r3, #12
 800062c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062e:	2302      	movs	r3, #2
 8000630:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000636:	2300      	movs	r3, #0
 8000638:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800063a:	2307      	movs	r3, #7
 800063c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	4619      	mov	r1, r3
 8000644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000648:	f000 f9ec 	bl	8000a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800064c:	bf00      	nop
 800064e:	3728      	adds	r7, #40	; 0x28
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40004400 	.word	0x40004400
 8000658:	40021000 	.word	0x40021000

0800065c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08c      	sub	sp, #48	; 0x30
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000664:	2300      	movs	r3, #0
 8000666:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000668:	2300      	movs	r3, #0
 800066a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800066c:	4b2e      	ldr	r3, [pc, #184]	; (8000728 <HAL_InitTick+0xcc>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a2d      	ldr	r2, [pc, #180]	; (8000728 <HAL_InitTick+0xcc>)
 8000672:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b2b      	ldr	r3, [pc, #172]	; (8000728 <HAL_InitTick+0xcc>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000684:	f107 020c 	add.w	r2, r7, #12
 8000688:	f107 0310 	add.w	r3, r7, #16
 800068c:	4611      	mov	r1, r2
 800068e:	4618      	mov	r0, r3
 8000690:	f001 fdf4 	bl	800227c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000694:	f001 fdd0 	bl	8002238 <HAL_RCC_GetPCLK2Freq>
 8000698:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800069a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800069c:	4a23      	ldr	r2, [pc, #140]	; (800072c <HAL_InitTick+0xd0>)
 800069e:	fba2 2303 	umull	r2, r3, r2, r3
 80006a2:	0c9b      	lsrs	r3, r3, #18
 80006a4:	3b01      	subs	r3, #1
 80006a6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80006a8:	4b21      	ldr	r3, [pc, #132]	; (8000730 <HAL_InitTick+0xd4>)
 80006aa:	4a22      	ldr	r2, [pc, #136]	; (8000734 <HAL_InitTick+0xd8>)
 80006ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80006ae:	4b20      	ldr	r3, [pc, #128]	; (8000730 <HAL_InitTick+0xd4>)
 80006b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006b4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80006b6:	4a1e      	ldr	r2, [pc, #120]	; (8000730 <HAL_InitTick+0xd4>)
 80006b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ba:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80006bc:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <HAL_InitTick+0xd4>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c2:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <HAL_InitTick+0xd4>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c8:	4b19      	ldr	r3, [pc, #100]	; (8000730 <HAL_InitTick+0xd4>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80006ce:	4818      	ldr	r0, [pc, #96]	; (8000730 <HAL_InitTick+0xd4>)
 80006d0:	f002 f824 	bl	800271c <HAL_TIM_Base_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80006da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d11b      	bne.n	800071a <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80006e2:	4813      	ldr	r0, [pc, #76]	; (8000730 <HAL_InitTick+0xd4>)
 80006e4:	f002 f87c 	bl	80027e0 <HAL_TIM_Base_Start_IT>
 80006e8:	4603      	mov	r3, r0
 80006ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80006ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d111      	bne.n	800071a <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80006f6:	2019      	movs	r0, #25
 80006f8:	f000 f986 	bl	8000a08 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2b0f      	cmp	r3, #15
 8000700:	d808      	bhi.n	8000714 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000702:	2200      	movs	r2, #0
 8000704:	6879      	ldr	r1, [r7, #4]
 8000706:	2019      	movs	r0, #25
 8000708:	f000 f962 	bl	80009d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800070c:	4a0a      	ldr	r2, [pc, #40]	; (8000738 <HAL_InitTick+0xdc>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	6013      	str	r3, [r2, #0]
 8000712:	e002      	b.n	800071a <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000714:	2301      	movs	r3, #1
 8000716:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800071a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800071e:	4618      	mov	r0, r3
 8000720:	3730      	adds	r7, #48	; 0x30
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40021000 	.word	0x40021000
 800072c:	431bde83 	.word	0x431bde83
 8000730:	200003b0 	.word	0x200003b0
 8000734:	40012c00 	.word	0x40012c00
 8000738:	20000004 	.word	0x20000004

0800073c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000740:	e7fe      	b.n	8000740 <NMI_Handler+0x4>

08000742 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000746:	e7fe      	b.n	8000746 <HardFault_Handler+0x4>

08000748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800074c:	e7fe      	b.n	800074c <MemManage_Handler+0x4>

0800074e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000752:	e7fe      	b.n	8000752 <BusFault_Handler+0x4>

08000754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <UsageFault_Handler+0x4>

0800075a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800076c:	4802      	ldr	r0, [pc, #8]	; (8000778 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800076e:	f002 f8a7 	bl	80028c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200003b0 	.word	0x200003b0

0800077c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <SystemInit+0x20>)
 8000782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000786:	4a05      	ldr	r2, [pc, #20]	; (800079c <SystemInit+0x20>)
 8000788:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800078c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007d8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80007a4:	f7ff ffea 	bl	800077c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a8:	480c      	ldr	r0, [pc, #48]	; (80007dc <LoopForever+0x6>)
  ldr r1, =_edata
 80007aa:	490d      	ldr	r1, [pc, #52]	; (80007e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007ac:	4a0d      	ldr	r2, [pc, #52]	; (80007e4 <LoopForever+0xe>)
  movs r3, #0
 80007ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b0:	e002      	b.n	80007b8 <LoopCopyDataInit>

080007b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b6:	3304      	adds	r3, #4

080007b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007bc:	d3f9      	bcc.n	80007b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007be:	4a0a      	ldr	r2, [pc, #40]	; (80007e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007c0:	4c0a      	ldr	r4, [pc, #40]	; (80007ec <LoopForever+0x16>)
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c4:	e001      	b.n	80007ca <LoopFillZerobss>

080007c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c8:	3204      	adds	r2, #4

080007ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007cc:	d3fb      	bcc.n	80007c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ce:	f004 fad3 	bl	8004d78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007d2:	f7ff fd1f 	bl	8000214 <main>

080007d6 <LoopForever>:

LoopForever:
    b LoopForever
 80007d6:	e7fe      	b.n	80007d6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007d8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80007dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80007e4:	08004f60 	.word	0x08004f60
  ldr r2, =_sbss
 80007e8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80007ec:	2000128c 	.word	0x2000128c

080007f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007f0:	e7fe      	b.n	80007f0 <ADC1_2_IRQHandler>
	...

080007f4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007f8:	4b08      	ldr	r3, [pc, #32]	; (800081c <HAL_Init+0x28>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a07      	ldr	r2, [pc, #28]	; (800081c <HAL_Init+0x28>)
 80007fe:	f043 0310 	orr.w	r3, r3, #16
 8000802:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000804:	2003      	movs	r0, #3
 8000806:	f000 f8d8 	bl	80009ba <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800080a:	200f      	movs	r0, #15
 800080c:	f7ff ff26 	bl	800065c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000810:	f7ff feba 	bl	8000588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000814:	2300      	movs	r3, #0
}
 8000816:	4618      	mov	r0, r3
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40022000 	.word	0x40022000

08000820 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <HAL_IncTick+0x20>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	461a      	mov	r2, r3
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <HAL_IncTick+0x24>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4413      	add	r3, r2
 8000830:	4a04      	ldr	r2, [pc, #16]	; (8000844 <HAL_IncTick+0x24>)
 8000832:	6013      	str	r3, [r2, #0]
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	20000008 	.word	0x20000008
 8000844:	200003fc 	.word	0x200003fc

08000848 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  return uwTick;  
 800084c:	4b03      	ldr	r3, [pc, #12]	; (800085c <HAL_GetTick+0x14>)
 800084e:	681b      	ldr	r3, [r3, #0]
}
 8000850:	4618      	mov	r0, r3
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	200003fc 	.word	0x200003fc

08000860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f003 0307 	and.w	r3, r3, #7
 800086e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000876:	68ba      	ldr	r2, [r7, #8]
 8000878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800087c:	4013      	ands	r3, r2
 800087e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000888:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800088c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000892:	4a04      	ldr	r2, [pc, #16]	; (80008a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	60d3      	str	r3, [r2, #12]
}
 8000898:	bf00      	nop
 800089a:	3714      	adds	r7, #20
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008ac:	4b04      	ldr	r3, [pc, #16]	; (80008c0 <__NVIC_GetPriorityGrouping+0x18>)
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	0a1b      	lsrs	r3, r3, #8
 80008b2:	f003 0307 	and.w	r3, r3, #7
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	e000ed00 	.word	0xe000ed00

080008c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	db0b      	blt.n	80008ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	f003 021f 	and.w	r2, r3, #31
 80008dc:	4907      	ldr	r1, [pc, #28]	; (80008fc <__NVIC_EnableIRQ+0x38>)
 80008de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e2:	095b      	lsrs	r3, r3, #5
 80008e4:	2001      	movs	r0, #1
 80008e6:	fa00 f202 	lsl.w	r2, r0, r2
 80008ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	e000e100 	.word	0xe000e100

08000900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	6039      	str	r1, [r7, #0]
 800090a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800090c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000910:	2b00      	cmp	r3, #0
 8000912:	db0a      	blt.n	800092a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	b2da      	uxtb	r2, r3
 8000918:	490c      	ldr	r1, [pc, #48]	; (800094c <__NVIC_SetPriority+0x4c>)
 800091a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091e:	0112      	lsls	r2, r2, #4
 8000920:	b2d2      	uxtb	r2, r2
 8000922:	440b      	add	r3, r1
 8000924:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000928:	e00a      	b.n	8000940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	b2da      	uxtb	r2, r3
 800092e:	4908      	ldr	r1, [pc, #32]	; (8000950 <__NVIC_SetPriority+0x50>)
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	f003 030f 	and.w	r3, r3, #15
 8000936:	3b04      	subs	r3, #4
 8000938:	0112      	lsls	r2, r2, #4
 800093a:	b2d2      	uxtb	r2, r2
 800093c:	440b      	add	r3, r1
 800093e:	761a      	strb	r2, [r3, #24]
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	e000e100 	.word	0xe000e100
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000954:	b480      	push	{r7}
 8000956:	b089      	sub	sp, #36	; 0x24
 8000958:	af00      	add	r7, sp, #0
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	f003 0307 	and.w	r3, r3, #7
 8000966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000968:	69fb      	ldr	r3, [r7, #28]
 800096a:	f1c3 0307 	rsb	r3, r3, #7
 800096e:	2b04      	cmp	r3, #4
 8000970:	bf28      	it	cs
 8000972:	2304      	movcs	r3, #4
 8000974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	3304      	adds	r3, #4
 800097a:	2b06      	cmp	r3, #6
 800097c:	d902      	bls.n	8000984 <NVIC_EncodePriority+0x30>
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	3b03      	subs	r3, #3
 8000982:	e000      	b.n	8000986 <NVIC_EncodePriority+0x32>
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000988:	f04f 32ff 	mov.w	r2, #4294967295
 800098c:	69bb      	ldr	r3, [r7, #24]
 800098e:	fa02 f303 	lsl.w	r3, r2, r3
 8000992:	43da      	mvns	r2, r3
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	401a      	ands	r2, r3
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800099c:	f04f 31ff 	mov.w	r1, #4294967295
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	fa01 f303 	lsl.w	r3, r1, r3
 80009a6:	43d9      	mvns	r1, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ac:	4313      	orrs	r3, r2
         );
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3724      	adds	r7, #36	; 0x24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f7ff ff4c 	bl	8000860 <__NVIC_SetPriorityGrouping>
}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	607a      	str	r2, [r7, #4]
 80009dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009e2:	f7ff ff61 	bl	80008a8 <__NVIC_GetPriorityGrouping>
 80009e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	68b9      	ldr	r1, [r7, #8]
 80009ec:	6978      	ldr	r0, [r7, #20]
 80009ee:	f7ff ffb1 	bl	8000954 <NVIC_EncodePriority>
 80009f2:	4602      	mov	r2, r0
 80009f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009f8:	4611      	mov	r1, r2
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff ff80 	bl	8000900 <__NVIC_SetPriority>
}
 8000a00:	bf00      	nop
 8000a02:	3718      	adds	r7, #24
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff ff54 	bl	80008c4 <__NVIC_EnableIRQ>
}
 8000a1c:	bf00      	nop
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b087      	sub	sp, #28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a32:	e160      	b.n	8000cf6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	2101      	movs	r1, #1
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a40:	4013      	ands	r3, r2
 8000a42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	f000 8152 	beq.w	8000cf0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f003 0303 	and.w	r3, r3, #3
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d005      	beq.n	8000a64 <HAL_GPIO_Init+0x40>
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f003 0303 	and.w	r3, r3, #3
 8000a60:	2b02      	cmp	r3, #2
 8000a62:	d130      	bne.n	8000ac6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	2203      	movs	r2, #3
 8000a70:	fa02 f303 	lsl.w	r3, r2, r3
 8000a74:	43db      	mvns	r3, r3
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	4013      	ands	r3, r2
 8000a7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	68da      	ldr	r2, [r3, #12]
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	fa02 f303 	lsl.w	r3, r2, r3
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	091b      	lsrs	r3, r3, #4
 8000ab0:	f003 0201 	and.w	r2, r3, #1
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f003 0303 	and.w	r3, r3, #3
 8000ace:	2b03      	cmp	r3, #3
 8000ad0:	d017      	beq.n	8000b02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	68db      	ldr	r3, [r3, #12]
 8000ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	2203      	movs	r2, #3
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	43db      	mvns	r3, r3
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	689a      	ldr	r2, [r3, #8]
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f003 0303 	and.w	r3, r3, #3
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	d123      	bne.n	8000b56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	08da      	lsrs	r2, r3, #3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	3208      	adds	r2, #8
 8000b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	220f      	movs	r2, #15
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	43db      	mvns	r3, r3
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	4013      	ands	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	691a      	ldr	r2, [r3, #16]
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	f003 0307 	and.w	r3, r3, #7
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	08da      	lsrs	r2, r3, #3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3208      	adds	r2, #8
 8000b50:	6939      	ldr	r1, [r7, #16]
 8000b52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	2203      	movs	r2, #3
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	43db      	mvns	r3, r3
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f003 0203 	and.w	r2, r3, #3
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f000 80ac 	beq.w	8000cf0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b98:	4b5e      	ldr	r3, [pc, #376]	; (8000d14 <HAL_GPIO_Init+0x2f0>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	4a5d      	ldr	r2, [pc, #372]	; (8000d14 <HAL_GPIO_Init+0x2f0>)
 8000b9e:	f043 0301 	orr.w	r3, r3, #1
 8000ba2:	6193      	str	r3, [r2, #24]
 8000ba4:	4b5b      	ldr	r3, [pc, #364]	; (8000d14 <HAL_GPIO_Init+0x2f0>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	f003 0301 	and.w	r3, r3, #1
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bb0:	4a59      	ldr	r2, [pc, #356]	; (8000d18 <HAL_GPIO_Init+0x2f4>)
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	089b      	lsrs	r3, r3, #2
 8000bb6:	3302      	adds	r3, #2
 8000bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	f003 0303 	and.w	r3, r3, #3
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	220f      	movs	r2, #15
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bda:	d025      	beq.n	8000c28 <HAL_GPIO_Init+0x204>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a4f      	ldr	r2, [pc, #316]	; (8000d1c <HAL_GPIO_Init+0x2f8>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d01f      	beq.n	8000c24 <HAL_GPIO_Init+0x200>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a4e      	ldr	r2, [pc, #312]	; (8000d20 <HAL_GPIO_Init+0x2fc>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d019      	beq.n	8000c20 <HAL_GPIO_Init+0x1fc>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a4d      	ldr	r2, [pc, #308]	; (8000d24 <HAL_GPIO_Init+0x300>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d013      	beq.n	8000c1c <HAL_GPIO_Init+0x1f8>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a4c      	ldr	r2, [pc, #304]	; (8000d28 <HAL_GPIO_Init+0x304>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d00d      	beq.n	8000c18 <HAL_GPIO_Init+0x1f4>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4a4b      	ldr	r2, [pc, #300]	; (8000d2c <HAL_GPIO_Init+0x308>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d007      	beq.n	8000c14 <HAL_GPIO_Init+0x1f0>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a4a      	ldr	r2, [pc, #296]	; (8000d30 <HAL_GPIO_Init+0x30c>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d101      	bne.n	8000c10 <HAL_GPIO_Init+0x1ec>
 8000c0c:	2306      	movs	r3, #6
 8000c0e:	e00c      	b.n	8000c2a <HAL_GPIO_Init+0x206>
 8000c10:	2307      	movs	r3, #7
 8000c12:	e00a      	b.n	8000c2a <HAL_GPIO_Init+0x206>
 8000c14:	2305      	movs	r3, #5
 8000c16:	e008      	b.n	8000c2a <HAL_GPIO_Init+0x206>
 8000c18:	2304      	movs	r3, #4
 8000c1a:	e006      	b.n	8000c2a <HAL_GPIO_Init+0x206>
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	e004      	b.n	8000c2a <HAL_GPIO_Init+0x206>
 8000c20:	2302      	movs	r3, #2
 8000c22:	e002      	b.n	8000c2a <HAL_GPIO_Init+0x206>
 8000c24:	2301      	movs	r3, #1
 8000c26:	e000      	b.n	8000c2a <HAL_GPIO_Init+0x206>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	697a      	ldr	r2, [r7, #20]
 8000c2c:	f002 0203 	and.w	r2, r2, #3
 8000c30:	0092      	lsls	r2, r2, #2
 8000c32:	4093      	lsls	r3, r2
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c3a:	4937      	ldr	r1, [pc, #220]	; (8000d18 <HAL_GPIO_Init+0x2f4>)
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	089b      	lsrs	r3, r3, #2
 8000c40:	3302      	adds	r3, #2
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c48:	4b3a      	ldr	r3, [pc, #232]	; (8000d34 <HAL_GPIO_Init+0x310>)
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	43db      	mvns	r3, r3
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4013      	ands	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d003      	beq.n	8000c6c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c6c:	4a31      	ldr	r2, [pc, #196]	; (8000d34 <HAL_GPIO_Init+0x310>)
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c72:	4b30      	ldr	r3, [pc, #192]	; (8000d34 <HAL_GPIO_Init+0x310>)
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d003      	beq.n	8000c96 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c96:	4a27      	ldr	r2, [pc, #156]	; (8000d34 <HAL_GPIO_Init+0x310>)
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c9c:	4b25      	ldr	r3, [pc, #148]	; (8000d34 <HAL_GPIO_Init+0x310>)
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d003      	beq.n	8000cc0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cc0:	4a1c      	ldr	r2, [pc, #112]	; (8000d34 <HAL_GPIO_Init+0x310>)
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cc6:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <HAL_GPIO_Init+0x310>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d003      	beq.n	8000cea <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cea:	4a12      	ldr	r2, [pc, #72]	; (8000d34 <HAL_GPIO_Init+0x310>)
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	f47f ae97 	bne.w	8000a34 <HAL_GPIO_Init+0x10>
  }
}
 8000d06:	bf00      	nop
 8000d08:	bf00      	nop
 8000d0a:	371c      	adds	r7, #28
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	40021000 	.word	0x40021000
 8000d18:	40010000 	.word	0x40010000
 8000d1c:	48000400 	.word	0x48000400
 8000d20:	48000800 	.word	0x48000800
 8000d24:	48000c00 	.word	0x48000c00
 8000d28:	48001000 	.word	0x48001000
 8000d2c:	48001400 	.word	0x48001400
 8000d30:	48001800 	.word	0x48001800
 8000d34:	40010400 	.word	0x40010400

08000d38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	460b      	mov	r3, r1
 8000d42:	807b      	strh	r3, [r7, #2]
 8000d44:	4613      	mov	r3, r2
 8000d46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d48:	787b      	ldrb	r3, [r7, #1]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d003      	beq.n	8000d56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d4e:	887a      	ldrh	r2, [r7, #2]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d54:	e002      	b.n	8000d5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d56:	887a      	ldrh	r2, [r7, #2]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000d74:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000d78:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000d7e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d102      	bne.n	8000d8e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	f001 b83a 	b.w	8001e02 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000d92:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f000 816f 	beq.w	8001082 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000da4:	4bb5      	ldr	r3, [pc, #724]	; (800107c <HAL_RCC_OscConfig+0x314>)
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f003 030c 	and.w	r3, r3, #12
 8000dac:	2b04      	cmp	r3, #4
 8000dae:	d00c      	beq.n	8000dca <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000db0:	4bb2      	ldr	r3, [pc, #712]	; (800107c <HAL_RCC_OscConfig+0x314>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 030c 	and.w	r3, r3, #12
 8000db8:	2b08      	cmp	r3, #8
 8000dba:	d15c      	bne.n	8000e76 <HAL_RCC_OscConfig+0x10e>
 8000dbc:	4baf      	ldr	r3, [pc, #700]	; (800107c <HAL_RCC_OscConfig+0x314>)
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dc8:	d155      	bne.n	8000e76 <HAL_RCC_OscConfig+0x10e>
 8000dca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dce:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dd2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000dd6:	fa93 f3a3 	rbit	r3, r3
 8000dda:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000dde:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000de2:	fab3 f383 	clz	r3, r3
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	095b      	lsrs	r3, r3, #5
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d102      	bne.n	8000dfc <HAL_RCC_OscConfig+0x94>
 8000df6:	4ba1      	ldr	r3, [pc, #644]	; (800107c <HAL_RCC_OscConfig+0x314>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	e015      	b.n	8000e28 <HAL_RCC_OscConfig+0xc0>
 8000dfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e00:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e04:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000e08:	fa93 f3a3 	rbit	r3, r3
 8000e0c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000e10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e14:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000e18:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000e1c:	fa93 f3a3 	rbit	r3, r3
 8000e20:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000e24:	4b95      	ldr	r3, [pc, #596]	; (800107c <HAL_RCC_OscConfig+0x314>)
 8000e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e2c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000e30:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000e34:	fa92 f2a2 	rbit	r2, r2
 8000e38:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000e3c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	b2d2      	uxtb	r2, r2
 8000e46:	f042 0220 	orr.w	r2, r2, #32
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	f002 021f 	and.w	r2, r2, #31
 8000e50:	2101      	movs	r1, #1
 8000e52:	fa01 f202 	lsl.w	r2, r1, r2
 8000e56:	4013      	ands	r3, r2
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	f000 8111 	beq.w	8001080 <HAL_RCC_OscConfig+0x318>
 8000e5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e62:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	f040 8108 	bne.w	8001080 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	f000 bfc6 	b.w	8001e02 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e7a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e86:	d106      	bne.n	8000e96 <HAL_RCC_OscConfig+0x12e>
 8000e88:	4b7c      	ldr	r3, [pc, #496]	; (800107c <HAL_RCC_OscConfig+0x314>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a7b      	ldr	r2, [pc, #492]	; (800107c <HAL_RCC_OscConfig+0x314>)
 8000e8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e92:	6013      	str	r3, [r2, #0]
 8000e94:	e036      	b.n	8000f04 <HAL_RCC_OscConfig+0x19c>
 8000e96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e9a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d10c      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x158>
 8000ea6:	4b75      	ldr	r3, [pc, #468]	; (800107c <HAL_RCC_OscConfig+0x314>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a74      	ldr	r2, [pc, #464]	; (800107c <HAL_RCC_OscConfig+0x314>)
 8000eac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eb0:	6013      	str	r3, [r2, #0]
 8000eb2:	4b72      	ldr	r3, [pc, #456]	; (800107c <HAL_RCC_OscConfig+0x314>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a71      	ldr	r2, [pc, #452]	; (800107c <HAL_RCC_OscConfig+0x314>)
 8000eb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ebc:	6013      	str	r3, [r2, #0]
 8000ebe:	e021      	b.n	8000f04 <HAL_RCC_OscConfig+0x19c>
 8000ec0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ec4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ed0:	d10c      	bne.n	8000eec <HAL_RCC_OscConfig+0x184>
 8000ed2:	4b6a      	ldr	r3, [pc, #424]	; (800107c <HAL_RCC_OscConfig+0x314>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a69      	ldr	r2, [pc, #420]	; (800107c <HAL_RCC_OscConfig+0x314>)
 8000ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000edc:	6013      	str	r3, [r2, #0]
 8000ede:	4b67      	ldr	r3, [pc, #412]	; (800107c <HAL_RCC_OscConfig+0x314>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a66      	ldr	r2, [pc, #408]	; (800107c <HAL_RCC_OscConfig+0x314>)
 8000ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ee8:	6013      	str	r3, [r2, #0]
 8000eea:	e00b      	b.n	8000f04 <HAL_RCC_OscConfig+0x19c>
 8000eec:	4b63      	ldr	r3, [pc, #396]	; (800107c <HAL_RCC_OscConfig+0x314>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a62      	ldr	r2, [pc, #392]	; (800107c <HAL_RCC_OscConfig+0x314>)
 8000ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ef6:	6013      	str	r3, [r2, #0]
 8000ef8:	4b60      	ldr	r3, [pc, #384]	; (800107c <HAL_RCC_OscConfig+0x314>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a5f      	ldr	r2, [pc, #380]	; (800107c <HAL_RCC_OscConfig+0x314>)
 8000efe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f02:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f08:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d059      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f14:	f7ff fc98 	bl	8000848 <HAL_GetTick>
 8000f18:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f1c:	e00a      	b.n	8000f34 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f1e:	f7ff fc93 	bl	8000848 <HAL_GetTick>
 8000f22:	4602      	mov	r2, r0
 8000f24:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	2b64      	cmp	r3, #100	; 0x64
 8000f2c:	d902      	bls.n	8000f34 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	f000 bf67 	b.w	8001e02 <HAL_RCC_OscConfig+0x109a>
 8000f34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f38:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f3c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000f40:	fa93 f3a3 	rbit	r3, r3
 8000f44:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000f48:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f4c:	fab3 f383 	clz	r3, r3
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	095b      	lsrs	r3, r3, #5
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	f043 0301 	orr.w	r3, r3, #1
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d102      	bne.n	8000f66 <HAL_RCC_OscConfig+0x1fe>
 8000f60:	4b46      	ldr	r3, [pc, #280]	; (800107c <HAL_RCC_OscConfig+0x314>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	e015      	b.n	8000f92 <HAL_RCC_OscConfig+0x22a>
 8000f66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f6a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f6e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000f72:	fa93 f3a3 	rbit	r3, r3
 8000f76:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000f7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f7e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f82:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000f86:	fa93 f3a3 	rbit	r3, r3
 8000f8a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f8e:	4b3b      	ldr	r3, [pc, #236]	; (800107c <HAL_RCC_OscConfig+0x314>)
 8000f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f96:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000f9a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000f9e:	fa92 f2a2 	rbit	r2, r2
 8000fa2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000fa6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000faa:	fab2 f282 	clz	r2, r2
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	f042 0220 	orr.w	r2, r2, #32
 8000fb4:	b2d2      	uxtb	r2, r2
 8000fb6:	f002 021f 	and.w	r2, r2, #31
 8000fba:	2101      	movs	r1, #1
 8000fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d0ab      	beq.n	8000f1e <HAL_RCC_OscConfig+0x1b6>
 8000fc6:	e05c      	b.n	8001082 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc8:	f7ff fc3e 	bl	8000848 <HAL_GetTick>
 8000fcc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fd0:	e00a      	b.n	8000fe8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fd2:	f7ff fc39 	bl	8000848 <HAL_GetTick>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	2b64      	cmp	r3, #100	; 0x64
 8000fe0:	d902      	bls.n	8000fe8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	f000 bf0d 	b.w	8001e02 <HAL_RCC_OscConfig+0x109a>
 8000fe8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fec:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000ff4:	fa93 f3a3 	rbit	r3, r3
 8000ff8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000ffc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001000:	fab3 f383 	clz	r3, r3
 8001004:	b2db      	uxtb	r3, r3
 8001006:	095b      	lsrs	r3, r3, #5
 8001008:	b2db      	uxtb	r3, r3
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	b2db      	uxtb	r3, r3
 8001010:	2b01      	cmp	r3, #1
 8001012:	d102      	bne.n	800101a <HAL_RCC_OscConfig+0x2b2>
 8001014:	4b19      	ldr	r3, [pc, #100]	; (800107c <HAL_RCC_OscConfig+0x314>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	e015      	b.n	8001046 <HAL_RCC_OscConfig+0x2de>
 800101a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800101e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001022:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001026:	fa93 f3a3 	rbit	r3, r3
 800102a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800102e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001032:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001036:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800103a:	fa93 f3a3 	rbit	r3, r3
 800103e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <HAL_RCC_OscConfig+0x314>)
 8001044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001046:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800104a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800104e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001052:	fa92 f2a2 	rbit	r2, r2
 8001056:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800105a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800105e:	fab2 f282 	clz	r2, r2
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	f042 0220 	orr.w	r2, r2, #32
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	f002 021f 	and.w	r2, r2, #31
 800106e:	2101      	movs	r1, #1
 8001070:	fa01 f202 	lsl.w	r2, r1, r2
 8001074:	4013      	ands	r3, r2
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1ab      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x26a>
 800107a:	e002      	b.n	8001082 <HAL_RCC_OscConfig+0x31a>
 800107c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001082:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001086:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	2b00      	cmp	r3, #0
 8001094:	f000 817f 	beq.w	8001396 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001098:	4ba7      	ldr	r3, [pc, #668]	; (8001338 <HAL_RCC_OscConfig+0x5d0>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 030c 	and.w	r3, r3, #12
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d00c      	beq.n	80010be <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010a4:	4ba4      	ldr	r3, [pc, #656]	; (8001338 <HAL_RCC_OscConfig+0x5d0>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 030c 	and.w	r3, r3, #12
 80010ac:	2b08      	cmp	r3, #8
 80010ae:	d173      	bne.n	8001198 <HAL_RCC_OscConfig+0x430>
 80010b0:	4ba1      	ldr	r3, [pc, #644]	; (8001338 <HAL_RCC_OscConfig+0x5d0>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80010b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010bc:	d16c      	bne.n	8001198 <HAL_RCC_OscConfig+0x430>
 80010be:	2302      	movs	r3, #2
 80010c0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80010c8:	fa93 f3a3 	rbit	r3, r3
 80010cc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80010d0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010d4:	fab3 f383 	clz	r3, r3
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	095b      	lsrs	r3, r3, #5
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	f043 0301 	orr.w	r3, r3, #1
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d102      	bne.n	80010ee <HAL_RCC_OscConfig+0x386>
 80010e8:	4b93      	ldr	r3, [pc, #588]	; (8001338 <HAL_RCC_OscConfig+0x5d0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	e013      	b.n	8001116 <HAL_RCC_OscConfig+0x3ae>
 80010ee:	2302      	movs	r3, #2
 80010f0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80010f8:	fa93 f3a3 	rbit	r3, r3
 80010fc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001100:	2302      	movs	r3, #2
 8001102:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001106:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800110a:	fa93 f3a3 	rbit	r3, r3
 800110e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001112:	4b89      	ldr	r3, [pc, #548]	; (8001338 <HAL_RCC_OscConfig+0x5d0>)
 8001114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001116:	2202      	movs	r2, #2
 8001118:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800111c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001120:	fa92 f2a2 	rbit	r2, r2
 8001124:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001128:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800112c:	fab2 f282 	clz	r2, r2
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	f042 0220 	orr.w	r2, r2, #32
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	f002 021f 	and.w	r2, r2, #31
 800113c:	2101      	movs	r1, #1
 800113e:	fa01 f202 	lsl.w	r2, r1, r2
 8001142:	4013      	ands	r3, r2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d00a      	beq.n	800115e <HAL_RCC_OscConfig+0x3f6>
 8001148:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800114c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d002      	beq.n	800115e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	f000 be52 	b.w	8001e02 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800115e:	4b76      	ldr	r3, [pc, #472]	; (8001338 <HAL_RCC_OscConfig+0x5d0>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001166:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800116a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	691b      	ldr	r3, [r3, #16]
 8001172:	21f8      	movs	r1, #248	; 0xf8
 8001174:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001178:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800117c:	fa91 f1a1 	rbit	r1, r1
 8001180:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001184:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001188:	fab1 f181 	clz	r1, r1
 800118c:	b2c9      	uxtb	r1, r1
 800118e:	408b      	lsls	r3, r1
 8001190:	4969      	ldr	r1, [pc, #420]	; (8001338 <HAL_RCC_OscConfig+0x5d0>)
 8001192:	4313      	orrs	r3, r2
 8001194:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001196:	e0fe      	b.n	8001396 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001198:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800119c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	f000 8088 	beq.w	80012ba <HAL_RCC_OscConfig+0x552>
 80011aa:	2301      	movs	r3, #1
 80011ac:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80011b4:	fa93 f3a3 	rbit	r3, r3
 80011b8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80011bc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011c0:	fab3 f383 	clz	r3, r3
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011ca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	461a      	mov	r2, r3
 80011d2:	2301      	movs	r3, #1
 80011d4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d6:	f7ff fb37 	bl	8000848 <HAL_GetTick>
 80011da:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011de:	e00a      	b.n	80011f6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011e0:	f7ff fb32 	bl	8000848 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d902      	bls.n	80011f6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	f000 be06 	b.w	8001e02 <HAL_RCC_OscConfig+0x109a>
 80011f6:	2302      	movs	r3, #2
 80011f8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001200:	fa93 f3a3 	rbit	r3, r3
 8001204:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001208:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800120c:	fab3 f383 	clz	r3, r3
 8001210:	b2db      	uxtb	r3, r3
 8001212:	095b      	lsrs	r3, r3, #5
 8001214:	b2db      	uxtb	r3, r3
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	b2db      	uxtb	r3, r3
 800121c:	2b01      	cmp	r3, #1
 800121e:	d102      	bne.n	8001226 <HAL_RCC_OscConfig+0x4be>
 8001220:	4b45      	ldr	r3, [pc, #276]	; (8001338 <HAL_RCC_OscConfig+0x5d0>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	e013      	b.n	800124e <HAL_RCC_OscConfig+0x4e6>
 8001226:	2302      	movs	r3, #2
 8001228:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800122c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001230:	fa93 f3a3 	rbit	r3, r3
 8001234:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001238:	2302      	movs	r3, #2
 800123a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800123e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001242:	fa93 f3a3 	rbit	r3, r3
 8001246:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800124a:	4b3b      	ldr	r3, [pc, #236]	; (8001338 <HAL_RCC_OscConfig+0x5d0>)
 800124c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124e:	2202      	movs	r2, #2
 8001250:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001254:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001258:	fa92 f2a2 	rbit	r2, r2
 800125c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001260:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001264:	fab2 f282 	clz	r2, r2
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	f042 0220 	orr.w	r2, r2, #32
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	f002 021f 	and.w	r2, r2, #31
 8001274:	2101      	movs	r1, #1
 8001276:	fa01 f202 	lsl.w	r2, r1, r2
 800127a:	4013      	ands	r3, r2
 800127c:	2b00      	cmp	r3, #0
 800127e:	d0af      	beq.n	80011e0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001280:	4b2d      	ldr	r3, [pc, #180]	; (8001338 <HAL_RCC_OscConfig+0x5d0>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001288:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800128c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	21f8      	movs	r1, #248	; 0xf8
 8001296:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800129e:	fa91 f1a1 	rbit	r1, r1
 80012a2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80012a6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80012aa:	fab1 f181 	clz	r1, r1
 80012ae:	b2c9      	uxtb	r1, r1
 80012b0:	408b      	lsls	r3, r1
 80012b2:	4921      	ldr	r1, [pc, #132]	; (8001338 <HAL_RCC_OscConfig+0x5d0>)
 80012b4:	4313      	orrs	r3, r2
 80012b6:	600b      	str	r3, [r1, #0]
 80012b8:	e06d      	b.n	8001396 <HAL_RCC_OscConfig+0x62e>
 80012ba:	2301      	movs	r3, #1
 80012bc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80012c4:	fa93 f3a3 	rbit	r3, r3
 80012c8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80012cc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012d0:	fab3 f383 	clz	r3, r3
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012da:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	461a      	mov	r2, r3
 80012e2:	2300      	movs	r3, #0
 80012e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e6:	f7ff faaf 	bl	8000848 <HAL_GetTick>
 80012ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ee:	e00a      	b.n	8001306 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012f0:	f7ff faaa 	bl	8000848 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d902      	bls.n	8001306 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	f000 bd7e 	b.w	8001e02 <HAL_RCC_OscConfig+0x109a>
 8001306:	2302      	movs	r3, #2
 8001308:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001310:	fa93 f3a3 	rbit	r3, r3
 8001314:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001318:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800131c:	fab3 f383 	clz	r3, r3
 8001320:	b2db      	uxtb	r3, r3
 8001322:	095b      	lsrs	r3, r3, #5
 8001324:	b2db      	uxtb	r3, r3
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b01      	cmp	r3, #1
 800132e:	d105      	bne.n	800133c <HAL_RCC_OscConfig+0x5d4>
 8001330:	4b01      	ldr	r3, [pc, #4]	; (8001338 <HAL_RCC_OscConfig+0x5d0>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	e016      	b.n	8001364 <HAL_RCC_OscConfig+0x5fc>
 8001336:	bf00      	nop
 8001338:	40021000 	.word	0x40021000
 800133c:	2302      	movs	r3, #2
 800133e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001342:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001346:	fa93 f3a3 	rbit	r3, r3
 800134a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800134e:	2302      	movs	r3, #2
 8001350:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001354:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001358:	fa93 f3a3 	rbit	r3, r3
 800135c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001360:	4bbf      	ldr	r3, [pc, #764]	; (8001660 <HAL_RCC_OscConfig+0x8f8>)
 8001362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001364:	2202      	movs	r2, #2
 8001366:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800136a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800136e:	fa92 f2a2 	rbit	r2, r2
 8001372:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001376:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800137a:	fab2 f282 	clz	r2, r2
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	f042 0220 	orr.w	r2, r2, #32
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	f002 021f 	and.w	r2, r2, #31
 800138a:	2101      	movs	r1, #1
 800138c:	fa01 f202 	lsl.w	r2, r1, r2
 8001390:	4013      	ands	r3, r2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1ac      	bne.n	80012f0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001396:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800139a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0308 	and.w	r3, r3, #8
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f000 8113 	beq.w	80015d2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	695b      	ldr	r3, [r3, #20]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d07c      	beq.n	80014b6 <HAL_RCC_OscConfig+0x74e>
 80013bc:	2301      	movs	r3, #1
 80013be:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80013c6:	fa93 f3a3 	rbit	r3, r3
 80013ca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80013ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013d2:	fab3 f383 	clz	r3, r3
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	461a      	mov	r2, r3
 80013da:	4ba2      	ldr	r3, [pc, #648]	; (8001664 <HAL_RCC_OscConfig+0x8fc>)
 80013dc:	4413      	add	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	461a      	mov	r2, r3
 80013e2:	2301      	movs	r3, #1
 80013e4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e6:	f7ff fa2f 	bl	8000848 <HAL_GetTick>
 80013ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ee:	e00a      	b.n	8001406 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013f0:	f7ff fa2a 	bl	8000848 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d902      	bls.n	8001406 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	f000 bcfe 	b.w	8001e02 <HAL_RCC_OscConfig+0x109a>
 8001406:	2302      	movs	r3, #2
 8001408:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001410:	fa93 f2a3 	rbit	r2, r3
 8001414:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001418:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001422:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001426:	2202      	movs	r2, #2
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800142e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	fa93 f2a3 	rbit	r2, r3
 8001438:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800143c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001446:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800144a:	2202      	movs	r2, #2
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001452:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	fa93 f2a3 	rbit	r2, r3
 800145c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001460:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001464:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001466:	4b7e      	ldr	r3, [pc, #504]	; (8001660 <HAL_RCC_OscConfig+0x8f8>)
 8001468:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800146a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800146e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001472:	2102      	movs	r1, #2
 8001474:	6019      	str	r1, [r3, #0]
 8001476:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800147a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	fa93 f1a3 	rbit	r1, r3
 8001484:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001488:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800148c:	6019      	str	r1, [r3, #0]
  return result;
 800148e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001492:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	fab3 f383 	clz	r3, r3
 800149c:	b2db      	uxtb	r3, r3
 800149e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	f003 031f 	and.w	r3, r3, #31
 80014a8:	2101      	movs	r1, #1
 80014aa:	fa01 f303 	lsl.w	r3, r1, r3
 80014ae:	4013      	ands	r3, r2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d09d      	beq.n	80013f0 <HAL_RCC_OscConfig+0x688>
 80014b4:	e08d      	b.n	80015d2 <HAL_RCC_OscConfig+0x86a>
 80014b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014ba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014be:	2201      	movs	r2, #1
 80014c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014c6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	fa93 f2a3 	rbit	r2, r3
 80014d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014d4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80014d8:	601a      	str	r2, [r3, #0]
  return result;
 80014da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014de:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80014e2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e4:	fab3 f383 	clz	r3, r3
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	461a      	mov	r2, r3
 80014ec:	4b5d      	ldr	r3, [pc, #372]	; (8001664 <HAL_RCC_OscConfig+0x8fc>)
 80014ee:	4413      	add	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	461a      	mov	r2, r3
 80014f4:	2300      	movs	r3, #0
 80014f6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f8:	f7ff f9a6 	bl	8000848 <HAL_GetTick>
 80014fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001500:	e00a      	b.n	8001518 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001502:	f7ff f9a1 	bl	8000848 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d902      	bls.n	8001518 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	f000 bc75 	b.w	8001e02 <HAL_RCC_OscConfig+0x109a>
 8001518:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800151c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001520:	2202      	movs	r2, #2
 8001522:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001524:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001528:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	fa93 f2a3 	rbit	r2, r3
 8001532:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001536:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001540:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001544:	2202      	movs	r2, #2
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800154c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	fa93 f2a3 	rbit	r2, r3
 8001556:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800155a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001564:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001568:	2202      	movs	r2, #2
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001570:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	fa93 f2a3 	rbit	r2, r3
 800157a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800157e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001582:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001584:	4b36      	ldr	r3, [pc, #216]	; (8001660 <HAL_RCC_OscConfig+0x8f8>)
 8001586:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001588:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800158c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001590:	2102      	movs	r1, #2
 8001592:	6019      	str	r1, [r3, #0]
 8001594:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001598:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	fa93 f1a3 	rbit	r1, r3
 80015a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015a6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80015aa:	6019      	str	r1, [r3, #0]
  return result;
 80015ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015b0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	fab3 f383 	clz	r3, r3
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	f003 031f 	and.w	r3, r3, #31
 80015c6:	2101      	movs	r1, #1
 80015c8:	fa01 f303 	lsl.w	r3, r1, r3
 80015cc:	4013      	ands	r3, r2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d197      	bne.n	8001502 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 81a5 	beq.w	8001932 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e8:	2300      	movs	r3, #0
 80015ea:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ee:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <HAL_RCC_OscConfig+0x8f8>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d116      	bne.n	8001628 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015fa:	4b19      	ldr	r3, [pc, #100]	; (8001660 <HAL_RCC_OscConfig+0x8f8>)
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	4a18      	ldr	r2, [pc, #96]	; (8001660 <HAL_RCC_OscConfig+0x8f8>)
 8001600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001604:	61d3      	str	r3, [r2, #28]
 8001606:	4b16      	ldr	r3, [pc, #88]	; (8001660 <HAL_RCC_OscConfig+0x8f8>)
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800160e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001612:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800161c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001620:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001622:	2301      	movs	r3, #1
 8001624:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <HAL_RCC_OscConfig+0x900>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001630:	2b00      	cmp	r3, #0
 8001632:	d121      	bne.n	8001678 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <HAL_RCC_OscConfig+0x900>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a0b      	ldr	r2, [pc, #44]	; (8001668 <HAL_RCC_OscConfig+0x900>)
 800163a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001640:	f7ff f902 	bl	8000848 <HAL_GetTick>
 8001644:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001648:	e010      	b.n	800166c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800164a:	f7ff f8fd 	bl	8000848 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b64      	cmp	r3, #100	; 0x64
 8001658:	d908      	bls.n	800166c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e3d1      	b.n	8001e02 <HAL_RCC_OscConfig+0x109a>
 800165e:	bf00      	nop
 8001660:	40021000 	.word	0x40021000
 8001664:	10908120 	.word	0x10908120
 8001668:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166c:	4b8d      	ldr	r3, [pc, #564]	; (80018a4 <HAL_RCC_OscConfig+0xb3c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0e8      	beq.n	800164a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001678:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800167c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d106      	bne.n	8001696 <HAL_RCC_OscConfig+0x92e>
 8001688:	4b87      	ldr	r3, [pc, #540]	; (80018a8 <HAL_RCC_OscConfig+0xb40>)
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	4a86      	ldr	r2, [pc, #536]	; (80018a8 <HAL_RCC_OscConfig+0xb40>)
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	6213      	str	r3, [r2, #32]
 8001694:	e035      	b.n	8001702 <HAL_RCC_OscConfig+0x99a>
 8001696:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800169a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10c      	bne.n	80016c0 <HAL_RCC_OscConfig+0x958>
 80016a6:	4b80      	ldr	r3, [pc, #512]	; (80018a8 <HAL_RCC_OscConfig+0xb40>)
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	4a7f      	ldr	r2, [pc, #508]	; (80018a8 <HAL_RCC_OscConfig+0xb40>)
 80016ac:	f023 0301 	bic.w	r3, r3, #1
 80016b0:	6213      	str	r3, [r2, #32]
 80016b2:	4b7d      	ldr	r3, [pc, #500]	; (80018a8 <HAL_RCC_OscConfig+0xb40>)
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	4a7c      	ldr	r2, [pc, #496]	; (80018a8 <HAL_RCC_OscConfig+0xb40>)
 80016b8:	f023 0304 	bic.w	r3, r3, #4
 80016bc:	6213      	str	r3, [r2, #32]
 80016be:	e020      	b.n	8001702 <HAL_RCC_OscConfig+0x99a>
 80016c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	2b05      	cmp	r3, #5
 80016ce:	d10c      	bne.n	80016ea <HAL_RCC_OscConfig+0x982>
 80016d0:	4b75      	ldr	r3, [pc, #468]	; (80018a8 <HAL_RCC_OscConfig+0xb40>)
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	4a74      	ldr	r2, [pc, #464]	; (80018a8 <HAL_RCC_OscConfig+0xb40>)
 80016d6:	f043 0304 	orr.w	r3, r3, #4
 80016da:	6213      	str	r3, [r2, #32]
 80016dc:	4b72      	ldr	r3, [pc, #456]	; (80018a8 <HAL_RCC_OscConfig+0xb40>)
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	4a71      	ldr	r2, [pc, #452]	; (80018a8 <HAL_RCC_OscConfig+0xb40>)
 80016e2:	f043 0301 	orr.w	r3, r3, #1
 80016e6:	6213      	str	r3, [r2, #32]
 80016e8:	e00b      	b.n	8001702 <HAL_RCC_OscConfig+0x99a>
 80016ea:	4b6f      	ldr	r3, [pc, #444]	; (80018a8 <HAL_RCC_OscConfig+0xb40>)
 80016ec:	6a1b      	ldr	r3, [r3, #32]
 80016ee:	4a6e      	ldr	r2, [pc, #440]	; (80018a8 <HAL_RCC_OscConfig+0xb40>)
 80016f0:	f023 0301 	bic.w	r3, r3, #1
 80016f4:	6213      	str	r3, [r2, #32]
 80016f6:	4b6c      	ldr	r3, [pc, #432]	; (80018a8 <HAL_RCC_OscConfig+0xb40>)
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	4a6b      	ldr	r2, [pc, #428]	; (80018a8 <HAL_RCC_OscConfig+0xb40>)
 80016fc:	f023 0304 	bic.w	r3, r3, #4
 8001700:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001702:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001706:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 8081 	beq.w	8001816 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001714:	f7ff f898 	bl	8000848 <HAL_GetTick>
 8001718:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800171c:	e00b      	b.n	8001736 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800171e:	f7ff f893 	bl	8000848 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	f241 3288 	movw	r2, #5000	; 0x1388
 800172e:	4293      	cmp	r3, r2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e365      	b.n	8001e02 <HAL_RCC_OscConfig+0x109a>
 8001736:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800173a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800173e:	2202      	movs	r2, #2
 8001740:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001742:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001746:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	fa93 f2a3 	rbit	r2, r3
 8001750:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001754:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800175e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001762:	2202      	movs	r2, #2
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800176a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	fa93 f2a3 	rbit	r2, r3
 8001774:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001778:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800177c:	601a      	str	r2, [r3, #0]
  return result;
 800177e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001782:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001786:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001788:	fab3 f383 	clz	r3, r3
 800178c:	b2db      	uxtb	r3, r3
 800178e:	095b      	lsrs	r3, r3, #5
 8001790:	b2db      	uxtb	r3, r3
 8001792:	f043 0302 	orr.w	r3, r3, #2
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d102      	bne.n	80017a2 <HAL_RCC_OscConfig+0xa3a>
 800179c:	4b42      	ldr	r3, [pc, #264]	; (80018a8 <HAL_RCC_OscConfig+0xb40>)
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	e013      	b.n	80017ca <HAL_RCC_OscConfig+0xa62>
 80017a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017a6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80017aa:	2202      	movs	r2, #2
 80017ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017b2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	fa93 f2a3 	rbit	r2, r3
 80017bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017c0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	4b38      	ldr	r3, [pc, #224]	; (80018a8 <HAL_RCC_OscConfig+0xb40>)
 80017c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80017ce:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80017d2:	2102      	movs	r1, #2
 80017d4:	6011      	str	r1, [r2, #0]
 80017d6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80017da:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80017de:	6812      	ldr	r2, [r2, #0]
 80017e0:	fa92 f1a2 	rbit	r1, r2
 80017e4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80017e8:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80017ec:	6011      	str	r1, [r2, #0]
  return result;
 80017ee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80017f2:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80017f6:	6812      	ldr	r2, [r2, #0]
 80017f8:	fab2 f282 	clz	r2, r2
 80017fc:	b2d2      	uxtb	r2, r2
 80017fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	f002 021f 	and.w	r2, r2, #31
 8001808:	2101      	movs	r1, #1
 800180a:	fa01 f202 	lsl.w	r2, r1, r2
 800180e:	4013      	ands	r3, r2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d084      	beq.n	800171e <HAL_RCC_OscConfig+0x9b6>
 8001814:	e083      	b.n	800191e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001816:	f7ff f817 	bl	8000848 <HAL_GetTick>
 800181a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800181e:	e00b      	b.n	8001838 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001820:	f7ff f812 	bl	8000848 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001830:	4293      	cmp	r3, r2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e2e4      	b.n	8001e02 <HAL_RCC_OscConfig+0x109a>
 8001838:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800183c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001840:	2202      	movs	r2, #2
 8001842:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001844:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001848:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	fa93 f2a3 	rbit	r2, r3
 8001852:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001856:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001860:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001864:	2202      	movs	r2, #2
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800186c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	fa93 f2a3 	rbit	r2, r3
 8001876:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800187a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800187e:	601a      	str	r2, [r3, #0]
  return result;
 8001880:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001884:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001888:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800188a:	fab3 f383 	clz	r3, r3
 800188e:	b2db      	uxtb	r3, r3
 8001890:	095b      	lsrs	r3, r3, #5
 8001892:	b2db      	uxtb	r3, r3
 8001894:	f043 0302 	orr.w	r3, r3, #2
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d106      	bne.n	80018ac <HAL_RCC_OscConfig+0xb44>
 800189e:	4b02      	ldr	r3, [pc, #8]	; (80018a8 <HAL_RCC_OscConfig+0xb40>)
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	e017      	b.n	80018d4 <HAL_RCC_OscConfig+0xb6c>
 80018a4:	40007000 	.word	0x40007000
 80018a8:	40021000 	.word	0x40021000
 80018ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018b0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80018b4:	2202      	movs	r2, #2
 80018b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018bc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	fa93 f2a3 	rbit	r2, r3
 80018c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ca:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	4bb3      	ldr	r3, [pc, #716]	; (8001ba0 <HAL_RCC_OscConfig+0xe38>)
 80018d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80018d8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80018dc:	2102      	movs	r1, #2
 80018de:	6011      	str	r1, [r2, #0]
 80018e0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80018e4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80018e8:	6812      	ldr	r2, [r2, #0]
 80018ea:	fa92 f1a2 	rbit	r1, r2
 80018ee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80018f2:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80018f6:	6011      	str	r1, [r2, #0]
  return result;
 80018f8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80018fc:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001900:	6812      	ldr	r2, [r2, #0]
 8001902:	fab2 f282 	clz	r2, r2
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	f002 021f 	and.w	r2, r2, #31
 8001912:	2101      	movs	r1, #1
 8001914:	fa01 f202 	lsl.w	r2, r1, r2
 8001918:	4013      	ands	r3, r2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d180      	bne.n	8001820 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800191e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001922:	2b01      	cmp	r3, #1
 8001924:	d105      	bne.n	8001932 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001926:	4b9e      	ldr	r3, [pc, #632]	; (8001ba0 <HAL_RCC_OscConfig+0xe38>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	4a9d      	ldr	r2, [pc, #628]	; (8001ba0 <HAL_RCC_OscConfig+0xe38>)
 800192c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001930:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001932:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001936:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 825e 	beq.w	8001e00 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001944:	4b96      	ldr	r3, [pc, #600]	; (8001ba0 <HAL_RCC_OscConfig+0xe38>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 030c 	and.w	r3, r3, #12
 800194c:	2b08      	cmp	r3, #8
 800194e:	f000 821f 	beq.w	8001d90 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001952:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001956:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	2b02      	cmp	r3, #2
 8001960:	f040 8170 	bne.w	8001c44 <HAL_RCC_OscConfig+0xedc>
 8001964:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001968:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800196c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001970:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001972:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001976:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	fa93 f2a3 	rbit	r2, r3
 8001980:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001984:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001988:	601a      	str	r2, [r3, #0]
  return result;
 800198a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800198e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001992:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001994:	fab3 f383 	clz	r3, r3
 8001998:	b2db      	uxtb	r3, r3
 800199a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800199e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	461a      	mov	r2, r3
 80019a6:	2300      	movs	r3, #0
 80019a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019aa:	f7fe ff4d 	bl	8000848 <HAL_GetTick>
 80019ae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b2:	e009      	b.n	80019c8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b4:	f7fe ff48 	bl	8000848 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e21c      	b.n	8001e02 <HAL_RCC_OscConfig+0x109a>
 80019c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019cc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019da:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	fa93 f2a3 	rbit	r2, r3
 80019e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019e8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80019ec:	601a      	str	r2, [r3, #0]
  return result;
 80019ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019f2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80019f6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019f8:	fab3 f383 	clz	r3, r3
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	095b      	lsrs	r3, r3, #5
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d102      	bne.n	8001a12 <HAL_RCC_OscConfig+0xcaa>
 8001a0c:	4b64      	ldr	r3, [pc, #400]	; (8001ba0 <HAL_RCC_OscConfig+0xe38>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	e027      	b.n	8001a62 <HAL_RCC_OscConfig+0xcfa>
 8001a12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a16:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001a1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a24:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	fa93 f2a3 	rbit	r2, r3
 8001a2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a32:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a3c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001a40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a4a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	fa93 f2a3 	rbit	r2, r3
 8001a54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a58:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	4b50      	ldr	r3, [pc, #320]	; (8001ba0 <HAL_RCC_OscConfig+0xe38>)
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a66:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a6a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a6e:	6011      	str	r1, [r2, #0]
 8001a70:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a74:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a78:	6812      	ldr	r2, [r2, #0]
 8001a7a:	fa92 f1a2 	rbit	r1, r2
 8001a7e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a82:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001a86:	6011      	str	r1, [r2, #0]
  return result;
 8001a88:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a8c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001a90:	6812      	ldr	r2, [r2, #0]
 8001a92:	fab2 f282 	clz	r2, r2
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	f042 0220 	orr.w	r2, r2, #32
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	f002 021f 	and.w	r2, r2, #31
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	fa01 f202 	lsl.w	r2, r1, r2
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d182      	bne.n	80019b4 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aae:	4b3c      	ldr	r3, [pc, #240]	; (8001ba0 <HAL_RCC_OscConfig+0xe38>)
 8001ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab2:	f023 020f 	bic.w	r2, r3, #15
 8001ab6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	4937      	ldr	r1, [pc, #220]	; (8001ba0 <HAL_RCC_OscConfig+0xe38>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001ac8:	4b35      	ldr	r3, [pc, #212]	; (8001ba0 <HAL_RCC_OscConfig+0xe38>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001ad0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ad4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6a19      	ldr	r1, [r3, #32]
 8001adc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ae0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	69db      	ldr	r3, [r3, #28]
 8001ae8:	430b      	orrs	r3, r1
 8001aea:	492d      	ldr	r1, [pc, #180]	; (8001ba0 <HAL_RCC_OscConfig+0xe38>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	604b      	str	r3, [r1, #4]
 8001af0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001af4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001af8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001afc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b02:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	fa93 f2a3 	rbit	r2, r3
 8001b0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b10:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b14:	601a      	str	r2, [r3, #0]
  return result;
 8001b16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b1a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b1e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b20:	fab3 f383 	clz	r3, r3
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b2a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	461a      	mov	r2, r3
 8001b32:	2301      	movs	r3, #1
 8001b34:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b36:	f7fe fe87 	bl	8000848 <HAL_GetTick>
 8001b3a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b3e:	e009      	b.n	8001b54 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b40:	f7fe fe82 	bl	8000848 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e156      	b.n	8001e02 <HAL_RCC_OscConfig+0x109a>
 8001b54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b58:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b66:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	fa93 f2a3 	rbit	r2, r3
 8001b70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b74:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b78:	601a      	str	r2, [r3, #0]
  return result;
 8001b7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b7e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b82:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b84:	fab3 f383 	clz	r3, r3
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	095b      	lsrs	r3, r3, #5
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d105      	bne.n	8001ba4 <HAL_RCC_OscConfig+0xe3c>
 8001b98:	4b01      	ldr	r3, [pc, #4]	; (8001ba0 <HAL_RCC_OscConfig+0xe38>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	e02a      	b.n	8001bf4 <HAL_RCC_OscConfig+0xe8c>
 8001b9e:	bf00      	nop
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ba8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001bac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bb6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	fa93 f2a3 	rbit	r2, r3
 8001bc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bce:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001bd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bdc:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	fa93 f2a3 	rbit	r2, r3
 8001be6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bea:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	4b86      	ldr	r3, [pc, #536]	; (8001e0c <HAL_RCC_OscConfig+0x10a4>)
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bf8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001bfc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c00:	6011      	str	r1, [r2, #0]
 8001c02:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c06:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c0a:	6812      	ldr	r2, [r2, #0]
 8001c0c:	fa92 f1a2 	rbit	r1, r2
 8001c10:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c14:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001c18:	6011      	str	r1, [r2, #0]
  return result;
 8001c1a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c1e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	fab2 f282 	clz	r2, r2
 8001c28:	b2d2      	uxtb	r2, r2
 8001c2a:	f042 0220 	orr.w	r2, r2, #32
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	f002 021f 	and.w	r2, r2, #31
 8001c34:	2101      	movs	r1, #1
 8001c36:	fa01 f202 	lsl.w	r2, r1, r2
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f43f af7f 	beq.w	8001b40 <HAL_RCC_OscConfig+0xdd8>
 8001c42:	e0dd      	b.n	8001e00 <HAL_RCC_OscConfig+0x1098>
 8001c44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c48:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c56:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	fa93 f2a3 	rbit	r2, r3
 8001c60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c64:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c68:	601a      	str	r2, [r3, #0]
  return result;
 8001c6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c6e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c72:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c74:	fab3 f383 	clz	r3, r3
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c7e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	461a      	mov	r2, r3
 8001c86:	2300      	movs	r3, #0
 8001c88:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8a:	f7fe fddd 	bl	8000848 <HAL_GetTick>
 8001c8e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c92:	e009      	b.n	8001ca8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c94:	f7fe fdd8 	bl	8000848 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e0ac      	b.n	8001e02 <HAL_RCC_OscConfig+0x109a>
 8001ca8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cac:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001cb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cba:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	fa93 f2a3 	rbit	r2, r3
 8001cc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cc8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001ccc:	601a      	str	r2, [r3, #0]
  return result;
 8001cce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001cd6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd8:	fab3 f383 	clz	r3, r3
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	095b      	lsrs	r3, r3, #5
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d102      	bne.n	8001cf2 <HAL_RCC_OscConfig+0xf8a>
 8001cec:	4b47      	ldr	r3, [pc, #284]	; (8001e0c <HAL_RCC_OscConfig+0x10a4>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	e027      	b.n	8001d42 <HAL_RCC_OscConfig+0xfda>
 8001cf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001cfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d04:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	fa93 f2a3 	rbit	r2, r3
 8001d0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d12:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d1c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001d20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d2a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	fa93 f2a3 	rbit	r2, r3
 8001d34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d38:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	4b33      	ldr	r3, [pc, #204]	; (8001e0c <HAL_RCC_OscConfig+0x10a4>)
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d42:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d46:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d4a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d4e:	6011      	str	r1, [r2, #0]
 8001d50:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d54:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d58:	6812      	ldr	r2, [r2, #0]
 8001d5a:	fa92 f1a2 	rbit	r1, r2
 8001d5e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d62:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001d66:	6011      	str	r1, [r2, #0]
  return result;
 8001d68:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d6c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001d70:	6812      	ldr	r2, [r2, #0]
 8001d72:	fab2 f282 	clz	r2, r2
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	f042 0220 	orr.w	r2, r2, #32
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	f002 021f 	and.w	r2, r2, #31
 8001d82:	2101      	movs	r1, #1
 8001d84:	fa01 f202 	lsl.w	r2, r1, r2
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d182      	bne.n	8001c94 <HAL_RCC_OscConfig+0xf2c>
 8001d8e:	e037      	b.n	8001e00 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d94:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d101      	bne.n	8001da4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e02e      	b.n	8001e02 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001da4:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <HAL_RCC_OscConfig+0x10a4>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001dac:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <HAL_RCC_OscConfig+0x10a4>)
 8001dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001db4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001db8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001dbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d117      	bne.n	8001dfc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001dcc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001dd0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d10b      	bne.n	8001dfc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001de4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001de8:	f003 020f 	and.w	r2, r3, #15
 8001dec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d001      	beq.n	8001e00 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e000      	b.n	8001e02 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40021000 	.word	0x40021000

08001e10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b09e      	sub	sp, #120	; 0x78
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e162      	b.n	80020ee <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e28:	4b90      	ldr	r3, [pc, #576]	; (800206c <HAL_RCC_ClockConfig+0x25c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d910      	bls.n	8001e58 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e36:	4b8d      	ldr	r3, [pc, #564]	; (800206c <HAL_RCC_ClockConfig+0x25c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f023 0207 	bic.w	r2, r3, #7
 8001e3e:	498b      	ldr	r1, [pc, #556]	; (800206c <HAL_RCC_ClockConfig+0x25c>)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e46:	4b89      	ldr	r3, [pc, #548]	; (800206c <HAL_RCC_ClockConfig+0x25c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d001      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e14a      	b.n	80020ee <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d008      	beq.n	8001e76 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e64:	4b82      	ldr	r3, [pc, #520]	; (8002070 <HAL_RCC_ClockConfig+0x260>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	497f      	ldr	r1, [pc, #508]	; (8002070 <HAL_RCC_ClockConfig+0x260>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 80dc 	beq.w	800203c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d13c      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xf6>
 8001e8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e90:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e94:	fa93 f3a3 	rbit	r3, r3
 8001e98:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9c:	fab3 f383 	clz	r3, r3
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d102      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0xa6>
 8001eb0:	4b6f      	ldr	r3, [pc, #444]	; (8002070 <HAL_RCC_ClockConfig+0x260>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	e00f      	b.n	8001ed6 <HAL_RCC_ClockConfig+0xc6>
 8001eb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ebe:	fa93 f3a3 	rbit	r3, r3
 8001ec2:	667b      	str	r3, [r7, #100]	; 0x64
 8001ec4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ec8:	663b      	str	r3, [r7, #96]	; 0x60
 8001eca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ecc:	fa93 f3a3 	rbit	r3, r3
 8001ed0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ed2:	4b67      	ldr	r3, [pc, #412]	; (8002070 <HAL_RCC_ClockConfig+0x260>)
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001eda:	65ba      	str	r2, [r7, #88]	; 0x58
 8001edc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ede:	fa92 f2a2 	rbit	r2, r2
 8001ee2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001ee4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ee6:	fab2 f282 	clz	r2, r2
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	f042 0220 	orr.w	r2, r2, #32
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	f002 021f 	and.w	r2, r2, #31
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8001efc:	4013      	ands	r3, r2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d17b      	bne.n	8001ffa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e0f3      	b.n	80020ee <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d13c      	bne.n	8001f88 <HAL_RCC_ClockConfig+0x178>
 8001f0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f12:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f16:	fa93 f3a3 	rbit	r3, r3
 8001f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f1e:	fab3 f383 	clz	r3, r3
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	095b      	lsrs	r3, r3, #5
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d102      	bne.n	8001f38 <HAL_RCC_ClockConfig+0x128>
 8001f32:	4b4f      	ldr	r3, [pc, #316]	; (8002070 <HAL_RCC_ClockConfig+0x260>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	e00f      	b.n	8001f58 <HAL_RCC_ClockConfig+0x148>
 8001f38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f3c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f40:	fa93 f3a3 	rbit	r3, r3
 8001f44:	647b      	str	r3, [r7, #68]	; 0x44
 8001f46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f4a:	643b      	str	r3, [r7, #64]	; 0x40
 8001f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f4e:	fa93 f3a3 	rbit	r3, r3
 8001f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f54:	4b46      	ldr	r3, [pc, #280]	; (8002070 <HAL_RCC_ClockConfig+0x260>)
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f5c:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f60:	fa92 f2a2 	rbit	r2, r2
 8001f64:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001f66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f68:	fab2 f282 	clz	r2, r2
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	f042 0220 	orr.w	r2, r2, #32
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	f002 021f 	and.w	r2, r2, #31
 8001f78:	2101      	movs	r1, #1
 8001f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f7e:	4013      	ands	r3, r2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d13a      	bne.n	8001ffa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e0b2      	b.n	80020ee <HAL_RCC_ClockConfig+0x2de>
 8001f88:	2302      	movs	r3, #2
 8001f8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8e:	fa93 f3a3 	rbit	r3, r3
 8001f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f96:	fab3 f383 	clz	r3, r3
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	095b      	lsrs	r3, r3, #5
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d102      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0x1a0>
 8001faa:	4b31      	ldr	r3, [pc, #196]	; (8002070 <HAL_RCC_ClockConfig+0x260>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	e00d      	b.n	8001fcc <HAL_RCC_ClockConfig+0x1bc>
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb6:	fa93 f3a3 	rbit	r3, r3
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	623b      	str	r3, [r7, #32]
 8001fc0:	6a3b      	ldr	r3, [r7, #32]
 8001fc2:	fa93 f3a3 	rbit	r3, r3
 8001fc6:	61fb      	str	r3, [r7, #28]
 8001fc8:	4b29      	ldr	r3, [pc, #164]	; (8002070 <HAL_RCC_ClockConfig+0x260>)
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	2202      	movs	r2, #2
 8001fce:	61ba      	str	r2, [r7, #24]
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	fa92 f2a2 	rbit	r2, r2
 8001fd6:	617a      	str	r2, [r7, #20]
  return result;
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	fab2 f282 	clz	r2, r2
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	f042 0220 	orr.w	r2, r2, #32
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	f002 021f 	and.w	r2, r2, #31
 8001fea:	2101      	movs	r1, #1
 8001fec:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e079      	b.n	80020ee <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ffa:	4b1d      	ldr	r3, [pc, #116]	; (8002070 <HAL_RCC_ClockConfig+0x260>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f023 0203 	bic.w	r2, r3, #3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	491a      	ldr	r1, [pc, #104]	; (8002070 <HAL_RCC_ClockConfig+0x260>)
 8002008:	4313      	orrs	r3, r2
 800200a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800200c:	f7fe fc1c 	bl	8000848 <HAL_GetTick>
 8002010:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002012:	e00a      	b.n	800202a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002014:	f7fe fc18 	bl	8000848 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002022:	4293      	cmp	r3, r2
 8002024:	d901      	bls.n	800202a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e061      	b.n	80020ee <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202a:	4b11      	ldr	r3, [pc, #68]	; (8002070 <HAL_RCC_ClockConfig+0x260>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 020c 	and.w	r2, r3, #12
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	429a      	cmp	r2, r3
 800203a:	d1eb      	bne.n	8002014 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800203c:	4b0b      	ldr	r3, [pc, #44]	; (800206c <HAL_RCC_ClockConfig+0x25c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	429a      	cmp	r2, r3
 8002048:	d214      	bcs.n	8002074 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204a:	4b08      	ldr	r3, [pc, #32]	; (800206c <HAL_RCC_ClockConfig+0x25c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f023 0207 	bic.w	r2, r3, #7
 8002052:	4906      	ldr	r1, [pc, #24]	; (800206c <HAL_RCC_ClockConfig+0x25c>)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	4313      	orrs	r3, r2
 8002058:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800205a:	4b04      	ldr	r3, [pc, #16]	; (800206c <HAL_RCC_ClockConfig+0x25c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	429a      	cmp	r2, r3
 8002066:	d005      	beq.n	8002074 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e040      	b.n	80020ee <HAL_RCC_ClockConfig+0x2de>
 800206c:	40022000 	.word	0x40022000
 8002070:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	d008      	beq.n	8002092 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002080:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <HAL_RCC_ClockConfig+0x2e8>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	491a      	ldr	r1, [pc, #104]	; (80020f8 <HAL_RCC_ClockConfig+0x2e8>)
 800208e:	4313      	orrs	r3, r2
 8002090:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	2b00      	cmp	r3, #0
 800209c:	d009      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800209e:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <HAL_RCC_ClockConfig+0x2e8>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4912      	ldr	r1, [pc, #72]	; (80020f8 <HAL_RCC_ClockConfig+0x2e8>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020b2:	f000 f829 	bl	8002108 <HAL_RCC_GetSysClockFreq>
 80020b6:	4601      	mov	r1, r0
 80020b8:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <HAL_RCC_ClockConfig+0x2e8>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020c0:	22f0      	movs	r2, #240	; 0xf0
 80020c2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	fa92 f2a2 	rbit	r2, r2
 80020ca:	60fa      	str	r2, [r7, #12]
  return result;
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	fab2 f282 	clz	r2, r2
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	40d3      	lsrs	r3, r2
 80020d6:	4a09      	ldr	r2, [pc, #36]	; (80020fc <HAL_RCC_ClockConfig+0x2ec>)
 80020d8:	5cd3      	ldrb	r3, [r2, r3]
 80020da:	fa21 f303 	lsr.w	r3, r1, r3
 80020de:	4a08      	ldr	r2, [pc, #32]	; (8002100 <HAL_RCC_ClockConfig+0x2f0>)
 80020e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80020e2:	4b08      	ldr	r3, [pc, #32]	; (8002104 <HAL_RCC_ClockConfig+0x2f4>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe fab8 	bl	800065c <HAL_InitTick>
  
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3778      	adds	r7, #120	; 0x78
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40021000 	.word	0x40021000
 80020fc:	08004f20 	.word	0x08004f20
 8002100:	20000000 	.word	0x20000000
 8002104:	20000004 	.word	0x20000004

08002108 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002108:	b480      	push	{r7}
 800210a:	b08b      	sub	sp, #44	; 0x2c
 800210c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
 8002112:	2300      	movs	r3, #0
 8002114:	61bb      	str	r3, [r7, #24]
 8002116:	2300      	movs	r3, #0
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800211e:	2300      	movs	r3, #0
 8002120:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002122:	4b2a      	ldr	r3, [pc, #168]	; (80021cc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	f003 030c 	and.w	r3, r3, #12
 800212e:	2b04      	cmp	r3, #4
 8002130:	d002      	beq.n	8002138 <HAL_RCC_GetSysClockFreq+0x30>
 8002132:	2b08      	cmp	r3, #8
 8002134:	d003      	beq.n	800213e <HAL_RCC_GetSysClockFreq+0x36>
 8002136:	e03f      	b.n	80021b8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002138:	4b25      	ldr	r3, [pc, #148]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800213a:	623b      	str	r3, [r7, #32]
      break;
 800213c:	e03f      	b.n	80021be <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002144:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002148:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	fa92 f2a2 	rbit	r2, r2
 8002150:	607a      	str	r2, [r7, #4]
  return result;
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	fab2 f282 	clz	r2, r2
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	40d3      	lsrs	r3, r2
 800215c:	4a1d      	ldr	r2, [pc, #116]	; (80021d4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800215e:	5cd3      	ldrb	r3, [r2, r3]
 8002160:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002162:	4b1a      	ldr	r3, [pc, #104]	; (80021cc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	220f      	movs	r2, #15
 800216c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	fa92 f2a2 	rbit	r2, r2
 8002174:	60fa      	str	r2, [r7, #12]
  return result;
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	fab2 f282 	clz	r2, r2
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	40d3      	lsrs	r3, r2
 8002180:	4a15      	ldr	r2, [pc, #84]	; (80021d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002182:	5cd3      	ldrb	r3, [r2, r3]
 8002184:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d008      	beq.n	80021a2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002190:	4a0f      	ldr	r2, [pc, #60]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	fbb2 f2f3 	udiv	r2, r2, r3
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	fb02 f303 	mul.w	r3, r2, r3
 800219e:	627b      	str	r3, [r7, #36]	; 0x24
 80021a0:	e007      	b.n	80021b2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021a2:	4a0b      	ldr	r2, [pc, #44]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	fb02 f303 	mul.w	r3, r2, r3
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	623b      	str	r3, [r7, #32]
      break;
 80021b6:	e002      	b.n	80021be <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021b8:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80021ba:	623b      	str	r3, [r7, #32]
      break;
 80021bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021be:	6a3b      	ldr	r3, [r7, #32]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	372c      	adds	r7, #44	; 0x2c
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	40021000 	.word	0x40021000
 80021d0:	007a1200 	.word	0x007a1200
 80021d4:	08004f38 	.word	0x08004f38
 80021d8:	08004f48 	.word	0x08004f48

080021dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021e0:	4b03      	ldr	r3, [pc, #12]	; (80021f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80021e2:	681b      	ldr	r3, [r3, #0]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	20000000 	.word	0x20000000

080021f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80021fa:	f7ff ffef 	bl	80021dc <HAL_RCC_GetHCLKFreq>
 80021fe:	4601      	mov	r1, r0
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002208:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800220c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	fa92 f2a2 	rbit	r2, r2
 8002214:	603a      	str	r2, [r7, #0]
  return result;
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	fab2 f282 	clz	r2, r2
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	40d3      	lsrs	r3, r2
 8002220:	4a04      	ldr	r2, [pc, #16]	; (8002234 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002222:	5cd3      	ldrb	r3, [r2, r3]
 8002224:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002228:	4618      	mov	r0, r3
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40021000 	.word	0x40021000
 8002234:	08004f30 	.word	0x08004f30

08002238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800223e:	f7ff ffcd 	bl	80021dc <HAL_RCC_GetHCLKFreq>
 8002242:	4601      	mov	r1, r0
 8002244:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800224c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002250:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	fa92 f2a2 	rbit	r2, r2
 8002258:	603a      	str	r2, [r7, #0]
  return result;
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	fab2 f282 	clz	r2, r2
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	40d3      	lsrs	r3, r2
 8002264:	4a04      	ldr	r2, [pc, #16]	; (8002278 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002266:	5cd3      	ldrb	r3, [r2, r3]
 8002268:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800226c:	4618      	mov	r0, r3
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40021000 	.word	0x40021000
 8002278:	08004f30 	.word	0x08004f30

0800227c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	220f      	movs	r2, #15
 800228a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800228c:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <HAL_RCC_GetClockConfig+0x5c>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 0203 	and.w	r2, r3, #3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002298:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <HAL_RCC_GetClockConfig+0x5c>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80022a4:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <HAL_RCC_GetClockConfig+0x5c>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80022b0:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <HAL_RCC_GetClockConfig+0x5c>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	08db      	lsrs	r3, r3, #3
 80022b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80022be:	4b07      	ldr	r3, [pc, #28]	; (80022dc <HAL_RCC_GetClockConfig+0x60>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0207 	and.w	r2, r3, #7
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	601a      	str	r2, [r3, #0]
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40022000 	.word	0x40022000

080022e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b092      	sub	sp, #72	; 0x48
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80022f0:	2300      	movs	r3, #0
 80022f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 80d4 	beq.w	80024ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002304:	4b4e      	ldr	r3, [pc, #312]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10e      	bne.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002310:	4b4b      	ldr	r3, [pc, #300]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	4a4a      	ldr	r2, [pc, #296]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800231a:	61d3      	str	r3, [r2, #28]
 800231c:	4b48      	ldr	r3, [pc, #288]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002324:	60bb      	str	r3, [r7, #8]
 8002326:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002328:	2301      	movs	r3, #1
 800232a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800232e:	4b45      	ldr	r3, [pc, #276]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002336:	2b00      	cmp	r3, #0
 8002338:	d118      	bne.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800233a:	4b42      	ldr	r3, [pc, #264]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a41      	ldr	r2, [pc, #260]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002344:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002346:	f7fe fa7f 	bl	8000848 <HAL_GetTick>
 800234a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234c:	e008      	b.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800234e:	f7fe fa7b 	bl	8000848 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b64      	cmp	r3, #100	; 0x64
 800235a:	d901      	bls.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e1d6      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002360:	4b38      	ldr	r3, [pc, #224]	; (8002444 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0f0      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800236c:	4b34      	ldr	r3, [pc, #208]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002374:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 8084 	beq.w	8002486 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002386:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002388:	429a      	cmp	r2, r3
 800238a:	d07c      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800238c:	4b2c      	ldr	r3, [pc, #176]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002394:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002396:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800239a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800239e:	fa93 f3a3 	rbit	r3, r3
 80023a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80023a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023a6:	fab3 f383 	clz	r3, r3
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	461a      	mov	r2, r3
 80023ae:	4b26      	ldr	r3, [pc, #152]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023b0:	4413      	add	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	461a      	mov	r2, r3
 80023b6:	2301      	movs	r3, #1
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c2:	fa93 f3a3 	rbit	r3, r3
 80023c6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80023c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023ca:	fab3 f383 	clz	r3, r3
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	461a      	mov	r2, r3
 80023d2:	4b1d      	ldr	r3, [pc, #116]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023d4:	4413      	add	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	461a      	mov	r2, r3
 80023da:	2300      	movs	r3, #0
 80023dc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80023de:	4a18      	ldr	r2, [pc, #96]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023e2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d04b      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ee:	f7fe fa2b 	bl	8000848 <HAL_GetTick>
 80023f2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f4:	e00a      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f6:	f7fe fa27 	bl	8000848 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	f241 3288 	movw	r2, #5000	; 0x1388
 8002404:	4293      	cmp	r3, r2
 8002406:	d901      	bls.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e180      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800240c:	2302      	movs	r3, #2
 800240e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
 8002418:	2302      	movs	r3, #2
 800241a:	623b      	str	r3, [r7, #32]
 800241c:	6a3b      	ldr	r3, [r7, #32]
 800241e:	fa93 f3a3 	rbit	r3, r3
 8002422:	61fb      	str	r3, [r7, #28]
  return result;
 8002424:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002426:	fab3 f383 	clz	r3, r3
 800242a:	b2db      	uxtb	r3, r3
 800242c:	095b      	lsrs	r3, r3, #5
 800242e:	b2db      	uxtb	r3, r3
 8002430:	f043 0302 	orr.w	r3, r3, #2
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d108      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800243a:	4b01      	ldr	r3, [pc, #4]	; (8002440 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	e00d      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002440:	40021000 	.word	0x40021000
 8002444:	40007000 	.word	0x40007000
 8002448:	10908100 	.word	0x10908100
 800244c:	2302      	movs	r3, #2
 800244e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	fa93 f3a3 	rbit	r3, r3
 8002456:	617b      	str	r3, [r7, #20]
 8002458:	4b9a      	ldr	r3, [pc, #616]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	2202      	movs	r2, #2
 800245e:	613a      	str	r2, [r7, #16]
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	fa92 f2a2 	rbit	r2, r2
 8002466:	60fa      	str	r2, [r7, #12]
  return result;
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	fab2 f282 	clz	r2, r2
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	f002 021f 	and.w	r2, r2, #31
 800247a:	2101      	movs	r1, #1
 800247c:	fa01 f202 	lsl.w	r2, r1, r2
 8002480:	4013      	ands	r3, r2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0b7      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002486:	4b8f      	ldr	r3, [pc, #572]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	498c      	ldr	r1, [pc, #560]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002494:	4313      	orrs	r3, r2
 8002496:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002498:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800249c:	2b01      	cmp	r3, #1
 800249e:	d105      	bne.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024a0:	4b88      	ldr	r3, [pc, #544]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	4a87      	ldr	r2, [pc, #540]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024b8:	4b82      	ldr	r3, [pc, #520]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024bc:	f023 0203 	bic.w	r2, r3, #3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	497f      	ldr	r1, [pc, #508]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d008      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024d6:	4b7b      	ldr	r3, [pc, #492]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	4978      	ldr	r1, [pc, #480]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d008      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024f4:	4b73      	ldr	r3, [pc, #460]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	4970      	ldr	r1, [pc, #448]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002502:	4313      	orrs	r3, r2
 8002504:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0320 	and.w	r3, r3, #32
 800250e:	2b00      	cmp	r3, #0
 8002510:	d008      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002512:	4b6c      	ldr	r3, [pc, #432]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	f023 0210 	bic.w	r2, r3, #16
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	4969      	ldr	r1, [pc, #420]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002520:	4313      	orrs	r3, r2
 8002522:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d008      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002530:	4b64      	ldr	r3, [pc, #400]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253c:	4961      	ldr	r1, [pc, #388]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800253e:	4313      	orrs	r3, r2
 8002540:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800254a:	2b00      	cmp	r3, #0
 800254c:	d008      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800254e:	4b5d      	ldr	r3, [pc, #372]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	f023 0220 	bic.w	r2, r3, #32
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	495a      	ldr	r1, [pc, #360]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800255c:	4313      	orrs	r3, r2
 800255e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d008      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800256c:	4b55      	ldr	r3, [pc, #340]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800256e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002570:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002578:	4952      	ldr	r1, [pc, #328]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800257a:	4313      	orrs	r3, r2
 800257c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b00      	cmp	r3, #0
 8002588:	d008      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800258a:	4b4e      	ldr	r3, [pc, #312]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	494b      	ldr	r1, [pc, #300]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002598:	4313      	orrs	r3, r2
 800259a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0310 	and.w	r3, r3, #16
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d008      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025a8:	4b46      	ldr	r3, [pc, #280]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	4943      	ldr	r1, [pc, #268]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d008      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80025c6:	4b3f      	ldr	r3, [pc, #252]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	493c      	ldr	r1, [pc, #240]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d008      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80025e4:	4b37      	ldr	r3, [pc, #220]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f0:	4934      	ldr	r1, [pc, #208]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d008      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002602:	4b30      	ldr	r3, [pc, #192]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002606:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260e:	492d      	ldr	r1, [pc, #180]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002610:	4313      	orrs	r3, r2
 8002612:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d008      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002620:	4b28      	ldr	r3, [pc, #160]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002624:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800262c:	4925      	ldr	r1, [pc, #148]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800262e:	4313      	orrs	r3, r2
 8002630:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d008      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800263e:	4b21      	ldr	r3, [pc, #132]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	491e      	ldr	r1, [pc, #120]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800264c:	4313      	orrs	r3, r2
 800264e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d008      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800265c:	4b19      	ldr	r3, [pc, #100]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800265e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002660:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002668:	4916      	ldr	r1, [pc, #88]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800266a:	4313      	orrs	r3, r2
 800266c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d008      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800267a:	4b12      	ldr	r3, [pc, #72]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002686:	490f      	ldr	r1, [pc, #60]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002688:	4313      	orrs	r3, r2
 800268a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d008      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002698:	4b0a      	ldr	r3, [pc, #40]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800269a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a4:	4907      	ldr	r1, [pc, #28]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00c      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80026b6:	4b03      	ldr	r3, [pc, #12]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	e002      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80026c2:	bf00      	nop
 80026c4:	40021000 	.word	0x40021000
 80026c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ca:	4913      	ldr	r1, [pc, #76]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d008      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80026dc:	4b0e      	ldr	r3, [pc, #56]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e8:	490b      	ldr	r1, [pc, #44]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d008      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80026fa:	4b07      	ldr	r3, [pc, #28]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002706:	4904      	ldr	r1, [pc, #16]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002708:	4313      	orrs	r3, r2
 800270a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3748      	adds	r7, #72	; 0x48
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40021000 	.word	0x40021000

0800271c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e049      	b.n	80027c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d106      	bne.n	8002748 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f841 	bl	80027ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2202      	movs	r2, #2
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3304      	adds	r3, #4
 8002758:	4619      	mov	r1, r3
 800275a:	4610      	mov	r0, r2
 800275c:	f000 f9f8 	bl	8002b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
	...

080027e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d001      	beq.n	80027f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e04f      	b.n	8002898 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2202      	movs	r2, #2
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0201 	orr.w	r2, r2, #1
 800280e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a23      	ldr	r2, [pc, #140]	; (80028a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d01d      	beq.n	8002856 <HAL_TIM_Base_Start_IT+0x76>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002822:	d018      	beq.n	8002856 <HAL_TIM_Base_Start_IT+0x76>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a1f      	ldr	r2, [pc, #124]	; (80028a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d013      	beq.n	8002856 <HAL_TIM_Base_Start_IT+0x76>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a1e      	ldr	r2, [pc, #120]	; (80028ac <HAL_TIM_Base_Start_IT+0xcc>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d00e      	beq.n	8002856 <HAL_TIM_Base_Start_IT+0x76>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a1c      	ldr	r2, [pc, #112]	; (80028b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d009      	beq.n	8002856 <HAL_TIM_Base_Start_IT+0x76>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a1b      	ldr	r2, [pc, #108]	; (80028b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d004      	beq.n	8002856 <HAL_TIM_Base_Start_IT+0x76>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a19      	ldr	r2, [pc, #100]	; (80028b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d115      	bne.n	8002882 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	4b17      	ldr	r3, [pc, #92]	; (80028bc <HAL_TIM_Base_Start_IT+0xdc>)
 800285e:	4013      	ands	r3, r2
 8002860:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2b06      	cmp	r3, #6
 8002866:	d015      	beq.n	8002894 <HAL_TIM_Base_Start_IT+0xb4>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800286e:	d011      	beq.n	8002894 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0201 	orr.w	r2, r2, #1
 800287e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002880:	e008      	b.n	8002894 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f042 0201 	orr.w	r2, r2, #1
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	e000      	b.n	8002896 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002894:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	40012c00 	.word	0x40012c00
 80028a8:	40000400 	.word	0x40000400
 80028ac:	40000800 	.word	0x40000800
 80028b0:	40013400 	.word	0x40013400
 80028b4:	40014000 	.word	0x40014000
 80028b8:	40015000 	.word	0x40015000
 80028bc:	00010007 	.word	0x00010007

080028c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d122      	bne.n	800291c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d11b      	bne.n	800291c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f06f 0202 	mvn.w	r2, #2
 80028ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f905 	bl	8002b12 <HAL_TIM_IC_CaptureCallback>
 8002908:	e005      	b.n	8002916 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f8f7 	bl	8002afe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f908 	bl	8002b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	f003 0304 	and.w	r3, r3, #4
 8002926:	2b04      	cmp	r3, #4
 8002928:	d122      	bne.n	8002970 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b04      	cmp	r3, #4
 8002936:	d11b      	bne.n	8002970 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f06f 0204 	mvn.w	r2, #4
 8002940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2202      	movs	r2, #2
 8002946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f8db 	bl	8002b12 <HAL_TIM_IC_CaptureCallback>
 800295c:	e005      	b.n	800296a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f8cd 	bl	8002afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f8de 	bl	8002b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	2b08      	cmp	r3, #8
 800297c:	d122      	bne.n	80029c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b08      	cmp	r3, #8
 800298a:	d11b      	bne.n	80029c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f06f 0208 	mvn.w	r2, #8
 8002994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2204      	movs	r2, #4
 800299a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	f003 0303 	and.w	r3, r3, #3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f8b1 	bl	8002b12 <HAL_TIM_IC_CaptureCallback>
 80029b0:	e005      	b.n	80029be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f8a3 	bl	8002afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f8b4 	bl	8002b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	f003 0310 	and.w	r3, r3, #16
 80029ce:	2b10      	cmp	r3, #16
 80029d0:	d122      	bne.n	8002a18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f003 0310 	and.w	r3, r3, #16
 80029dc:	2b10      	cmp	r3, #16
 80029de:	d11b      	bne.n	8002a18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f06f 0210 	mvn.w	r2, #16
 80029e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2208      	movs	r2, #8
 80029ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f887 	bl	8002b12 <HAL_TIM_IC_CaptureCallback>
 8002a04:	e005      	b.n	8002a12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f879 	bl	8002afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f88a 	bl	8002b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d10e      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d107      	bne.n	8002a44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0201 	mvn.w	r2, #1
 8002a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7fd fd8a 	bl	8000558 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4e:	2b80      	cmp	r3, #128	; 0x80
 8002a50:	d10e      	bne.n	8002a70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a5c:	2b80      	cmp	r3, #128	; 0x80
 8002a5e:	d107      	bne.n	8002a70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f918 	bl	8002ca0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a7e:	d10e      	bne.n	8002a9e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8a:	2b80      	cmp	r3, #128	; 0x80
 8002a8c:	d107      	bne.n	8002a9e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002a96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f90b 	bl	8002cb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa8:	2b40      	cmp	r3, #64	; 0x40
 8002aaa:	d10e      	bne.n	8002aca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab6:	2b40      	cmp	r3, #64	; 0x40
 8002ab8:	d107      	bne.n	8002aca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 f838 	bl	8002b3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	f003 0320 	and.w	r3, r3, #32
 8002ad4:	2b20      	cmp	r3, #32
 8002ad6:	d10e      	bne.n	8002af6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f003 0320 	and.w	r3, r3, #32
 8002ae2:	2b20      	cmp	r3, #32
 8002ae4:	d107      	bne.n	8002af6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f06f 0220 	mvn.w	r2, #32
 8002aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 f8cb 	bl	8002c8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002af6:	bf00      	nop
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
	...

08002b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a42      	ldr	r2, [pc, #264]	; (8002c6c <TIM_Base_SetConfig+0x11c>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d013      	beq.n	8002b90 <TIM_Base_SetConfig+0x40>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b6e:	d00f      	beq.n	8002b90 <TIM_Base_SetConfig+0x40>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a3f      	ldr	r2, [pc, #252]	; (8002c70 <TIM_Base_SetConfig+0x120>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d00b      	beq.n	8002b90 <TIM_Base_SetConfig+0x40>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a3e      	ldr	r2, [pc, #248]	; (8002c74 <TIM_Base_SetConfig+0x124>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d007      	beq.n	8002b90 <TIM_Base_SetConfig+0x40>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a3d      	ldr	r2, [pc, #244]	; (8002c78 <TIM_Base_SetConfig+0x128>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d003      	beq.n	8002b90 <TIM_Base_SetConfig+0x40>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a3c      	ldr	r2, [pc, #240]	; (8002c7c <TIM_Base_SetConfig+0x12c>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d108      	bne.n	8002ba2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a31      	ldr	r2, [pc, #196]	; (8002c6c <TIM_Base_SetConfig+0x11c>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d01f      	beq.n	8002bea <TIM_Base_SetConfig+0x9a>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb0:	d01b      	beq.n	8002bea <TIM_Base_SetConfig+0x9a>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a2e      	ldr	r2, [pc, #184]	; (8002c70 <TIM_Base_SetConfig+0x120>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d017      	beq.n	8002bea <TIM_Base_SetConfig+0x9a>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a2d      	ldr	r2, [pc, #180]	; (8002c74 <TIM_Base_SetConfig+0x124>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d013      	beq.n	8002bea <TIM_Base_SetConfig+0x9a>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a2c      	ldr	r2, [pc, #176]	; (8002c78 <TIM_Base_SetConfig+0x128>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d00f      	beq.n	8002bea <TIM_Base_SetConfig+0x9a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a2c      	ldr	r2, [pc, #176]	; (8002c80 <TIM_Base_SetConfig+0x130>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d00b      	beq.n	8002bea <TIM_Base_SetConfig+0x9a>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a2b      	ldr	r2, [pc, #172]	; (8002c84 <TIM_Base_SetConfig+0x134>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d007      	beq.n	8002bea <TIM_Base_SetConfig+0x9a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a2a      	ldr	r2, [pc, #168]	; (8002c88 <TIM_Base_SetConfig+0x138>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d003      	beq.n	8002bea <TIM_Base_SetConfig+0x9a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a25      	ldr	r2, [pc, #148]	; (8002c7c <TIM_Base_SetConfig+0x12c>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d108      	bne.n	8002bfc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a12      	ldr	r2, [pc, #72]	; (8002c6c <TIM_Base_SetConfig+0x11c>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d013      	beq.n	8002c50 <TIM_Base_SetConfig+0x100>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a13      	ldr	r2, [pc, #76]	; (8002c78 <TIM_Base_SetConfig+0x128>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d00f      	beq.n	8002c50 <TIM_Base_SetConfig+0x100>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a13      	ldr	r2, [pc, #76]	; (8002c80 <TIM_Base_SetConfig+0x130>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d00b      	beq.n	8002c50 <TIM_Base_SetConfig+0x100>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a12      	ldr	r2, [pc, #72]	; (8002c84 <TIM_Base_SetConfig+0x134>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d007      	beq.n	8002c50 <TIM_Base_SetConfig+0x100>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a11      	ldr	r2, [pc, #68]	; (8002c88 <TIM_Base_SetConfig+0x138>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d003      	beq.n	8002c50 <TIM_Base_SetConfig+0x100>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a0c      	ldr	r2, [pc, #48]	; (8002c7c <TIM_Base_SetConfig+0x12c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d103      	bne.n	8002c58 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	691a      	ldr	r2, [r3, #16]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	615a      	str	r2, [r3, #20]
}
 8002c5e:	bf00      	nop
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	40012c00 	.word	0x40012c00
 8002c70:	40000400 	.word	0x40000400
 8002c74:	40000800 	.word	0x40000800
 8002c78:	40013400 	.word	0x40013400
 8002c7c:	40015000 	.word	0x40015000
 8002c80:	40014000 	.word	0x40014000
 8002c84:	40014400 	.word	0x40014400
 8002c88:	40014800 	.word	0x40014800

08002c8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e040      	b.n	8002d5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d106      	bne.n	8002cf0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7fd fc74 	bl	80005d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2224      	movs	r2, #36	; 0x24
 8002cf4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0201 	bic.w	r2, r2, #1
 8002d04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f980 	bl	800300c <UART_SetConfig>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d101      	bne.n	8002d16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e022      	b.n	8002d5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d002      	beq.n	8002d24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 fb48 	bl	80033b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689a      	ldr	r2, [r3, #8]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f042 0201 	orr.w	r2, r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 fbcf 	bl	80034f8 <UART_CheckIdleState>
 8002d5a:	4603      	mov	r3, r0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08a      	sub	sp, #40	; 0x28
 8002d68:	af02      	add	r7, sp, #8
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	603b      	str	r3, [r7, #0]
 8002d70:	4613      	mov	r3, r2
 8002d72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d78:	2b20      	cmp	r3, #32
 8002d7a:	d178      	bne.n	8002e6e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d002      	beq.n	8002d88 <HAL_UART_Transmit+0x24>
 8002d82:	88fb      	ldrh	r3, [r7, #6]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e071      	b.n	8002e70 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2221      	movs	r2, #33	; 0x21
 8002d98:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d9a:	f7fd fd55 	bl	8000848 <HAL_GetTick>
 8002d9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	88fa      	ldrh	r2, [r7, #6]
 8002da4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	88fa      	ldrh	r2, [r7, #6]
 8002dac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002db8:	d108      	bne.n	8002dcc <HAL_UART_Transmit+0x68>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d104      	bne.n	8002dcc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	61bb      	str	r3, [r7, #24]
 8002dca:	e003      	b.n	8002dd4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002dd4:	e030      	b.n	8002e38 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	2180      	movs	r1, #128	; 0x80
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f000 fc31 	bl	8003648 <UART_WaitOnFlagUntilTimeout>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d004      	beq.n	8002df6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2220      	movs	r2, #32
 8002df0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e03c      	b.n	8002e70 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10b      	bne.n	8002e14 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	881a      	ldrh	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e08:	b292      	uxth	r2, r2
 8002e0a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	3302      	adds	r3, #2
 8002e10:	61bb      	str	r3, [r7, #24]
 8002e12:	e008      	b.n	8002e26 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	781a      	ldrb	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	b292      	uxth	r2, r2
 8002e1e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	3301      	adds	r3, #1
 8002e24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1c8      	bne.n	8002dd6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2140      	movs	r1, #64	; 0x40
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 fbfa 	bl	8003648 <UART_WaitOnFlagUntilTimeout>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d004      	beq.n	8002e64 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e005      	b.n	8002e70 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2220      	movs	r2, #32
 8002e68:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	e000      	b.n	8002e70 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002e6e:	2302      	movs	r3, #2
  }
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3720      	adds	r7, #32
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08a      	sub	sp, #40	; 0x28
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	603b      	str	r3, [r7, #0]
 8002e84:	4613      	mov	r3, r2
 8002e86:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e8e:	2b20      	cmp	r3, #32
 8002e90:	f040 80b6 	bne.w	8003000 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d002      	beq.n	8002ea0 <HAL_UART_Receive+0x28>
 8002e9a:	88fb      	ldrh	r3, [r7, #6]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0ae      	b.n	8003002 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2222      	movs	r2, #34	; 0x22
 8002eb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eba:	f7fd fcc5 	bl	8000848 <HAL_GetTick>
 8002ebe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	88fa      	ldrh	r2, [r7, #6]
 8002ec4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	88fa      	ldrh	r2, [r7, #6]
 8002ecc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed8:	d10e      	bne.n	8002ef8 <HAL_UART_Receive+0x80>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d105      	bne.n	8002eee <HAL_UART_Receive+0x76>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002ee8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002eec:	e02d      	b.n	8002f4a <HAL_UART_Receive+0xd2>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	22ff      	movs	r2, #255	; 0xff
 8002ef2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002ef6:	e028      	b.n	8002f4a <HAL_UART_Receive+0xd2>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10d      	bne.n	8002f1c <HAL_UART_Receive+0xa4>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d104      	bne.n	8002f12 <HAL_UART_Receive+0x9a>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	22ff      	movs	r2, #255	; 0xff
 8002f0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002f10:	e01b      	b.n	8002f4a <HAL_UART_Receive+0xd2>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	227f      	movs	r2, #127	; 0x7f
 8002f16:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002f1a:	e016      	b.n	8002f4a <HAL_UART_Receive+0xd2>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f24:	d10d      	bne.n	8002f42 <HAL_UART_Receive+0xca>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d104      	bne.n	8002f38 <HAL_UART_Receive+0xc0>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	227f      	movs	r2, #127	; 0x7f
 8002f32:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002f36:	e008      	b.n	8002f4a <HAL_UART_Receive+0xd2>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	223f      	movs	r2, #63	; 0x3f
 8002f3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002f40:	e003      	b.n	8002f4a <HAL_UART_Receive+0xd2>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002f50:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f5a:	d108      	bne.n	8002f6e <HAL_UART_Receive+0xf6>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d104      	bne.n	8002f6e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002f64:	2300      	movs	r3, #0
 8002f66:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	61bb      	str	r3, [r7, #24]
 8002f6c:	e003      	b.n	8002f76 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002f76:	e037      	b.n	8002fe8 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	2120      	movs	r1, #32
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 fb60 	bl	8003648 <UART_WaitOnFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d005      	beq.n	8002f9a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2220      	movs	r2, #32
 8002f92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e033      	b.n	8003002 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10c      	bne.n	8002fba <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	8a7b      	ldrh	r3, [r7, #18]
 8002faa:	4013      	ands	r3, r2
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	3302      	adds	r3, #2
 8002fb6:	61bb      	str	r3, [r7, #24]
 8002fb8:	e00d      	b.n	8002fd6 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	8a7b      	ldrh	r3, [r7, #18]
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	4013      	ands	r3, r2
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1c1      	bne.n	8002f78 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	e000      	b.n	8003002 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003000:	2302      	movs	r3, #2
  }
}
 8003002:	4618      	mov	r0, r3
 8003004:	3720      	adds	r7, #32
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
	...

0800300c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003014:	2300      	movs	r3, #0
 8003016:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	431a      	orrs	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	69db      	ldr	r3, [r3, #28]
 800302c:	4313      	orrs	r3, r2
 800302e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	4b92      	ldr	r3, [pc, #584]	; (8003280 <UART_SetConfig+0x274>)
 8003038:	4013      	ands	r3, r2
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6812      	ldr	r2, [r2, #0]
 800303e:	6979      	ldr	r1, [r7, #20]
 8003040:	430b      	orrs	r3, r1
 8003042:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68da      	ldr	r2, [r3, #12]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	4313      	orrs	r3, r2
 8003068:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	430a      	orrs	r2, r1
 800307c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a80      	ldr	r2, [pc, #512]	; (8003284 <UART_SetConfig+0x278>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d120      	bne.n	80030ca <UART_SetConfig+0xbe>
 8003088:	4b7f      	ldr	r3, [pc, #508]	; (8003288 <UART_SetConfig+0x27c>)
 800308a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308c:	f003 0303 	and.w	r3, r3, #3
 8003090:	2b03      	cmp	r3, #3
 8003092:	d817      	bhi.n	80030c4 <UART_SetConfig+0xb8>
 8003094:	a201      	add	r2, pc, #4	; (adr r2, 800309c <UART_SetConfig+0x90>)
 8003096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309a:	bf00      	nop
 800309c:	080030ad 	.word	0x080030ad
 80030a0:	080030b9 	.word	0x080030b9
 80030a4:	080030bf 	.word	0x080030bf
 80030a8:	080030b3 	.word	0x080030b3
 80030ac:	2301      	movs	r3, #1
 80030ae:	77fb      	strb	r3, [r7, #31]
 80030b0:	e0b5      	b.n	800321e <UART_SetConfig+0x212>
 80030b2:	2302      	movs	r3, #2
 80030b4:	77fb      	strb	r3, [r7, #31]
 80030b6:	e0b2      	b.n	800321e <UART_SetConfig+0x212>
 80030b8:	2304      	movs	r3, #4
 80030ba:	77fb      	strb	r3, [r7, #31]
 80030bc:	e0af      	b.n	800321e <UART_SetConfig+0x212>
 80030be:	2308      	movs	r3, #8
 80030c0:	77fb      	strb	r3, [r7, #31]
 80030c2:	e0ac      	b.n	800321e <UART_SetConfig+0x212>
 80030c4:	2310      	movs	r3, #16
 80030c6:	77fb      	strb	r3, [r7, #31]
 80030c8:	e0a9      	b.n	800321e <UART_SetConfig+0x212>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a6f      	ldr	r2, [pc, #444]	; (800328c <UART_SetConfig+0x280>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d124      	bne.n	800311e <UART_SetConfig+0x112>
 80030d4:	4b6c      	ldr	r3, [pc, #432]	; (8003288 <UART_SetConfig+0x27c>)
 80030d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030e0:	d011      	beq.n	8003106 <UART_SetConfig+0xfa>
 80030e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030e6:	d817      	bhi.n	8003118 <UART_SetConfig+0x10c>
 80030e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030ec:	d011      	beq.n	8003112 <UART_SetConfig+0x106>
 80030ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030f2:	d811      	bhi.n	8003118 <UART_SetConfig+0x10c>
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d003      	beq.n	8003100 <UART_SetConfig+0xf4>
 80030f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030fc:	d006      	beq.n	800310c <UART_SetConfig+0x100>
 80030fe:	e00b      	b.n	8003118 <UART_SetConfig+0x10c>
 8003100:	2300      	movs	r3, #0
 8003102:	77fb      	strb	r3, [r7, #31]
 8003104:	e08b      	b.n	800321e <UART_SetConfig+0x212>
 8003106:	2302      	movs	r3, #2
 8003108:	77fb      	strb	r3, [r7, #31]
 800310a:	e088      	b.n	800321e <UART_SetConfig+0x212>
 800310c:	2304      	movs	r3, #4
 800310e:	77fb      	strb	r3, [r7, #31]
 8003110:	e085      	b.n	800321e <UART_SetConfig+0x212>
 8003112:	2308      	movs	r3, #8
 8003114:	77fb      	strb	r3, [r7, #31]
 8003116:	e082      	b.n	800321e <UART_SetConfig+0x212>
 8003118:	2310      	movs	r3, #16
 800311a:	77fb      	strb	r3, [r7, #31]
 800311c:	e07f      	b.n	800321e <UART_SetConfig+0x212>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a5b      	ldr	r2, [pc, #364]	; (8003290 <UART_SetConfig+0x284>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d124      	bne.n	8003172 <UART_SetConfig+0x166>
 8003128:	4b57      	ldr	r3, [pc, #348]	; (8003288 <UART_SetConfig+0x27c>)
 800312a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003130:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003134:	d011      	beq.n	800315a <UART_SetConfig+0x14e>
 8003136:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800313a:	d817      	bhi.n	800316c <UART_SetConfig+0x160>
 800313c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003140:	d011      	beq.n	8003166 <UART_SetConfig+0x15a>
 8003142:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003146:	d811      	bhi.n	800316c <UART_SetConfig+0x160>
 8003148:	2b00      	cmp	r3, #0
 800314a:	d003      	beq.n	8003154 <UART_SetConfig+0x148>
 800314c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003150:	d006      	beq.n	8003160 <UART_SetConfig+0x154>
 8003152:	e00b      	b.n	800316c <UART_SetConfig+0x160>
 8003154:	2300      	movs	r3, #0
 8003156:	77fb      	strb	r3, [r7, #31]
 8003158:	e061      	b.n	800321e <UART_SetConfig+0x212>
 800315a:	2302      	movs	r3, #2
 800315c:	77fb      	strb	r3, [r7, #31]
 800315e:	e05e      	b.n	800321e <UART_SetConfig+0x212>
 8003160:	2304      	movs	r3, #4
 8003162:	77fb      	strb	r3, [r7, #31]
 8003164:	e05b      	b.n	800321e <UART_SetConfig+0x212>
 8003166:	2308      	movs	r3, #8
 8003168:	77fb      	strb	r3, [r7, #31]
 800316a:	e058      	b.n	800321e <UART_SetConfig+0x212>
 800316c:	2310      	movs	r3, #16
 800316e:	77fb      	strb	r3, [r7, #31]
 8003170:	e055      	b.n	800321e <UART_SetConfig+0x212>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a47      	ldr	r2, [pc, #284]	; (8003294 <UART_SetConfig+0x288>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d124      	bne.n	80031c6 <UART_SetConfig+0x1ba>
 800317c:	4b42      	ldr	r3, [pc, #264]	; (8003288 <UART_SetConfig+0x27c>)
 800317e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003180:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003184:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003188:	d011      	beq.n	80031ae <UART_SetConfig+0x1a2>
 800318a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800318e:	d817      	bhi.n	80031c0 <UART_SetConfig+0x1b4>
 8003190:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003194:	d011      	beq.n	80031ba <UART_SetConfig+0x1ae>
 8003196:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800319a:	d811      	bhi.n	80031c0 <UART_SetConfig+0x1b4>
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <UART_SetConfig+0x19c>
 80031a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031a4:	d006      	beq.n	80031b4 <UART_SetConfig+0x1a8>
 80031a6:	e00b      	b.n	80031c0 <UART_SetConfig+0x1b4>
 80031a8:	2300      	movs	r3, #0
 80031aa:	77fb      	strb	r3, [r7, #31]
 80031ac:	e037      	b.n	800321e <UART_SetConfig+0x212>
 80031ae:	2302      	movs	r3, #2
 80031b0:	77fb      	strb	r3, [r7, #31]
 80031b2:	e034      	b.n	800321e <UART_SetConfig+0x212>
 80031b4:	2304      	movs	r3, #4
 80031b6:	77fb      	strb	r3, [r7, #31]
 80031b8:	e031      	b.n	800321e <UART_SetConfig+0x212>
 80031ba:	2308      	movs	r3, #8
 80031bc:	77fb      	strb	r3, [r7, #31]
 80031be:	e02e      	b.n	800321e <UART_SetConfig+0x212>
 80031c0:	2310      	movs	r3, #16
 80031c2:	77fb      	strb	r3, [r7, #31]
 80031c4:	e02b      	b.n	800321e <UART_SetConfig+0x212>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a33      	ldr	r2, [pc, #204]	; (8003298 <UART_SetConfig+0x28c>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d124      	bne.n	800321a <UART_SetConfig+0x20e>
 80031d0:	4b2d      	ldr	r3, [pc, #180]	; (8003288 <UART_SetConfig+0x27c>)
 80031d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80031d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031dc:	d011      	beq.n	8003202 <UART_SetConfig+0x1f6>
 80031de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031e2:	d817      	bhi.n	8003214 <UART_SetConfig+0x208>
 80031e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031e8:	d011      	beq.n	800320e <UART_SetConfig+0x202>
 80031ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031ee:	d811      	bhi.n	8003214 <UART_SetConfig+0x208>
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <UART_SetConfig+0x1f0>
 80031f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031f8:	d006      	beq.n	8003208 <UART_SetConfig+0x1fc>
 80031fa:	e00b      	b.n	8003214 <UART_SetConfig+0x208>
 80031fc:	2300      	movs	r3, #0
 80031fe:	77fb      	strb	r3, [r7, #31]
 8003200:	e00d      	b.n	800321e <UART_SetConfig+0x212>
 8003202:	2302      	movs	r3, #2
 8003204:	77fb      	strb	r3, [r7, #31]
 8003206:	e00a      	b.n	800321e <UART_SetConfig+0x212>
 8003208:	2304      	movs	r3, #4
 800320a:	77fb      	strb	r3, [r7, #31]
 800320c:	e007      	b.n	800321e <UART_SetConfig+0x212>
 800320e:	2308      	movs	r3, #8
 8003210:	77fb      	strb	r3, [r7, #31]
 8003212:	e004      	b.n	800321e <UART_SetConfig+0x212>
 8003214:	2310      	movs	r3, #16
 8003216:	77fb      	strb	r3, [r7, #31]
 8003218:	e001      	b.n	800321e <UART_SetConfig+0x212>
 800321a:	2310      	movs	r3, #16
 800321c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003226:	d16b      	bne.n	8003300 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003228:	7ffb      	ldrb	r3, [r7, #31]
 800322a:	2b08      	cmp	r3, #8
 800322c:	d838      	bhi.n	80032a0 <UART_SetConfig+0x294>
 800322e:	a201      	add	r2, pc, #4	; (adr r2, 8003234 <UART_SetConfig+0x228>)
 8003230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003234:	08003259 	.word	0x08003259
 8003238:	08003261 	.word	0x08003261
 800323c:	08003269 	.word	0x08003269
 8003240:	080032a1 	.word	0x080032a1
 8003244:	0800326f 	.word	0x0800326f
 8003248:	080032a1 	.word	0x080032a1
 800324c:	080032a1 	.word	0x080032a1
 8003250:	080032a1 	.word	0x080032a1
 8003254:	08003277 	.word	0x08003277
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003258:	f7fe ffcc 	bl	80021f4 <HAL_RCC_GetPCLK1Freq>
 800325c:	61b8      	str	r0, [r7, #24]
        break;
 800325e:	e024      	b.n	80032aa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003260:	f7fe ffea 	bl	8002238 <HAL_RCC_GetPCLK2Freq>
 8003264:	61b8      	str	r0, [r7, #24]
        break;
 8003266:	e020      	b.n	80032aa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003268:	4b0c      	ldr	r3, [pc, #48]	; (800329c <UART_SetConfig+0x290>)
 800326a:	61bb      	str	r3, [r7, #24]
        break;
 800326c:	e01d      	b.n	80032aa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800326e:	f7fe ff4b 	bl	8002108 <HAL_RCC_GetSysClockFreq>
 8003272:	61b8      	str	r0, [r7, #24]
        break;
 8003274:	e019      	b.n	80032aa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800327a:	61bb      	str	r3, [r7, #24]
        break;
 800327c:	e015      	b.n	80032aa <UART_SetConfig+0x29e>
 800327e:	bf00      	nop
 8003280:	efff69f3 	.word	0xefff69f3
 8003284:	40013800 	.word	0x40013800
 8003288:	40021000 	.word	0x40021000
 800328c:	40004400 	.word	0x40004400
 8003290:	40004800 	.word	0x40004800
 8003294:	40004c00 	.word	0x40004c00
 8003298:	40005000 	.word	0x40005000
 800329c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	77bb      	strb	r3, [r7, #30]
        break;
 80032a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d073      	beq.n	8003398 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	005a      	lsls	r2, r3, #1
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	085b      	lsrs	r3, r3, #1
 80032ba:	441a      	add	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	2b0f      	cmp	r3, #15
 80032ca:	d916      	bls.n	80032fa <UART_SetConfig+0x2ee>
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d2:	d212      	bcs.n	80032fa <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	f023 030f 	bic.w	r3, r3, #15
 80032dc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	085b      	lsrs	r3, r3, #1
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	89fb      	ldrh	r3, [r7, #14]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	89fa      	ldrh	r2, [r7, #14]
 80032f6:	60da      	str	r2, [r3, #12]
 80032f8:	e04e      	b.n	8003398 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	77bb      	strb	r3, [r7, #30]
 80032fe:	e04b      	b.n	8003398 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003300:	7ffb      	ldrb	r3, [r7, #31]
 8003302:	2b08      	cmp	r3, #8
 8003304:	d827      	bhi.n	8003356 <UART_SetConfig+0x34a>
 8003306:	a201      	add	r2, pc, #4	; (adr r2, 800330c <UART_SetConfig+0x300>)
 8003308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330c:	08003331 	.word	0x08003331
 8003310:	08003339 	.word	0x08003339
 8003314:	08003341 	.word	0x08003341
 8003318:	08003357 	.word	0x08003357
 800331c:	08003347 	.word	0x08003347
 8003320:	08003357 	.word	0x08003357
 8003324:	08003357 	.word	0x08003357
 8003328:	08003357 	.word	0x08003357
 800332c:	0800334f 	.word	0x0800334f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003330:	f7fe ff60 	bl	80021f4 <HAL_RCC_GetPCLK1Freq>
 8003334:	61b8      	str	r0, [r7, #24]
        break;
 8003336:	e013      	b.n	8003360 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003338:	f7fe ff7e 	bl	8002238 <HAL_RCC_GetPCLK2Freq>
 800333c:	61b8      	str	r0, [r7, #24]
        break;
 800333e:	e00f      	b.n	8003360 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003340:	4b1b      	ldr	r3, [pc, #108]	; (80033b0 <UART_SetConfig+0x3a4>)
 8003342:	61bb      	str	r3, [r7, #24]
        break;
 8003344:	e00c      	b.n	8003360 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003346:	f7fe fedf 	bl	8002108 <HAL_RCC_GetSysClockFreq>
 800334a:	61b8      	str	r0, [r7, #24]
        break;
 800334c:	e008      	b.n	8003360 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800334e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003352:	61bb      	str	r3, [r7, #24]
        break;
 8003354:	e004      	b.n	8003360 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003356:	2300      	movs	r3, #0
 8003358:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	77bb      	strb	r3, [r7, #30]
        break;
 800335e:	bf00      	nop
    }

    if (pclk != 0U)
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d018      	beq.n	8003398 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	085a      	lsrs	r2, r3, #1
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	441a      	add	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	fbb2 f3f3 	udiv	r3, r2, r3
 8003378:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	2b0f      	cmp	r3, #15
 800337e:	d909      	bls.n	8003394 <UART_SetConfig+0x388>
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003386:	d205      	bcs.n	8003394 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	b29a      	uxth	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	60da      	str	r2, [r3, #12]
 8003392:	e001      	b.n	8003398 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80033a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3720      	adds	r7, #32
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	007a1200 	.word	0x007a1200

080033b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00a      	beq.n	80033de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00a      	beq.n	8003400 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00a      	beq.n	8003422 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00a      	beq.n	8003444 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	f003 0310 	and.w	r3, r3, #16
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00a      	beq.n	8003466 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	f003 0320 	and.w	r3, r3, #32
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00a      	beq.n	8003488 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003490:	2b00      	cmp	r3, #0
 8003492:	d01a      	beq.n	80034ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034b2:	d10a      	bne.n	80034ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00a      	beq.n	80034ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	605a      	str	r2, [r3, #4]
  }
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b098      	sub	sp, #96	; 0x60
 80034fc:	af02      	add	r7, sp, #8
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003508:	f7fd f99e 	bl	8000848 <HAL_GetTick>
 800350c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0308 	and.w	r3, r3, #8
 8003518:	2b08      	cmp	r3, #8
 800351a:	d12e      	bne.n	800357a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800351c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003524:	2200      	movs	r2, #0
 8003526:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f88c 	bl	8003648 <UART_WaitOnFlagUntilTimeout>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d021      	beq.n	800357a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800353e:	e853 3f00 	ldrex	r3, [r3]
 8003542:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003546:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800354a:	653b      	str	r3, [r7, #80]	; 0x50
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	461a      	mov	r2, r3
 8003552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003554:	647b      	str	r3, [r7, #68]	; 0x44
 8003556:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003558:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800355a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800355c:	e841 2300 	strex	r3, r2, [r1]
 8003560:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1e6      	bne.n	8003536 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2220      	movs	r2, #32
 800356c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e062      	b.n	8003640 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b04      	cmp	r3, #4
 8003586:	d149      	bne.n	800361c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003588:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003590:	2200      	movs	r2, #0
 8003592:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f856 	bl	8003648 <UART_WaitOnFlagUntilTimeout>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d03c      	beq.n	800361c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	e853 3f00 	ldrex	r3, [r3]
 80035ae:	623b      	str	r3, [r7, #32]
   return(result);
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	461a      	mov	r2, r3
 80035be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035c0:	633b      	str	r3, [r7, #48]	; 0x30
 80035c2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035c8:	e841 2300 	strex	r3, r2, [r1]
 80035cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80035ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1e6      	bne.n	80035a2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	3308      	adds	r3, #8
 80035da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	e853 3f00 	ldrex	r3, [r3]
 80035e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f023 0301 	bic.w	r3, r3, #1
 80035ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	3308      	adds	r3, #8
 80035f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035f4:	61fa      	str	r2, [r7, #28]
 80035f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f8:	69b9      	ldr	r1, [r7, #24]
 80035fa:	69fa      	ldr	r2, [r7, #28]
 80035fc:	e841 2300 	strex	r3, r2, [r1]
 8003600:	617b      	str	r3, [r7, #20]
   return(result);
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1e5      	bne.n	80035d4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2220      	movs	r2, #32
 800360c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e011      	b.n	8003640 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2220      	movs	r2, #32
 8003620:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2220      	movs	r2, #32
 8003626:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3758      	adds	r7, #88	; 0x58
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	603b      	str	r3, [r7, #0]
 8003654:	4613      	mov	r3, r2
 8003656:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003658:	e049      	b.n	80036ee <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003660:	d045      	beq.n	80036ee <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003662:	f7fd f8f1 	bl	8000848 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	429a      	cmp	r2, r3
 8003670:	d302      	bcc.n	8003678 <UART_WaitOnFlagUntilTimeout+0x30>
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d101      	bne.n	800367c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e048      	b.n	800370e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	2b00      	cmp	r3, #0
 8003688:	d031      	beq.n	80036ee <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b08      	cmp	r3, #8
 8003696:	d110      	bne.n	80036ba <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2208      	movs	r2, #8
 800369e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 f838 	bl	8003716 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2208      	movs	r2, #8
 80036aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e029      	b.n	800370e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036c8:	d111      	bne.n	80036ee <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f000 f81e 	bl	8003716 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2220      	movs	r2, #32
 80036de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e00f      	b.n	800370e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	69da      	ldr	r2, [r3, #28]
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	4013      	ands	r3, r2
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	bf0c      	ite	eq
 80036fe:	2301      	moveq	r3, #1
 8003700:	2300      	movne	r3, #0
 8003702:	b2db      	uxtb	r3, r3
 8003704:	461a      	mov	r2, r3
 8003706:	79fb      	ldrb	r3, [r7, #7]
 8003708:	429a      	cmp	r2, r3
 800370a:	d0a6      	beq.n	800365a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003716:	b480      	push	{r7}
 8003718:	b095      	sub	sp, #84	; 0x54
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003726:	e853 3f00 	ldrex	r3, [r3]
 800372a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800372c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003732:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	461a      	mov	r2, r3
 800373a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800373c:	643b      	str	r3, [r7, #64]	; 0x40
 800373e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003740:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003742:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003744:	e841 2300 	strex	r3, r2, [r1]
 8003748:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800374a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1e6      	bne.n	800371e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	3308      	adds	r3, #8
 8003756:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	e853 3f00 	ldrex	r3, [r3]
 800375e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	f023 0301 	bic.w	r3, r3, #1
 8003766:	64bb      	str	r3, [r7, #72]	; 0x48
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	3308      	adds	r3, #8
 800376e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003770:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003772:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003774:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003778:	e841 2300 	strex	r3, r2, [r1]
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1e5      	bne.n	8003750 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003788:	2b01      	cmp	r3, #1
 800378a:	d118      	bne.n	80037be <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	e853 3f00 	ldrex	r3, [r3]
 8003798:	60bb      	str	r3, [r7, #8]
   return(result);
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	f023 0310 	bic.w	r3, r3, #16
 80037a0:	647b      	str	r3, [r7, #68]	; 0x44
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	461a      	mov	r2, r3
 80037a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037aa:	61bb      	str	r3, [r7, #24]
 80037ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ae:	6979      	ldr	r1, [r7, #20]
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	e841 2300 	strex	r3, r2, [r1]
 80037b6:	613b      	str	r3, [r7, #16]
   return(result);
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1e6      	bne.n	800378c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2220      	movs	r2, #32
 80037c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80037d2:	bf00      	nop
 80037d4:	3754      	adds	r7, #84	; 0x54
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80037de:	b480      	push	{r7}
 80037e0:	b085      	sub	sp, #20
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	4603      	mov	r3, r0
 80037e6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80037e8:	2300      	movs	r3, #0
 80037ea:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80037ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037f0:	2b84      	cmp	r3, #132	; 0x84
 80037f2:	d005      	beq.n	8003800 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80037f4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4413      	add	r3, r2
 80037fc:	3303      	adds	r3, #3
 80037fe:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003800:	68fb      	ldr	r3, [r7, #12]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3714      	adds	r7, #20
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003812:	f000 faed 	bl	8003df0 <vTaskStartScheduler>
  
  return osOK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	bd80      	pop	{r7, pc}

0800381c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800381c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800381e:	b089      	sub	sp, #36	; 0x24
 8003820:	af04      	add	r7, sp, #16
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d020      	beq.n	8003870 <osThreadCreate+0x54>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d01c      	beq.n	8003870 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685c      	ldr	r4, [r3, #4]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	691e      	ldr	r6, [r3, #16]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff ffc8 	bl	80037de <makeFreeRtosPriority>
 800384e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003858:	9202      	str	r2, [sp, #8]
 800385a:	9301      	str	r3, [sp, #4]
 800385c:	9100      	str	r1, [sp, #0]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	4632      	mov	r2, r6
 8003862:	4629      	mov	r1, r5
 8003864:	4620      	mov	r0, r4
 8003866:	f000 f8ed 	bl	8003a44 <xTaskCreateStatic>
 800386a:	4603      	mov	r3, r0
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	e01c      	b.n	80038aa <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685c      	ldr	r4, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800387c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003884:	4618      	mov	r0, r3
 8003886:	f7ff ffaa 	bl	80037de <makeFreeRtosPriority>
 800388a:	4602      	mov	r2, r0
 800388c:	f107 030c 	add.w	r3, r7, #12
 8003890:	9301      	str	r3, [sp, #4]
 8003892:	9200      	str	r2, [sp, #0]
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	4632      	mov	r2, r6
 8003898:	4629      	mov	r1, r5
 800389a:	4620      	mov	r0, r4
 800389c:	f000 f92e 	bl	8003afc <xTaskCreate>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d001      	beq.n	80038aa <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80038a6:	2300      	movs	r3, #0
 80038a8:	e000      	b.n	80038ac <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80038aa:	68fb      	ldr	r3, [r7, #12]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038b4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <osDelay+0x16>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	e000      	b.n	80038cc <osDelay+0x18>
 80038ca:	2301      	movs	r3, #1
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 fa5b 	bl	8003d88 <vTaskDelay>
  
  return osOK;
 80038d2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f103 0208 	add.w	r2, r3, #8
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f04f 32ff 	mov.w	r2, #4294967295
 80038f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f103 0208 	add.w	r2, r3, #8
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f103 0208 	add.w	r2, r3, #8
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003936:	b480      	push	{r7}
 8003938:	b085      	sub	sp, #20
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
 800393e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	1c5a      	adds	r2, r3, #1
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	601a      	str	r2, [r3, #0]
}
 8003972:	bf00      	nop
 8003974:	3714      	adds	r7, #20
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800397e:	b480      	push	{r7}
 8003980:	b085      	sub	sp, #20
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
 8003986:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003994:	d103      	bne.n	800399e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	e00c      	b.n	80039b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	3308      	adds	r3, #8
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	e002      	b.n	80039ac <vListInsert+0x2e>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d2f6      	bcs.n	80039a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	1c5a      	adds	r2, r3, #1
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	601a      	str	r2, [r3, #0]
}
 80039e4:	bf00      	nop
 80039e6:	3714      	adds	r7, #20
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6892      	ldr	r2, [r2, #8]
 8003a06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6852      	ldr	r2, [r2, #4]
 8003a10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d103      	bne.n	8003a24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	1e5a      	subs	r2, r3, #1
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3714      	adds	r7, #20
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b08e      	sub	sp, #56	; 0x38
 8003a48:	af04      	add	r7, sp, #16
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
 8003a50:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10a      	bne.n	8003a6e <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5c:	f383 8811 	msr	BASEPRI, r3
 8003a60:	f3bf 8f6f 	isb	sy
 8003a64:	f3bf 8f4f 	dsb	sy
 8003a68:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003a6a:	bf00      	nop
 8003a6c:	e7fe      	b.n	8003a6c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10a      	bne.n	8003a8a <xTaskCreateStatic+0x46>
	__asm volatile
 8003a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a78:	f383 8811 	msr	BASEPRI, r3
 8003a7c:	f3bf 8f6f 	isb	sy
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	61fb      	str	r3, [r7, #28]
}
 8003a86:	bf00      	nop
 8003a88:	e7fe      	b.n	8003a88 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a8a:	23a0      	movs	r3, #160	; 0xa0
 8003a8c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	2ba0      	cmp	r3, #160	; 0xa0
 8003a92:	d00a      	beq.n	8003aaa <xTaskCreateStatic+0x66>
	__asm volatile
 8003a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a98:	f383 8811 	msr	BASEPRI, r3
 8003a9c:	f3bf 8f6f 	isb	sy
 8003aa0:	f3bf 8f4f 	dsb	sy
 8003aa4:	61bb      	str	r3, [r7, #24]
}
 8003aa6:	bf00      	nop
 8003aa8:	e7fe      	b.n	8003aa8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d01e      	beq.n	8003aee <xTaskCreateStatic+0xaa>
 8003ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d01b      	beq.n	8003aee <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003abe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ac8:	2300      	movs	r3, #0
 8003aca:	9303      	str	r3, [sp, #12]
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	9302      	str	r3, [sp, #8]
 8003ad0:	f107 0314 	add.w	r3, r7, #20
 8003ad4:	9301      	str	r3, [sp, #4]
 8003ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	68b9      	ldr	r1, [r7, #8]
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 f851 	bl	8003b88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ae6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ae8:	f000 f8e4 	bl	8003cb4 <prvAddNewTaskToReadyList>
 8003aec:	e001      	b.n	8003af2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003af2:	697b      	ldr	r3, [r7, #20]
	}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3728      	adds	r7, #40	; 0x28
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08c      	sub	sp, #48	; 0x30
 8003b00:	af04      	add	r7, sp, #16
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	603b      	str	r3, [r7, #0]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b0c:	88fb      	ldrh	r3, [r7, #6]
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 fef9 	bl	8004908 <pvPortMalloc>
 8003b16:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00e      	beq.n	8003b3c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003b1e:	20a0      	movs	r0, #160	; 0xa0
 8003b20:	f000 fef2 	bl	8004908 <pvPortMalloc>
 8003b24:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	631a      	str	r2, [r3, #48]	; 0x30
 8003b32:	e005      	b.n	8003b40 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b34:	6978      	ldr	r0, [r7, #20]
 8003b36:	f000 ffab 	bl	8004a90 <vPortFree>
 8003b3a:	e001      	b.n	8003b40 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d017      	beq.n	8003b76 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b4e:	88fa      	ldrh	r2, [r7, #6]
 8003b50:	2300      	movs	r3, #0
 8003b52:	9303      	str	r3, [sp, #12]
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	9302      	str	r3, [sp, #8]
 8003b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5a:	9301      	str	r3, [sp, #4]
 8003b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	68b9      	ldr	r1, [r7, #8]
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 f80f 	bl	8003b88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b6a:	69f8      	ldr	r0, [r7, #28]
 8003b6c:	f000 f8a2 	bl	8003cb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b70:	2301      	movs	r3, #1
 8003b72:	61bb      	str	r3, [r7, #24]
 8003b74:	e002      	b.n	8003b7c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b76:	f04f 33ff 	mov.w	r3, #4294967295
 8003b7a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b7c:	69bb      	ldr	r3, [r7, #24]
	}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3720      	adds	r7, #32
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
	...

08003b88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b088      	sub	sp, #32
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
 8003b94:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4413      	add	r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	f023 0307 	bic.w	r3, r3, #7
 8003bae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00a      	beq.n	8003bd0 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbe:	f383 8811 	msr	BASEPRI, r3
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	617b      	str	r3, [r7, #20]
}
 8003bcc:	bf00      	nop
 8003bce:	e7fe      	b.n	8003bce <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	61fb      	str	r3, [r7, #28]
 8003bd4:	e012      	b.n	8003bfc <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	4413      	add	r3, r2
 8003bdc:	7819      	ldrb	r1, [r3, #0]
 8003bde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	4413      	add	r3, r2
 8003be4:	3334      	adds	r3, #52	; 0x34
 8003be6:	460a      	mov	r2, r1
 8003be8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	4413      	add	r3, r2
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d006      	beq.n	8003c04 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	61fb      	str	r3, [r7, #28]
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	2b0f      	cmp	r3, #15
 8003c00:	d9e9      	bls.n	8003bd6 <prvInitialiseNewTask+0x4e>
 8003c02:	e000      	b.n	8003c06 <prvInitialiseNewTask+0x7e>
		{
			break;
 8003c04:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c10:	2b06      	cmp	r3, #6
 8003c12:	d901      	bls.n	8003c18 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c14:	2306      	movs	r3, #6
 8003c16:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c1c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c22:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c26:	2200      	movs	r2, #0
 8003c28:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7ff fe74 	bl	800391c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c36:	3318      	adds	r3, #24
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7ff fe6f 	bl	800391c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c42:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c46:	f1c3 0207 	rsb	r2, r3, #7
 8003c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c52:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c56:	2200      	movs	r2, #0
 8003c58:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c66:	334c      	adds	r3, #76	; 0x4c
 8003c68:	224c      	movs	r2, #76	; 0x4c
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f001 f825 	bl	8004cbc <memset>
 8003c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c74:	4a0c      	ldr	r2, [pc, #48]	; (8003ca8 <prvInitialiseNewTask+0x120>)
 8003c76:	651a      	str	r2, [r3, #80]	; 0x50
 8003c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7a:	4a0c      	ldr	r2, [pc, #48]	; (8003cac <prvInitialiseNewTask+0x124>)
 8003c7c:	655a      	str	r2, [r3, #84]	; 0x54
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c80:	4a0b      	ldr	r2, [pc, #44]	; (8003cb0 <prvInitialiseNewTask+0x128>)
 8003c82:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	68f9      	ldr	r1, [r7, #12]
 8003c88:	69b8      	ldr	r0, [r7, #24]
 8003c8a:	f000 fc2b 	bl	80044e4 <pxPortInitialiseStack>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c92:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d002      	beq.n	8003ca0 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c9e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ca0:	bf00      	nop
 8003ca2:	3720      	adds	r7, #32
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	2000114c 	.word	0x2000114c
 8003cac:	200011b4 	.word	0x200011b4
 8003cb0:	2000121c 	.word	0x2000121c

08003cb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003cbc:	f000 fd42 	bl	8004744 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003cc0:	4b2a      	ldr	r3, [pc, #168]	; (8003d6c <prvAddNewTaskToReadyList+0xb8>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	4a29      	ldr	r2, [pc, #164]	; (8003d6c <prvAddNewTaskToReadyList+0xb8>)
 8003cc8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003cca:	4b29      	ldr	r3, [pc, #164]	; (8003d70 <prvAddNewTaskToReadyList+0xbc>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d109      	bne.n	8003ce6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003cd2:	4a27      	ldr	r2, [pc, #156]	; (8003d70 <prvAddNewTaskToReadyList+0xbc>)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003cd8:	4b24      	ldr	r3, [pc, #144]	; (8003d6c <prvAddNewTaskToReadyList+0xb8>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d110      	bne.n	8003d02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ce0:	f000 fad2 	bl	8004288 <prvInitialiseTaskLists>
 8003ce4:	e00d      	b.n	8003d02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ce6:	4b23      	ldr	r3, [pc, #140]	; (8003d74 <prvAddNewTaskToReadyList+0xc0>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d109      	bne.n	8003d02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003cee:	4b20      	ldr	r3, [pc, #128]	; (8003d70 <prvAddNewTaskToReadyList+0xbc>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d802      	bhi.n	8003d02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003cfc:	4a1c      	ldr	r2, [pc, #112]	; (8003d70 <prvAddNewTaskToReadyList+0xbc>)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003d02:	4b1d      	ldr	r3, [pc, #116]	; (8003d78 <prvAddNewTaskToReadyList+0xc4>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	3301      	adds	r3, #1
 8003d08:	4a1b      	ldr	r2, [pc, #108]	; (8003d78 <prvAddNewTaskToReadyList+0xc4>)
 8003d0a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d10:	2201      	movs	r2, #1
 8003d12:	409a      	lsls	r2, r3
 8003d14:	4b19      	ldr	r3, [pc, #100]	; (8003d7c <prvAddNewTaskToReadyList+0xc8>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	4a18      	ldr	r2, [pc, #96]	; (8003d7c <prvAddNewTaskToReadyList+0xc8>)
 8003d1c:	6013      	str	r3, [r2, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d22:	4613      	mov	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4413      	add	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4a15      	ldr	r2, [pc, #84]	; (8003d80 <prvAddNewTaskToReadyList+0xcc>)
 8003d2c:	441a      	add	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	3304      	adds	r3, #4
 8003d32:	4619      	mov	r1, r3
 8003d34:	4610      	mov	r0, r2
 8003d36:	f7ff fdfe 	bl	8003936 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d3a:	f000 fd33 	bl	80047a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d3e:	4b0d      	ldr	r3, [pc, #52]	; (8003d74 <prvAddNewTaskToReadyList+0xc0>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00e      	beq.n	8003d64 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d46:	4b0a      	ldr	r3, [pc, #40]	; (8003d70 <prvAddNewTaskToReadyList+0xbc>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d207      	bcs.n	8003d64 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d54:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <prvAddNewTaskToReadyList+0xd0>)
 8003d56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	f3bf 8f4f 	dsb	sy
 8003d60:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d64:	bf00      	nop
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	20000500 	.word	0x20000500
 8003d70:	20000400 	.word	0x20000400
 8003d74:	2000050c 	.word	0x2000050c
 8003d78:	2000051c 	.word	0x2000051c
 8003d7c:	20000508 	.word	0x20000508
 8003d80:	20000404 	.word	0x20000404
 8003d84:	e000ed04 	.word	0xe000ed04

08003d88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d90:	2300      	movs	r3, #0
 8003d92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d017      	beq.n	8003dca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d9a:	4b13      	ldr	r3, [pc, #76]	; (8003de8 <vTaskDelay+0x60>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <vTaskDelay+0x30>
	__asm volatile
 8003da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da6:	f383 8811 	msr	BASEPRI, r3
 8003daa:	f3bf 8f6f 	isb	sy
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	60bb      	str	r3, [r7, #8]
}
 8003db4:	bf00      	nop
 8003db6:	e7fe      	b.n	8003db6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003db8:	f000 f884 	bl	8003ec4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 fb2a 	bl	8004418 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003dc4:	f000 f88c 	bl	8003ee0 <xTaskResumeAll>
 8003dc8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d107      	bne.n	8003de0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003dd0:	4b06      	ldr	r3, [pc, #24]	; (8003dec <vTaskDelay+0x64>)
 8003dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003de0:	bf00      	nop
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	20000528 	.word	0x20000528
 8003dec:	e000ed04 	.word	0xe000ed04

08003df0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b08a      	sub	sp, #40	; 0x28
 8003df4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003df6:	2300      	movs	r3, #0
 8003df8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003dfe:	463a      	mov	r2, r7
 8003e00:	1d39      	adds	r1, r7, #4
 8003e02:	f107 0308 	add.w	r3, r7, #8
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fc f9ea 	bl	80001e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003e0c:	6839      	ldr	r1, [r7, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	9202      	str	r2, [sp, #8]
 8003e14:	9301      	str	r3, [sp, #4]
 8003e16:	2300      	movs	r3, #0
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	460a      	mov	r2, r1
 8003e1e:	4921      	ldr	r1, [pc, #132]	; (8003ea4 <vTaskStartScheduler+0xb4>)
 8003e20:	4821      	ldr	r0, [pc, #132]	; (8003ea8 <vTaskStartScheduler+0xb8>)
 8003e22:	f7ff fe0f 	bl	8003a44 <xTaskCreateStatic>
 8003e26:	4603      	mov	r3, r0
 8003e28:	4a20      	ldr	r2, [pc, #128]	; (8003eac <vTaskStartScheduler+0xbc>)
 8003e2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003e2c:	4b1f      	ldr	r3, [pc, #124]	; (8003eac <vTaskStartScheduler+0xbc>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d002      	beq.n	8003e3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003e34:	2301      	movs	r3, #1
 8003e36:	617b      	str	r3, [r7, #20]
 8003e38:	e001      	b.n	8003e3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d11b      	bne.n	8003e7c <vTaskStartScheduler+0x8c>
	__asm volatile
 8003e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e48:	f383 8811 	msr	BASEPRI, r3
 8003e4c:	f3bf 8f6f 	isb	sy
 8003e50:	f3bf 8f4f 	dsb	sy
 8003e54:	613b      	str	r3, [r7, #16]
}
 8003e56:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003e58:	4b15      	ldr	r3, [pc, #84]	; (8003eb0 <vTaskStartScheduler+0xc0>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	334c      	adds	r3, #76	; 0x4c
 8003e5e:	4a15      	ldr	r2, [pc, #84]	; (8003eb4 <vTaskStartScheduler+0xc4>)
 8003e60:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003e62:	4b15      	ldr	r3, [pc, #84]	; (8003eb8 <vTaskStartScheduler+0xc8>)
 8003e64:	f04f 32ff 	mov.w	r2, #4294967295
 8003e68:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003e6a:	4b14      	ldr	r3, [pc, #80]	; (8003ebc <vTaskStartScheduler+0xcc>)
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003e70:	4b13      	ldr	r3, [pc, #76]	; (8003ec0 <vTaskStartScheduler+0xd0>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e76:	f000 fbc3 	bl	8004600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e7a:	e00e      	b.n	8003e9a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e82:	d10a      	bne.n	8003e9a <vTaskStartScheduler+0xaa>
	__asm volatile
 8003e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e88:	f383 8811 	msr	BASEPRI, r3
 8003e8c:	f3bf 8f6f 	isb	sy
 8003e90:	f3bf 8f4f 	dsb	sy
 8003e94:	60fb      	str	r3, [r7, #12]
}
 8003e96:	bf00      	nop
 8003e98:	e7fe      	b.n	8003e98 <vTaskStartScheduler+0xa8>
}
 8003e9a:	bf00      	nop
 8003e9c:	3718      	adds	r7, #24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	08004f18 	.word	0x08004f18
 8003ea8:	08004259 	.word	0x08004259
 8003eac:	20000524 	.word	0x20000524
 8003eb0:	20000400 	.word	0x20000400
 8003eb4:	2000005c 	.word	0x2000005c
 8003eb8:	20000520 	.word	0x20000520
 8003ebc:	2000050c 	.word	0x2000050c
 8003ec0:	20000504 	.word	0x20000504

08003ec4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003ec8:	4b04      	ldr	r3, [pc, #16]	; (8003edc <vTaskSuspendAll+0x18>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	4a03      	ldr	r2, [pc, #12]	; (8003edc <vTaskSuspendAll+0x18>)
 8003ed0:	6013      	str	r3, [r2, #0]
}
 8003ed2:	bf00      	nop
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	20000528 	.word	0x20000528

08003ee0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003eea:	2300      	movs	r3, #0
 8003eec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003eee:	4b41      	ldr	r3, [pc, #260]	; (8003ff4 <xTaskResumeAll+0x114>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10a      	bne.n	8003f0c <xTaskResumeAll+0x2c>
	__asm volatile
 8003ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efa:	f383 8811 	msr	BASEPRI, r3
 8003efe:	f3bf 8f6f 	isb	sy
 8003f02:	f3bf 8f4f 	dsb	sy
 8003f06:	603b      	str	r3, [r7, #0]
}
 8003f08:	bf00      	nop
 8003f0a:	e7fe      	b.n	8003f0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003f0c:	f000 fc1a 	bl	8004744 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003f10:	4b38      	ldr	r3, [pc, #224]	; (8003ff4 <xTaskResumeAll+0x114>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3b01      	subs	r3, #1
 8003f16:	4a37      	ldr	r2, [pc, #220]	; (8003ff4 <xTaskResumeAll+0x114>)
 8003f18:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f1a:	4b36      	ldr	r3, [pc, #216]	; (8003ff4 <xTaskResumeAll+0x114>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d161      	bne.n	8003fe6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f22:	4b35      	ldr	r3, [pc, #212]	; (8003ff8 <xTaskResumeAll+0x118>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d05d      	beq.n	8003fe6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f2a:	e02e      	b.n	8003f8a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003f2c:	4b33      	ldr	r3, [pc, #204]	; (8003ffc <xTaskResumeAll+0x11c>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	3318      	adds	r3, #24
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff fd59 	bl	80039f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	3304      	adds	r3, #4
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7ff fd54 	bl	80039f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	409a      	lsls	r2, r3
 8003f50:	4b2b      	ldr	r3, [pc, #172]	; (8004000 <xTaskResumeAll+0x120>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	4a2a      	ldr	r2, [pc, #168]	; (8004000 <xTaskResumeAll+0x120>)
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f5e:	4613      	mov	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4413      	add	r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	4a27      	ldr	r2, [pc, #156]	; (8004004 <xTaskResumeAll+0x124>)
 8003f68:	441a      	add	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	3304      	adds	r3, #4
 8003f6e:	4619      	mov	r1, r3
 8003f70:	4610      	mov	r0, r2
 8003f72:	f7ff fce0 	bl	8003936 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f7a:	4b23      	ldr	r3, [pc, #140]	; (8004008 <xTaskResumeAll+0x128>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d302      	bcc.n	8003f8a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003f84:	4b21      	ldr	r3, [pc, #132]	; (800400c <xTaskResumeAll+0x12c>)
 8003f86:	2201      	movs	r2, #1
 8003f88:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f8a:	4b1c      	ldr	r3, [pc, #112]	; (8003ffc <xTaskResumeAll+0x11c>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1cc      	bne.n	8003f2c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f98:	f000 fa18 	bl	80043cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003f9c:	4b1c      	ldr	r3, [pc, #112]	; (8004010 <xTaskResumeAll+0x130>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d010      	beq.n	8003fca <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003fa8:	f000 f836 	bl	8004018 <xTaskIncrementTick>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d002      	beq.n	8003fb8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003fb2:	4b16      	ldr	r3, [pc, #88]	; (800400c <xTaskResumeAll+0x12c>)
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1f1      	bne.n	8003fa8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003fc4:	4b12      	ldr	r3, [pc, #72]	; (8004010 <xTaskResumeAll+0x130>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003fca:	4b10      	ldr	r3, [pc, #64]	; (800400c <xTaskResumeAll+0x12c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d009      	beq.n	8003fe6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003fd6:	4b0f      	ldr	r3, [pc, #60]	; (8004014 <xTaskResumeAll+0x134>)
 8003fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	f3bf 8f4f 	dsb	sy
 8003fe2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003fe6:	f000 fbdd 	bl	80047a4 <vPortExitCritical>

	return xAlreadyYielded;
 8003fea:	68bb      	ldr	r3, [r7, #8]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	20000528 	.word	0x20000528
 8003ff8:	20000500 	.word	0x20000500
 8003ffc:	200004c0 	.word	0x200004c0
 8004000:	20000508 	.word	0x20000508
 8004004:	20000404 	.word	0x20000404
 8004008:	20000400 	.word	0x20000400
 800400c:	20000514 	.word	0x20000514
 8004010:	20000510 	.word	0x20000510
 8004014:	e000ed04 	.word	0xe000ed04

08004018 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800401e:	2300      	movs	r3, #0
 8004020:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004022:	4b51      	ldr	r3, [pc, #324]	; (8004168 <xTaskIncrementTick+0x150>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	f040 808d 	bne.w	8004146 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800402c:	4b4f      	ldr	r3, [pc, #316]	; (800416c <xTaskIncrementTick+0x154>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3301      	adds	r3, #1
 8004032:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004034:	4a4d      	ldr	r2, [pc, #308]	; (800416c <xTaskIncrementTick+0x154>)
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d120      	bne.n	8004082 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004040:	4b4b      	ldr	r3, [pc, #300]	; (8004170 <xTaskIncrementTick+0x158>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00a      	beq.n	8004060 <xTaskIncrementTick+0x48>
	__asm volatile
 800404a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404e:	f383 8811 	msr	BASEPRI, r3
 8004052:	f3bf 8f6f 	isb	sy
 8004056:	f3bf 8f4f 	dsb	sy
 800405a:	603b      	str	r3, [r7, #0]
}
 800405c:	bf00      	nop
 800405e:	e7fe      	b.n	800405e <xTaskIncrementTick+0x46>
 8004060:	4b43      	ldr	r3, [pc, #268]	; (8004170 <xTaskIncrementTick+0x158>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	4b43      	ldr	r3, [pc, #268]	; (8004174 <xTaskIncrementTick+0x15c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a41      	ldr	r2, [pc, #260]	; (8004170 <xTaskIncrementTick+0x158>)
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	4a41      	ldr	r2, [pc, #260]	; (8004174 <xTaskIncrementTick+0x15c>)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6013      	str	r3, [r2, #0]
 8004074:	4b40      	ldr	r3, [pc, #256]	; (8004178 <xTaskIncrementTick+0x160>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	3301      	adds	r3, #1
 800407a:	4a3f      	ldr	r2, [pc, #252]	; (8004178 <xTaskIncrementTick+0x160>)
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	f000 f9a5 	bl	80043cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004082:	4b3e      	ldr	r3, [pc, #248]	; (800417c <xTaskIncrementTick+0x164>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	429a      	cmp	r2, r3
 800408a:	d34d      	bcc.n	8004128 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800408c:	4b38      	ldr	r3, [pc, #224]	; (8004170 <xTaskIncrementTick+0x158>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <xTaskIncrementTick+0x82>
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <xTaskIncrementTick+0x84>
 800409a:	2300      	movs	r3, #0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d004      	beq.n	80040aa <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040a0:	4b36      	ldr	r3, [pc, #216]	; (800417c <xTaskIncrementTick+0x164>)
 80040a2:	f04f 32ff 	mov.w	r2, #4294967295
 80040a6:	601a      	str	r2, [r3, #0]
					break;
 80040a8:	e03e      	b.n	8004128 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80040aa:	4b31      	ldr	r3, [pc, #196]	; (8004170 <xTaskIncrementTick+0x158>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d203      	bcs.n	80040ca <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80040c2:	4a2e      	ldr	r2, [pc, #184]	; (800417c <xTaskIncrementTick+0x164>)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6013      	str	r3, [r2, #0]
						break;
 80040c8:	e02e      	b.n	8004128 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	3304      	adds	r3, #4
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff fc8e 	bl	80039f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d004      	beq.n	80040e6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	3318      	adds	r3, #24
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7ff fc85 	bl	80039f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ea:	2201      	movs	r2, #1
 80040ec:	409a      	lsls	r2, r3
 80040ee:	4b24      	ldr	r3, [pc, #144]	; (8004180 <xTaskIncrementTick+0x168>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	4a22      	ldr	r2, [pc, #136]	; (8004180 <xTaskIncrementTick+0x168>)
 80040f6:	6013      	str	r3, [r2, #0]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040fc:	4613      	mov	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4a1f      	ldr	r2, [pc, #124]	; (8004184 <xTaskIncrementTick+0x16c>)
 8004106:	441a      	add	r2, r3
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	3304      	adds	r3, #4
 800410c:	4619      	mov	r1, r3
 800410e:	4610      	mov	r0, r2
 8004110:	f7ff fc11 	bl	8003936 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004118:	4b1b      	ldr	r3, [pc, #108]	; (8004188 <xTaskIncrementTick+0x170>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411e:	429a      	cmp	r2, r3
 8004120:	d3b4      	bcc.n	800408c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004122:	2301      	movs	r3, #1
 8004124:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004126:	e7b1      	b.n	800408c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004128:	4b17      	ldr	r3, [pc, #92]	; (8004188 <xTaskIncrementTick+0x170>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800412e:	4915      	ldr	r1, [pc, #84]	; (8004184 <xTaskIncrementTick+0x16c>)
 8004130:	4613      	mov	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d907      	bls.n	8004150 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004140:	2301      	movs	r3, #1
 8004142:	617b      	str	r3, [r7, #20]
 8004144:	e004      	b.n	8004150 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004146:	4b11      	ldr	r3, [pc, #68]	; (800418c <xTaskIncrementTick+0x174>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	3301      	adds	r3, #1
 800414c:	4a0f      	ldr	r2, [pc, #60]	; (800418c <xTaskIncrementTick+0x174>)
 800414e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004150:	4b0f      	ldr	r3, [pc, #60]	; (8004190 <xTaskIncrementTick+0x178>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004158:	2301      	movs	r3, #1
 800415a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800415c:	697b      	ldr	r3, [r7, #20]
}
 800415e:	4618      	mov	r0, r3
 8004160:	3718      	adds	r7, #24
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	20000528 	.word	0x20000528
 800416c:	20000504 	.word	0x20000504
 8004170:	200004b8 	.word	0x200004b8
 8004174:	200004bc 	.word	0x200004bc
 8004178:	20000518 	.word	0x20000518
 800417c:	20000520 	.word	0x20000520
 8004180:	20000508 	.word	0x20000508
 8004184:	20000404 	.word	0x20000404
 8004188:	20000400 	.word	0x20000400
 800418c:	20000510 	.word	0x20000510
 8004190:	20000514 	.word	0x20000514

08004194 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800419a:	4b29      	ldr	r3, [pc, #164]	; (8004240 <vTaskSwitchContext+0xac>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80041a2:	4b28      	ldr	r3, [pc, #160]	; (8004244 <vTaskSwitchContext+0xb0>)
 80041a4:	2201      	movs	r2, #1
 80041a6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80041a8:	e044      	b.n	8004234 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80041aa:	4b26      	ldr	r3, [pc, #152]	; (8004244 <vTaskSwitchContext+0xb0>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80041b0:	4b25      	ldr	r3, [pc, #148]	; (8004248 <vTaskSwitchContext+0xb4>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	fab3 f383 	clz	r3, r3
 80041bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80041be:	7afb      	ldrb	r3, [r7, #11]
 80041c0:	f1c3 031f 	rsb	r3, r3, #31
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	4921      	ldr	r1, [pc, #132]	; (800424c <vTaskSwitchContext+0xb8>)
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	4613      	mov	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	440b      	add	r3, r1
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10a      	bne.n	80041f0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80041da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041de:	f383 8811 	msr	BASEPRI, r3
 80041e2:	f3bf 8f6f 	isb	sy
 80041e6:	f3bf 8f4f 	dsb	sy
 80041ea:	607b      	str	r3, [r7, #4]
}
 80041ec:	bf00      	nop
 80041ee:	e7fe      	b.n	80041ee <vTaskSwitchContext+0x5a>
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	4613      	mov	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4a14      	ldr	r2, [pc, #80]	; (800424c <vTaskSwitchContext+0xb8>)
 80041fc:	4413      	add	r3, r2
 80041fe:	613b      	str	r3, [r7, #16]
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	605a      	str	r2, [r3, #4]
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	3308      	adds	r3, #8
 8004212:	429a      	cmp	r2, r3
 8004214:	d104      	bne.n	8004220 <vTaskSwitchContext+0x8c>
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	605a      	str	r2, [r3, #4]
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	4a0a      	ldr	r2, [pc, #40]	; (8004250 <vTaskSwitchContext+0xbc>)
 8004228:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800422a:	4b09      	ldr	r3, [pc, #36]	; (8004250 <vTaskSwitchContext+0xbc>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	334c      	adds	r3, #76	; 0x4c
 8004230:	4a08      	ldr	r2, [pc, #32]	; (8004254 <vTaskSwitchContext+0xc0>)
 8004232:	6013      	str	r3, [r2, #0]
}
 8004234:	bf00      	nop
 8004236:	371c      	adds	r7, #28
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	20000528 	.word	0x20000528
 8004244:	20000514 	.word	0x20000514
 8004248:	20000508 	.word	0x20000508
 800424c:	20000404 	.word	0x20000404
 8004250:	20000400 	.word	0x20000400
 8004254:	2000005c 	.word	0x2000005c

08004258 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004260:	f000 f852 	bl	8004308 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004264:	4b06      	ldr	r3, [pc, #24]	; (8004280 <prvIdleTask+0x28>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d9f9      	bls.n	8004260 <prvIdleTask+0x8>
			{
				taskYIELD();
 800426c:	4b05      	ldr	r3, [pc, #20]	; (8004284 <prvIdleTask+0x2c>)
 800426e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800427c:	e7f0      	b.n	8004260 <prvIdleTask+0x8>
 800427e:	bf00      	nop
 8004280:	20000404 	.word	0x20000404
 8004284:	e000ed04 	.word	0xe000ed04

08004288 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800428e:	2300      	movs	r3, #0
 8004290:	607b      	str	r3, [r7, #4]
 8004292:	e00c      	b.n	80042ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	4613      	mov	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4413      	add	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4a12      	ldr	r2, [pc, #72]	; (80042e8 <prvInitialiseTaskLists+0x60>)
 80042a0:	4413      	add	r3, r2
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7ff fb1a 	bl	80038dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	3301      	adds	r3, #1
 80042ac:	607b      	str	r3, [r7, #4]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b06      	cmp	r3, #6
 80042b2:	d9ef      	bls.n	8004294 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80042b4:	480d      	ldr	r0, [pc, #52]	; (80042ec <prvInitialiseTaskLists+0x64>)
 80042b6:	f7ff fb11 	bl	80038dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80042ba:	480d      	ldr	r0, [pc, #52]	; (80042f0 <prvInitialiseTaskLists+0x68>)
 80042bc:	f7ff fb0e 	bl	80038dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80042c0:	480c      	ldr	r0, [pc, #48]	; (80042f4 <prvInitialiseTaskLists+0x6c>)
 80042c2:	f7ff fb0b 	bl	80038dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80042c6:	480c      	ldr	r0, [pc, #48]	; (80042f8 <prvInitialiseTaskLists+0x70>)
 80042c8:	f7ff fb08 	bl	80038dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80042cc:	480b      	ldr	r0, [pc, #44]	; (80042fc <prvInitialiseTaskLists+0x74>)
 80042ce:	f7ff fb05 	bl	80038dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80042d2:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <prvInitialiseTaskLists+0x78>)
 80042d4:	4a05      	ldr	r2, [pc, #20]	; (80042ec <prvInitialiseTaskLists+0x64>)
 80042d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80042d8:	4b0a      	ldr	r3, [pc, #40]	; (8004304 <prvInitialiseTaskLists+0x7c>)
 80042da:	4a05      	ldr	r2, [pc, #20]	; (80042f0 <prvInitialiseTaskLists+0x68>)
 80042dc:	601a      	str	r2, [r3, #0]
}
 80042de:	bf00      	nop
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	20000404 	.word	0x20000404
 80042ec:	20000490 	.word	0x20000490
 80042f0:	200004a4 	.word	0x200004a4
 80042f4:	200004c0 	.word	0x200004c0
 80042f8:	200004d4 	.word	0x200004d4
 80042fc:	200004ec 	.word	0x200004ec
 8004300:	200004b8 	.word	0x200004b8
 8004304:	200004bc 	.word	0x200004bc

08004308 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800430e:	e019      	b.n	8004344 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004310:	f000 fa18 	bl	8004744 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004314:	4b10      	ldr	r3, [pc, #64]	; (8004358 <prvCheckTasksWaitingTermination+0x50>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3304      	adds	r3, #4
 8004320:	4618      	mov	r0, r3
 8004322:	f7ff fb65 	bl	80039f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004326:	4b0d      	ldr	r3, [pc, #52]	; (800435c <prvCheckTasksWaitingTermination+0x54>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	3b01      	subs	r3, #1
 800432c:	4a0b      	ldr	r2, [pc, #44]	; (800435c <prvCheckTasksWaitingTermination+0x54>)
 800432e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004330:	4b0b      	ldr	r3, [pc, #44]	; (8004360 <prvCheckTasksWaitingTermination+0x58>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3b01      	subs	r3, #1
 8004336:	4a0a      	ldr	r2, [pc, #40]	; (8004360 <prvCheckTasksWaitingTermination+0x58>)
 8004338:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800433a:	f000 fa33 	bl	80047a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f810 	bl	8004364 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004344:	4b06      	ldr	r3, [pc, #24]	; (8004360 <prvCheckTasksWaitingTermination+0x58>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1e1      	bne.n	8004310 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800434c:	bf00      	nop
 800434e:	bf00      	nop
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	200004d4 	.word	0x200004d4
 800435c:	20000500 	.word	0x20000500
 8004360:	200004e8 	.word	0x200004e8

08004364 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	334c      	adds	r3, #76	; 0x4c
 8004370:	4618      	mov	r0, r3
 8004372:	f000 fcab 	bl	8004ccc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800437c:	2b00      	cmp	r3, #0
 800437e:	d108      	bne.n	8004392 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004384:	4618      	mov	r0, r3
 8004386:	f000 fb83 	bl	8004a90 <vPortFree>
				vPortFree( pxTCB );
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fb80 	bl	8004a90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004390:	e018      	b.n	80043c4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004398:	2b01      	cmp	r3, #1
 800439a:	d103      	bne.n	80043a4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 fb77 	bl	8004a90 <vPortFree>
	}
 80043a2:	e00f      	b.n	80043c4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d00a      	beq.n	80043c4 <prvDeleteTCB+0x60>
	__asm volatile
 80043ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b2:	f383 8811 	msr	BASEPRI, r3
 80043b6:	f3bf 8f6f 	isb	sy
 80043ba:	f3bf 8f4f 	dsb	sy
 80043be:	60fb      	str	r3, [r7, #12]
}
 80043c0:	bf00      	nop
 80043c2:	e7fe      	b.n	80043c2 <prvDeleteTCB+0x5e>
	}
 80043c4:	bf00      	nop
 80043c6:	3710      	adds	r7, #16
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043d2:	4b0f      	ldr	r3, [pc, #60]	; (8004410 <prvResetNextTaskUnblockTime+0x44>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d101      	bne.n	80043e0 <prvResetNextTaskUnblockTime+0x14>
 80043dc:	2301      	movs	r3, #1
 80043de:	e000      	b.n	80043e2 <prvResetNextTaskUnblockTime+0x16>
 80043e0:	2300      	movs	r3, #0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d004      	beq.n	80043f0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80043e6:	4b0b      	ldr	r3, [pc, #44]	; (8004414 <prvResetNextTaskUnblockTime+0x48>)
 80043e8:	f04f 32ff 	mov.w	r2, #4294967295
 80043ec:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80043ee:	e008      	b.n	8004402 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80043f0:	4b07      	ldr	r3, [pc, #28]	; (8004410 <prvResetNextTaskUnblockTime+0x44>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	4a05      	ldr	r2, [pc, #20]	; (8004414 <prvResetNextTaskUnblockTime+0x48>)
 8004400:	6013      	str	r3, [r2, #0]
}
 8004402:	bf00      	nop
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	200004b8 	.word	0x200004b8
 8004414:	20000520 	.word	0x20000520

08004418 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004422:	4b29      	ldr	r3, [pc, #164]	; (80044c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004428:	4b28      	ldr	r3, [pc, #160]	; (80044cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	3304      	adds	r3, #4
 800442e:	4618      	mov	r0, r3
 8004430:	f7ff fade 	bl	80039f0 <uxListRemove>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10b      	bne.n	8004452 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800443a:	4b24      	ldr	r3, [pc, #144]	; (80044cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004440:	2201      	movs	r2, #1
 8004442:	fa02 f303 	lsl.w	r3, r2, r3
 8004446:	43da      	mvns	r2, r3
 8004448:	4b21      	ldr	r3, [pc, #132]	; (80044d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4013      	ands	r3, r2
 800444e:	4a20      	ldr	r2, [pc, #128]	; (80044d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004450:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004458:	d10a      	bne.n	8004470 <prvAddCurrentTaskToDelayedList+0x58>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d007      	beq.n	8004470 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004460:	4b1a      	ldr	r3, [pc, #104]	; (80044cc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	3304      	adds	r3, #4
 8004466:	4619      	mov	r1, r3
 8004468:	481a      	ldr	r0, [pc, #104]	; (80044d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800446a:	f7ff fa64 	bl	8003936 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800446e:	e026      	b.n	80044be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4413      	add	r3, r2
 8004476:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004478:	4b14      	ldr	r3, [pc, #80]	; (80044cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004480:	68ba      	ldr	r2, [r7, #8]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	429a      	cmp	r2, r3
 8004486:	d209      	bcs.n	800449c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004488:	4b13      	ldr	r3, [pc, #76]	; (80044d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	4b0f      	ldr	r3, [pc, #60]	; (80044cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	3304      	adds	r3, #4
 8004492:	4619      	mov	r1, r3
 8004494:	4610      	mov	r0, r2
 8004496:	f7ff fa72 	bl	800397e <vListInsert>
}
 800449a:	e010      	b.n	80044be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800449c:	4b0f      	ldr	r3, [pc, #60]	; (80044dc <prvAddCurrentTaskToDelayedList+0xc4>)
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	4b0a      	ldr	r3, [pc, #40]	; (80044cc <prvAddCurrentTaskToDelayedList+0xb4>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	3304      	adds	r3, #4
 80044a6:	4619      	mov	r1, r3
 80044a8:	4610      	mov	r0, r2
 80044aa:	f7ff fa68 	bl	800397e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80044ae:	4b0c      	ldr	r3, [pc, #48]	; (80044e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d202      	bcs.n	80044be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80044b8:	4a09      	ldr	r2, [pc, #36]	; (80044e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	6013      	str	r3, [r2, #0]
}
 80044be:	bf00      	nop
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	20000504 	.word	0x20000504
 80044cc:	20000400 	.word	0x20000400
 80044d0:	20000508 	.word	0x20000508
 80044d4:	200004ec 	.word	0x200004ec
 80044d8:	200004bc 	.word	0x200004bc
 80044dc:	200004b8 	.word	0x200004b8
 80044e0:	20000520 	.word	0x20000520

080044e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	3b04      	subs	r3, #4
 80044f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	3b04      	subs	r3, #4
 8004502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f023 0201 	bic.w	r2, r3, #1
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	3b04      	subs	r3, #4
 8004512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004514:	4a0c      	ldr	r2, [pc, #48]	; (8004548 <pxPortInitialiseStack+0x64>)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	3b14      	subs	r3, #20
 800451e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	3b04      	subs	r3, #4
 800452a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f06f 0202 	mvn.w	r2, #2
 8004532:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	3b20      	subs	r3, #32
 8004538:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800453a:	68fb      	ldr	r3, [r7, #12]
}
 800453c:	4618      	mov	r0, r3
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	0800454d 	.word	0x0800454d

0800454c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004552:	2300      	movs	r3, #0
 8004554:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004556:	4b12      	ldr	r3, [pc, #72]	; (80045a0 <prvTaskExitError+0x54>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455e:	d00a      	beq.n	8004576 <prvTaskExitError+0x2a>
	__asm volatile
 8004560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004564:	f383 8811 	msr	BASEPRI, r3
 8004568:	f3bf 8f6f 	isb	sy
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	60fb      	str	r3, [r7, #12]
}
 8004572:	bf00      	nop
 8004574:	e7fe      	b.n	8004574 <prvTaskExitError+0x28>
	__asm volatile
 8004576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457a:	f383 8811 	msr	BASEPRI, r3
 800457e:	f3bf 8f6f 	isb	sy
 8004582:	f3bf 8f4f 	dsb	sy
 8004586:	60bb      	str	r3, [r7, #8]
}
 8004588:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800458a:	bf00      	nop
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0fc      	beq.n	800458c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004592:	bf00      	nop
 8004594:	bf00      	nop
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	2000000c 	.word	0x2000000c
	...

080045b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80045b0:	4b07      	ldr	r3, [pc, #28]	; (80045d0 <pxCurrentTCBConst2>)
 80045b2:	6819      	ldr	r1, [r3, #0]
 80045b4:	6808      	ldr	r0, [r1, #0]
 80045b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ba:	f380 8809 	msr	PSP, r0
 80045be:	f3bf 8f6f 	isb	sy
 80045c2:	f04f 0000 	mov.w	r0, #0
 80045c6:	f380 8811 	msr	BASEPRI, r0
 80045ca:	4770      	bx	lr
 80045cc:	f3af 8000 	nop.w

080045d0 <pxCurrentTCBConst2>:
 80045d0:	20000400 	.word	0x20000400
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80045d4:	bf00      	nop
 80045d6:	bf00      	nop

080045d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80045d8:	4808      	ldr	r0, [pc, #32]	; (80045fc <prvPortStartFirstTask+0x24>)
 80045da:	6800      	ldr	r0, [r0, #0]
 80045dc:	6800      	ldr	r0, [r0, #0]
 80045de:	f380 8808 	msr	MSP, r0
 80045e2:	f04f 0000 	mov.w	r0, #0
 80045e6:	f380 8814 	msr	CONTROL, r0
 80045ea:	b662      	cpsie	i
 80045ec:	b661      	cpsie	f
 80045ee:	f3bf 8f4f 	dsb	sy
 80045f2:	f3bf 8f6f 	isb	sy
 80045f6:	df00      	svc	0
 80045f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80045fa:	bf00      	nop
 80045fc:	e000ed08 	.word	0xe000ed08

08004600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004606:	4b46      	ldr	r3, [pc, #280]	; (8004720 <xPortStartScheduler+0x120>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a46      	ldr	r2, [pc, #280]	; (8004724 <xPortStartScheduler+0x124>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d10a      	bne.n	8004626 <xPortStartScheduler+0x26>
	__asm volatile
 8004610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004614:	f383 8811 	msr	BASEPRI, r3
 8004618:	f3bf 8f6f 	isb	sy
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	613b      	str	r3, [r7, #16]
}
 8004622:	bf00      	nop
 8004624:	e7fe      	b.n	8004624 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004626:	4b3e      	ldr	r3, [pc, #248]	; (8004720 <xPortStartScheduler+0x120>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a3f      	ldr	r2, [pc, #252]	; (8004728 <xPortStartScheduler+0x128>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d10a      	bne.n	8004646 <xPortStartScheduler+0x46>
	__asm volatile
 8004630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004634:	f383 8811 	msr	BASEPRI, r3
 8004638:	f3bf 8f6f 	isb	sy
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	60fb      	str	r3, [r7, #12]
}
 8004642:	bf00      	nop
 8004644:	e7fe      	b.n	8004644 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004646:	4b39      	ldr	r3, [pc, #228]	; (800472c <xPortStartScheduler+0x12c>)
 8004648:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	b2db      	uxtb	r3, r3
 8004650:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	22ff      	movs	r2, #255	; 0xff
 8004656:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	b2db      	uxtb	r3, r3
 800465e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004660:	78fb      	ldrb	r3, [r7, #3]
 8004662:	b2db      	uxtb	r3, r3
 8004664:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004668:	b2da      	uxtb	r2, r3
 800466a:	4b31      	ldr	r3, [pc, #196]	; (8004730 <xPortStartScheduler+0x130>)
 800466c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800466e:	4b31      	ldr	r3, [pc, #196]	; (8004734 <xPortStartScheduler+0x134>)
 8004670:	2207      	movs	r2, #7
 8004672:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004674:	e009      	b.n	800468a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004676:	4b2f      	ldr	r3, [pc, #188]	; (8004734 <xPortStartScheduler+0x134>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3b01      	subs	r3, #1
 800467c:	4a2d      	ldr	r2, [pc, #180]	; (8004734 <xPortStartScheduler+0x134>)
 800467e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004680:	78fb      	ldrb	r3, [r7, #3]
 8004682:	b2db      	uxtb	r3, r3
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	b2db      	uxtb	r3, r3
 8004688:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800468a:	78fb      	ldrb	r3, [r7, #3]
 800468c:	b2db      	uxtb	r3, r3
 800468e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004692:	2b80      	cmp	r3, #128	; 0x80
 8004694:	d0ef      	beq.n	8004676 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004696:	4b27      	ldr	r3, [pc, #156]	; (8004734 <xPortStartScheduler+0x134>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f1c3 0307 	rsb	r3, r3, #7
 800469e:	2b04      	cmp	r3, #4
 80046a0:	d00a      	beq.n	80046b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80046a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a6:	f383 8811 	msr	BASEPRI, r3
 80046aa:	f3bf 8f6f 	isb	sy
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	60bb      	str	r3, [r7, #8]
}
 80046b4:	bf00      	nop
 80046b6:	e7fe      	b.n	80046b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80046b8:	4b1e      	ldr	r3, [pc, #120]	; (8004734 <xPortStartScheduler+0x134>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	021b      	lsls	r3, r3, #8
 80046be:	4a1d      	ldr	r2, [pc, #116]	; (8004734 <xPortStartScheduler+0x134>)
 80046c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80046c2:	4b1c      	ldr	r3, [pc, #112]	; (8004734 <xPortStartScheduler+0x134>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046ca:	4a1a      	ldr	r2, [pc, #104]	; (8004734 <xPortStartScheduler+0x134>)
 80046cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80046d6:	4b18      	ldr	r3, [pc, #96]	; (8004738 <xPortStartScheduler+0x138>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a17      	ldr	r2, [pc, #92]	; (8004738 <xPortStartScheduler+0x138>)
 80046dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80046e2:	4b15      	ldr	r3, [pc, #84]	; (8004738 <xPortStartScheduler+0x138>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a14      	ldr	r2, [pc, #80]	; (8004738 <xPortStartScheduler+0x138>)
 80046e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80046ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80046ee:	f000 f8dd 	bl	80048ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80046f2:	4b12      	ldr	r3, [pc, #72]	; (800473c <xPortStartScheduler+0x13c>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80046f8:	f000 f8fc 	bl	80048f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80046fc:	4b10      	ldr	r3, [pc, #64]	; (8004740 <xPortStartScheduler+0x140>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a0f      	ldr	r2, [pc, #60]	; (8004740 <xPortStartScheduler+0x140>)
 8004702:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004706:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004708:	f7ff ff66 	bl	80045d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800470c:	f7ff fd42 	bl	8004194 <vTaskSwitchContext>
	prvTaskExitError();
 8004710:	f7ff ff1c 	bl	800454c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3718      	adds	r7, #24
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	e000ed00 	.word	0xe000ed00
 8004724:	410fc271 	.word	0x410fc271
 8004728:	410fc270 	.word	0x410fc270
 800472c:	e000e400 	.word	0xe000e400
 8004730:	2000052c 	.word	0x2000052c
 8004734:	20000530 	.word	0x20000530
 8004738:	e000ed20 	.word	0xe000ed20
 800473c:	2000000c 	.word	0x2000000c
 8004740:	e000ef34 	.word	0xe000ef34

08004744 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
	__asm volatile
 800474a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474e:	f383 8811 	msr	BASEPRI, r3
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	f3bf 8f4f 	dsb	sy
 800475a:	607b      	str	r3, [r7, #4]
}
 800475c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800475e:	4b0f      	ldr	r3, [pc, #60]	; (800479c <vPortEnterCritical+0x58>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3301      	adds	r3, #1
 8004764:	4a0d      	ldr	r2, [pc, #52]	; (800479c <vPortEnterCritical+0x58>)
 8004766:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004768:	4b0c      	ldr	r3, [pc, #48]	; (800479c <vPortEnterCritical+0x58>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d10f      	bne.n	8004790 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004770:	4b0b      	ldr	r3, [pc, #44]	; (80047a0 <vPortEnterCritical+0x5c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <vPortEnterCritical+0x4c>
	__asm volatile
 800477a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477e:	f383 8811 	msr	BASEPRI, r3
 8004782:	f3bf 8f6f 	isb	sy
 8004786:	f3bf 8f4f 	dsb	sy
 800478a:	603b      	str	r3, [r7, #0]
}
 800478c:	bf00      	nop
 800478e:	e7fe      	b.n	800478e <vPortEnterCritical+0x4a>
	}
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	2000000c 	.word	0x2000000c
 80047a0:	e000ed04 	.word	0xe000ed04

080047a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80047aa:	4b12      	ldr	r3, [pc, #72]	; (80047f4 <vPortExitCritical+0x50>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10a      	bne.n	80047c8 <vPortExitCritical+0x24>
	__asm volatile
 80047b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	607b      	str	r3, [r7, #4]
}
 80047c4:	bf00      	nop
 80047c6:	e7fe      	b.n	80047c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80047c8:	4b0a      	ldr	r3, [pc, #40]	; (80047f4 <vPortExitCritical+0x50>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	3b01      	subs	r3, #1
 80047ce:	4a09      	ldr	r2, [pc, #36]	; (80047f4 <vPortExitCritical+0x50>)
 80047d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80047d2:	4b08      	ldr	r3, [pc, #32]	; (80047f4 <vPortExitCritical+0x50>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d105      	bne.n	80047e6 <vPortExitCritical+0x42>
 80047da:	2300      	movs	r3, #0
 80047dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80047e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	2000000c 	.word	0x2000000c
	...

08004800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004800:	f3ef 8009 	mrs	r0, PSP
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	4b15      	ldr	r3, [pc, #84]	; (8004860 <pxCurrentTCBConst>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	f01e 0f10 	tst.w	lr, #16
 8004810:	bf08      	it	eq
 8004812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800481a:	6010      	str	r0, [r2, #0]
 800481c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004820:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004824:	f380 8811 	msr	BASEPRI, r0
 8004828:	f3bf 8f4f 	dsb	sy
 800482c:	f3bf 8f6f 	isb	sy
 8004830:	f7ff fcb0 	bl	8004194 <vTaskSwitchContext>
 8004834:	f04f 0000 	mov.w	r0, #0
 8004838:	f380 8811 	msr	BASEPRI, r0
 800483c:	bc09      	pop	{r0, r3}
 800483e:	6819      	ldr	r1, [r3, #0]
 8004840:	6808      	ldr	r0, [r1, #0]
 8004842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004846:	f01e 0f10 	tst.w	lr, #16
 800484a:	bf08      	it	eq
 800484c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004850:	f380 8809 	msr	PSP, r0
 8004854:	f3bf 8f6f 	isb	sy
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	f3af 8000 	nop.w

08004860 <pxCurrentTCBConst>:
 8004860:	20000400 	.word	0x20000400
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004864:	bf00      	nop
 8004866:	bf00      	nop

08004868 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
	__asm volatile
 800486e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004872:	f383 8811 	msr	BASEPRI, r3
 8004876:	f3bf 8f6f 	isb	sy
 800487a:	f3bf 8f4f 	dsb	sy
 800487e:	607b      	str	r3, [r7, #4]
}
 8004880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004882:	f7ff fbc9 	bl	8004018 <xTaskIncrementTick>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d003      	beq.n	8004894 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800488c:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <SysTick_Handler+0x40>)
 800488e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	2300      	movs	r3, #0
 8004896:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	f383 8811 	msr	BASEPRI, r3
}
 800489e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80048a0:	bf00      	nop
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	e000ed04 	.word	0xe000ed04

080048ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80048b0:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <vPortSetupTimerInterrupt+0x34>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80048b6:	4b0b      	ldr	r3, [pc, #44]	; (80048e4 <vPortSetupTimerInterrupt+0x38>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80048bc:	4b0a      	ldr	r3, [pc, #40]	; (80048e8 <vPortSetupTimerInterrupt+0x3c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a0a      	ldr	r2, [pc, #40]	; (80048ec <vPortSetupTimerInterrupt+0x40>)
 80048c2:	fba2 2303 	umull	r2, r3, r2, r3
 80048c6:	099b      	lsrs	r3, r3, #6
 80048c8:	4a09      	ldr	r2, [pc, #36]	; (80048f0 <vPortSetupTimerInterrupt+0x44>)
 80048ca:	3b01      	subs	r3, #1
 80048cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80048ce:	4b04      	ldr	r3, [pc, #16]	; (80048e0 <vPortSetupTimerInterrupt+0x34>)
 80048d0:	2207      	movs	r2, #7
 80048d2:	601a      	str	r2, [r3, #0]
}
 80048d4:	bf00      	nop
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	e000e010 	.word	0xe000e010
 80048e4:	e000e018 	.word	0xe000e018
 80048e8:	20000000 	.word	0x20000000
 80048ec:	10624dd3 	.word	0x10624dd3
 80048f0:	e000e014 	.word	0xe000e014

080048f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80048f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004904 <vPortEnableVFP+0x10>
 80048f8:	6801      	ldr	r1, [r0, #0]
 80048fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80048fe:	6001      	str	r1, [r0, #0]
 8004900:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004902:	bf00      	nop
 8004904:	e000ed88 	.word	0xe000ed88

08004908 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b08a      	sub	sp, #40	; 0x28
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004910:	2300      	movs	r3, #0
 8004912:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004914:	f7ff fad6 	bl	8003ec4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004918:	4b58      	ldr	r3, [pc, #352]	; (8004a7c <pvPortMalloc+0x174>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d101      	bne.n	8004924 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004920:	f000 f910 	bl	8004b44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004924:	4b56      	ldr	r3, [pc, #344]	; (8004a80 <pvPortMalloc+0x178>)
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4013      	ands	r3, r2
 800492c:	2b00      	cmp	r3, #0
 800492e:	f040 808e 	bne.w	8004a4e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d01d      	beq.n	8004974 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004938:	2208      	movs	r2, #8
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4413      	add	r3, r2
 800493e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f003 0307 	and.w	r3, r3, #7
 8004946:	2b00      	cmp	r3, #0
 8004948:	d014      	beq.n	8004974 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f023 0307 	bic.w	r3, r3, #7
 8004950:	3308      	adds	r3, #8
 8004952:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f003 0307 	and.w	r3, r3, #7
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00a      	beq.n	8004974 <pvPortMalloc+0x6c>
	__asm volatile
 800495e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004962:	f383 8811 	msr	BASEPRI, r3
 8004966:	f3bf 8f6f 	isb	sy
 800496a:	f3bf 8f4f 	dsb	sy
 800496e:	617b      	str	r3, [r7, #20]
}
 8004970:	bf00      	nop
 8004972:	e7fe      	b.n	8004972 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d069      	beq.n	8004a4e <pvPortMalloc+0x146>
 800497a:	4b42      	ldr	r3, [pc, #264]	; (8004a84 <pvPortMalloc+0x17c>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	429a      	cmp	r2, r3
 8004982:	d864      	bhi.n	8004a4e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004984:	4b40      	ldr	r3, [pc, #256]	; (8004a88 <pvPortMalloc+0x180>)
 8004986:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004988:	4b3f      	ldr	r3, [pc, #252]	; (8004a88 <pvPortMalloc+0x180>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800498e:	e004      	b.n	800499a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d903      	bls.n	80049ac <pvPortMalloc+0xa4>
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1f1      	bne.n	8004990 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80049ac:	4b33      	ldr	r3, [pc, #204]	; (8004a7c <pvPortMalloc+0x174>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d04b      	beq.n	8004a4e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2208      	movs	r2, #8
 80049bc:	4413      	add	r3, r2
 80049be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	6a3b      	ldr	r3, [r7, #32]
 80049c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	1ad2      	subs	r2, r2, r3
 80049d0:	2308      	movs	r3, #8
 80049d2:	005b      	lsls	r3, r3, #1
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d91f      	bls.n	8004a18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80049d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4413      	add	r3, r2
 80049de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00a      	beq.n	8004a00 <pvPortMalloc+0xf8>
	__asm volatile
 80049ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ee:	f383 8811 	msr	BASEPRI, r3
 80049f2:	f3bf 8f6f 	isb	sy
 80049f6:	f3bf 8f4f 	dsb	sy
 80049fa:	613b      	str	r3, [r7, #16]
}
 80049fc:	bf00      	nop
 80049fe:	e7fe      	b.n	80049fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	1ad2      	subs	r2, r2, r3
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a12:	69b8      	ldr	r0, [r7, #24]
 8004a14:	f000 f8f8 	bl	8004c08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a18:	4b1a      	ldr	r3, [pc, #104]	; (8004a84 <pvPortMalloc+0x17c>)
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	4a18      	ldr	r2, [pc, #96]	; (8004a84 <pvPortMalloc+0x17c>)
 8004a24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a26:	4b17      	ldr	r3, [pc, #92]	; (8004a84 <pvPortMalloc+0x17c>)
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	4b18      	ldr	r3, [pc, #96]	; (8004a8c <pvPortMalloc+0x184>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d203      	bcs.n	8004a3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a32:	4b14      	ldr	r3, [pc, #80]	; (8004a84 <pvPortMalloc+0x17c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a15      	ldr	r2, [pc, #84]	; (8004a8c <pvPortMalloc+0x184>)
 8004a38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	4b10      	ldr	r3, [pc, #64]	; (8004a80 <pvPortMalloc+0x178>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	431a      	orrs	r2, r3
 8004a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004a4e:	f7ff fa47 	bl	8003ee0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00a      	beq.n	8004a72 <pvPortMalloc+0x16a>
	__asm volatile
 8004a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	60fb      	str	r3, [r7, #12]
}
 8004a6e:	bf00      	nop
 8004a70:	e7fe      	b.n	8004a70 <pvPortMalloc+0x168>
	return pvReturn;
 8004a72:	69fb      	ldr	r3, [r7, #28]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3728      	adds	r7, #40	; 0x28
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	2000113c 	.word	0x2000113c
 8004a80:	20001148 	.word	0x20001148
 8004a84:	20001140 	.word	0x20001140
 8004a88:	20001134 	.word	0x20001134
 8004a8c:	20001144 	.word	0x20001144

08004a90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d048      	beq.n	8004b34 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004aa2:	2308      	movs	r3, #8
 8004aa4:	425b      	negs	r3, r3
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	4b21      	ldr	r3, [pc, #132]	; (8004b3c <vPortFree+0xac>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4013      	ands	r3, r2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10a      	bne.n	8004ad4 <vPortFree+0x44>
	__asm volatile
 8004abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac2:	f383 8811 	msr	BASEPRI, r3
 8004ac6:	f3bf 8f6f 	isb	sy
 8004aca:	f3bf 8f4f 	dsb	sy
 8004ace:	60fb      	str	r3, [r7, #12]
}
 8004ad0:	bf00      	nop
 8004ad2:	e7fe      	b.n	8004ad2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00a      	beq.n	8004af2 <vPortFree+0x62>
	__asm volatile
 8004adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae0:	f383 8811 	msr	BASEPRI, r3
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	60bb      	str	r3, [r7, #8]
}
 8004aee:	bf00      	nop
 8004af0:	e7fe      	b.n	8004af0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	4b11      	ldr	r3, [pc, #68]	; (8004b3c <vPortFree+0xac>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4013      	ands	r3, r2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d019      	beq.n	8004b34 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d115      	bne.n	8004b34 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	4b0b      	ldr	r3, [pc, #44]	; (8004b3c <vPortFree+0xac>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	43db      	mvns	r3, r3
 8004b12:	401a      	ands	r2, r3
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004b18:	f7ff f9d4 	bl	8003ec4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	4b07      	ldr	r3, [pc, #28]	; (8004b40 <vPortFree+0xb0>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4413      	add	r3, r2
 8004b26:	4a06      	ldr	r2, [pc, #24]	; (8004b40 <vPortFree+0xb0>)
 8004b28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b2a:	6938      	ldr	r0, [r7, #16]
 8004b2c:	f000 f86c 	bl	8004c08 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004b30:	f7ff f9d6 	bl	8003ee0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004b34:	bf00      	nop
 8004b36:	3718      	adds	r7, #24
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	20001148 	.word	0x20001148
 8004b40:	20001140 	.word	0x20001140

08004b44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b4a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004b4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004b50:	4b27      	ldr	r3, [pc, #156]	; (8004bf0 <prvHeapInit+0xac>)
 8004b52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f003 0307 	and.w	r3, r3, #7
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00c      	beq.n	8004b78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	3307      	adds	r3, #7
 8004b62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f023 0307 	bic.w	r3, r3, #7
 8004b6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	4a1f      	ldr	r2, [pc, #124]	; (8004bf0 <prvHeapInit+0xac>)
 8004b74:	4413      	add	r3, r2
 8004b76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b7c:	4a1d      	ldr	r2, [pc, #116]	; (8004bf4 <prvHeapInit+0xb0>)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004b82:	4b1c      	ldr	r3, [pc, #112]	; (8004bf4 <prvHeapInit+0xb0>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004b90:	2208      	movs	r2, #8
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	1a9b      	subs	r3, r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f023 0307 	bic.w	r3, r3, #7
 8004b9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4a15      	ldr	r2, [pc, #84]	; (8004bf8 <prvHeapInit+0xb4>)
 8004ba4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ba6:	4b14      	ldr	r3, [pc, #80]	; (8004bf8 <prvHeapInit+0xb4>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2200      	movs	r2, #0
 8004bac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004bae:	4b12      	ldr	r3, [pc, #72]	; (8004bf8 <prvHeapInit+0xb4>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	1ad2      	subs	r2, r2, r3
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004bc4:	4b0c      	ldr	r3, [pc, #48]	; (8004bf8 <prvHeapInit+0xb4>)
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	4a0a      	ldr	r2, [pc, #40]	; (8004bfc <prvHeapInit+0xb8>)
 8004bd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	4a09      	ldr	r2, [pc, #36]	; (8004c00 <prvHeapInit+0xbc>)
 8004bda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004bdc:	4b09      	ldr	r3, [pc, #36]	; (8004c04 <prvHeapInit+0xc0>)
 8004bde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004be2:	601a      	str	r2, [r3, #0]
}
 8004be4:	bf00      	nop
 8004be6:	3714      	adds	r7, #20
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr
 8004bf0:	20000534 	.word	0x20000534
 8004bf4:	20001134 	.word	0x20001134
 8004bf8:	2000113c 	.word	0x2000113c
 8004bfc:	20001144 	.word	0x20001144
 8004c00:	20001140 	.word	0x20001140
 8004c04:	20001148 	.word	0x20001148

08004c08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c10:	4b28      	ldr	r3, [pc, #160]	; (8004cb4 <prvInsertBlockIntoFreeList+0xac>)
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	e002      	b.n	8004c1c <prvInsertBlockIntoFreeList+0x14>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	60fb      	str	r3, [r7, #12]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d8f7      	bhi.n	8004c16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	4413      	add	r3, r2
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d108      	bne.n	8004c4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	685a      	ldr	r2, [r3, #4]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	441a      	add	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	68ba      	ldr	r2, [r7, #8]
 8004c54:	441a      	add	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d118      	bne.n	8004c90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	4b15      	ldr	r3, [pc, #84]	; (8004cb8 <prvInsertBlockIntoFreeList+0xb0>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d00d      	beq.n	8004c86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	441a      	add	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	e008      	b.n	8004c98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c86:	4b0c      	ldr	r3, [pc, #48]	; (8004cb8 <prvInsertBlockIntoFreeList+0xb0>)
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	601a      	str	r2, [r3, #0]
 8004c8e:	e003      	b.n	8004c98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d002      	beq.n	8004ca6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ca6:	bf00      	nop
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	20001134 	.word	0x20001134
 8004cb8:	2000113c 	.word	0x2000113c

08004cbc <memset>:
 8004cbc:	4402      	add	r2, r0
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d100      	bne.n	8004cc6 <memset+0xa>
 8004cc4:	4770      	bx	lr
 8004cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8004cca:	e7f9      	b.n	8004cc0 <memset+0x4>

08004ccc <_reclaim_reent>:
 8004ccc:	4b29      	ldr	r3, [pc, #164]	; (8004d74 <_reclaim_reent+0xa8>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4283      	cmp	r3, r0
 8004cd2:	b570      	push	{r4, r5, r6, lr}
 8004cd4:	4604      	mov	r4, r0
 8004cd6:	d04b      	beq.n	8004d70 <_reclaim_reent+0xa4>
 8004cd8:	69c3      	ldr	r3, [r0, #28]
 8004cda:	b143      	cbz	r3, 8004cee <_reclaim_reent+0x22>
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d144      	bne.n	8004d6c <_reclaim_reent+0xa0>
 8004ce2:	69e3      	ldr	r3, [r4, #28]
 8004ce4:	6819      	ldr	r1, [r3, #0]
 8004ce6:	b111      	cbz	r1, 8004cee <_reclaim_reent+0x22>
 8004ce8:	4620      	mov	r0, r4
 8004cea:	f000 f86b 	bl	8004dc4 <_free_r>
 8004cee:	6961      	ldr	r1, [r4, #20]
 8004cf0:	b111      	cbz	r1, 8004cf8 <_reclaim_reent+0x2c>
 8004cf2:	4620      	mov	r0, r4
 8004cf4:	f000 f866 	bl	8004dc4 <_free_r>
 8004cf8:	69e1      	ldr	r1, [r4, #28]
 8004cfa:	b111      	cbz	r1, 8004d02 <_reclaim_reent+0x36>
 8004cfc:	4620      	mov	r0, r4
 8004cfe:	f000 f861 	bl	8004dc4 <_free_r>
 8004d02:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004d04:	b111      	cbz	r1, 8004d0c <_reclaim_reent+0x40>
 8004d06:	4620      	mov	r0, r4
 8004d08:	f000 f85c 	bl	8004dc4 <_free_r>
 8004d0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d0e:	b111      	cbz	r1, 8004d16 <_reclaim_reent+0x4a>
 8004d10:	4620      	mov	r0, r4
 8004d12:	f000 f857 	bl	8004dc4 <_free_r>
 8004d16:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004d18:	b111      	cbz	r1, 8004d20 <_reclaim_reent+0x54>
 8004d1a:	4620      	mov	r0, r4
 8004d1c:	f000 f852 	bl	8004dc4 <_free_r>
 8004d20:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004d22:	b111      	cbz	r1, 8004d2a <_reclaim_reent+0x5e>
 8004d24:	4620      	mov	r0, r4
 8004d26:	f000 f84d 	bl	8004dc4 <_free_r>
 8004d2a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004d2c:	b111      	cbz	r1, 8004d34 <_reclaim_reent+0x68>
 8004d2e:	4620      	mov	r0, r4
 8004d30:	f000 f848 	bl	8004dc4 <_free_r>
 8004d34:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004d36:	b111      	cbz	r1, 8004d3e <_reclaim_reent+0x72>
 8004d38:	4620      	mov	r0, r4
 8004d3a:	f000 f843 	bl	8004dc4 <_free_r>
 8004d3e:	6a23      	ldr	r3, [r4, #32]
 8004d40:	b1b3      	cbz	r3, 8004d70 <_reclaim_reent+0xa4>
 8004d42:	4620      	mov	r0, r4
 8004d44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004d48:	4718      	bx	r3
 8004d4a:	5949      	ldr	r1, [r1, r5]
 8004d4c:	b941      	cbnz	r1, 8004d60 <_reclaim_reent+0x94>
 8004d4e:	3504      	adds	r5, #4
 8004d50:	69e3      	ldr	r3, [r4, #28]
 8004d52:	2d80      	cmp	r5, #128	; 0x80
 8004d54:	68d9      	ldr	r1, [r3, #12]
 8004d56:	d1f8      	bne.n	8004d4a <_reclaim_reent+0x7e>
 8004d58:	4620      	mov	r0, r4
 8004d5a:	f000 f833 	bl	8004dc4 <_free_r>
 8004d5e:	e7c0      	b.n	8004ce2 <_reclaim_reent+0x16>
 8004d60:	680e      	ldr	r6, [r1, #0]
 8004d62:	4620      	mov	r0, r4
 8004d64:	f000 f82e 	bl	8004dc4 <_free_r>
 8004d68:	4631      	mov	r1, r6
 8004d6a:	e7ef      	b.n	8004d4c <_reclaim_reent+0x80>
 8004d6c:	2500      	movs	r5, #0
 8004d6e:	e7ef      	b.n	8004d50 <_reclaim_reent+0x84>
 8004d70:	bd70      	pop	{r4, r5, r6, pc}
 8004d72:	bf00      	nop
 8004d74:	2000005c 	.word	0x2000005c

08004d78 <__libc_init_array>:
 8004d78:	b570      	push	{r4, r5, r6, lr}
 8004d7a:	4d0d      	ldr	r5, [pc, #52]	; (8004db0 <__libc_init_array+0x38>)
 8004d7c:	4c0d      	ldr	r4, [pc, #52]	; (8004db4 <__libc_init_array+0x3c>)
 8004d7e:	1b64      	subs	r4, r4, r5
 8004d80:	10a4      	asrs	r4, r4, #2
 8004d82:	2600      	movs	r6, #0
 8004d84:	42a6      	cmp	r6, r4
 8004d86:	d109      	bne.n	8004d9c <__libc_init_array+0x24>
 8004d88:	4d0b      	ldr	r5, [pc, #44]	; (8004db8 <__libc_init_array+0x40>)
 8004d8a:	4c0c      	ldr	r4, [pc, #48]	; (8004dbc <__libc_init_array+0x44>)
 8004d8c:	f000 f872 	bl	8004e74 <_init>
 8004d90:	1b64      	subs	r4, r4, r5
 8004d92:	10a4      	asrs	r4, r4, #2
 8004d94:	2600      	movs	r6, #0
 8004d96:	42a6      	cmp	r6, r4
 8004d98:	d105      	bne.n	8004da6 <__libc_init_array+0x2e>
 8004d9a:	bd70      	pop	{r4, r5, r6, pc}
 8004d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004da0:	4798      	blx	r3
 8004da2:	3601      	adds	r6, #1
 8004da4:	e7ee      	b.n	8004d84 <__libc_init_array+0xc>
 8004da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004daa:	4798      	blx	r3
 8004dac:	3601      	adds	r6, #1
 8004dae:	e7f2      	b.n	8004d96 <__libc_init_array+0x1e>
 8004db0:	08004f58 	.word	0x08004f58
 8004db4:	08004f58 	.word	0x08004f58
 8004db8:	08004f58 	.word	0x08004f58
 8004dbc:	08004f5c 	.word	0x08004f5c

08004dc0 <__retarget_lock_acquire_recursive>:
 8004dc0:	4770      	bx	lr

08004dc2 <__retarget_lock_release_recursive>:
 8004dc2:	4770      	bx	lr

08004dc4 <_free_r>:
 8004dc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004dc6:	2900      	cmp	r1, #0
 8004dc8:	d044      	beq.n	8004e54 <_free_r+0x90>
 8004dca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dce:	9001      	str	r0, [sp, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f1a1 0404 	sub.w	r4, r1, #4
 8004dd6:	bfb8      	it	lt
 8004dd8:	18e4      	addlt	r4, r4, r3
 8004dda:	f000 f83f 	bl	8004e5c <__malloc_lock>
 8004dde:	4a1e      	ldr	r2, [pc, #120]	; (8004e58 <_free_r+0x94>)
 8004de0:	9801      	ldr	r0, [sp, #4]
 8004de2:	6813      	ldr	r3, [r2, #0]
 8004de4:	b933      	cbnz	r3, 8004df4 <_free_r+0x30>
 8004de6:	6063      	str	r3, [r4, #4]
 8004de8:	6014      	str	r4, [r2, #0]
 8004dea:	b003      	add	sp, #12
 8004dec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004df0:	f000 b83a 	b.w	8004e68 <__malloc_unlock>
 8004df4:	42a3      	cmp	r3, r4
 8004df6:	d908      	bls.n	8004e0a <_free_r+0x46>
 8004df8:	6825      	ldr	r5, [r4, #0]
 8004dfa:	1961      	adds	r1, r4, r5
 8004dfc:	428b      	cmp	r3, r1
 8004dfe:	bf01      	itttt	eq
 8004e00:	6819      	ldreq	r1, [r3, #0]
 8004e02:	685b      	ldreq	r3, [r3, #4]
 8004e04:	1949      	addeq	r1, r1, r5
 8004e06:	6021      	streq	r1, [r4, #0]
 8004e08:	e7ed      	b.n	8004de6 <_free_r+0x22>
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	b10b      	cbz	r3, 8004e14 <_free_r+0x50>
 8004e10:	42a3      	cmp	r3, r4
 8004e12:	d9fa      	bls.n	8004e0a <_free_r+0x46>
 8004e14:	6811      	ldr	r1, [r2, #0]
 8004e16:	1855      	adds	r5, r2, r1
 8004e18:	42a5      	cmp	r5, r4
 8004e1a:	d10b      	bne.n	8004e34 <_free_r+0x70>
 8004e1c:	6824      	ldr	r4, [r4, #0]
 8004e1e:	4421      	add	r1, r4
 8004e20:	1854      	adds	r4, r2, r1
 8004e22:	42a3      	cmp	r3, r4
 8004e24:	6011      	str	r1, [r2, #0]
 8004e26:	d1e0      	bne.n	8004dea <_free_r+0x26>
 8004e28:	681c      	ldr	r4, [r3, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	6053      	str	r3, [r2, #4]
 8004e2e:	440c      	add	r4, r1
 8004e30:	6014      	str	r4, [r2, #0]
 8004e32:	e7da      	b.n	8004dea <_free_r+0x26>
 8004e34:	d902      	bls.n	8004e3c <_free_r+0x78>
 8004e36:	230c      	movs	r3, #12
 8004e38:	6003      	str	r3, [r0, #0]
 8004e3a:	e7d6      	b.n	8004dea <_free_r+0x26>
 8004e3c:	6825      	ldr	r5, [r4, #0]
 8004e3e:	1961      	adds	r1, r4, r5
 8004e40:	428b      	cmp	r3, r1
 8004e42:	bf04      	itt	eq
 8004e44:	6819      	ldreq	r1, [r3, #0]
 8004e46:	685b      	ldreq	r3, [r3, #4]
 8004e48:	6063      	str	r3, [r4, #4]
 8004e4a:	bf04      	itt	eq
 8004e4c:	1949      	addeq	r1, r1, r5
 8004e4e:	6021      	streq	r1, [r4, #0]
 8004e50:	6054      	str	r4, [r2, #4]
 8004e52:	e7ca      	b.n	8004dea <_free_r+0x26>
 8004e54:	b003      	add	sp, #12
 8004e56:	bd30      	pop	{r4, r5, pc}
 8004e58:	20001288 	.word	0x20001288

08004e5c <__malloc_lock>:
 8004e5c:	4801      	ldr	r0, [pc, #4]	; (8004e64 <__malloc_lock+0x8>)
 8004e5e:	f7ff bfaf 	b.w	8004dc0 <__retarget_lock_acquire_recursive>
 8004e62:	bf00      	nop
 8004e64:	20001284 	.word	0x20001284

08004e68 <__malloc_unlock>:
 8004e68:	4801      	ldr	r0, [pc, #4]	; (8004e70 <__malloc_unlock+0x8>)
 8004e6a:	f7ff bfaa 	b.w	8004dc2 <__retarget_lock_release_recursive>
 8004e6e:	bf00      	nop
 8004e70:	20001284 	.word	0x20001284

08004e74 <_init>:
 8004e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e76:	bf00      	nop
 8004e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e7a:	bc08      	pop	{r3}
 8004e7c:	469e      	mov	lr, r3
 8004e7e:	4770      	bx	lr

08004e80 <_fini>:
 8004e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e82:	bf00      	nop
 8004e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e86:	bc08      	pop	{r3}
 8004e88:	469e      	mov	lr, r3
 8004e8a:	4770      	bx	lr
