
RTOS_STM32_F303RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc08  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b4  0800cda8  0800cda8  0001cda8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d35c  0800d35c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800d35c  0800d35c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d35c  0800d35c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d35c  0800d35c  0001d35c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d360  0800d360  0001d360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800d364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00001898  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001910  20001910  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001f74a  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004915  00000000  00000000  0003f835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000019f0  00000000  00000000  00044150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001442  00000000  00000000  00045b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026588  00000000  00000000  00046f82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00024f00  00000000  00000000  0006d50a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dff1a  00000000  00000000  0009240a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000070e0  00000000  00000000  00172324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000088  00000000  00000000  00179404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cd90 	.word	0x0800cd90

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	0800cd90 	.word	0x0800cd90

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <DHT_Delay>:


/********************* NO CHANGES AFTER THIS *************************************/

void DHT_Delay (uint16_t time)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	80fb      	strh	r3, [r7, #6]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(DHT_TIMER, 0);
 80002ba:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <DHT_Delay+0x30>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	2200      	movs	r2, #0
 80002c0:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(DHT_TIMER))<time);
 80002c2:	bf00      	nop
 80002c4:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <DHT_Delay+0x30>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002ca:	88fb      	ldrh	r3, [r7, #6]
 80002cc:	429a      	cmp	r2, r3
 80002ce:	d3f9      	bcc.n	80002c4 <DHT_Delay+0x14>
}
 80002d0:	bf00      	nop
 80002d2:	bf00      	nop
 80002d4:	370c      	adds	r7, #12
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	200008c8 	.word	0x200008c8

080002e4 <Set_Pin_Output>:


void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b088      	sub	sp, #32
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	460b      	mov	r3, r1
 80002ee:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f0:	f107 030c 	add.w	r3, r7, #12
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
 80002f8:	605a      	str	r2, [r3, #4]
 80002fa:	609a      	str	r2, [r3, #8]
 80002fc:	60da      	str	r2, [r3, #12]
 80002fe:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000300:	887b      	ldrh	r3, [r7, #2]
 8000302:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000304:	2301      	movs	r3, #1
 8000306:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000308:	2300      	movs	r3, #0
 800030a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800030c:	f107 030c 	add.w	r3, r7, #12
 8000310:	4619      	mov	r1, r3
 8000312:	6878      	ldr	r0, [r7, #4]
 8000314:	f002 fd22 	bl	8002d5c <HAL_GPIO_Init>
}
 8000318:	bf00      	nop
 800031a:	3720      	adds	r7, #32
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}

08000320 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b088      	sub	sp, #32
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	460b      	mov	r3, r1
 800032a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800032c:	f107 030c 	add.w	r3, r7, #12
 8000330:	2200      	movs	r2, #0
 8000332:	601a      	str	r2, [r3, #0]
 8000334:	605a      	str	r2, [r3, #4]
 8000336:	609a      	str	r2, [r3, #8]
 8000338:	60da      	str	r2, [r3, #12]
 800033a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800033c:	887b      	ldrh	r3, [r7, #2]
 800033e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000340:	2300      	movs	r3, #0
 8000342:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000344:	2300      	movs	r3, #0
 8000346:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000348:	f107 030c 	add.w	r3, r7, #12
 800034c:	4619      	mov	r1, r3
 800034e:	6878      	ldr	r0, [r7, #4]
 8000350:	f002 fd04 	bl	8002d5c <HAL_GPIO_Init>
}
 8000354:	bf00      	nop
 8000356:	3720      	adds	r7, #32
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}

0800035c <DHT11_Start>:
uint16_t SUM;
int TEMP, RH;


void DHT11_Start (void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8000360:	2101      	movs	r1, #1
 8000362:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000366:	f7ff ffbd 	bl	80002e4 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 800036a:	2200      	movs	r2, #0
 800036c:	2101      	movs	r1, #1
 800036e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000372:	f002 fe95 	bl	80030a0 <HAL_GPIO_WritePin>
	DHT_Delay (18000);   // wait for 18ms
 8000376:	f244 6050 	movw	r0, #18000	; 0x4650
 800037a:	f7ff ff99 	bl	80002b0 <DHT_Delay>
    HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 800037e:	2201      	movs	r2, #1
 8000380:	2101      	movs	r1, #1
 8000382:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000386:	f002 fe8b 	bl	80030a0 <HAL_GPIO_WritePin>
    DHT_Delay (20);   // wait for 30us
 800038a:	2014      	movs	r0, #20
 800038c:	f7ff ff90 	bl	80002b0 <DHT_Delay>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8000390:	2101      	movs	r1, #1
 8000392:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000396:	f7ff ffc3 	bl	8000320 <Set_Pin_Input>
}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}

0800039e <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 800039e:	b580      	push	{r7, lr}
 80003a0:	b082      	sub	sp, #8
 80003a2:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80003a4:	2300      	movs	r3, #0
 80003a6:	71fb      	strb	r3, [r7, #7]
	DHT_Delay (40);
 80003a8:	2028      	movs	r0, #40	; 0x28
 80003aa:	f7ff ff81 	bl	80002b0 <DHT_Delay>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 80003ae:	2101      	movs	r1, #1
 80003b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b4:	f002 fe5c 	bl	8003070 <HAL_GPIO_ReadPin>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d10f      	bne.n	80003de <DHT11_Check_Response+0x40>
	{
		DHT_Delay (80);
 80003be:	2050      	movs	r0, #80	; 0x50
 80003c0:	f7ff ff76 	bl	80002b0 <DHT_Delay>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 80003c4:	2101      	movs	r1, #1
 80003c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ca:	f002 fe51 	bl	8003070 <HAL_GPIO_ReadPin>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d002      	beq.n	80003da <DHT11_Check_Response+0x3c>
 80003d4:	2301      	movs	r3, #1
 80003d6:	71fb      	strb	r3, [r7, #7]
 80003d8:	e001      	b.n	80003de <DHT11_Check_Response+0x40>
		else Response = -1;
 80003da:	23ff      	movs	r3, #255	; 0xff
 80003dc:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 80003de:	bf00      	nop
 80003e0:	2101      	movs	r1, #1
 80003e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003e6:	f002 fe43 	bl	8003070 <HAL_GPIO_ReadPin>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d1f7      	bne.n	80003e0 <DHT11_Check_Response+0x42>

	return Response;
 80003f0:	79fb      	ldrb	r3, [r7, #7]
}
 80003f2:	4618      	mov	r0, r3
 80003f4:	3708      	adds	r7, #8
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}

080003fa <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 80003fa:	b580      	push	{r7, lr}
 80003fc:	b082      	sub	sp, #8
 80003fe:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000400:	2300      	movs	r3, #0
 8000402:	71bb      	strb	r3, [r7, #6]
 8000404:	e03a      	b.n	800047c <DHT11_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8000406:	bf00      	nop
 8000408:	2101      	movs	r1, #1
 800040a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800040e:	f002 fe2f 	bl	8003070 <HAL_GPIO_ReadPin>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d0f7      	beq.n	8000408 <DHT11_Read+0xe>
		DHT_Delay (40);   // wait for 40 us
 8000418:	2028      	movs	r0, #40	; 0x28
 800041a:	f7ff ff49 	bl	80002b0 <DHT_Delay>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 800041e:	2101      	movs	r1, #1
 8000420:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000424:	f002 fe24 	bl	8003070 <HAL_GPIO_ReadPin>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d10e      	bne.n	800044c <DHT11_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 800042e:	79bb      	ldrb	r3, [r7, #6]
 8000430:	f1c3 0307 	rsb	r3, r3, #7
 8000434:	2201      	movs	r2, #1
 8000436:	fa02 f303 	lsl.w	r3, r2, r3
 800043a:	b25b      	sxtb	r3, r3
 800043c:	43db      	mvns	r3, r3
 800043e:	b25a      	sxtb	r2, r3
 8000440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000444:	4013      	ands	r3, r2
 8000446:	b25b      	sxtb	r3, r3
 8000448:	71fb      	strb	r3, [r7, #7]
 800044a:	e00b      	b.n	8000464 <DHT11_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 800044c:	79bb      	ldrb	r3, [r7, #6]
 800044e:	f1c3 0307 	rsb	r3, r3, #7
 8000452:	2201      	movs	r2, #1
 8000454:	fa02 f303 	lsl.w	r3, r2, r3
 8000458:	b25a      	sxtb	r2, r3
 800045a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800045e:	4313      	orrs	r3, r2
 8000460:	b25b      	sxtb	r3, r3
 8000462:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 8000464:	bf00      	nop
 8000466:	2101      	movs	r1, #1
 8000468:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800046c:	f002 fe00 	bl	8003070 <HAL_GPIO_ReadPin>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d1f7      	bne.n	8000466 <DHT11_Read+0x6c>
	for (j=0;j<8;j++)
 8000476:	79bb      	ldrb	r3, [r7, #6]
 8000478:	3301      	adds	r3, #1
 800047a:	71bb      	strb	r3, [r7, #6]
 800047c:	79bb      	ldrb	r3, [r7, #6]
 800047e:	2b07      	cmp	r3, #7
 8000480:	d9c1      	bls.n	8000406 <DHT11_Read+0xc>
	}
	return i;
 8000482:	79fb      	ldrb	r3, [r7, #7]
}
 8000484:	4618      	mov	r0, r3
 8000486:	3708      	adds	r7, #8
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}

0800048c <DHT11_Get_Data>:

uint8_t DHT11_Get_Data (int *Temperature, int *Humidity)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
 8000494:	6039      	str	r1, [r7, #0]
    DHT11_Start ();
 8000496:	f7ff ff61 	bl	800035c <DHT11_Start>
	if (DHT11_Check_Response ())
 800049a:	f7ff ff80 	bl	800039e <DHT11_Check_Response>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d044      	beq.n	800052e <DHT11_Get_Data+0xa2>
	{
		Rh_byte1 = DHT11_Read ();
 80004a4:	f7ff ffa9 	bl	80003fa <DHT11_Read>
 80004a8:	4603      	mov	r3, r0
 80004aa:	461a      	mov	r2, r3
 80004ac:	4b22      	ldr	r3, [pc, #136]	; (8000538 <DHT11_Get_Data+0xac>)
 80004ae:	701a      	strb	r2, [r3, #0]
		Rh_byte2 = DHT11_Read ();
 80004b0:	f7ff ffa3 	bl	80003fa <DHT11_Read>
 80004b4:	4603      	mov	r3, r0
 80004b6:	461a      	mov	r2, r3
 80004b8:	4b20      	ldr	r3, [pc, #128]	; (800053c <DHT11_Get_Data+0xb0>)
 80004ba:	701a      	strb	r2, [r3, #0]
		Temp_byte1 = DHT11_Read ();
 80004bc:	f7ff ff9d 	bl	80003fa <DHT11_Read>
 80004c0:	4603      	mov	r3, r0
 80004c2:	461a      	mov	r2, r3
 80004c4:	4b1e      	ldr	r3, [pc, #120]	; (8000540 <DHT11_Get_Data+0xb4>)
 80004c6:	701a      	strb	r2, [r3, #0]
		Temp_byte2 = DHT11_Read ();
 80004c8:	f7ff ff97 	bl	80003fa <DHT11_Read>
 80004cc:	4603      	mov	r3, r0
 80004ce:	461a      	mov	r2, r3
 80004d0:	4b1c      	ldr	r3, [pc, #112]	; (8000544 <DHT11_Get_Data+0xb8>)
 80004d2:	701a      	strb	r2, [r3, #0]
		SUM = DHT11_Read();
 80004d4:	f7ff ff91 	bl	80003fa <DHT11_Read>
 80004d8:	4603      	mov	r3, r0
 80004da:	b29a      	uxth	r2, r3
 80004dc:	4b1a      	ldr	r3, [pc, #104]	; (8000548 <DHT11_Get_Data+0xbc>)
 80004de:	801a      	strh	r2, [r3, #0]

		if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 80004e0:	4b19      	ldr	r3, [pc, #100]	; (8000548 <DHT11_Get_Data+0xbc>)
 80004e2:	881b      	ldrh	r3, [r3, #0]
 80004e4:	4619      	mov	r1, r3
 80004e6:	4b14      	ldr	r3, [pc, #80]	; (8000538 <DHT11_Get_Data+0xac>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	461a      	mov	r2, r3
 80004ec:	4b13      	ldr	r3, [pc, #76]	; (800053c <DHT11_Get_Data+0xb0>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	4413      	add	r3, r2
 80004f2:	4a13      	ldr	r2, [pc, #76]	; (8000540 <DHT11_Get_Data+0xb4>)
 80004f4:	7812      	ldrb	r2, [r2, #0]
 80004f6:	4413      	add	r3, r2
 80004f8:	4a12      	ldr	r2, [pc, #72]	; (8000544 <DHT11_Get_Data+0xb8>)
 80004fa:	7812      	ldrb	r2, [r2, #0]
 80004fc:	4413      	add	r3, r2
 80004fe:	4299      	cmp	r1, r3
 8000500:	d113      	bne.n	800052a <DHT11_Get_Data+0x9e>
		{
			TEMP = Temp_byte1;
 8000502:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <DHT11_Get_Data+0xb4>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	461a      	mov	r2, r3
 8000508:	4b10      	ldr	r3, [pc, #64]	; (800054c <DHT11_Get_Data+0xc0>)
 800050a:	601a      	str	r2, [r3, #0]
		    RH = Rh_byte1;
 800050c:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <DHT11_Get_Data+0xac>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	461a      	mov	r2, r3
 8000512:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <DHT11_Get_Data+0xc4>)
 8000514:	601a      	str	r2, [r3, #0]
		else return -1;
	}

	else return -1;

    *Temperature = (int *)TEMP;
 8000516:	4b0d      	ldr	r3, [pc, #52]	; (800054c <DHT11_Get_Data+0xc0>)
 8000518:	681a      	ldr	r2, [r3, #0]
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	601a      	str	r2, [r3, #0]
    *Humidity = (int *)RH;
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <DHT11_Get_Data+0xc4>)
 8000520:	681a      	ldr	r2, [r3, #0]
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	601a      	str	r2, [r3, #0]

    return 1;
 8000526:	2301      	movs	r3, #1
 8000528:	e002      	b.n	8000530 <DHT11_Get_Data+0xa4>
		else return -1;
 800052a:	23ff      	movs	r3, #255	; 0xff
 800052c:	e000      	b.n	8000530 <DHT11_Get_Data+0xa4>
	else return -1;
 800052e:	23ff      	movs	r3, #255	; 0xff
}
 8000530:	4618      	mov	r0, r3
 8000532:	3708      	adds	r7, #8
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	20000094 	.word	0x20000094
 800053c:	20000095 	.word	0x20000095
 8000540:	20000096 	.word	0x20000096
 8000544:	20000097 	.word	0x20000097
 8000548:	20000098 	.word	0x20000098
 800054c:	2000009c 	.word	0x2000009c
 8000550:	200000a0 	.word	0x200000a0

08000554 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 800055c:	6878      	ldr	r0, [r7, #4]
 800055e:	f7ff fe49 	bl	80001f4 <strlen>
 8000562:	4603      	mov	r3, r0
 8000564:	b29a      	uxth	r2, r3
 8000566:	f04f 33ff 	mov.w	r3, #4294967295
 800056a:	6879      	ldr	r1, [r7, #4]
 800056c:	4803      	ldr	r0, [pc, #12]	; (800057c <Send_Uart+0x28>)
 800056e:	f005 fdad 	bl	80060cc <HAL_UART_Transmit>
}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000914 	.word	0x20000914

08000580 <Mount_SD>:



void Mount_SD (const TCHAR* path)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8000588:	2201      	movs	r2, #1
 800058a:	6879      	ldr	r1, [r7, #4]
 800058c:	480a      	ldr	r0, [pc, #40]	; (80005b8 <Mount_SD+0x38>)
 800058e:	f008 fa5f 	bl	8008a50 <f_mount>
 8000592:	4603      	mov	r3, r0
 8000594:	461a      	mov	r2, r3
 8000596:	4b09      	ldr	r3, [pc, #36]	; (80005bc <Mount_SD+0x3c>)
 8000598:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
 800059a:	4b08      	ldr	r3, [pc, #32]	; (80005bc <Mount_SD+0x3c>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d003      	beq.n	80005aa <Mount_SD+0x2a>
 80005a2:	4807      	ldr	r0, [pc, #28]	; (80005c0 <Mount_SD+0x40>)
 80005a4:	f7ff ffd6 	bl	8000554 <Send_Uart>
	else Send_Uart("SD CARD mounted successfully...\n");
}
 80005a8:	e002      	b.n	80005b0 <Mount_SD+0x30>
	else Send_Uart("SD CARD mounted successfully...\n");
 80005aa:	4806      	ldr	r0, [pc, #24]	; (80005c4 <Mount_SD+0x44>)
 80005ac:	f7ff ffd2 	bl	8000554 <Send_Uart>
}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	200000a4 	.word	0x200000a4
 80005bc:	2000051c 	.word	0x2000051c
 80005c0:	0800cda8 	.word	0x0800cda8
 80005c4:	0800cdcc 	.word	0x0800cdcc

080005c8 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 80005d0:	2201      	movs	r2, #1
 80005d2:	6879      	ldr	r1, [r7, #4]
 80005d4:	2000      	movs	r0, #0
 80005d6:	f008 fa3b 	bl	8008a50 <f_mount>
 80005da:	4603      	mov	r3, r0
 80005dc:	461a      	mov	r2, r3
 80005de:	4b08      	ldr	r3, [pc, #32]	; (8000600 <Unmount_SD+0x38>)
 80005e0:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\n\n\n");
 80005e2:	4b07      	ldr	r3, [pc, #28]	; (8000600 <Unmount_SD+0x38>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d103      	bne.n	80005f2 <Unmount_SD+0x2a>
 80005ea:	4806      	ldr	r0, [pc, #24]	; (8000604 <Unmount_SD+0x3c>)
 80005ec:	f7ff ffb2 	bl	8000554 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
}
 80005f0:	e002      	b.n	80005f8 <Unmount_SD+0x30>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
 80005f2:	4805      	ldr	r0, [pc, #20]	; (8000608 <Unmount_SD+0x40>)
 80005f4:	f7ff ffae 	bl	8000554 <Send_Uart>
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	2000051c 	.word	0x2000051c
 8000604:	0800cdf0 	.word	0x0800cdf0
 8000608:	0800ce18 	.word	0x0800ce18

0800060c <Format_SD>:
    return fresult;
}

/* Only supports removing files from home directory */
FRESULT Format_SD (void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 8000612:	af00      	add	r7, sp, #0
    DIR dir;
    char *path = pvPortMalloc(20*sizeof (char));
 8000614:	2014      	movs	r0, #20
 8000616:	f00b fce7 	bl	800bfe8 <pvPortMalloc>
 800061a:	f8c7 0224 	str.w	r0, [r7, #548]	; 0x224
    sprintf (path, "%s","/");
 800061e:	4a2b      	ldr	r2, [pc, #172]	; (80006cc <Format_SD+0xc0>)
 8000620:	492b      	ldr	r1, [pc, #172]	; (80006d0 <Format_SD+0xc4>)
 8000622:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 8000626:	f00b feb9 	bl	800c39c <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	f8d7 1224 	ldr.w	r1, [r7, #548]	; 0x224
 8000630:	4618      	mov	r0, r3
 8000632:	f008 ffea 	bl	800960a <f_opendir>
 8000636:	4603      	mov	r3, r0
 8000638:	461a      	mov	r2, r3
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <Format_SD+0xc8>)
 800063c:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 800063e:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <Format_SD+0xc8>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d136      	bne.n	80006b4 <Format_SD+0xa8>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	4923      	ldr	r1, [pc, #140]	; (80006d8 <Format_SD+0xcc>)
 800064a:	4618      	mov	r0, r3
 800064c:	f009 f892 	bl	8009774 <f_readdir>
 8000650:	4603      	mov	r3, r0
 8000652:	461a      	mov	r2, r3
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <Format_SD+0xc8>)
 8000656:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8000658:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <Format_SD+0xc8>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d125      	bne.n	80006ac <Format_SD+0xa0>
 8000660:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <Format_SD+0xcc>)
 8000662:	7a5b      	ldrb	r3, [r3, #9]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d021      	beq.n	80006ac <Format_SD+0xa0>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <Format_SD+0xcc>)
 800066a:	7a1b      	ldrb	r3, [r3, #8]
 800066c:	f003 0310 	and.w	r3, r3, #16
 8000670:	2b00      	cmp	r3, #0
 8000672:	d011      	beq.n	8000698 <Format_SD+0x8c>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8000674:	4919      	ldr	r1, [pc, #100]	; (80006dc <Format_SD+0xd0>)
 8000676:	481a      	ldr	r0, [pc, #104]	; (80006e0 <Format_SD+0xd4>)
 8000678:	f7ff fdb2 	bl	80001e0 <strcmp>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d012      	beq.n	80006a8 <Format_SD+0x9c>
            	fresult = f_unlink(fno.fname);
 8000682:	4816      	ldr	r0, [pc, #88]	; (80006dc <Format_SD+0xd0>)
 8000684:	f009 f92c 	bl	80098e0 <f_unlink>
 8000688:	4603      	mov	r3, r0
 800068a:	461a      	mov	r2, r3
 800068c:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <Format_SD+0xc8>)
 800068e:	701a      	strb	r2, [r3, #0]
            	if (fresult == FR_DENIED) continue;
 8000690:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <Format_SD+0xc8>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b07      	cmp	r3, #7
 8000696:	e7d6      	b.n	8000646 <Format_SD+0x3a>
            }
            else
            {   /* It is a file. */
               fresult = f_unlink(fno.fname);
 8000698:	4810      	ldr	r0, [pc, #64]	; (80006dc <Format_SD+0xd0>)
 800069a:	f009 f921 	bl	80098e0 <f_unlink>
 800069e:	4603      	mov	r3, r0
 80006a0:	461a      	mov	r2, r3
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <Format_SD+0xc8>)
 80006a4:	701a      	strb	r2, [r3, #0]
 80006a6:	e7ce      	b.n	8000646 <Format_SD+0x3a>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 80006a8:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 80006aa:	e7cc      	b.n	8000646 <Format_SD+0x3a>
            }
        }
        f_closedir(&dir);
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	4618      	mov	r0, r3
 80006b0:	f009 f833 	bl	800971a <f_closedir>
    }
    vPortFree(path);
 80006b4:	f8d7 0224 	ldr.w	r0, [r7, #548]	; 0x224
 80006b8:	f00b fd5a 	bl	800c170 <vPortFree>
    return fresult;
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <Format_SD+0xc8>)
 80006be:	781b      	ldrb	r3, [r3, #0]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	f507 770a 	add.w	r7, r7, #552	; 0x228
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	0800ce6c 	.word	0x0800ce6c
 80006d0:	0800ce3c 	.word	0x0800ce3c
 80006d4:	2000051c 	.word	0x2000051c
 80006d8:	20000504 	.word	0x20000504
 80006dc:	2000050d 	.word	0x2000050d
 80006e0:	0800ce40 	.word	0x0800ce40

080006e4 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 80006ec:	4940      	ldr	r1, [pc, #256]	; (80007f0 <Create_File+0x10c>)
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f009 f88e 	bl	8009810 <f_stat>
 80006f4:	4603      	mov	r3, r0
 80006f6:	461a      	mov	r2, r3
 80006f8:	4b3e      	ldr	r3, [pc, #248]	; (80007f4 <Create_File+0x110>)
 80006fa:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 80006fc:	4b3d      	ldr	r3, [pc, #244]	; (80007f4 <Create_File+0x110>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d111      	bne.n	8000728 <Create_File+0x44>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 8000704:	2064      	movs	r0, #100	; 0x64
 8000706:	f00b fc6f 	bl	800bfe8 <pvPortMalloc>
 800070a:	60f8      	str	r0, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	493a      	ldr	r1, [pc, #232]	; (80007f8 <Create_File+0x114>)
 8000710:	68f8      	ldr	r0, [r7, #12]
 8000712:	f00b fe43 	bl	800c39c <siprintf>
		Send_Uart(buf);
 8000716:	68f8      	ldr	r0, [r7, #12]
 8000718:	f7ff ff1c 	bl	8000554 <Send_Uart>
		vPortFree(buf);
 800071c:	68f8      	ldr	r0, [r7, #12]
 800071e:	f00b fd27 	bl	800c170 <vPortFree>
	    return fresult;
 8000722:	4b34      	ldr	r3, [pc, #208]	; (80007f4 <Create_File+0x110>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	e05f      	b.n	80007e8 <Create_File+0x104>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8000728:	220b      	movs	r2, #11
 800072a:	6879      	ldr	r1, [r7, #4]
 800072c:	4833      	ldr	r0, [pc, #204]	; (80007fc <Create_File+0x118>)
 800072e:	f008 f9f7 	bl	8008b20 <f_open>
 8000732:	4603      	mov	r3, r0
 8000734:	461a      	mov	r2, r3
 8000736:	4b2f      	ldr	r3, [pc, #188]	; (80007f4 <Create_File+0x110>)
 8000738:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 800073a:	4b2e      	ldr	r3, [pc, #184]	; (80007f4 <Create_File+0x110>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d014      	beq.n	800076c <Create_File+0x88>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8000742:	2064      	movs	r0, #100	; 0x64
 8000744:	f00b fc50 	bl	800bfe8 <pvPortMalloc>
 8000748:	6138      	str	r0, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 800074a:	4b2a      	ldr	r3, [pc, #168]	; (80007f4 <Create_File+0x110>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	461a      	mov	r2, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	492b      	ldr	r1, [pc, #172]	; (8000800 <Create_File+0x11c>)
 8000754:	6938      	ldr	r0, [r7, #16]
 8000756:	f00b fe21 	bl	800c39c <siprintf>
			Send_Uart(buf);
 800075a:	6938      	ldr	r0, [r7, #16]
 800075c:	f7ff fefa 	bl	8000554 <Send_Uart>
			vPortFree(buf);
 8000760:	6938      	ldr	r0, [r7, #16]
 8000762:	f00b fd05 	bl	800c170 <vPortFree>
		    return fresult;
 8000766:	4b23      	ldr	r3, [pc, #140]	; (80007f4 <Create_File+0x110>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	e03d      	b.n	80007e8 <Create_File+0x104>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 800076c:	2064      	movs	r0, #100	; 0x64
 800076e:	f00b fc3b 	bl	800bfe8 <pvPortMalloc>
 8000772:	61f8      	str	r0, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	4923      	ldr	r1, [pc, #140]	; (8000804 <Create_File+0x120>)
 8000778:	69f8      	ldr	r0, [r7, #28]
 800077a:	f00b fe0f 	bl	800c39c <siprintf>
			Send_Uart(buf);
 800077e:	69f8      	ldr	r0, [r7, #28]
 8000780:	f7ff fee8 	bl	8000554 <Send_Uart>
			vPortFree(buf);
 8000784:	69f8      	ldr	r0, [r7, #28]
 8000786:	f00b fcf3 	bl	800c170 <vPortFree>
		}

		fresult = f_close(&fil);
 800078a:	481c      	ldr	r0, [pc, #112]	; (80007fc <Create_File+0x118>)
 800078c:	f008 ff0d 	bl	80095aa <f_close>
 8000790:	4603      	mov	r3, r0
 8000792:	461a      	mov	r2, r3
 8000794:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <Create_File+0x110>)
 8000796:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000798:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <Create_File+0x110>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d012      	beq.n	80007c6 <Create_File+0xe2>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 80007a0:	2064      	movs	r0, #100	; 0x64
 80007a2:	f00b fc21 	bl	800bfe8 <pvPortMalloc>
 80007a6:	6178      	str	r0, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <Create_File+0x110>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	461a      	mov	r2, r3
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4915      	ldr	r1, [pc, #84]	; (8000808 <Create_File+0x124>)
 80007b2:	6978      	ldr	r0, [r7, #20]
 80007b4:	f00b fdf2 	bl	800c39c <siprintf>
			Send_Uart(buf);
 80007b8:	6978      	ldr	r0, [r7, #20]
 80007ba:	f7ff fecb 	bl	8000554 <Send_Uart>
			vPortFree(buf);
 80007be:	6978      	ldr	r0, [r7, #20]
 80007c0:	f00b fcd6 	bl	800c170 <vPortFree>
 80007c4:	e00e      	b.n	80007e4 <Create_File+0x100>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 80007c6:	2064      	movs	r0, #100	; 0x64
 80007c8:	f00b fc0e 	bl	800bfe8 <pvPortMalloc>
 80007cc:	61b8      	str	r0, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	490e      	ldr	r1, [pc, #56]	; (800080c <Create_File+0x128>)
 80007d2:	69b8      	ldr	r0, [r7, #24]
 80007d4:	f00b fde2 	bl	800c39c <siprintf>
			Send_Uart(buf);
 80007d8:	69b8      	ldr	r0, [r7, #24]
 80007da:	f7ff febb 	bl	8000554 <Send_Uart>
			vPortFree(buf);
 80007de:	69b8      	ldr	r0, [r7, #24]
 80007e0:	f00b fcc6 	bl	800c170 <vPortFree>
		}
	}
    return fresult;
 80007e4:	4b03      	ldr	r3, [pc, #12]	; (80007f4 <Create_File+0x110>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3720      	adds	r7, #32
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000504 	.word	0x20000504
 80007f4:	2000051c 	.word	0x2000051c
 80007f8:	0800cfe8 	.word	0x0800cfe8
 80007fc:	200002d8 	.word	0x200002d8
 8000800:	0800d020 	.word	0x0800d020
 8000804:	0800d048 	.word	0x0800d048
 8000808:	0800d088 	.word	0x0800d088
 800080c:	0800cfc8 	.word	0x0800cfc8

08000810 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 800081a:	4953      	ldr	r1, [pc, #332]	; (8000968 <Update_File+0x158>)
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f008 fff7 	bl	8009810 <f_stat>
 8000822:	4603      	mov	r3, r0
 8000824:	461a      	mov	r2, r3
 8000826:	4b51      	ldr	r3, [pc, #324]	; (800096c <Update_File+0x15c>)
 8000828:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800082a:	4b50      	ldr	r3, [pc, #320]	; (800096c <Update_File+0x15c>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d011      	beq.n	8000856 <Update_File+0x46>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 8000832:	2064      	movs	r0, #100	; 0x64
 8000834:	f00b fbd8 	bl	800bfe8 <pvPortMalloc>
 8000838:	60b8      	str	r0, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 800083a:	687a      	ldr	r2, [r7, #4]
 800083c:	494c      	ldr	r1, [pc, #304]	; (8000970 <Update_File+0x160>)
 800083e:	68b8      	ldr	r0, [r7, #8]
 8000840:	f00b fdac 	bl	800c39c <siprintf>
		Send_Uart (buf);
 8000844:	68b8      	ldr	r0, [r7, #8]
 8000846:	f7ff fe85 	bl	8000554 <Send_Uart>
		vPortFree(buf);
 800084a:	68b8      	ldr	r0, [r7, #8]
 800084c:	f00b fc90 	bl	800c170 <vPortFree>
	    return fresult;
 8000850:	4b46      	ldr	r3, [pc, #280]	; (800096c <Update_File+0x15c>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	e083      	b.n	800095e <Update_File+0x14e>
	}

	else
	{
		 /* Create a file with read write access and open it */
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS | FA_WRITE);
 8000856:	220a      	movs	r2, #10
 8000858:	6879      	ldr	r1, [r7, #4]
 800085a:	4846      	ldr	r0, [pc, #280]	; (8000974 <Update_File+0x164>)
 800085c:	f008 f960 	bl	8008b20 <f_open>
 8000860:	4603      	mov	r3, r0
 8000862:	461a      	mov	r2, r3
 8000864:	4b41      	ldr	r3, [pc, #260]	; (800096c <Update_File+0x15c>)
 8000866:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000868:	4b40      	ldr	r3, [pc, #256]	; (800096c <Update_File+0x15c>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d014      	beq.n	800089a <Update_File+0x8a>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8000870:	2064      	movs	r0, #100	; 0x64
 8000872:	f00b fbb9 	bl	800bfe8 <pvPortMalloc>
 8000876:	60f8      	str	r0, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8000878:	4b3c      	ldr	r3, [pc, #240]	; (800096c <Update_File+0x15c>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	461a      	mov	r2, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	493d      	ldr	r1, [pc, #244]	; (8000978 <Update_File+0x168>)
 8000882:	68f8      	ldr	r0, [r7, #12]
 8000884:	f00b fd8a 	bl	800c39c <siprintf>
	    	Send_Uart(buf);
 8000888:	68f8      	ldr	r0, [r7, #12]
 800088a:	f7ff fe63 	bl	8000554 <Send_Uart>
	        vPortFree(buf);
 800088e:	68f8      	ldr	r0, [r7, #12]
 8000890:	f00b fc6e 	bl	800c170 <vPortFree>
	        return fresult;
 8000894:	4b35      	ldr	r3, [pc, #212]	; (800096c <Update_File+0x15c>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	e061      	b.n	800095e <Update_File+0x14e>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 800089a:	6838      	ldr	r0, [r7, #0]
 800089c:	f7ff fcaa 	bl	80001f4 <strlen>
 80008a0:	4602      	mov	r2, r0
 80008a2:	4b36      	ldr	r3, [pc, #216]	; (800097c <Update_File+0x16c>)
 80008a4:	6839      	ldr	r1, [r7, #0]
 80008a6:	4833      	ldr	r0, [pc, #204]	; (8000974 <Update_File+0x164>)
 80008a8:	f008 fbbf 	bl	800902a <f_write>
 80008ac:	4603      	mov	r3, r0
 80008ae:	461a      	mov	r2, r3
 80008b0:	4b2e      	ldr	r3, [pc, #184]	; (800096c <Update_File+0x15c>)
 80008b2:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80008b4:	4b2d      	ldr	r3, [pc, #180]	; (800096c <Update_File+0x15c>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d012      	beq.n	80008e2 <Update_File+0xd2>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 80008bc:	2064      	movs	r0, #100	; 0x64
 80008be:	f00b fb93 	bl	800bfe8 <pvPortMalloc>
 80008c2:	61b8      	str	r0, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 80008c4:	4b29      	ldr	r3, [pc, #164]	; (800096c <Update_File+0x15c>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	461a      	mov	r2, r3
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	492c      	ldr	r1, [pc, #176]	; (8000980 <Update_File+0x170>)
 80008ce:	69b8      	ldr	r0, [r7, #24]
 80008d0:	f00b fd64 	bl	800c39c <siprintf>
	    	Send_Uart(buf);
 80008d4:	69b8      	ldr	r0, [r7, #24]
 80008d6:	f7ff fe3d 	bl	8000554 <Send_Uart>
	    	vPortFree(buf);
 80008da:	69b8      	ldr	r0, [r7, #24]
 80008dc:	f00b fc48 	bl	800c170 <vPortFree>
 80008e0:	e00e      	b.n	8000900 <Update_File+0xf0>
	    }

	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 80008e2:	2064      	movs	r0, #100	; 0x64
 80008e4:	f00b fb80 	bl	800bfe8 <pvPortMalloc>
 80008e8:	61f8      	str	r0, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	4925      	ldr	r1, [pc, #148]	; (8000984 <Update_File+0x174>)
 80008ee:	69f8      	ldr	r0, [r7, #28]
 80008f0:	f00b fd54 	bl	800c39c <siprintf>
	    	Send_Uart(buf);
 80008f4:	69f8      	ldr	r0, [r7, #28]
 80008f6:	f7ff fe2d 	bl	8000554 <Send_Uart>
	    	vPortFree(buf);
 80008fa:	69f8      	ldr	r0, [r7, #28]
 80008fc:	f00b fc38 	bl	800c170 <vPortFree>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 8000900:	481c      	ldr	r0, [pc, #112]	; (8000974 <Update_File+0x164>)
 8000902:	f008 fe52 	bl	80095aa <f_close>
 8000906:	4603      	mov	r3, r0
 8000908:	461a      	mov	r2, r3
 800090a:	4b18      	ldr	r3, [pc, #96]	; (800096c <Update_File+0x15c>)
 800090c:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800090e:	4b17      	ldr	r3, [pc, #92]	; (800096c <Update_File+0x15c>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d012      	beq.n	800093c <Update_File+0x12c>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8000916:	2064      	movs	r0, #100	; 0x64
 8000918:	f00b fb66 	bl	800bfe8 <pvPortMalloc>
 800091c:	6138      	str	r0, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 800091e:	4b13      	ldr	r3, [pc, #76]	; (800096c <Update_File+0x15c>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	461a      	mov	r2, r3
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4918      	ldr	r1, [pc, #96]	; (8000988 <Update_File+0x178>)
 8000928:	6938      	ldr	r0, [r7, #16]
 800092a:	f00b fd37 	bl	800c39c <siprintf>
	    	Send_Uart(buf);
 800092e:	6938      	ldr	r0, [r7, #16]
 8000930:	f7ff fe10 	bl	8000554 <Send_Uart>
	    	vPortFree(buf);
 8000934:	6938      	ldr	r0, [r7, #16]
 8000936:	f00b fc1b 	bl	800c170 <vPortFree>
 800093a:	e00e      	b.n	800095a <Update_File+0x14a>
	    }
	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 800093c:	2064      	movs	r0, #100	; 0x64
 800093e:	f00b fb53 	bl	800bfe8 <pvPortMalloc>
 8000942:	6178      	str	r0, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	4911      	ldr	r1, [pc, #68]	; (800098c <Update_File+0x17c>)
 8000948:	6978      	ldr	r0, [r7, #20]
 800094a:	f00b fd27 	bl	800c39c <siprintf>
	    	Send_Uart(buf);
 800094e:	6978      	ldr	r0, [r7, #20]
 8000950:	f7ff fe00 	bl	8000554 <Send_Uart>
	    	vPortFree(buf);
 8000954:	6978      	ldr	r0, [r7, #20]
 8000956:	f00b fc0b 	bl	800c170 <vPortFree>
	     }
	}
    return fresult;
 800095a:	4b04      	ldr	r3, [pc, #16]	; (800096c <Update_File+0x15c>)
 800095c:	781b      	ldrb	r3, [r3, #0]
}
 800095e:	4618      	mov	r0, r3
 8000960:	3720      	adds	r7, #32
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000504 	.word	0x20000504
 800096c:	2000051c 	.word	0x2000051c
 8000970:	0800ce70 	.word	0x0800ce70
 8000974:	200002d8 	.word	0x200002d8
 8000978:	0800ce90 	.word	0x0800ce90
 800097c:	20000520 	.word	0x20000520
 8000980:	0800d0ac 	.word	0x0800d0ac
 8000984:	0800d0d4 	.word	0x0800d0d4
 8000988:	0800cfa0 	.word	0x0800cfa0
 800098c:	0800cfc8 	.word	0x0800cfc8

08000990 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	2140      	movs	r1, #64	; 0x40
 8000998:	4802      	ldr	r0, [pc, #8]	; (80009a4 <SELECT+0x14>)
 800099a:	f002 fb81 	bl	80030a0 <HAL_GPIO_WritePin>
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	48000400 	.word	0x48000400

080009a8 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80009ac:	2201      	movs	r2, #1
 80009ae:	2140      	movs	r1, #64	; 0x40
 80009b0:	4802      	ldr	r0, [pc, #8]	; (80009bc <DESELECT+0x14>)
 80009b2:	f002 fb75 	bl	80030a0 <HAL_GPIO_WritePin>
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	48000400 	.word	0x48000400

080009c0 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80009ca:	bf00      	nop
 80009cc:	4808      	ldr	r0, [pc, #32]	; (80009f0 <SPI_TxByte+0x30>)
 80009ce:	f004 fc9b 	bl	8005308 <HAL_SPI_GetState>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d1f9      	bne.n	80009cc <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80009d8:	1df9      	adds	r1, r7, #7
 80009da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009de:	2201      	movs	r2, #1
 80009e0:	4803      	ldr	r0, [pc, #12]	; (80009f0 <SPI_TxByte+0x30>)
 80009e2:	f004 f8fa 	bl	8004bda <HAL_SPI_Transmit>
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000818 	.word	0x20000818

080009f4 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80009fa:	23ff      	movs	r3, #255	; 0xff
 80009fc:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000a02:	bf00      	nop
 8000a04:	4809      	ldr	r0, [pc, #36]	; (8000a2c <SPI_RxByte+0x38>)
 8000a06:	f004 fc7f 	bl	8005308 <HAL_SPI_GetState>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d1f9      	bne.n	8000a04 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8000a10:	1dba      	adds	r2, r7, #6
 8000a12:	1df9      	adds	r1, r7, #7
 8000a14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	4803      	ldr	r0, [pc, #12]	; (8000a2c <SPI_RxByte+0x38>)
 8000a1e:	f004 fa51 	bl	8004ec4 <HAL_SPI_TransmitReceive>
  
  return data;
 8000a22:	79bb      	ldrb	r3, [r7, #6]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000818 	.word	0x20000818

08000a30 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000a38:	f7ff ffdc 	bl	80009f4 <SPI_RxByte>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	461a      	mov	r2, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	701a      	strb	r2, [r3, #0]
}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <SD_ReadyWait+0x34>)
 8000a54:	2232      	movs	r2, #50	; 0x32
 8000a56:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8000a58:	f7ff ffcc 	bl	80009f4 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8000a5c:	f7ff ffca 	bl	80009f4 <SPI_RxByte>
 8000a60:	4603      	mov	r3, r0
 8000a62:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	2bff      	cmp	r3, #255	; 0xff
 8000a68:	d004      	beq.n	8000a74 <SD_ReadyWait+0x28>
 8000a6a:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <SD_ReadyWait+0x34>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d1f3      	bne.n	8000a5c <SD_ReadyWait+0x10>
  
  return res;
 8000a74:	79fb      	ldrb	r3, [r7, #7]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200009fe 	.word	0x200009fe

08000a84 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000a8a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000a8e:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 8000a90:	f7ff ff8a 	bl	80009a8 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8000a94:	2300      	movs	r3, #0
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	e005      	b.n	8000aa6 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000a9a:	20ff      	movs	r0, #255	; 0xff
 8000a9c:	f7ff ff90 	bl	80009c0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	613b      	str	r3, [r7, #16]
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	2b09      	cmp	r3, #9
 8000aaa:	ddf6      	ble.n	8000a9a <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8000aac:	f7ff ff70 	bl	8000990 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 8000ab0:	2340      	movs	r3, #64	; 0x40
 8000ab2:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000ac4:	2395      	movs	r3, #149	; 0x95
 8000ac6:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	e009      	b.n	8000ae2 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000ace:	1d3a      	adds	r2, r7, #4
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff ff72 	bl	80009c0 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	2b05      	cmp	r3, #5
 8000ae6:	ddf2      	ble.n	8000ace <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8000ae8:	e002      	b.n	8000af0 <SD_PowerOn+0x6c>
  {
    Count--;
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	3b01      	subs	r3, #1
 8000aee:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000af0:	f7ff ff80 	bl	80009f4 <SPI_RxByte>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d002      	beq.n	8000b00 <SD_PowerOn+0x7c>
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d1f4      	bne.n	8000aea <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8000b00:	f7ff ff52 	bl	80009a8 <DESELECT>
  SPI_TxByte(0XFF);
 8000b04:	20ff      	movs	r0, #255	; 0xff
 8000b06:	f7ff ff5b 	bl	80009c0 <SPI_TxByte>
  
  PowerFlag = 1;
 8000b0a:	4b03      	ldr	r3, [pc, #12]	; (8000b18 <SD_PowerOn+0x94>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	701a      	strb	r2, [r3, #0]
}
 8000b10:	bf00      	nop
 8000b12:	3718      	adds	r7, #24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000525 	.word	0x20000525

08000b1c <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000b20:	4b03      	ldr	r3, [pc, #12]	; (8000b30 <SD_PowerOff+0x14>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	701a      	strb	r2, [r3, #0]
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	20000525 	.word	0x20000525

08000b34 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <SD_CheckPower+0x14>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20000525 	.word	0x20000525

08000b4c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8000b56:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <SD_RxDataBlock+0x68>)
 8000b58:	220a      	movs	r2, #10
 8000b5a:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8000b5c:	f7ff ff4a 	bl	80009f4 <SPI_RxByte>
 8000b60:	4603      	mov	r3, r0
 8000b62:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000b64:	7bfb      	ldrb	r3, [r7, #15]
 8000b66:	2bff      	cmp	r3, #255	; 0xff
 8000b68:	d104      	bne.n	8000b74 <SD_RxDataBlock+0x28>
 8000b6a:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <SD_RxDataBlock+0x68>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d1f3      	bne.n	8000b5c <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
 8000b76:	2bfe      	cmp	r3, #254	; 0xfe
 8000b78:	d001      	beq.n	8000b7e <SD_RxDataBlock+0x32>
    return FALSE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e016      	b.n	8000bac <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	1c5a      	adds	r2, r3, #1
 8000b82:	607a      	str	r2, [r7, #4]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff53 	bl	8000a30 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	1c5a      	adds	r2, r3, #1
 8000b8e:	607a      	str	r2, [r7, #4]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff ff4d 	bl	8000a30 <SPI_RxBytePtr>
  } while(btr -= 2);
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	3b02      	subs	r3, #2
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d1ed      	bne.n	8000b7e <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 8000ba2:	f7ff ff27 	bl	80009f4 <SPI_RxByte>
  SPI_RxByte();
 8000ba6:	f7ff ff25 	bl	80009f4 <SPI_RxByte>
  
  return TRUE;
 8000baa:	2301      	movs	r3, #1
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	200009fd 	.word	0x200009fd

08000bb8 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000bc8:	f7ff ff40 	bl	8000a4c <SD_ReadyWait>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2bff      	cmp	r3, #255	; 0xff
 8000bd0:	d001      	beq.n	8000bd6 <SD_TxDataBlock+0x1e>
    return FALSE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e040      	b.n	8000c58 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8000bd6:	78fb      	ldrb	r3, [r7, #3]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fef1 	bl	80009c0 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 8000bde:	78fb      	ldrb	r3, [r7, #3]
 8000be0:	2bfd      	cmp	r3, #253	; 0xfd
 8000be2:	d031      	beq.n	8000c48 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	1c5a      	adds	r2, r3, #1
 8000bec:	607a      	str	r2, [r7, #4]
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff fee5 	bl	80009c0 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	1c5a      	adds	r2, r3, #1
 8000bfa:	607a      	str	r2, [r7, #4]
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff fede 	bl	80009c0 <SPI_TxByte>
    } while (--wc);
 8000c04:	7bbb      	ldrb	r3, [r7, #14]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	73bb      	strb	r3, [r7, #14]
 8000c0a:	7bbb      	ldrb	r3, [r7, #14]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d1eb      	bne.n	8000be8 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8000c10:	f7ff fef0 	bl	80009f4 <SPI_RxByte>
    SPI_RxByte();
 8000c14:	f7ff feee 	bl	80009f4 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8000c18:	e00b      	b.n	8000c32 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8000c1a:	f7ff feeb 	bl	80009f4 <SPI_RxByte>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	f003 031f 	and.w	r3, r3, #31
 8000c28:	2b05      	cmp	r3, #5
 8000c2a:	d006      	beq.n	8000c3a <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8000c2c:	7b7b      	ldrb	r3, [r7, #13]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8000c32:	7b7b      	ldrb	r3, [r7, #13]
 8000c34:	2b40      	cmp	r3, #64	; 0x40
 8000c36:	d9f0      	bls.n	8000c1a <SD_TxDataBlock+0x62>
 8000c38:	e000      	b.n	8000c3c <SD_TxDataBlock+0x84>
        break;
 8000c3a:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000c3c:	bf00      	nop
 8000c3e:	f7ff fed9 	bl	80009f4 <SPI_RxByte>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d0fa      	beq.n	8000c3e <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
 8000c4a:	f003 031f 	and.w	r3, r3, #31
 8000c4e:	2b05      	cmp	r3, #5
 8000c50:	d101      	bne.n	8000c56 <SD_TxDataBlock+0x9e>
    return TRUE;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e000      	b.n	8000c58 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000c56:	2300      	movs	r3, #0
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	6039      	str	r1, [r7, #0]
 8000c6a:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000c6c:	f7ff feee 	bl	8000a4c <SD_ReadyWait>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2bff      	cmp	r3, #255	; 0xff
 8000c74:	d001      	beq.n	8000c7a <SD_SendCmd+0x1a>
    return 0xFF;
 8000c76:	23ff      	movs	r3, #255	; 0xff
 8000c78:	e040      	b.n	8000cfc <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fe9f 	bl	80009c0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	0e1b      	lsrs	r3, r3, #24
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fe99 	bl	80009c0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	0c1b      	lsrs	r3, r3, #16
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fe93 	bl	80009c0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	0a1b      	lsrs	r3, r3, #8
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fe8d 	bl	80009c0 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fe88 	bl	80009c0 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	2b40      	cmp	r3, #64	; 0x40
 8000cb8:	d101      	bne.n	8000cbe <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000cba:	2395      	movs	r3, #149	; 0x95
 8000cbc:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	2b48      	cmp	r3, #72	; 0x48
 8000cc2:	d101      	bne.n	8000cc8 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000cc4:	2387      	movs	r3, #135	; 0x87
 8000cc6:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8000cc8:	7bfb      	ldrb	r3, [r7, #15]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fe78 	bl	80009c0 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	2b4c      	cmp	r3, #76	; 0x4c
 8000cd4:	d101      	bne.n	8000cda <SD_SendCmd+0x7a>
    SPI_RxByte();
 8000cd6:	f7ff fe8d 	bl	80009f4 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 8000cda:	230a      	movs	r3, #10
 8000cdc:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8000cde:	f7ff fe89 	bl	80009f4 <SPI_RxByte>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000ce6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	da05      	bge.n	8000cfa <SD_SendCmd+0x9a>
 8000cee:	7bbb      	ldrb	r3, [r7, #14]
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	73bb      	strb	r3, [r7, #14]
 8000cf4:	7bbb      	ldrb	r3, [r7, #14]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d1f1      	bne.n	8000cde <SD_SendCmd+0x7e>
  
  return res;
 8000cfa:	7b7b      	ldrb	r3, [r7, #13]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000d04:	b590      	push	{r4, r7, lr}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8000d14:	2301      	movs	r3, #1
 8000d16:	e0d5      	b.n	8000ec4 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000d18:	4b6c      	ldr	r3, [pc, #432]	; (8000ecc <SD_disk_initialize+0x1c8>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d003      	beq.n	8000d2e <SD_disk_initialize+0x2a>
    return Stat;        
 8000d26:	4b69      	ldr	r3, [pc, #420]	; (8000ecc <SD_disk_initialize+0x1c8>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	e0ca      	b.n	8000ec4 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 8000d2e:	f7ff fea9 	bl	8000a84 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8000d32:	f7ff fe2d 	bl	8000990 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	2040      	movs	r0, #64	; 0x40
 8000d3e:	f7ff ff8f 	bl	8000c60 <SD_SendCmd>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	f040 80a5 	bne.w	8000e94 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000d4a:	4b61      	ldr	r3, [pc, #388]	; (8000ed0 <SD_disk_initialize+0x1cc>)
 8000d4c:	2264      	movs	r2, #100	; 0x64
 8000d4e:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8000d50:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000d54:	2048      	movs	r0, #72	; 0x48
 8000d56:	f7ff ff83 	bl	8000c60 <SD_SendCmd>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d158      	bne.n	8000e12 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000d60:	2300      	movs	r3, #0
 8000d62:	73fb      	strb	r3, [r7, #15]
 8000d64:	e00c      	b.n	8000d80 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8000d66:	7bfc      	ldrb	r4, [r7, #15]
 8000d68:	f7ff fe44 	bl	80009f4 <SPI_RxByte>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	461a      	mov	r2, r3
 8000d70:	f104 0310 	add.w	r3, r4, #16
 8000d74:	443b      	add	r3, r7
 8000d76:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	73fb      	strb	r3, [r7, #15]
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	2b03      	cmp	r3, #3
 8000d84:	d9ef      	bls.n	8000d66 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8000d86:	7abb      	ldrb	r3, [r7, #10]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	f040 8083 	bne.w	8000e94 <SD_disk_initialize+0x190>
 8000d8e:	7afb      	ldrb	r3, [r7, #11]
 8000d90:	2baa      	cmp	r3, #170	; 0xaa
 8000d92:	d17f      	bne.n	8000e94 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000d94:	2100      	movs	r1, #0
 8000d96:	2077      	movs	r0, #119	; 0x77
 8000d98:	f7ff ff62 	bl	8000c60 <SD_SendCmd>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d807      	bhi.n	8000db2 <SD_disk_initialize+0xae>
 8000da2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000da6:	2069      	movs	r0, #105	; 0x69
 8000da8:	f7ff ff5a 	bl	8000c60 <SD_SendCmd>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d005      	beq.n	8000dbe <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8000db2:	4b47      	ldr	r3, [pc, #284]	; (8000ed0 <SD_disk_initialize+0x1cc>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d1eb      	bne.n	8000d94 <SD_disk_initialize+0x90>
 8000dbc:	e000      	b.n	8000dc0 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000dbe:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8000dc0:	4b43      	ldr	r3, [pc, #268]	; (8000ed0 <SD_disk_initialize+0x1cc>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d064      	beq.n	8000e94 <SD_disk_initialize+0x190>
 8000dca:	2100      	movs	r1, #0
 8000dcc:	207a      	movs	r0, #122	; 0x7a
 8000dce:	f7ff ff47 	bl	8000c60 <SD_SendCmd>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d15d      	bne.n	8000e94 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000dd8:	2300      	movs	r3, #0
 8000dda:	73fb      	strb	r3, [r7, #15]
 8000ddc:	e00c      	b.n	8000df8 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000dde:	7bfc      	ldrb	r4, [r7, #15]
 8000de0:	f7ff fe08 	bl	80009f4 <SPI_RxByte>
 8000de4:	4603      	mov	r3, r0
 8000de6:	461a      	mov	r2, r3
 8000de8:	f104 0310 	add.w	r3, r4, #16
 8000dec:	443b      	add	r3, r7
 8000dee:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
 8000df4:	3301      	adds	r3, #1
 8000df6:	73fb      	strb	r3, [r7, #15]
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
 8000dfa:	2b03      	cmp	r3, #3
 8000dfc:	d9ef      	bls.n	8000dde <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8000dfe:	7a3b      	ldrb	r3, [r7, #8]
 8000e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <SD_disk_initialize+0x108>
 8000e08:	2306      	movs	r3, #6
 8000e0a:	e000      	b.n	8000e0e <SD_disk_initialize+0x10a>
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	73bb      	strb	r3, [r7, #14]
 8000e10:	e040      	b.n	8000e94 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000e12:	2100      	movs	r1, #0
 8000e14:	2077      	movs	r0, #119	; 0x77
 8000e16:	f7ff ff23 	bl	8000c60 <SD_SendCmd>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d808      	bhi.n	8000e32 <SD_disk_initialize+0x12e>
 8000e20:	2100      	movs	r1, #0
 8000e22:	2069      	movs	r0, #105	; 0x69
 8000e24:	f7ff ff1c 	bl	8000c60 <SD_SendCmd>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d801      	bhi.n	8000e32 <SD_disk_initialize+0x12e>
 8000e2e:	2302      	movs	r3, #2
 8000e30:	e000      	b.n	8000e34 <SD_disk_initialize+0x130>
 8000e32:	2301      	movs	r3, #1
 8000e34:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8000e36:	7bbb      	ldrb	r3, [r7, #14]
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d10e      	bne.n	8000e5a <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2077      	movs	r0, #119	; 0x77
 8000e40:	f7ff ff0e 	bl	8000c60 <SD_SendCmd>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d80e      	bhi.n	8000e68 <SD_disk_initialize+0x164>
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	2069      	movs	r0, #105	; 0x69
 8000e4e:	f7ff ff07 	bl	8000c60 <SD_SendCmd>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d107      	bne.n	8000e68 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000e58:	e00d      	b.n	8000e76 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	2041      	movs	r0, #65	; 0x41
 8000e5e:	f7ff feff 	bl	8000c60 <SD_SendCmd>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d005      	beq.n	8000e74 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000e68:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <SD_disk_initialize+0x1cc>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d1e1      	bne.n	8000e36 <SD_disk_initialize+0x132>
 8000e72:	e000      	b.n	8000e76 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8000e74:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8000e76:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <SD_disk_initialize+0x1cc>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d007      	beq.n	8000e90 <SD_disk_initialize+0x18c>
 8000e80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e84:	2050      	movs	r0, #80	; 0x50
 8000e86:	f7ff feeb 	bl	8000c60 <SD_SendCmd>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8000e94:	4a0f      	ldr	r2, [pc, #60]	; (8000ed4 <SD_disk_initialize+0x1d0>)
 8000e96:	7bbb      	ldrb	r3, [r7, #14]
 8000e98:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8000e9a:	f7ff fd85 	bl	80009a8 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000e9e:	f7ff fda9 	bl	80009f4 <SPI_RxByte>
  
  if (type) 
 8000ea2:	7bbb      	ldrb	r3, [r7, #14]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d008      	beq.n	8000eba <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <SD_disk_initialize+0x1c8>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	f023 0301 	bic.w	r3, r3, #1
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <SD_disk_initialize+0x1c8>)
 8000eb6:	701a      	strb	r2, [r3, #0]
 8000eb8:	e001      	b.n	8000ebe <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000eba:	f7ff fe2f 	bl	8000b1c <SD_PowerOff>
  }
  
  return Stat;
 8000ebe:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <SD_disk_initialize+0x1c8>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	b2db      	uxtb	r3, r3
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd90      	pop	{r4, r7, pc}
 8000ecc:	20000000 	.word	0x20000000
 8000ed0:	200009fd 	.word	0x200009fd
 8000ed4:	20000524 	.word	0x20000524

08000ed8 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <SD_disk_status+0x14>
    return STA_NOINIT; 
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e002      	b.n	8000ef2 <SD_disk_status+0x1a>
  
  return Stat;
 8000eec:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <SD_disk_status+0x28>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	b2db      	uxtb	r3, r3
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000000 	.word	0x20000000

08000f04 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60b9      	str	r1, [r7, #8]
 8000f0c:	607a      	str	r2, [r7, #4]
 8000f0e:	603b      	str	r3, [r7, #0]
 8000f10:	4603      	mov	r3, r0
 8000f12:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d102      	bne.n	8000f20 <SD_disk_read+0x1c>
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d101      	bne.n	8000f24 <SD_disk_read+0x20>
    return RES_PARERR;
 8000f20:	2304      	movs	r3, #4
 8000f22:	e051      	b.n	8000fc8 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8000f24:	4b2a      	ldr	r3, [pc, #168]	; (8000fd0 <SD_disk_read+0xcc>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8000f32:	2303      	movs	r3, #3
 8000f34:	e048      	b.n	8000fc8 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8000f36:	4b27      	ldr	r3, [pc, #156]	; (8000fd4 <SD_disk_read+0xd0>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	f003 0304 	and.w	r3, r3, #4
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d102      	bne.n	8000f48 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	025b      	lsls	r3, r3, #9
 8000f46:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8000f48:	f7ff fd22 	bl	8000990 <SELECT>
  
  if (count == 1) 
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d111      	bne.n	8000f76 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	2051      	movs	r0, #81	; 0x51
 8000f56:	f7ff fe83 	bl	8000c60 <SD_SendCmd>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d129      	bne.n	8000fb4 <SD_disk_read+0xb0>
 8000f60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f64:	68b8      	ldr	r0, [r7, #8]
 8000f66:	f7ff fdf1 	bl	8000b4c <SD_RxDataBlock>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d021      	beq.n	8000fb4 <SD_disk_read+0xb0>
      count = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	603b      	str	r3, [r7, #0]
 8000f74:	e01e      	b.n	8000fb4 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	2052      	movs	r0, #82	; 0x52
 8000f7a:	f7ff fe71 	bl	8000c60 <SD_SendCmd>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d117      	bne.n	8000fb4 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000f84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f88:	68b8      	ldr	r0, [r7, #8]
 8000f8a:	f7ff fddf 	bl	8000b4c <SD_RxDataBlock>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d00a      	beq.n	8000faa <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f9a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	603b      	str	r3, [r7, #0]
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1ed      	bne.n	8000f84 <SD_disk_read+0x80>
 8000fa8:	e000      	b.n	8000fac <SD_disk_read+0xa8>
          break;
 8000faa:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8000fac:	2100      	movs	r1, #0
 8000fae:	204c      	movs	r0, #76	; 0x4c
 8000fb0:	f7ff fe56 	bl	8000c60 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8000fb4:	f7ff fcf8 	bl	80009a8 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8000fb8:	f7ff fd1c 	bl	80009f4 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	bf14      	ite	ne
 8000fc2:	2301      	movne	r3, #1
 8000fc4:	2300      	moveq	r3, #0
 8000fc6:	b2db      	uxtb	r3, r3
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	20000524 	.word	0x20000524

08000fd8 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
 8000fe2:	603b      	str	r3, [r7, #0]
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d102      	bne.n	8000ff4 <SD_disk_write+0x1c>
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d101      	bne.n	8000ff8 <SD_disk_write+0x20>
    return RES_PARERR;
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	e06b      	b.n	80010d0 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8000ff8:	4b37      	ldr	r3, [pc, #220]	; (80010d8 <SD_disk_write+0x100>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001006:	2303      	movs	r3, #3
 8001008:	e062      	b.n	80010d0 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 800100a:	4b33      	ldr	r3, [pc, #204]	; (80010d8 <SD_disk_write+0x100>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	b2db      	uxtb	r3, r3
 8001010:	f003 0304 	and.w	r3, r3, #4
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <SD_disk_write+0x44>
    return RES_WRPRT;
 8001018:	2302      	movs	r3, #2
 800101a:	e059      	b.n	80010d0 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 800101c:	4b2f      	ldr	r3, [pc, #188]	; (80010dc <SD_disk_write+0x104>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	f003 0304 	and.w	r3, r3, #4
 8001024:	2b00      	cmp	r3, #0
 8001026:	d102      	bne.n	800102e <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	025b      	lsls	r3, r3, #9
 800102c:	607b      	str	r3, [r7, #4]
  
  SELECT();
 800102e:	f7ff fcaf 	bl	8000990 <SELECT>
  
  if (count == 1) 
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d110      	bne.n	800105a <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	2058      	movs	r0, #88	; 0x58
 800103c:	f7ff fe10 	bl	8000c60 <SD_SendCmd>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d13a      	bne.n	80010bc <SD_disk_write+0xe4>
 8001046:	21fe      	movs	r1, #254	; 0xfe
 8001048:	68b8      	ldr	r0, [r7, #8]
 800104a:	f7ff fdb5 	bl	8000bb8 <SD_TxDataBlock>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d033      	beq.n	80010bc <SD_disk_write+0xe4>
      count = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	e030      	b.n	80010bc <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 800105a:	4b20      	ldr	r3, [pc, #128]	; (80010dc <SD_disk_write+0x104>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d007      	beq.n	8001076 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001066:	2100      	movs	r1, #0
 8001068:	2077      	movs	r0, #119	; 0x77
 800106a:	f7ff fdf9 	bl	8000c60 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800106e:	6839      	ldr	r1, [r7, #0]
 8001070:	2057      	movs	r0, #87	; 0x57
 8001072:	f7ff fdf5 	bl	8000c60 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	2059      	movs	r0, #89	; 0x59
 800107a:	f7ff fdf1 	bl	8000c60 <SD_SendCmd>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d11b      	bne.n	80010bc <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001084:	21fc      	movs	r1, #252	; 0xfc
 8001086:	68b8      	ldr	r0, [r7, #8]
 8001088:	f7ff fd96 	bl	8000bb8 <SD_TxDataBlock>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d00a      	beq.n	80010a8 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001098:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	3b01      	subs	r3, #1
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1ee      	bne.n	8001084 <SD_disk_write+0xac>
 80010a6:	e000      	b.n	80010aa <SD_disk_write+0xd2>
          break;
 80010a8:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 80010aa:	21fd      	movs	r1, #253	; 0xfd
 80010ac:	2000      	movs	r0, #0
 80010ae:	f7ff fd83 	bl	8000bb8 <SD_TxDataBlock>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d101      	bne.n	80010bc <SD_disk_write+0xe4>
      {        
        count = 1;
 80010b8:	2301      	movs	r3, #1
 80010ba:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 80010bc:	f7ff fc74 	bl	80009a8 <DESELECT>
  SPI_RxByte();
 80010c0:	f7ff fc98 	bl	80009f4 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	bf14      	ite	ne
 80010ca:	2301      	movne	r3, #1
 80010cc:	2300      	moveq	r3, #0
 80010ce:	b2db      	uxtb	r3, r3
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000000 	.word	0x20000000
 80010dc:	20000524 	.word	0x20000524

080010e0 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b08b      	sub	sp, #44	; 0x2c
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	603a      	str	r2, [r7, #0]
 80010ea:	71fb      	strb	r3, [r7, #7]
 80010ec:	460b      	mov	r3, r1
 80010ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80010fa:	2304      	movs	r3, #4
 80010fc:	e11b      	b.n	8001336 <SD_disk_ioctl+0x256>
  
  res = RES_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8001104:	79bb      	ldrb	r3, [r7, #6]
 8001106:	2b05      	cmp	r3, #5
 8001108:	d129      	bne.n	800115e <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 800110a:	6a3b      	ldr	r3, [r7, #32]
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b02      	cmp	r3, #2
 8001110:	d017      	beq.n	8001142 <SD_disk_ioctl+0x62>
 8001112:	2b02      	cmp	r3, #2
 8001114:	dc1f      	bgt.n	8001156 <SD_disk_ioctl+0x76>
 8001116:	2b00      	cmp	r3, #0
 8001118:	d002      	beq.n	8001120 <SD_disk_ioctl+0x40>
 800111a:	2b01      	cmp	r3, #1
 800111c:	d00b      	beq.n	8001136 <SD_disk_ioctl+0x56>
 800111e:	e01a      	b.n	8001156 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001120:	f7ff fd08 	bl	8000b34 <SD_CheckPower>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 800112a:	f7ff fcf7 	bl	8000b1c <SD_PowerOff>
      res = RES_OK;
 800112e:	2300      	movs	r3, #0
 8001130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001134:	e0fd      	b.n	8001332 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8001136:	f7ff fca5 	bl	8000a84 <SD_PowerOn>
      res = RES_OK;
 800113a:	2300      	movs	r3, #0
 800113c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001140:	e0f7      	b.n	8001332 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001142:	6a3b      	ldr	r3, [r7, #32]
 8001144:	1c5c      	adds	r4, r3, #1
 8001146:	f7ff fcf5 	bl	8000b34 <SD_CheckPower>
 800114a:	4603      	mov	r3, r0
 800114c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800114e:	2300      	movs	r3, #0
 8001150:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001154:	e0ed      	b.n	8001332 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8001156:	2304      	movs	r3, #4
 8001158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800115c:	e0e9      	b.n	8001332 <SD_disk_ioctl+0x252>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 800115e:	4b78      	ldr	r3, [pc, #480]	; (8001340 <SD_disk_ioctl+0x260>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	b2db      	uxtb	r3, r3
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 800116c:	2303      	movs	r3, #3
 800116e:	e0e2      	b.n	8001336 <SD_disk_ioctl+0x256>
    
    SELECT();
 8001170:	f7ff fc0e 	bl	8000990 <SELECT>
    
    switch (ctrl) 
 8001174:	79bb      	ldrb	r3, [r7, #6]
 8001176:	2b0d      	cmp	r3, #13
 8001178:	f200 80cc 	bhi.w	8001314 <SD_disk_ioctl+0x234>
 800117c:	a201      	add	r2, pc, #4	; (adr r2, 8001184 <SD_disk_ioctl+0xa4>)
 800117e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001182:	bf00      	nop
 8001184:	0800127f 	.word	0x0800127f
 8001188:	080011bd 	.word	0x080011bd
 800118c:	0800126f 	.word	0x0800126f
 8001190:	08001315 	.word	0x08001315
 8001194:	08001315 	.word	0x08001315
 8001198:	08001315 	.word	0x08001315
 800119c:	08001315 	.word	0x08001315
 80011a0:	08001315 	.word	0x08001315
 80011a4:	08001315 	.word	0x08001315
 80011a8:	08001315 	.word	0x08001315
 80011ac:	08001315 	.word	0x08001315
 80011b0:	08001291 	.word	0x08001291
 80011b4:	080012b5 	.word	0x080012b5
 80011b8:	080012d9 	.word	0x080012d9
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 80011bc:	2100      	movs	r1, #0
 80011be:	2049      	movs	r0, #73	; 0x49
 80011c0:	f7ff fd4e 	bl	8000c60 <SD_SendCmd>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f040 80a8 	bne.w	800131c <SD_disk_ioctl+0x23c>
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	2110      	movs	r1, #16
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fcba 	bl	8000b4c <SD_RxDataBlock>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f000 809e 	beq.w	800131c <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1) 
 80011e0:	7b3b      	ldrb	r3, [r7, #12]
 80011e2:	099b      	lsrs	r3, r3, #6
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d10e      	bne.n	8001208 <SD_disk_ioctl+0x128>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80011ea:	7d7b      	ldrb	r3, [r7, #21]
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	7d3b      	ldrb	r3, [r7, #20]
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	4413      	add	r3, r2
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	3301      	adds	r3, #1
 80011fc:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80011fe:	8bfb      	ldrh	r3, [r7, #30]
 8001200:	029a      	lsls	r2, r3, #10
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	e02e      	b.n	8001266 <SD_disk_ioctl+0x186>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001208:	7c7b      	ldrb	r3, [r7, #17]
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	b2da      	uxtb	r2, r3
 8001210:	7dbb      	ldrb	r3, [r7, #22]
 8001212:	09db      	lsrs	r3, r3, #7
 8001214:	b2db      	uxtb	r3, r3
 8001216:	4413      	add	r3, r2
 8001218:	b2da      	uxtb	r2, r3
 800121a:	7d7b      	ldrb	r3, [r7, #21]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	b2db      	uxtb	r3, r3
 8001220:	f003 0306 	and.w	r3, r3, #6
 8001224:	b2db      	uxtb	r3, r3
 8001226:	4413      	add	r3, r2
 8001228:	b2db      	uxtb	r3, r3
 800122a:	3302      	adds	r3, #2
 800122c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001230:	7d3b      	ldrb	r3, [r7, #20]
 8001232:	099b      	lsrs	r3, r3, #6
 8001234:	b2db      	uxtb	r3, r3
 8001236:	b29a      	uxth	r2, r3
 8001238:	7cfb      	ldrb	r3, [r7, #19]
 800123a:	b29b      	uxth	r3, r3
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	b29b      	uxth	r3, r3
 8001240:	4413      	add	r3, r2
 8001242:	b29a      	uxth	r2, r3
 8001244:	7cbb      	ldrb	r3, [r7, #18]
 8001246:	029b      	lsls	r3, r3, #10
 8001248:	b29b      	uxth	r3, r3
 800124a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800124e:	b29b      	uxth	r3, r3
 8001250:	4413      	add	r3, r2
 8001252:	b29b      	uxth	r3, r3
 8001254:	3301      	adds	r3, #1
 8001256:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001258:	8bfa      	ldrh	r2, [r7, #30]
 800125a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800125e:	3b09      	subs	r3, #9
 8001260:	409a      	lsls	r2, r3
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8001266:	2300      	movs	r3, #0
 8001268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 800126c:	e056      	b.n	800131c <SD_disk_ioctl+0x23c>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001274:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001276:	2300      	movs	r3, #0
 8001278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800127c:	e055      	b.n	800132a <SD_disk_ioctl+0x24a>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800127e:	f7ff fbe5 	bl	8000a4c <SD_ReadyWait>
 8001282:	4603      	mov	r3, r0
 8001284:	2bff      	cmp	r3, #255	; 0xff
 8001286:	d14b      	bne.n	8001320 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001288:	2300      	movs	r3, #0
 800128a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800128e:	e047      	b.n	8001320 <SD_disk_ioctl+0x240>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001290:	2100      	movs	r1, #0
 8001292:	2049      	movs	r0, #73	; 0x49
 8001294:	f7ff fce4 	bl	8000c60 <SD_SendCmd>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d142      	bne.n	8001324 <SD_disk_ioctl+0x244>
 800129e:	2110      	movs	r1, #16
 80012a0:	6a38      	ldr	r0, [r7, #32]
 80012a2:	f7ff fc53 	bl	8000b4c <SD_RxDataBlock>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d03b      	beq.n	8001324 <SD_disk_ioctl+0x244>
        res = RES_OK;
 80012ac:	2300      	movs	r3, #0
 80012ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80012b2:	e037      	b.n	8001324 <SD_disk_ioctl+0x244>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80012b4:	2100      	movs	r1, #0
 80012b6:	204a      	movs	r0, #74	; 0x4a
 80012b8:	f7ff fcd2 	bl	8000c60 <SD_SendCmd>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d132      	bne.n	8001328 <SD_disk_ioctl+0x248>
 80012c2:	2110      	movs	r1, #16
 80012c4:	6a38      	ldr	r0, [r7, #32]
 80012c6:	f7ff fc41 	bl	8000b4c <SD_RxDataBlock>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d02b      	beq.n	8001328 <SD_disk_ioctl+0x248>
        res = RES_OK;
 80012d0:	2300      	movs	r3, #0
 80012d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80012d6:	e027      	b.n	8001328 <SD_disk_ioctl+0x248>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 80012d8:	2100      	movs	r1, #0
 80012da:	207a      	movs	r0, #122	; 0x7a
 80012dc:	f7ff fcc0 	bl	8000c60 <SD_SendCmd>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d116      	bne.n	8001314 <SD_disk_ioctl+0x234>
      {         
        for (n = 0; n < 4; n++)
 80012e6:	2300      	movs	r3, #0
 80012e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80012ec:	e00b      	b.n	8001306 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 80012ee:	6a3c      	ldr	r4, [r7, #32]
 80012f0:	1c63      	adds	r3, r4, #1
 80012f2:	623b      	str	r3, [r7, #32]
 80012f4:	f7ff fb7e 	bl	80009f4 <SPI_RxByte>
 80012f8:	4603      	mov	r3, r0
 80012fa:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80012fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001300:	3301      	adds	r3, #1
 8001302:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001306:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800130a:	2b03      	cmp	r3, #3
 800130c:	d9ef      	bls.n	80012ee <SD_disk_ioctl+0x20e>
        }
        
        res = RES_OK;
 800130e:	2300      	movs	r3, #0
 8001310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8001314:	2304      	movs	r3, #4
 8001316:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800131a:	e006      	b.n	800132a <SD_disk_ioctl+0x24a>
      break;
 800131c:	bf00      	nop
 800131e:	e004      	b.n	800132a <SD_disk_ioctl+0x24a>
      break;
 8001320:	bf00      	nop
 8001322:	e002      	b.n	800132a <SD_disk_ioctl+0x24a>
      break;
 8001324:	bf00      	nop
 8001326:	e000      	b.n	800132a <SD_disk_ioctl+0x24a>
      break;
 8001328:	bf00      	nop
    }
    
    DESELECT();
 800132a:	f7ff fb3d 	bl	80009a8 <DESELECT>
    SPI_RxByte();
 800132e:	f7ff fb61 	bl	80009f4 <SPI_RxByte>
  }
  
  return res;
 8001332:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001336:	4618      	mov	r0, r3
 8001338:	372c      	adds	r7, #44	; 0x2c
 800133a:	46bd      	mov	sp, r7
 800133c:	bd90      	pop	{r4, r7, pc}
 800133e:	bf00      	nop
 8001340:	20000000 	.word	0x20000000

08001344 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4a07      	ldr	r2, [pc, #28]	; (8001370 <vApplicationGetIdleTaskMemory+0x2c>)
 8001354:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	4a06      	ldr	r2, [pc, #24]	; (8001374 <vApplicationGetIdleTaskMemory+0x30>)
 800135a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2280      	movs	r2, #128	; 0x80
 8001360:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001362:	bf00      	nop
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20000528 	.word	0x20000528
 8001374:	200005c8 	.word	0x200005c8

08001378 <DHT_Task>:
		vTaskDelay(500);
	}
}

void DHT_Task (void *argument)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	while (1)
	{
		if (xSemaphoreTake(DHT_SEM, 2500) != pdTRUE)
 8001380:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <DHT_Task+0x34>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8001388:	4618      	mov	r0, r3
 800138a:	f009 f8a1 	bl	800a4d0 <xQueueSemaphoreTake>
 800138e:	4603      	mov	r3, r0
 8001390:	2b01      	cmp	r3, #1
 8001392:	d006      	beq.n	80013a2 <DHT_Task+0x2a>
		{
			HAL_UART_Transmit(&huart2, (uint8_t *) "Unable to acquire semaphore\n", 28, 100);
 8001394:	2364      	movs	r3, #100	; 0x64
 8001396:	221c      	movs	r2, #28
 8001398:	4905      	ldr	r1, [pc, #20]	; (80013b0 <DHT_Task+0x38>)
 800139a:	4806      	ldr	r0, [pc, #24]	; (80013b4 <DHT_Task+0x3c>)
 800139c:	f004 fe96 	bl	80060cc <HAL_UART_Transmit>
 80013a0:	e7ee      	b.n	8001380 <DHT_Task+0x8>
		}

		else
		{
			DHT11_Get_Data(&Temperature, &Humidity);
 80013a2:	4905      	ldr	r1, [pc, #20]	; (80013b8 <DHT_Task+0x40>)
 80013a4:	4805      	ldr	r0, [pc, #20]	; (80013bc <DHT_Task+0x44>)
 80013a6:	f7ff f871 	bl	800048c <DHT11_Get_Data>
		if (xSemaphoreTake(DHT_SEM, 2500) != pdTRUE)
 80013aa:	e7e9      	b.n	8001380 <DHT_Task+0x8>
 80013ac:	200009ac 	.word	0x200009ac
 80013b0:	0800d1c0 	.word	0x0800d1c0
 80013b4:	20000914 	.word	0x20000914
 80013b8:	200009a0 	.word	0x200009a0
 80013bc:	2000099c 	.word	0x2000099c

080013c0 <SDCARD_Task>:
	}
}


void SDCARD_Task (void *argument)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af02      	add	r7, sp, #8
 80013c6:	6078      	str	r0, [r7, #4]
	int indx=1;
 80013c8:	2301      	movs	r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
	while (1)
	{
		char *buffer = pvPortMalloc(50*sizeof(char));
 80013cc:	2032      	movs	r0, #50	; 0x32
 80013ce:	f00a fe0b 	bl	800bfe8 <pvPortMalloc>
 80013d2:	60b8      	str	r0, [r7, #8]
		//sprintf (buffer, "%d. %u\n", indx,ADC_VAL);
		Mount_SD("/");
 80013d4:	480f      	ldr	r0, [pc, #60]	; (8001414 <SDCARD_Task+0x54>)
 80013d6:	f7ff f8d3 	bl	8000580 <Mount_SD>
		//Update_File("ADC_DATA.TXT", buffer);
		sprintf (buffer, "%d. Temp = %d C\t RH = %d \n",indx, Temperature, Humidity);
 80013da:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <SDCARD_Task+0x58>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	4b0f      	ldr	r3, [pc, #60]	; (800141c <SDCARD_Task+0x5c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	4613      	mov	r3, r2
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	490d      	ldr	r1, [pc, #52]	; (8001420 <SDCARD_Task+0x60>)
 80013ea:	68b8      	ldr	r0, [r7, #8]
 80013ec:	f00a ffd6 	bl	800c39c <siprintf>
		Update_File("TEMP.TXT", buffer);
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	480c      	ldr	r0, [pc, #48]	; (8001424 <SDCARD_Task+0x64>)
 80013f4:	f7ff fa0c 	bl	8000810 <Update_File>
		vPortFree(buffer);
 80013f8:	68b8      	ldr	r0, [r7, #8]
 80013fa:	f00a feb9 	bl	800c170 <vPortFree>
		Unmount_SD("/");
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <SDCARD_Task+0x54>)
 8001400:	f7ff f8e2 	bl	80005c8 <Unmount_SD>

		indx++;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	3301      	adds	r3, #1
 8001408:	60fb      	str	r3, [r7, #12]

		vTaskDelay(1000);
 800140a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800140e:	f009 fd03 	bl	800ae18 <vTaskDelay>
	{
 8001412:	e7db      	b.n	80013cc <SDCARD_Task+0xc>
 8001414:	0800d1e0 	.word	0x0800d1e0
 8001418:	2000099c 	.word	0x2000099c
 800141c:	200009a0 	.word	0x200009a0
 8001420:	0800d1e4 	.word	0x0800d1e4
 8001424:	0800d200 	.word	0x0800d200

08001428 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800142e:	f000 fd41 	bl	8001eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001432:	f000 f859 	bl	80014e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001436:	f000 fa23 	bl	8001880 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800143a:	f000 f9f1 	bl	8001820 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 800143e:	f000 f9b9 	bl	80017b4 <MX_TIM7_Init>
  MX_TIM1_Init();
 8001442:	f000 f963 	bl	800170c <MX_TIM1_Init>
  MX_ADC1_Init();
 8001446:	f000 f8b3 	bl	80015b0 <MX_ADC1_Init>
  MX_SPI1_Init();
 800144a:	f000 f921 	bl	8001690 <MX_SPI1_Init>
  MX_FATFS_Init();
 800144e:	f005 fab1 	bl	80069b4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  Mount_SD("/");
 8001452:	4819      	ldr	r0, [pc, #100]	; (80014b8 <main+0x90>)
 8001454:	f7ff f894 	bl	8000580 <Mount_SD>
  Format_SD();
 8001458:	f7ff f8d8 	bl	800060c <Format_SD>
  Create_File("ADC_DATA.TXT");
 800145c:	4817      	ldr	r0, [pc, #92]	; (80014bc <main+0x94>)
 800145e:	f7ff f941 	bl	80006e4 <Create_File>
  Create_File("TEMP.TXT");
 8001462:	4817      	ldr	r0, [pc, #92]	; (80014c0 <main+0x98>)
 8001464:	f7ff f93e 	bl	80006e4 <Create_File>
  Unmount_SD("/");
 8001468:	4813      	ldr	r0, [pc, #76]	; (80014b8 <main+0x90>)
 800146a:	f7ff f8ad 	bl	80005c8 <Unmount_SD>



  DHT_SEM = xSemaphoreCreateBinary();
 800146e:	2203      	movs	r2, #3
 8001470:	2100      	movs	r1, #0
 8001472:	2001      	movs	r0, #1
 8001474:	f008 fe43 	bl	800a0fe <xQueueGenericCreate>
 8001478:	4603      	mov	r3, r0
 800147a:	4a12      	ldr	r2, [pc, #72]	; (80014c4 <main+0x9c>)
 800147c:	6013      	str	r3, [r2, #0]

  xTaskCreate(DHT_Task, "DHT", 128, NULL, 1, &DHT_Task_Handler);
 800147e:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <main+0xa0>)
 8001480:	9301      	str	r3, [sp, #4]
 8001482:	2301      	movs	r3, #1
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	2300      	movs	r3, #0
 8001488:	2280      	movs	r2, #128	; 0x80
 800148a:	4910      	ldr	r1, [pc, #64]	; (80014cc <main+0xa4>)
 800148c:	4810      	ldr	r0, [pc, #64]	; (80014d0 <main+0xa8>)
 800148e:	f009 fb7d 	bl	800ab8c <xTaskCreate>
  //xTaskCreate(ADC_Task, "ADC", 128, NULL, 1, &ADC_Task_Handler);
  xTaskCreate(SDCARD_Task, "SD", 128, NULL, 3, &SDCARD_Task_Handler);
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <main+0xac>)
 8001494:	9301      	str	r3, [sp, #4]
 8001496:	2303      	movs	r3, #3
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	2300      	movs	r3, #0
 800149c:	2280      	movs	r2, #128	; 0x80
 800149e:	490e      	ldr	r1, [pc, #56]	; (80014d8 <main+0xb0>)
 80014a0:	480e      	ldr	r0, [pc, #56]	; (80014dc <main+0xb4>)
 80014a2:	f009 fb73 	bl	800ab8c <xTaskCreate>

  HAL_TIM_Base_Start(&htim7);		// us delay timer
 80014a6:	480e      	ldr	r0, [pc, #56]	; (80014e0 <main+0xb8>)
 80014a8:	f004 f8f8 	bl	800569c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim1);	// periodic delay timer
 80014ac:	480d      	ldr	r0, [pc, #52]	; (80014e4 <main+0xbc>)
 80014ae:	f004 f95d 	bl	800576c <HAL_TIM_Base_Start_IT>

  vTaskStartScheduler();
 80014b2:	f009 fce5 	bl	800ae80 <vTaskStartScheduler>
  //osKernelStart();
  ///////////////////////////////////////////////////////////////////////////////
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014b6:	e7fe      	b.n	80014b6 <main+0x8e>
 80014b8:	0800d1e0 	.word	0x0800d1e0
 80014bc:	0800d20c 	.word	0x0800d20c
 80014c0:	0800d200 	.word	0x0800d200
 80014c4:	200009ac 	.word	0x200009ac
 80014c8:	200009a4 	.word	0x200009a4
 80014cc:	0800d21c 	.word	0x0800d21c
 80014d0:	08001379 	.word	0x08001379
 80014d4:	200009a8 	.word	0x200009a8
 80014d8:	0800d220 	.word	0x0800d220
 80014dc:	080013c1 	.word	0x080013c1
 80014e0:	200008c8 	.word	0x200008c8
 80014e4:	2000087c 	.word	0x2000087c

080014e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b0a6      	sub	sp, #152	; 0x98
 80014ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80014f2:	2228      	movs	r2, #40	; 0x28
 80014f4:	2100      	movs	r1, #0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f00a ff70 	bl	800c3dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014fc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	2258      	movs	r2, #88	; 0x58
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f00a ff62 	bl	800c3dc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001518:	2302      	movs	r3, #2
 800151a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800151c:	2301      	movs	r3, #1
 800151e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001520:	2310      	movs	r3, #16
 8001522:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001526:	2302      	movs	r3, #2
 8001528:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800152c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001530:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001534:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001538:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800153c:	2300      	movs	r3, #0
 800153e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001542:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001546:	4618      	mov	r0, r3
 8001548:	f001 fdc2 	bl	80030d0 <HAL_RCC_OscConfig>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001552:	f000 fa3b 	bl	80019cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001556:	230f      	movs	r3, #15
 8001558:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155a:	2302      	movs	r3, #2
 800155c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800155e:	2300      	movs	r3, #0
 8001560:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001562:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001566:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001568:	2300      	movs	r3, #0
 800156a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800156c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001570:	2102      	movs	r1, #2
 8001572:	4618      	mov	r0, r3
 8001574:	f002 fe00 	bl	8004178 <HAL_RCC_ClockConfig>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800157e:	f000 fa25 	bl	80019cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 8001582:	f241 0382 	movw	r3, #4226	; 0x1082
 8001586:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001588:	2300      	movs	r3, #0
 800158a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800158c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001590:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001592:	2300      	movs	r3, #0
 8001594:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	4618      	mov	r0, r3
 800159a:	f003 f855 	bl	8004648 <HAL_RCCEx_PeriphCLKConfig>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80015a4:	f000 fa12 	bl	80019cc <Error_Handler>
  }
}
 80015a8:	bf00      	nop
 80015aa:	3798      	adds	r7, #152	; 0x98
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80015b6:	f107 031c 	add.w	r3, r7, #28
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
 80015d0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80015d2:	4b2e      	ldr	r3, [pc, #184]	; (800168c <MX_ADC1_Init+0xdc>)
 80015d4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80015d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80015da:	4b2c      	ldr	r3, [pc, #176]	; (800168c <MX_ADC1_Init+0xdc>)
 80015dc:	2200      	movs	r2, #0
 80015de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015e0:	4b2a      	ldr	r3, [pc, #168]	; (800168c <MX_ADC1_Init+0xdc>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015e6:	4b29      	ldr	r3, [pc, #164]	; (800168c <MX_ADC1_Init+0xdc>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015ec:	4b27      	ldr	r3, [pc, #156]	; (800168c <MX_ADC1_Init+0xdc>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015f2:	4b26      	ldr	r3, [pc, #152]	; (800168c <MX_ADC1_Init+0xdc>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015fa:	4b24      	ldr	r3, [pc, #144]	; (800168c <MX_ADC1_Init+0xdc>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001600:	4b22      	ldr	r3, [pc, #136]	; (800168c <MX_ADC1_Init+0xdc>)
 8001602:	2201      	movs	r2, #1
 8001604:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001606:	4b21      	ldr	r3, [pc, #132]	; (800168c <MX_ADC1_Init+0xdc>)
 8001608:	2200      	movs	r2, #0
 800160a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800160c:	4b1f      	ldr	r3, [pc, #124]	; (800168c <MX_ADC1_Init+0xdc>)
 800160e:	2201      	movs	r2, #1
 8001610:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001612:	4b1e      	ldr	r3, [pc, #120]	; (800168c <MX_ADC1_Init+0xdc>)
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800161a:	4b1c      	ldr	r3, [pc, #112]	; (800168c <MX_ADC1_Init+0xdc>)
 800161c:	2204      	movs	r2, #4
 800161e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001620:	4b1a      	ldr	r3, [pc, #104]	; (800168c <MX_ADC1_Init+0xdc>)
 8001622:	2200      	movs	r2, #0
 8001624:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001626:	4b19      	ldr	r3, [pc, #100]	; (800168c <MX_ADC1_Init+0xdc>)
 8001628:	2200      	movs	r2, #0
 800162a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800162c:	4817      	ldr	r0, [pc, #92]	; (800168c <MX_ADC1_Init+0xdc>)
 800162e:	f000 fc77 	bl	8001f20 <HAL_ADC_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001638:	f000 f9c8 	bl	80019cc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001640:	f107 031c 	add.w	r3, r7, #28
 8001644:	4619      	mov	r1, r3
 8001646:	4811      	ldr	r0, [pc, #68]	; (800168c <MX_ADC1_Init+0xdc>)
 8001648:	f001 f94e 	bl	80028e8 <HAL_ADCEx_MultiModeConfigChannel>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001652:	f000 f9bb 	bl	80019cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001656:	2302      	movs	r3, #2
 8001658:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800165a:	2301      	movs	r3, #1
 800165c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	4619      	mov	r1, r3
 8001672:	4806      	ldr	r0, [pc, #24]	; (800168c <MX_ADC1_Init+0xdc>)
 8001674:	f000 fe4e 	bl	8002314 <HAL_ADC_ConfigChannel>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800167e:	f000 f9a5 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	3728      	adds	r7, #40	; 0x28
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200007c8 	.word	0x200007c8

08001690 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001694:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <MX_SPI1_Init+0x74>)
 8001696:	4a1c      	ldr	r2, [pc, #112]	; (8001708 <MX_SPI1_Init+0x78>)
 8001698:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800169a:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <MX_SPI1_Init+0x74>)
 800169c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016a2:	4b18      	ldr	r3, [pc, #96]	; (8001704 <MX_SPI1_Init+0x74>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016a8:	4b16      	ldr	r3, [pc, #88]	; (8001704 <MX_SPI1_Init+0x74>)
 80016aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80016ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016b0:	4b14      	ldr	r3, [pc, #80]	; (8001704 <MX_SPI1_Init+0x74>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016b6:	4b13      	ldr	r3, [pc, #76]	; (8001704 <MX_SPI1_Init+0x74>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <MX_SPI1_Init+0x74>)
 80016be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80016c4:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <MX_SPI1_Init+0x74>)
 80016c6:	2218      	movs	r2, #24
 80016c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <MX_SPI1_Init+0x74>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <MX_SPI1_Init+0x74>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <MX_SPI1_Init+0x74>)
 80016d8:	2200      	movs	r2, #0
 80016da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80016dc:	4b09      	ldr	r3, [pc, #36]	; (8001704 <MX_SPI1_Init+0x74>)
 80016de:	2207      	movs	r2, #7
 80016e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016e2:	4b08      	ldr	r3, [pc, #32]	; (8001704 <MX_SPI1_Init+0x74>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <MX_SPI1_Init+0x74>)
 80016ea:	2208      	movs	r2, #8
 80016ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016ee:	4805      	ldr	r0, [pc, #20]	; (8001704 <MX_SPI1_Init+0x74>)
 80016f0:	f003 f9c8 	bl	8004a84 <HAL_SPI_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80016fa:	f000 f967 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000818 	.word	0x20000818
 8001708:	40013000 	.word	0x40013000

0800170c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001712:	f107 0310 	add.w	r3, r7, #16
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001720:	1d3b      	adds	r3, r7, #4
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800172a:	4b20      	ldr	r3, [pc, #128]	; (80017ac <MX_TIM1_Init+0xa0>)
 800172c:	4a20      	ldr	r2, [pc, #128]	; (80017b0 <MX_TIM1_Init+0xa4>)
 800172e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001730:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <MX_TIM1_Init+0xa0>)
 8001732:	2247      	movs	r2, #71	; 0x47
 8001734:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001736:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <MX_TIM1_Init+0xa0>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 800173c:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <MX_TIM1_Init+0xa0>)
 800173e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001742:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001744:	4b19      	ldr	r3, [pc, #100]	; (80017ac <MX_TIM1_Init+0xa0>)
 8001746:	2200      	movs	r2, #0
 8001748:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800174a:	4b18      	ldr	r3, [pc, #96]	; (80017ac <MX_TIM1_Init+0xa0>)
 800174c:	2200      	movs	r2, #0
 800174e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001750:	4b16      	ldr	r3, [pc, #88]	; (80017ac <MX_TIM1_Init+0xa0>)
 8001752:	2200      	movs	r2, #0
 8001754:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001756:	4815      	ldr	r0, [pc, #84]	; (80017ac <MX_TIM1_Init+0xa0>)
 8001758:	f003 ff48 	bl	80055ec <HAL_TIM_Base_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001762:	f000 f933 	bl	80019cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800176a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800176c:	f107 0310 	add.w	r3, r7, #16
 8001770:	4619      	mov	r1, r3
 8001772:	480e      	ldr	r0, [pc, #56]	; (80017ac <MX_TIM1_Init+0xa0>)
 8001774:	f004 f989 	bl	8005a8a <HAL_TIM_ConfigClockSource>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800177e:	f000 f925 	bl	80019cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001782:	2320      	movs	r3, #32
 8001784:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001786:	2300      	movs	r3, #0
 8001788:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	4619      	mov	r1, r3
 8001792:	4806      	ldr	r0, [pc, #24]	; (80017ac <MX_TIM1_Init+0xa0>)
 8001794:	f004 fba2 	bl	8005edc <HAL_TIMEx_MasterConfigSynchronization>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800179e:	f000 f915 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80017a2:	bf00      	nop
 80017a4:	3720      	adds	r7, #32
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	2000087c 	.word	0x2000087c
 80017b0:	40012c00 	.word	0x40012c00

080017b4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80017c4:	4b14      	ldr	r3, [pc, #80]	; (8001818 <MX_TIM7_Init+0x64>)
 80017c6:	4a15      	ldr	r2, [pc, #84]	; (800181c <MX_TIM7_Init+0x68>)
 80017c8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 72-1;
 80017ca:	4b13      	ldr	r3, [pc, #76]	; (8001818 <MX_TIM7_Init+0x64>)
 80017cc:	2247      	movs	r2, #71	; 0x47
 80017ce:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <MX_TIM7_Init+0x64>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80017d6:	4b10      	ldr	r3, [pc, #64]	; (8001818 <MX_TIM7_Init+0x64>)
 80017d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017dc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017de:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <MX_TIM7_Init+0x64>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80017e4:	480c      	ldr	r0, [pc, #48]	; (8001818 <MX_TIM7_Init+0x64>)
 80017e6:	f003 ff01 	bl	80055ec <HAL_TIM_Base_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80017f0:	f000 f8ec 	bl	80019cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f4:	2300      	movs	r3, #0
 80017f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80017fc:	1d3b      	adds	r3, r7, #4
 80017fe:	4619      	mov	r1, r3
 8001800:	4805      	ldr	r0, [pc, #20]	; (8001818 <MX_TIM7_Init+0x64>)
 8001802:	f004 fb6b 	bl	8005edc <HAL_TIMEx_MasterConfigSynchronization>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800180c:	f000 f8de 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001810:	bf00      	nop
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	200008c8 	.word	0x200008c8
 800181c:	40001400 	.word	0x40001400

08001820 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001824:	4b14      	ldr	r3, [pc, #80]	; (8001878 <MX_USART2_UART_Init+0x58>)
 8001826:	4a15      	ldr	r2, [pc, #84]	; (800187c <MX_USART2_UART_Init+0x5c>)
 8001828:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800182a:	4b13      	ldr	r3, [pc, #76]	; (8001878 <MX_USART2_UART_Init+0x58>)
 800182c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001830:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001832:	4b11      	ldr	r3, [pc, #68]	; (8001878 <MX_USART2_UART_Init+0x58>)
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001838:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <MX_USART2_UART_Init+0x58>)
 800183a:	2200      	movs	r2, #0
 800183c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800183e:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <MX_USART2_UART_Init+0x58>)
 8001840:	2200      	movs	r2, #0
 8001842:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <MX_USART2_UART_Init+0x58>)
 8001846:	220c      	movs	r2, #12
 8001848:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800184a:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <MX_USART2_UART_Init+0x58>)
 800184c:	2200      	movs	r2, #0
 800184e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001850:	4b09      	ldr	r3, [pc, #36]	; (8001878 <MX_USART2_UART_Init+0x58>)
 8001852:	2200      	movs	r2, #0
 8001854:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001856:	4b08      	ldr	r3, [pc, #32]	; (8001878 <MX_USART2_UART_Init+0x58>)
 8001858:	2200      	movs	r2, #0
 800185a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <MX_USART2_UART_Init+0x58>)
 800185e:	2200      	movs	r2, #0
 8001860:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001862:	4805      	ldr	r0, [pc, #20]	; (8001878 <MX_USART2_UART_Init+0x58>)
 8001864:	f004 fbe4 	bl	8006030 <HAL_UART_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800186e:	f000 f8ad 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000914 	.word	0x20000914
 800187c:	40004400 	.word	0x40004400

08001880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08a      	sub	sp, #40	; 0x28
 8001884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	609a      	str	r2, [r3, #8]
 8001892:	60da      	str	r2, [r3, #12]
 8001894:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001896:	4b31      	ldr	r3, [pc, #196]	; (800195c <MX_GPIO_Init+0xdc>)
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	4a30      	ldr	r2, [pc, #192]	; (800195c <MX_GPIO_Init+0xdc>)
 800189c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018a0:	6153      	str	r3, [r2, #20]
 80018a2:	4b2e      	ldr	r3, [pc, #184]	; (800195c <MX_GPIO_Init+0xdc>)
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018ae:	4b2b      	ldr	r3, [pc, #172]	; (800195c <MX_GPIO_Init+0xdc>)
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	4a2a      	ldr	r2, [pc, #168]	; (800195c <MX_GPIO_Init+0xdc>)
 80018b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018b8:	6153      	str	r3, [r2, #20]
 80018ba:	4b28      	ldr	r3, [pc, #160]	; (800195c <MX_GPIO_Init+0xdc>)
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c6:	4b25      	ldr	r3, [pc, #148]	; (800195c <MX_GPIO_Init+0xdc>)
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	4a24      	ldr	r2, [pc, #144]	; (800195c <MX_GPIO_Init+0xdc>)
 80018cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d0:	6153      	str	r3, [r2, #20]
 80018d2:	4b22      	ldr	r3, [pc, #136]	; (800195c <MX_GPIO_Init+0xdc>)
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018de:	4b1f      	ldr	r3, [pc, #124]	; (800195c <MX_GPIO_Init+0xdc>)
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	4a1e      	ldr	r2, [pc, #120]	; (800195c <MX_GPIO_Init+0xdc>)
 80018e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018e8:	6153      	str	r3, [r2, #20]
 80018ea:	4b1c      	ldr	r3, [pc, #112]	; (800195c <MX_GPIO_Init+0xdc>)
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2140      	movs	r1, #64	; 0x40
 80018fa:	4819      	ldr	r0, [pc, #100]	; (8001960 <MX_GPIO_Init+0xe0>)
 80018fc:	f001 fbd0 	bl	80030a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001900:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001906:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800190a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	4619      	mov	r1, r3
 8001916:	4813      	ldr	r0, [pc, #76]	; (8001964 <MX_GPIO_Init+0xe4>)
 8001918:	f001 fa20 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800191c:	2301      	movs	r3, #1
 800191e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001920:	2300      	movs	r3, #0
 8001922:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	4619      	mov	r1, r3
 800192e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001932:	f001 fa13 	bl	8002d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001936:	2340      	movs	r3, #64	; 0x40
 8001938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193a:	2301      	movs	r3, #1
 800193c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001942:	2300      	movs	r3, #0
 8001944:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	4619      	mov	r1, r3
 800194c:	4804      	ldr	r0, [pc, #16]	; (8001960 <MX_GPIO_Init+0xe0>)
 800194e:	f001 fa05 	bl	8002d5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001952:	bf00      	nop
 8001954:	3728      	adds	r7, #40	; 0x28
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40021000 	.word	0x40021000
 8001960:	48000400 	.word	0x48000400
 8001964:	48000800 	.word	0x48000800

08001968 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a11      	ldr	r2, [pc, #68]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d114      	bne.n	80019a4 <HAL_TIM_PeriodElapsedCallback+0x3c>
		{
			// release the semaphore here
			 /* The xHigherPriorityTaskWoken parameter must be initialized to pdFALSE as
			 it will get set to pdTRUE inside the interrupt safe API function if a
			 context switch is required. */
			BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]

			xSemaphoreGiveFromISR(DHT_SEM, &xHigherPriorityTaskWoken);  // ISR SAFE VERSION
 800197e:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f107 020c 	add.w	r2, r7, #12
 8001986:	4611      	mov	r1, r2
 8001988:	4618      	mov	r0, r3
 800198a:	f008 fd13 	bl	800a3b4 <xQueueGiveFromISR>
			 xHigherPriorityTaskWoken was set to pdTRUE inside xSemaphoreGiveFromISR()
			 then calling portEND_SWITCHING_ISR() will request a context switch. If
			 xHigherPriorityTaskWoken is still pdFALSE then calling
			 portEND_SWITCHING_ISR() will have no effect */

			portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d007      	beq.n	80019a4 <HAL_TIM_PeriodElapsedCallback+0x3c>
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	f3bf 8f4f 	dsb	sy
 80019a0:	f3bf 8f6f 	isb	sy
		}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a07      	ldr	r2, [pc, #28]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d101      	bne.n	80019b2 <HAL_TIM_PeriodElapsedCallback+0x4a>
    HAL_IncTick();
 80019ae:	f000 fa97 	bl	8001ee0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40012c00 	.word	0x40012c00
 80019c0:	200009ac 	.word	0x200009ac
 80019c4:	e000ed04 	.word	0xe000ed04
 80019c8:	40001000 	.word	0x40001000

080019cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d0:	b672      	cpsid	i
}
 80019d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d4:	e7fe      	b.n	80019d4 <Error_Handler+0x8>
	...

080019d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019de:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <HAL_MspInit+0x4c>)
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	4a10      	ldr	r2, [pc, #64]	; (8001a24 <HAL_MspInit+0x4c>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	6193      	str	r3, [r2, #24]
 80019ea:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <HAL_MspInit+0x4c>)
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_MspInit+0x4c>)
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	4a0a      	ldr	r2, [pc, #40]	; (8001a24 <HAL_MspInit+0x4c>)
 80019fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a00:	61d3      	str	r3, [r2, #28]
 8001a02:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <HAL_MspInit+0x4c>)
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	210f      	movs	r1, #15
 8001a12:	f06f 0001 	mvn.w	r0, #1
 8001a16:	f001 f977 	bl	8002d08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40021000 	.word	0x40021000

08001a28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	; 0x28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a48:	d124      	bne.n	8001a94 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001a4a:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <HAL_ADC_MspInit+0x74>)
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	4a13      	ldr	r2, [pc, #76]	; (8001a9c <HAL_ADC_MspInit+0x74>)
 8001a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a54:	6153      	str	r3, [r2, #20]
 8001a56:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <HAL_ADC_MspInit+0x74>)
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a62:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <HAL_ADC_MspInit+0x74>)
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	4a0d      	ldr	r2, [pc, #52]	; (8001a9c <HAL_ADC_MspInit+0x74>)
 8001a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a6c:	6153      	str	r3, [r2, #20]
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <HAL_ADC_MspInit+0x74>)
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a86:	f107 0314 	add.w	r3, r7, #20
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a90:	f001 f964 	bl	8002d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a94:	bf00      	nop
 8001a96:	3728      	adds	r7, #40	; 0x28
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40021000 	.word	0x40021000

08001aa0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08a      	sub	sp, #40	; 0x28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	f107 0314 	add.w	r3, r7, #20
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a17      	ldr	r2, [pc, #92]	; (8001b1c <HAL_SPI_MspInit+0x7c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d128      	bne.n	8001b14 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ac2:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <HAL_SPI_MspInit+0x80>)
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	4a16      	ldr	r2, [pc, #88]	; (8001b20 <HAL_SPI_MspInit+0x80>)
 8001ac8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001acc:	6193      	str	r3, [r2, #24]
 8001ace:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <HAL_SPI_MspInit+0x80>)
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ada:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <HAL_SPI_MspInit+0x80>)
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	4a10      	ldr	r2, [pc, #64]	; (8001b20 <HAL_SPI_MspInit+0x80>)
 8001ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae4:	6153      	str	r3, [r2, #20]
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <HAL_SPI_MspInit+0x80>)
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001af2:	23e0      	movs	r3, #224	; 0xe0
 8001af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001afe:	2303      	movs	r3, #3
 8001b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b02:	2305      	movs	r3, #5
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b06:	f107 0314 	add.w	r3, r7, #20
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b10:	f001 f924 	bl	8002d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b14:	bf00      	nop
 8001b16:	3728      	adds	r7, #40	; 0x28
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40013000 	.word	0x40013000
 8001b20:	40021000 	.word	0x40021000

08001b24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a16      	ldr	r2, [pc, #88]	; (8001b8c <HAL_TIM_Base_MspInit+0x68>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d114      	bne.n	8001b60 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b36:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <HAL_TIM_Base_MspInit+0x6c>)
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	4a15      	ldr	r2, [pc, #84]	; (8001b90 <HAL_TIM_Base_MspInit+0x6c>)
 8001b3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b40:	6193      	str	r3, [r2, #24]
 8001b42:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <HAL_TIM_Base_MspInit+0x6c>)
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2105      	movs	r1, #5
 8001b52:	2019      	movs	r0, #25
 8001b54:	f001 f8d8 	bl	8002d08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001b58:	2019      	movs	r0, #25
 8001b5a:	f001 f8f1 	bl	8002d40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001b5e:	e010      	b.n	8001b82 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a0b      	ldr	r2, [pc, #44]	; (8001b94 <HAL_TIM_Base_MspInit+0x70>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d10b      	bne.n	8001b82 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001b6a:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <HAL_TIM_Base_MspInit+0x6c>)
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	4a08      	ldr	r2, [pc, #32]	; (8001b90 <HAL_TIM_Base_MspInit+0x6c>)
 8001b70:	f043 0320 	orr.w	r3, r3, #32
 8001b74:	61d3      	str	r3, [r2, #28]
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_TIM_Base_MspInit+0x6c>)
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	f003 0320 	and.w	r3, r3, #32
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	68bb      	ldr	r3, [r7, #8]
}
 8001b82:	bf00      	nop
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40012c00 	.word	0x40012c00
 8001b90:	40021000 	.word	0x40021000
 8001b94:	40001400 	.word	0x40001400

08001b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08a      	sub	sp, #40	; 0x28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a17      	ldr	r2, [pc, #92]	; (8001c14 <HAL_UART_MspInit+0x7c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d128      	bne.n	8001c0c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bba:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <HAL_UART_MspInit+0x80>)
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	4a16      	ldr	r2, [pc, #88]	; (8001c18 <HAL_UART_MspInit+0x80>)
 8001bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc4:	61d3      	str	r3, [r2, #28]
 8001bc6:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <HAL_UART_MspInit+0x80>)
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd2:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <HAL_UART_MspInit+0x80>)
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	4a10      	ldr	r2, [pc, #64]	; (8001c18 <HAL_UART_MspInit+0x80>)
 8001bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bdc:	6153      	str	r3, [r2, #20]
 8001bde:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <HAL_UART_MspInit+0x80>)
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bea:	230c      	movs	r3, #12
 8001bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bfa:	2307      	movs	r3, #7
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	4619      	mov	r1, r3
 8001c04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c08:	f001 f8a8 	bl	8002d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c0c:	bf00      	nop
 8001c0e:	3728      	adds	r7, #40	; 0x28
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40004400 	.word	0x40004400
 8001c18:	40021000 	.word	0x40021000

08001c1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08e      	sub	sp, #56	; 0x38
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001c24:	2300      	movs	r3, #0
 8001c26:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001c2c:	4b33      	ldr	r3, [pc, #204]	; (8001cfc <HAL_InitTick+0xe0>)
 8001c2e:	69db      	ldr	r3, [r3, #28]
 8001c30:	4a32      	ldr	r2, [pc, #200]	; (8001cfc <HAL_InitTick+0xe0>)
 8001c32:	f043 0310 	orr.w	r3, r3, #16
 8001c36:	61d3      	str	r3, [r2, #28]
 8001c38:	4b30      	ldr	r3, [pc, #192]	; (8001cfc <HAL_InitTick+0xe0>)
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	f003 0310 	and.w	r3, r3, #16
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c44:	f107 0210 	add.w	r2, r7, #16
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	4611      	mov	r1, r2
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f002 fcc8 	bl	80045e4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001c54:	6a3b      	ldr	r3, [r7, #32]
 8001c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d103      	bne.n	8001c66 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c5e:	f002 fc7d 	bl	800455c <HAL_RCC_GetPCLK1Freq>
 8001c62:	6378      	str	r0, [r7, #52]	; 0x34
 8001c64:	e004      	b.n	8001c70 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c66:	f002 fc79 	bl	800455c <HAL_RCC_GetPCLK1Freq>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c72:	4a23      	ldr	r2, [pc, #140]	; (8001d00 <HAL_InitTick+0xe4>)
 8001c74:	fba2 2303 	umull	r2, r3, r2, r3
 8001c78:	0c9b      	lsrs	r3, r3, #18
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001c7e:	4b21      	ldr	r3, [pc, #132]	; (8001d04 <HAL_InitTick+0xe8>)
 8001c80:	4a21      	ldr	r2, [pc, #132]	; (8001d08 <HAL_InitTick+0xec>)
 8001c82:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001c84:	4b1f      	ldr	r3, [pc, #124]	; (8001d04 <HAL_InitTick+0xe8>)
 8001c86:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c8a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001c8c:	4a1d      	ldr	r2, [pc, #116]	; (8001d04 <HAL_InitTick+0xe8>)
 8001c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c90:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001c92:	4b1c      	ldr	r3, [pc, #112]	; (8001d04 <HAL_InitTick+0xe8>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c98:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <HAL_InitTick+0xe8>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c9e:	4b19      	ldr	r3, [pc, #100]	; (8001d04 <HAL_InitTick+0xe8>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001ca4:	4817      	ldr	r0, [pc, #92]	; (8001d04 <HAL_InitTick+0xe8>)
 8001ca6:	f003 fca1 	bl	80055ec <HAL_TIM_Base_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001cb0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d11b      	bne.n	8001cf0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001cb8:	4812      	ldr	r0, [pc, #72]	; (8001d04 <HAL_InitTick+0xe8>)
 8001cba:	f003 fd57 	bl	800576c <HAL_TIM_Base_Start_IT>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001cc4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d111      	bne.n	8001cf0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ccc:	2036      	movs	r0, #54	; 0x36
 8001cce:	f001 f837 	bl	8002d40 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b0f      	cmp	r3, #15
 8001cd6:	d808      	bhi.n	8001cea <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	2036      	movs	r0, #54	; 0x36
 8001cde:	f001 f813 	bl	8002d08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ce2:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <HAL_InitTick+0xf0>)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	e002      	b.n	8001cf0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001cf0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3738      	adds	r7, #56	; 0x38
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	431bde83 	.word	0x431bde83
 8001d04:	200009b0 	.word	0x200009b0
 8001d08:	40001000 	.word	0x40001000
 8001d0c:	20000008 	.word	0x20000008

08001d10 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001d14:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <SDTimer_Handler+0x40>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d006      	beq.n	8001d2c <SDTimer_Handler+0x1c>
    Timer1--;
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <SDTimer_Handler+0x40>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	3b01      	subs	r3, #1
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <SDTimer_Handler+0x40>)
 8001d2a:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001d2c:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <SDTimer_Handler+0x44>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d006      	beq.n	8001d44 <SDTimer_Handler+0x34>
    Timer2--;
 8001d36:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <SDTimer_Handler+0x44>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <SDTimer_Handler+0x44>)
 8001d42:	701a      	strb	r2, [r3, #0]
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	200009fd 	.word	0x200009fd
 8001d54:	200009fe 	.word	0x200009fe

08001d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d5c:	e7fe      	b.n	8001d5c <NMI_Handler+0x4>

08001d5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d62:	e7fe      	b.n	8001d62 <HardFault_Handler+0x4>

08001d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d68:	e7fe      	b.n	8001d68 <MemManage_Handler+0x4>

08001d6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d6e:	e7fe      	b.n	8001d6e <BusFault_Handler+0x4>

08001d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d74:	e7fe      	b.n	8001d74 <UsageFault_Handler+0x4>

08001d76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d88:	4802      	ldr	r0, [pc, #8]	; (8001d94 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001d8a:	f003 fd5f 	bl	800584c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	2000087c 	.word	0x2000087c

08001d98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	FatFsCnt++;
 8001d9c:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <TIM6_DAC_IRQHandler+0x30>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	3301      	adds	r3, #1
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <TIM6_DAC_IRQHandler+0x30>)
 8001da8:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8001daa:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <TIM6_DAC_IRQHandler+0x30>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b09      	cmp	r3, #9
 8001db2:	d904      	bls.n	8001dbe <TIM6_DAC_IRQHandler+0x26>
	{
	  FatFsCnt = 0;
 8001db4:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <TIM6_DAC_IRQHandler+0x30>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	701a      	strb	r2, [r3, #0]
	  SDTimer_Handler();
 8001dba:	f7ff ffa9 	bl	8001d10 <SDTimer_Handler>
	}
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001dbe:	4803      	ldr	r0, [pc, #12]	; (8001dcc <TIM6_DAC_IRQHandler+0x34>)
 8001dc0:	f003 fd44 	bl	800584c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001dc4:	bf00      	nop
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	200009fc 	.word	0x200009fc
 8001dcc:	200009b0 	.word	0x200009b0

08001dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dd8:	4a14      	ldr	r2, [pc, #80]	; (8001e2c <_sbrk+0x5c>)
 8001dda:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <_sbrk+0x60>)
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001de4:	4b13      	ldr	r3, [pc, #76]	; (8001e34 <_sbrk+0x64>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d102      	bne.n	8001df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dec:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <_sbrk+0x64>)
 8001dee:	4a12      	ldr	r2, [pc, #72]	; (8001e38 <_sbrk+0x68>)
 8001df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <_sbrk+0x64>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d207      	bcs.n	8001e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e00:	f00a fb4a 	bl	800c498 <__errno>
 8001e04:	4603      	mov	r3, r0
 8001e06:	220c      	movs	r2, #12
 8001e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0e:	e009      	b.n	8001e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <_sbrk+0x64>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e16:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <_sbrk+0x64>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	4a05      	ldr	r2, [pc, #20]	; (8001e34 <_sbrk+0x64>)
 8001e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e22:	68fb      	ldr	r3, [r7, #12]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	20010000 	.word	0x20010000
 8001e30:	00000400 	.word	0x00000400
 8001e34:	20000a00 	.word	0x20000a00
 8001e38:	20001910 	.word	0x20001910

08001e3c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e40:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <SystemInit+0x20>)
 8001e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e46:	4a05      	ldr	r2, [pc, #20]	; (8001e5c <SystemInit+0x20>)
 8001e48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e98 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e64:	f7ff ffea 	bl	8001e3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e68:	480c      	ldr	r0, [pc, #48]	; (8001e9c <LoopForever+0x6>)
  ldr r1, =_edata
 8001e6a:	490d      	ldr	r1, [pc, #52]	; (8001ea0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ea4 <LoopForever+0xe>)
  movs r3, #0
 8001e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e70:	e002      	b.n	8001e78 <LoopCopyDataInit>

08001e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e76:	3304      	adds	r3, #4

08001e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e7c:	d3f9      	bcc.n	8001e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e80:	4c0a      	ldr	r4, [pc, #40]	; (8001eac <LoopForever+0x16>)
  movs r3, #0
 8001e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e84:	e001      	b.n	8001e8a <LoopFillZerobss>

08001e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e88:	3204      	adds	r2, #4

08001e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e8c:	d3fb      	bcc.n	8001e86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e8e:	f00a fb09 	bl	800c4a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e92:	f7ff fac9 	bl	8001428 <main>

08001e96 <LoopForever>:

LoopForever:
    b LoopForever
 8001e96:	e7fe      	b.n	8001e96 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e98:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001ea4:	0800d364 	.word	0x0800d364
  ldr r2, =_sbss
 8001ea8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001eac:	20001910 	.word	0x20001910

08001eb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001eb0:	e7fe      	b.n	8001eb0 <ADC1_2_IRQHandler>
	...

08001eb4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eb8:	4b08      	ldr	r3, [pc, #32]	; (8001edc <HAL_Init+0x28>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a07      	ldr	r2, [pc, #28]	; (8001edc <HAL_Init+0x28>)
 8001ebe:	f043 0310 	orr.w	r3, r3, #16
 8001ec2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ec4:	2003      	movs	r0, #3
 8001ec6:	f000 ff14 	bl	8002cf2 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eca:	200f      	movs	r0, #15
 8001ecc:	f7ff fea6 	bl	8001c1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ed0:	f7ff fd82 	bl	80019d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40022000 	.word	0x40022000

08001ee0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_IncTick+0x20>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_IncTick+0x24>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4413      	add	r3, r2
 8001ef0:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <HAL_IncTick+0x24>)
 8001ef2:	6013      	str	r3, [r2, #0]
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	2000000c 	.word	0x2000000c
 8001f04:	20000a04 	.word	0x20000a04

08001f08 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return uwTick;  
 8001f0c:	4b03      	ldr	r3, [pc, #12]	; (8001f1c <HAL_GetTick+0x14>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20000a04 	.word	0x20000a04

08001f20 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b09a      	sub	sp, #104	; 0x68
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e1e3      	b.n	8002308 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	f003 0310 	and.w	r3, r3, #16
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d176      	bne.n	8002040 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d152      	bne.n	8002000 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff fd57 	bl	8001a28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d13b      	bne.n	8002000 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 fd9f 	bl	8002acc <ADC_Disable>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	f003 0310 	and.w	r3, r3, #16
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d12f      	bne.n	8002000 <HAL_ADC_Init+0xe0>
 8001fa0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d12b      	bne.n	8002000 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fb0:	f023 0302 	bic.w	r3, r3, #2
 8001fb4:	f043 0202 	orr.w	r2, r3, #2
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689a      	ldr	r2, [r3, #8]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fca:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001fda:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fdc:	4b92      	ldr	r3, [pc, #584]	; (8002228 <HAL_ADC_Init+0x308>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a92      	ldr	r2, [pc, #584]	; (800222c <HAL_ADC_Init+0x30c>)
 8001fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe6:	0c9a      	lsrs	r2, r3, #18
 8001fe8:	4613      	mov	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ff2:	e002      	b.n	8001ffa <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1f9      	bne.n	8001ff4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d007      	beq.n	800201e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002018:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800201c:	d110      	bne.n	8002040 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	f023 0312 	bic.w	r3, r3, #18
 8002026:	f043 0210 	orr.w	r2, r3, #16
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	f043 0201 	orr.w	r2, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002044:	f003 0310 	and.w	r3, r3, #16
 8002048:	2b00      	cmp	r3, #0
 800204a:	f040 8150 	bne.w	80022ee <HAL_ADC_Init+0x3ce>
 800204e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002052:	2b00      	cmp	r3, #0
 8002054:	f040 814b 	bne.w	80022ee <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002062:	2b00      	cmp	r3, #0
 8002064:	f040 8143 	bne.w	80022ee <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002070:	f043 0202 	orr.w	r2, r3, #2
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002080:	d004      	beq.n	800208c <HAL_ADC_Init+0x16c>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a6a      	ldr	r2, [pc, #424]	; (8002230 <HAL_ADC_Init+0x310>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d101      	bne.n	8002090 <HAL_ADC_Init+0x170>
 800208c:	4b69      	ldr	r3, [pc, #420]	; (8002234 <HAL_ADC_Init+0x314>)
 800208e:	e000      	b.n	8002092 <HAL_ADC_Init+0x172>
 8002090:	4b69      	ldr	r3, [pc, #420]	; (8002238 <HAL_ADC_Init+0x318>)
 8002092:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800209c:	d102      	bne.n	80020a4 <HAL_ADC_Init+0x184>
 800209e:	4b64      	ldr	r3, [pc, #400]	; (8002230 <HAL_ADC_Init+0x310>)
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	e01a      	b.n	80020da <HAL_ADC_Init+0x1ba>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a61      	ldr	r2, [pc, #388]	; (8002230 <HAL_ADC_Init+0x310>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d103      	bne.n	80020b6 <HAL_ADC_Init+0x196>
 80020ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	e011      	b.n	80020da <HAL_ADC_Init+0x1ba>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a60      	ldr	r2, [pc, #384]	; (800223c <HAL_ADC_Init+0x31c>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d102      	bne.n	80020c6 <HAL_ADC_Init+0x1a6>
 80020c0:	4b5f      	ldr	r3, [pc, #380]	; (8002240 <HAL_ADC_Init+0x320>)
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	e009      	b.n	80020da <HAL_ADC_Init+0x1ba>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a5d      	ldr	r2, [pc, #372]	; (8002240 <HAL_ADC_Init+0x320>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d102      	bne.n	80020d6 <HAL_ADC_Init+0x1b6>
 80020d0:	4b5a      	ldr	r3, [pc, #360]	; (800223c <HAL_ADC_Init+0x31c>)
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	e001      	b.n	80020da <HAL_ADC_Init+0x1ba>
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d108      	bne.n	80020fa <HAL_ADC_Init+0x1da>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d101      	bne.n	80020fa <HAL_ADC_Init+0x1da>
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <HAL_ADC_Init+0x1dc>
 80020fa:	2300      	movs	r3, #0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d11c      	bne.n	800213a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002100:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002102:	2b00      	cmp	r3, #0
 8002104:	d010      	beq.n	8002128 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	2b01      	cmp	r3, #1
 8002110:	d107      	bne.n	8002122 <HAL_ADC_Init+0x202>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b01      	cmp	r3, #1
 800211c:	d101      	bne.n	8002122 <HAL_ADC_Init+0x202>
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <HAL_ADC_Init+0x204>
 8002122:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002124:	2b00      	cmp	r3, #0
 8002126:	d108      	bne.n	800213a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002128:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	431a      	orrs	r2, r3
 8002136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002138:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	7e5b      	ldrb	r3, [r3, #25]
 800213e:	035b      	lsls	r3, r3, #13
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002144:	2a01      	cmp	r2, #1
 8002146:	d002      	beq.n	800214e <HAL_ADC_Init+0x22e>
 8002148:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800214c:	e000      	b.n	8002150 <HAL_ADC_Init+0x230>
 800214e:	2200      	movs	r2, #0
 8002150:	431a      	orrs	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	4313      	orrs	r3, r2
 800215e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002160:	4313      	orrs	r3, r2
 8002162:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f893 3020 	ldrb.w	r3, [r3, #32]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d11b      	bne.n	80021a6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	7e5b      	ldrb	r3, [r3, #25]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d109      	bne.n	800218a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	3b01      	subs	r3, #1
 800217c:	045a      	lsls	r2, r3, #17
 800217e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002180:	4313      	orrs	r3, r2
 8002182:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002186:	663b      	str	r3, [r7, #96]	; 0x60
 8002188:	e00d      	b.n	80021a6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002192:	f043 0220 	orr.w	r2, r3, #32
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	f043 0201 	orr.w	r2, r3, #1
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d054      	beq.n	8002258 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a22      	ldr	r2, [pc, #136]	; (800223c <HAL_ADC_Init+0x31c>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d004      	beq.n	80021c2 <HAL_ADC_Init+0x2a2>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a20      	ldr	r2, [pc, #128]	; (8002240 <HAL_ADC_Init+0x320>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d140      	bne.n	8002244 <HAL_ADC_Init+0x324>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c6:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80021ca:	d02a      	beq.n	8002222 <HAL_ADC_Init+0x302>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021d4:	d022      	beq.n	800221c <HAL_ADC_Init+0x2fc>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021da:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80021de:	d01a      	beq.n	8002216 <HAL_ADC_Init+0x2f6>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e4:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80021e8:	d012      	beq.n	8002210 <HAL_ADC_Init+0x2f0>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ee:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80021f2:	d00a      	beq.n	800220a <HAL_ADC_Init+0x2ea>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f8:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80021fc:	d002      	beq.n	8002204 <HAL_ADC_Init+0x2e4>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002202:	e023      	b.n	800224c <HAL_ADC_Init+0x32c>
 8002204:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002208:	e020      	b.n	800224c <HAL_ADC_Init+0x32c>
 800220a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800220e:	e01d      	b.n	800224c <HAL_ADC_Init+0x32c>
 8002210:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002214:	e01a      	b.n	800224c <HAL_ADC_Init+0x32c>
 8002216:	f44f 7380 	mov.w	r3, #256	; 0x100
 800221a:	e017      	b.n	800224c <HAL_ADC_Init+0x32c>
 800221c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002220:	e014      	b.n	800224c <HAL_ADC_Init+0x32c>
 8002222:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002226:	e011      	b.n	800224c <HAL_ADC_Init+0x32c>
 8002228:	20000004 	.word	0x20000004
 800222c:	431bde83 	.word	0x431bde83
 8002230:	50000100 	.word	0x50000100
 8002234:	50000300 	.word	0x50000300
 8002238:	50000700 	.word	0x50000700
 800223c:	50000400 	.word	0x50000400
 8002240:	50000500 	.word	0x50000500
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002248:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002250:	4313      	orrs	r3, r2
 8002252:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002254:	4313      	orrs	r3, r2
 8002256:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 030c 	and.w	r3, r3, #12
 8002262:	2b00      	cmp	r3, #0
 8002264:	d114      	bne.n	8002290 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6812      	ldr	r2, [r2, #0]
 8002270:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002274:	f023 0302 	bic.w	r3, r3, #2
 8002278:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	7e1b      	ldrb	r3, [r3, #24]
 800227e:	039a      	lsls	r2, r3, #14
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	4313      	orrs	r3, r2
 800228a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800228c:	4313      	orrs	r3, r2
 800228e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68da      	ldr	r2, [r3, #12]
 8002296:	4b1e      	ldr	r3, [pc, #120]	; (8002310 <HAL_ADC_Init+0x3f0>)
 8002298:	4013      	ands	r3, r2
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6812      	ldr	r2, [r2, #0]
 800229e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80022a0:	430b      	orrs	r3, r1
 80022a2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d10c      	bne.n	80022c6 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	f023 010f 	bic.w	r1, r3, #15
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	1e5a      	subs	r2, r3, #1
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	631a      	str	r2, [r3, #48]	; 0x30
 80022c4:	e007      	b.n	80022d6 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 020f 	bic.w	r2, r2, #15
 80022d4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	f023 0303 	bic.w	r3, r3, #3
 80022e4:	f043 0201 	orr.w	r2, r3, #1
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	641a      	str	r2, [r3, #64]	; 0x40
 80022ec:	e00a      	b.n	8002304 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	f023 0312 	bic.w	r3, r3, #18
 80022f6:	f043 0210 	orr.w	r2, r3, #16
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80022fe:	2301      	movs	r3, #1
 8002300:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002304:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002308:	4618      	mov	r0, r3
 800230a:	3768      	adds	r7, #104	; 0x68
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	fff0c007 	.word	0xfff0c007

08002314 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002314:	b480      	push	{r7}
 8002316:	b09b      	sub	sp, #108	; 0x6c
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_ADC_ConfigChannel+0x22>
 8002332:	2302      	movs	r3, #2
 8002334:	e2c8      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x5b4>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b00      	cmp	r3, #0
 800234a:	f040 82ac 	bne.w	80028a6 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b04      	cmp	r3, #4
 8002354:	d81c      	bhi.n	8002390 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	4413      	add	r3, r2
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	461a      	mov	r2, r3
 800236a:	231f      	movs	r3, #31
 800236c:	4093      	lsls	r3, r2
 800236e:	43db      	mvns	r3, r3
 8002370:	4019      	ands	r1, r3
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	6818      	ldr	r0, [r3, #0]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	4613      	mov	r3, r2
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	4413      	add	r3, r2
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	fa00 f203 	lsl.w	r2, r0, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	631a      	str	r2, [r3, #48]	; 0x30
 800238e:	e063      	b.n	8002458 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b09      	cmp	r3, #9
 8002396:	d81e      	bhi.n	80023d6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	4413      	add	r3, r2
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	3b1e      	subs	r3, #30
 80023ac:	221f      	movs	r2, #31
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	4019      	ands	r1, r3
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	6818      	ldr	r0, [r3, #0]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	4413      	add	r3, r2
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	3b1e      	subs	r3, #30
 80023c8:	fa00 f203 	lsl.w	r2, r0, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	635a      	str	r2, [r3, #52]	; 0x34
 80023d4:	e040      	b.n	8002458 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b0e      	cmp	r3, #14
 80023dc:	d81e      	bhi.n	800241c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	4413      	add	r3, r2
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	3b3c      	subs	r3, #60	; 0x3c
 80023f2:	221f      	movs	r2, #31
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	4019      	ands	r1, r3
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	6818      	ldr	r0, [r3, #0]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	4413      	add	r3, r2
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	3b3c      	subs	r3, #60	; 0x3c
 800240e:	fa00 f203 	lsl.w	r2, r0, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	639a      	str	r2, [r3, #56]	; 0x38
 800241a:	e01d      	b.n	8002458 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	4413      	add	r3, r2
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	3b5a      	subs	r3, #90	; 0x5a
 8002430:	221f      	movs	r2, #31
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43db      	mvns	r3, r3
 8002438:	4019      	ands	r1, r3
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	6818      	ldr	r0, [r3, #0]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	4613      	mov	r3, r2
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	4413      	add	r3, r2
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	3b5a      	subs	r3, #90	; 0x5a
 800244c:	fa00 f203 	lsl.w	r2, r0, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
 8002462:	2b00      	cmp	r3, #0
 8002464:	f040 80e5 	bne.w	8002632 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2b09      	cmp	r3, #9
 800246e:	d91c      	bls.n	80024aa <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6999      	ldr	r1, [r3, #24]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	4613      	mov	r3, r2
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	4413      	add	r3, r2
 8002480:	3b1e      	subs	r3, #30
 8002482:	2207      	movs	r2, #7
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	4019      	ands	r1, r3
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	6898      	ldr	r0, [r3, #8]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	4613      	mov	r3, r2
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	4413      	add	r3, r2
 800249a:	3b1e      	subs	r3, #30
 800249c:	fa00 f203 	lsl.w	r2, r0, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	619a      	str	r2, [r3, #24]
 80024a8:	e019      	b.n	80024de <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6959      	ldr	r1, [r3, #20]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	4613      	mov	r3, r2
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	4413      	add	r3, r2
 80024ba:	2207      	movs	r2, #7
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	4019      	ands	r1, r3
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	6898      	ldr	r0, [r3, #8]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	4613      	mov	r3, r2
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	4413      	add	r3, r2
 80024d2:	fa00 f203 	lsl.w	r2, r0, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	430a      	orrs	r2, r1
 80024dc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	695a      	ldr	r2, [r3, #20]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	08db      	lsrs	r3, r3, #3
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	3b01      	subs	r3, #1
 80024fc:	2b03      	cmp	r3, #3
 80024fe:	d84f      	bhi.n	80025a0 <HAL_ADC_ConfigChannel+0x28c>
 8002500:	a201      	add	r2, pc, #4	; (adr r2, 8002508 <HAL_ADC_ConfigChannel+0x1f4>)
 8002502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002506:	bf00      	nop
 8002508:	08002519 	.word	0x08002519
 800250c:	0800253b 	.word	0x0800253b
 8002510:	0800255d 	.word	0x0800255d
 8002514:	0800257f 	.word	0x0800257f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800251e:	4b99      	ldr	r3, [pc, #612]	; (8002784 <HAL_ADC_ConfigChannel+0x470>)
 8002520:	4013      	ands	r3, r2
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	6812      	ldr	r2, [r2, #0]
 8002526:	0691      	lsls	r1, r2, #26
 8002528:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800252a:	430a      	orrs	r2, r1
 800252c:	431a      	orrs	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002536:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002538:	e07b      	b.n	8002632 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002540:	4b90      	ldr	r3, [pc, #576]	; (8002784 <HAL_ADC_ConfigChannel+0x470>)
 8002542:	4013      	ands	r3, r2
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	0691      	lsls	r1, r2, #26
 800254a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800254c:	430a      	orrs	r2, r1
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002558:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800255a:	e06a      	b.n	8002632 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002562:	4b88      	ldr	r3, [pc, #544]	; (8002784 <HAL_ADC_ConfigChannel+0x470>)
 8002564:	4013      	ands	r3, r2
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	6812      	ldr	r2, [r2, #0]
 800256a:	0691      	lsls	r1, r2, #26
 800256c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800256e:	430a      	orrs	r2, r1
 8002570:	431a      	orrs	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800257a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800257c:	e059      	b.n	8002632 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002584:	4b7f      	ldr	r3, [pc, #508]	; (8002784 <HAL_ADC_ConfigChannel+0x470>)
 8002586:	4013      	ands	r3, r2
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	0691      	lsls	r1, r2, #26
 800258e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002590:	430a      	orrs	r2, r1
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800259c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800259e:	e048      	b.n	8002632 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	069b      	lsls	r3, r3, #26
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d107      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80025c2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	069b      	lsls	r3, r3, #26
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d107      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80025e6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	069b      	lsls	r3, r3, #26
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d107      	bne.n	800260c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800260a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002612:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	069b      	lsls	r3, r3, #26
 800261c:	429a      	cmp	r2, r3
 800261e:	d107      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800262e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002630:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 0303 	and.w	r3, r3, #3
 800263c:	2b01      	cmp	r3, #1
 800263e:	d108      	bne.n	8002652 <HAL_ADC_ConfigChannel+0x33e>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b01      	cmp	r3, #1
 800264c:	d101      	bne.n	8002652 <HAL_ADC_ConfigChannel+0x33e>
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <HAL_ADC_ConfigChannel+0x340>
 8002652:	2300      	movs	r3, #0
 8002654:	2b00      	cmp	r3, #0
 8002656:	f040 8131 	bne.w	80028bc <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d00f      	beq.n	8002682 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2201      	movs	r2, #1
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43da      	mvns	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	400a      	ands	r2, r1
 800267c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002680:	e049      	b.n	8002716 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2201      	movs	r2, #1
 8002690:	409a      	lsls	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b09      	cmp	r3, #9
 80026a2:	d91c      	bls.n	80026de <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6999      	ldr	r1, [r3, #24]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	4613      	mov	r3, r2
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	4413      	add	r3, r2
 80026b4:	3b1b      	subs	r3, #27
 80026b6:	2207      	movs	r2, #7
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	4019      	ands	r1, r3
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	6898      	ldr	r0, [r3, #8]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4613      	mov	r3, r2
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	4413      	add	r3, r2
 80026ce:	3b1b      	subs	r3, #27
 80026d0:	fa00 f203 	lsl.w	r2, r0, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	619a      	str	r2, [r3, #24]
 80026dc:	e01b      	b.n	8002716 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6959      	ldr	r1, [r3, #20]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	4613      	mov	r3, r2
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	4413      	add	r3, r2
 80026f0:	2207      	movs	r2, #7
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43db      	mvns	r3, r3
 80026f8:	4019      	ands	r1, r3
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	6898      	ldr	r0, [r3, #8]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	1c5a      	adds	r2, r3, #1
 8002704:	4613      	mov	r3, r2
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	4413      	add	r3, r2
 800270a:	fa00 f203 	lsl.w	r2, r0, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800271e:	d004      	beq.n	800272a <HAL_ADC_ConfigChannel+0x416>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a18      	ldr	r2, [pc, #96]	; (8002788 <HAL_ADC_ConfigChannel+0x474>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d101      	bne.n	800272e <HAL_ADC_ConfigChannel+0x41a>
 800272a:	4b18      	ldr	r3, [pc, #96]	; (800278c <HAL_ADC_ConfigChannel+0x478>)
 800272c:	e000      	b.n	8002730 <HAL_ADC_ConfigChannel+0x41c>
 800272e:	4b18      	ldr	r3, [pc, #96]	; (8002790 <HAL_ADC_ConfigChannel+0x47c>)
 8002730:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2b10      	cmp	r3, #16
 8002738:	d105      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800273a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002742:	2b00      	cmp	r3, #0
 8002744:	d015      	beq.n	8002772 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800274a:	2b11      	cmp	r3, #17
 800274c:	d105      	bne.n	800275a <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800274e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00b      	beq.n	8002772 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800275e:	2b12      	cmp	r3, #18
 8002760:	f040 80ac 	bne.w	80028bc <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002764:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800276c:	2b00      	cmp	r3, #0
 800276e:	f040 80a5 	bne.w	80028bc <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800277a:	d10b      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x480>
 800277c:	4b02      	ldr	r3, [pc, #8]	; (8002788 <HAL_ADC_ConfigChannel+0x474>)
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	e023      	b.n	80027ca <HAL_ADC_ConfigChannel+0x4b6>
 8002782:	bf00      	nop
 8002784:	83fff000 	.word	0x83fff000
 8002788:	50000100 	.word	0x50000100
 800278c:	50000300 	.word	0x50000300
 8002790:	50000700 	.word	0x50000700
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a4e      	ldr	r2, [pc, #312]	; (80028d4 <HAL_ADC_ConfigChannel+0x5c0>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d103      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x492>
 800279e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	e011      	b.n	80027ca <HAL_ADC_ConfigChannel+0x4b6>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a4b      	ldr	r2, [pc, #300]	; (80028d8 <HAL_ADC_ConfigChannel+0x5c4>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d102      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x4a2>
 80027b0:	4b4a      	ldr	r3, [pc, #296]	; (80028dc <HAL_ADC_ConfigChannel+0x5c8>)
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	e009      	b.n	80027ca <HAL_ADC_ConfigChannel+0x4b6>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a48      	ldr	r2, [pc, #288]	; (80028dc <HAL_ADC_ConfigChannel+0x5c8>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d102      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x4b2>
 80027c0:	4b45      	ldr	r3, [pc, #276]	; (80028d8 <HAL_ADC_ConfigChannel+0x5c4>)
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	e001      	b.n	80027ca <HAL_ADC_ConfigChannel+0x4b6>
 80027c6:	2300      	movs	r3, #0
 80027c8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 0303 	and.w	r3, r3, #3
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d108      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x4d6>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d101      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x4d6>
 80027e6:	2301      	movs	r3, #1
 80027e8:	e000      	b.n	80027ec <HAL_ADC_ConfigChannel+0x4d8>
 80027ea:	2300      	movs	r3, #0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d150      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80027f0:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d010      	beq.n	8002818 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d107      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x4fe>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b01      	cmp	r3, #1
 800280c:	d101      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x4fe>
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <HAL_ADC_ConfigChannel+0x500>
 8002812:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002814:	2b00      	cmp	r3, #0
 8002816:	d13c      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b10      	cmp	r3, #16
 800281e:	d11d      	bne.n	800285c <HAL_ADC_ConfigChannel+0x548>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002828:	d118      	bne.n	800285c <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800282a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002832:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002834:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002836:	4b2a      	ldr	r3, [pc, #168]	; (80028e0 <HAL_ADC_ConfigChannel+0x5cc>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a2a      	ldr	r2, [pc, #168]	; (80028e4 <HAL_ADC_ConfigChannel+0x5d0>)
 800283c:	fba2 2303 	umull	r2, r3, r2, r3
 8002840:	0c9a      	lsrs	r2, r3, #18
 8002842:	4613      	mov	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800284c:	e002      	b.n	8002854 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	3b01      	subs	r3, #1
 8002852:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f9      	bne.n	800284e <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800285a:	e02e      	b.n	80028ba <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b11      	cmp	r3, #17
 8002862:	d10b      	bne.n	800287c <HAL_ADC_ConfigChannel+0x568>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800286c:	d106      	bne.n	800287c <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800286e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002876:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002878:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800287a:	e01e      	b.n	80028ba <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2b12      	cmp	r3, #18
 8002882:	d11a      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002884:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800288c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800288e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002890:	e013      	b.n	80028ba <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	f043 0220 	orr.w	r2, r3, #32
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80028a4:	e00a      	b.n	80028bc <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	f043 0220 	orr.w	r2, r3, #32
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80028b8:	e000      	b.n	80028bc <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80028ba:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80028c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	376c      	adds	r7, #108	; 0x6c
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	50000100 	.word	0x50000100
 80028d8:	50000400 	.word	0x50000400
 80028dc:	50000500 	.word	0x50000500
 80028e0:	20000004 	.word	0x20000004
 80028e4:	431bde83 	.word	0x431bde83

080028e8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b099      	sub	sp, #100	; 0x64
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028f2:	2300      	movs	r3, #0
 80028f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002900:	d102      	bne.n	8002908 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002902:	4b6d      	ldr	r3, [pc, #436]	; (8002ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	e01a      	b.n	800293e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a6a      	ldr	r2, [pc, #424]	; (8002ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d103      	bne.n	800291a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002912:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002916:	60bb      	str	r3, [r7, #8]
 8002918:	e011      	b.n	800293e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a67      	ldr	r2, [pc, #412]	; (8002abc <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d102      	bne.n	800292a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002924:	4b66      	ldr	r3, [pc, #408]	; (8002ac0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002926:	60bb      	str	r3, [r7, #8]
 8002928:	e009      	b.n	800293e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a64      	ldr	r2, [pc, #400]	; (8002ac0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d102      	bne.n	800293a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002934:	4b61      	ldr	r3, [pc, #388]	; (8002abc <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002936:	60bb      	str	r3, [r7, #8]
 8002938:	e001      	b.n	800293e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800293a:	2300      	movs	r3, #0
 800293c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0b0      	b.n	8002aaa <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800294e:	2b01      	cmp	r3, #1
 8002950:	d101      	bne.n	8002956 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002952:	2302      	movs	r3, #2
 8002954:	e0a9      	b.n	8002aaa <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	f040 808d 	bne.w	8002a88 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	2b00      	cmp	r3, #0
 8002978:	f040 8086 	bne.w	8002a88 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002984:	d004      	beq.n	8002990 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a4b      	ldr	r2, [pc, #300]	; (8002ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d101      	bne.n	8002994 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002990:	4b4c      	ldr	r3, [pc, #304]	; (8002ac4 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002992:	e000      	b.n	8002996 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002994:	4b4c      	ldr	r3, [pc, #304]	; (8002ac8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002996:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d040      	beq.n	8002a22 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80029a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	6859      	ldr	r1, [r3, #4]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029b2:	035b      	lsls	r3, r3, #13
 80029b4:	430b      	orrs	r3, r1
 80029b6:	431a      	orrs	r2, r3
 80029b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029ba:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d108      	bne.n	80029dc <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80029d8:	2301      	movs	r3, #1
 80029da:	e000      	b.n	80029de <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80029dc:	2300      	movs	r3, #0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d15c      	bne.n	8002a9c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d107      	bne.n	80029fe <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d101      	bne.n	80029fe <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80029fe:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d14b      	bne.n	8002a9c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002a04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a0c:	f023 030f 	bic.w	r3, r3, #15
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	6811      	ldr	r1, [r2, #0]
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	6892      	ldr	r2, [r2, #8]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a1e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a20:	e03c      	b.n	8002a9c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a2c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d108      	bne.n	8002a4e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d101      	bne.n	8002a4e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e000      	b.n	8002a50 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002a4e:	2300      	movs	r3, #0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d123      	bne.n	8002a9c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 0303 	and.w	r3, r3, #3
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d107      	bne.n	8002a70 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e000      	b.n	8002a72 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002a70:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d112      	bne.n	8002a9c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002a76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a7e:	f023 030f 	bic.w	r3, r3, #15
 8002a82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a84:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a86:	e009      	b.n	8002a9c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8c:	f043 0220 	orr.w	r2, r3, #32
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002a9a:	e000      	b.n	8002a9e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a9c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002aa6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3764      	adds	r7, #100	; 0x64
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	50000100 	.word	0x50000100
 8002abc:	50000400 	.word	0x50000400
 8002ac0:	50000500 	.word	0x50000500
 8002ac4:	50000300 	.word	0x50000300
 8002ac8:	50000700 	.word	0x50000700

08002acc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 0303 	and.w	r3, r3, #3
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d108      	bne.n	8002af8 <ADC_Disable+0x2c>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d101      	bne.n	8002af8 <ADC_Disable+0x2c>
 8002af4:	2301      	movs	r3, #1
 8002af6:	e000      	b.n	8002afa <ADC_Disable+0x2e>
 8002af8:	2300      	movs	r3, #0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d047      	beq.n	8002b8e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 030d 	and.w	r3, r3, #13
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d10f      	bne.n	8002b2c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0202 	orr.w	r2, r2, #2
 8002b1a:	609a      	str	r2, [r3, #8]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2203      	movs	r2, #3
 8002b22:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002b24:	f7ff f9f0 	bl	8001f08 <HAL_GetTick>
 8002b28:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002b2a:	e029      	b.n	8002b80 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b30:	f043 0210 	orr.w	r2, r3, #16
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3c:	f043 0201 	orr.w	r2, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e023      	b.n	8002b90 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b48:	f7ff f9de 	bl	8001f08 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d914      	bls.n	8002b80 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d10d      	bne.n	8002b80 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	f043 0210 	orr.w	r2, r3, #16
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b74:	f043 0201 	orr.w	r2, r3, #1
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e007      	b.n	8002b90 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d0dc      	beq.n	8002b48 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ba8:	4b0c      	ldr	r3, [pc, #48]	; (8002bdc <__NVIC_SetPriorityGrouping+0x44>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bca:	4a04      	ldr	r2, [pc, #16]	; (8002bdc <__NVIC_SetPriorityGrouping+0x44>)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	60d3      	str	r3, [r2, #12]
}
 8002bd0:	bf00      	nop
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	e000ed00 	.word	0xe000ed00

08002be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002be4:	4b04      	ldr	r3, [pc, #16]	; (8002bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	0a1b      	lsrs	r3, r3, #8
 8002bea:	f003 0307 	and.w	r3, r3, #7
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	e000ed00 	.word	0xe000ed00

08002bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	db0b      	blt.n	8002c26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c0e:	79fb      	ldrb	r3, [r7, #7]
 8002c10:	f003 021f 	and.w	r2, r3, #31
 8002c14:	4907      	ldr	r1, [pc, #28]	; (8002c34 <__NVIC_EnableIRQ+0x38>)
 8002c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1a:	095b      	lsrs	r3, r3, #5
 8002c1c:	2001      	movs	r0, #1
 8002c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	e000e100 	.word	0xe000e100

08002c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	6039      	str	r1, [r7, #0]
 8002c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	db0a      	blt.n	8002c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	490c      	ldr	r1, [pc, #48]	; (8002c84 <__NVIC_SetPriority+0x4c>)
 8002c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c56:	0112      	lsls	r2, r2, #4
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c60:	e00a      	b.n	8002c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	4908      	ldr	r1, [pc, #32]	; (8002c88 <__NVIC_SetPriority+0x50>)
 8002c68:	79fb      	ldrb	r3, [r7, #7]
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	3b04      	subs	r3, #4
 8002c70:	0112      	lsls	r2, r2, #4
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	440b      	add	r3, r1
 8002c76:	761a      	strb	r2, [r3, #24]
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	e000e100 	.word	0xe000e100
 8002c88:	e000ed00 	.word	0xe000ed00

08002c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b089      	sub	sp, #36	; 0x24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f1c3 0307 	rsb	r3, r3, #7
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	bf28      	it	cs
 8002caa:	2304      	movcs	r3, #4
 8002cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	3304      	adds	r3, #4
 8002cb2:	2b06      	cmp	r3, #6
 8002cb4:	d902      	bls.n	8002cbc <NVIC_EncodePriority+0x30>
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	3b03      	subs	r3, #3
 8002cba:	e000      	b.n	8002cbe <NVIC_EncodePriority+0x32>
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	43da      	mvns	r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	401a      	ands	r2, r3
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	fa01 f303 	lsl.w	r3, r1, r3
 8002cde:	43d9      	mvns	r1, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce4:	4313      	orrs	r3, r2
         );
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3724      	adds	r7, #36	; 0x24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7ff ff4c 	bl	8002b98 <__NVIC_SetPriorityGrouping>
}
 8002d00:	bf00      	nop
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
 8002d14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d1a:	f7ff ff61 	bl	8002be0 <__NVIC_GetPriorityGrouping>
 8002d1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	68b9      	ldr	r1, [r7, #8]
 8002d24:	6978      	ldr	r0, [r7, #20]
 8002d26:	f7ff ffb1 	bl	8002c8c <NVIC_EncodePriority>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d30:	4611      	mov	r1, r2
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff ff80 	bl	8002c38 <__NVIC_SetPriority>
}
 8002d38:	bf00      	nop
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4603      	mov	r3, r0
 8002d48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff ff54 	bl	8002bfc <__NVIC_EnableIRQ>
}
 8002d54:	bf00      	nop
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b087      	sub	sp, #28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d6a:	e160      	b.n	800302e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	2101      	movs	r1, #1
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	fa01 f303 	lsl.w	r3, r1, r3
 8002d78:	4013      	ands	r3, r2
 8002d7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 8152 	beq.w	8003028 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f003 0303 	and.w	r3, r3, #3
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d005      	beq.n	8002d9c <HAL_GPIO_Init+0x40>
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f003 0303 	and.w	r3, r3, #3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d130      	bne.n	8002dfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	2203      	movs	r2, #3
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	43db      	mvns	r3, r3
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	4013      	ands	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	68da      	ldr	r2, [r3, #12]
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4013      	ands	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	091b      	lsrs	r3, r3, #4
 8002de8:	f003 0201 	and.w	r2, r3, #1
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f003 0303 	and.w	r3, r3, #3
 8002e06:	2b03      	cmp	r3, #3
 8002e08:	d017      	beq.n	8002e3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	2203      	movs	r2, #3
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	689a      	ldr	r2, [r3, #8]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d123      	bne.n	8002e8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	08da      	lsrs	r2, r3, #3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	3208      	adds	r2, #8
 8002e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	220f      	movs	r2, #15
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	43db      	mvns	r3, r3
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	4013      	ands	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	691a      	ldr	r2, [r3, #16]
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	08da      	lsrs	r2, r3, #3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3208      	adds	r2, #8
 8002e88:	6939      	ldr	r1, [r7, #16]
 8002e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	2203      	movs	r2, #3
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f003 0203 	and.w	r2, r3, #3
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 80ac 	beq.w	8003028 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ed0:	4b5e      	ldr	r3, [pc, #376]	; (800304c <HAL_GPIO_Init+0x2f0>)
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	4a5d      	ldr	r2, [pc, #372]	; (800304c <HAL_GPIO_Init+0x2f0>)
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	6193      	str	r3, [r2, #24]
 8002edc:	4b5b      	ldr	r3, [pc, #364]	; (800304c <HAL_GPIO_Init+0x2f0>)
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	60bb      	str	r3, [r7, #8]
 8002ee6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ee8:	4a59      	ldr	r2, [pc, #356]	; (8003050 <HAL_GPIO_Init+0x2f4>)
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	089b      	lsrs	r3, r3, #2
 8002eee:	3302      	adds	r3, #2
 8002ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f003 0303 	and.w	r3, r3, #3
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	220f      	movs	r2, #15
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	43db      	mvns	r3, r3
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f12:	d025      	beq.n	8002f60 <HAL_GPIO_Init+0x204>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a4f      	ldr	r2, [pc, #316]	; (8003054 <HAL_GPIO_Init+0x2f8>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d01f      	beq.n	8002f5c <HAL_GPIO_Init+0x200>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a4e      	ldr	r2, [pc, #312]	; (8003058 <HAL_GPIO_Init+0x2fc>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d019      	beq.n	8002f58 <HAL_GPIO_Init+0x1fc>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a4d      	ldr	r2, [pc, #308]	; (800305c <HAL_GPIO_Init+0x300>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d013      	beq.n	8002f54 <HAL_GPIO_Init+0x1f8>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a4c      	ldr	r2, [pc, #304]	; (8003060 <HAL_GPIO_Init+0x304>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d00d      	beq.n	8002f50 <HAL_GPIO_Init+0x1f4>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a4b      	ldr	r2, [pc, #300]	; (8003064 <HAL_GPIO_Init+0x308>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d007      	beq.n	8002f4c <HAL_GPIO_Init+0x1f0>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a4a      	ldr	r2, [pc, #296]	; (8003068 <HAL_GPIO_Init+0x30c>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d101      	bne.n	8002f48 <HAL_GPIO_Init+0x1ec>
 8002f44:	2306      	movs	r3, #6
 8002f46:	e00c      	b.n	8002f62 <HAL_GPIO_Init+0x206>
 8002f48:	2307      	movs	r3, #7
 8002f4a:	e00a      	b.n	8002f62 <HAL_GPIO_Init+0x206>
 8002f4c:	2305      	movs	r3, #5
 8002f4e:	e008      	b.n	8002f62 <HAL_GPIO_Init+0x206>
 8002f50:	2304      	movs	r3, #4
 8002f52:	e006      	b.n	8002f62 <HAL_GPIO_Init+0x206>
 8002f54:	2303      	movs	r3, #3
 8002f56:	e004      	b.n	8002f62 <HAL_GPIO_Init+0x206>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e002      	b.n	8002f62 <HAL_GPIO_Init+0x206>
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e000      	b.n	8002f62 <HAL_GPIO_Init+0x206>
 8002f60:	2300      	movs	r3, #0
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	f002 0203 	and.w	r2, r2, #3
 8002f68:	0092      	lsls	r2, r2, #2
 8002f6a:	4093      	lsls	r3, r2
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f72:	4937      	ldr	r1, [pc, #220]	; (8003050 <HAL_GPIO_Init+0x2f4>)
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	089b      	lsrs	r3, r3, #2
 8002f78:	3302      	adds	r3, #2
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f80:	4b3a      	ldr	r3, [pc, #232]	; (800306c <HAL_GPIO_Init+0x310>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002fa4:	4a31      	ldr	r2, [pc, #196]	; (800306c <HAL_GPIO_Init+0x310>)
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002faa:	4b30      	ldr	r3, [pc, #192]	; (800306c <HAL_GPIO_Init+0x310>)
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002fce:	4a27      	ldr	r2, [pc, #156]	; (800306c <HAL_GPIO_Init+0x310>)
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fd4:	4b25      	ldr	r3, [pc, #148]	; (800306c <HAL_GPIO_Init+0x310>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002ff8:	4a1c      	ldr	r2, [pc, #112]	; (800306c <HAL_GPIO_Init+0x310>)
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ffe:	4b1b      	ldr	r3, [pc, #108]	; (800306c <HAL_GPIO_Init+0x310>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	43db      	mvns	r3, r3
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4013      	ands	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4313      	orrs	r3, r2
 8003020:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003022:	4a12      	ldr	r2, [pc, #72]	; (800306c <HAL_GPIO_Init+0x310>)
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	3301      	adds	r3, #1
 800302c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	fa22 f303 	lsr.w	r3, r2, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	f47f ae97 	bne.w	8002d6c <HAL_GPIO_Init+0x10>
  }
}
 800303e:	bf00      	nop
 8003040:	bf00      	nop
 8003042:	371c      	adds	r7, #28
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	40021000 	.word	0x40021000
 8003050:	40010000 	.word	0x40010000
 8003054:	48000400 	.word	0x48000400
 8003058:	48000800 	.word	0x48000800
 800305c:	48000c00 	.word	0x48000c00
 8003060:	48001000 	.word	0x48001000
 8003064:	48001400 	.word	0x48001400
 8003068:	48001800 	.word	0x48001800
 800306c:	40010400 	.word	0x40010400

08003070 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	460b      	mov	r3, r1
 800307a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691a      	ldr	r2, [r3, #16]
 8003080:	887b      	ldrh	r3, [r7, #2]
 8003082:	4013      	ands	r3, r2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003088:	2301      	movs	r3, #1
 800308a:	73fb      	strb	r3, [r7, #15]
 800308c:	e001      	b.n	8003092 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800308e:	2300      	movs	r3, #0
 8003090:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003092:	7bfb      	ldrb	r3, [r7, #15]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	460b      	mov	r3, r1
 80030aa:	807b      	strh	r3, [r7, #2]
 80030ac:	4613      	mov	r3, r2
 80030ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030b0:	787b      	ldrb	r3, [r7, #1]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030b6:	887a      	ldrh	r2, [r7, #2]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030bc:	e002      	b.n	80030c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030be:	887a      	ldrh	r2, [r7, #2]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030e0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d102      	bne.n	80030f6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	f001 b83a 	b.w	800416a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 816f 	beq.w	80033ea <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800310c:	4bb5      	ldr	r3, [pc, #724]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f003 030c 	and.w	r3, r3, #12
 8003114:	2b04      	cmp	r3, #4
 8003116:	d00c      	beq.n	8003132 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003118:	4bb2      	ldr	r3, [pc, #712]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f003 030c 	and.w	r3, r3, #12
 8003120:	2b08      	cmp	r3, #8
 8003122:	d15c      	bne.n	80031de <HAL_RCC_OscConfig+0x10e>
 8003124:	4baf      	ldr	r3, [pc, #700]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800312c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003130:	d155      	bne.n	80031de <HAL_RCC_OscConfig+0x10e>
 8003132:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003136:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800313e:	fa93 f3a3 	rbit	r3, r3
 8003142:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003146:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800314a:	fab3 f383 	clz	r3, r3
 800314e:	b2db      	uxtb	r3, r3
 8003150:	095b      	lsrs	r3, r3, #5
 8003152:	b2db      	uxtb	r3, r3
 8003154:	f043 0301 	orr.w	r3, r3, #1
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b01      	cmp	r3, #1
 800315c:	d102      	bne.n	8003164 <HAL_RCC_OscConfig+0x94>
 800315e:	4ba1      	ldr	r3, [pc, #644]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	e015      	b.n	8003190 <HAL_RCC_OscConfig+0xc0>
 8003164:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003168:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003170:	fa93 f3a3 	rbit	r3, r3
 8003174:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003178:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800317c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003180:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003184:	fa93 f3a3 	rbit	r3, r3
 8003188:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800318c:	4b95      	ldr	r3, [pc, #596]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003194:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003198:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800319c:	fa92 f2a2 	rbit	r2, r2
 80031a0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80031a4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80031a8:	fab2 f282 	clz	r2, r2
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	f042 0220 	orr.w	r2, r2, #32
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	f002 021f 	and.w	r2, r2, #31
 80031b8:	2101      	movs	r1, #1
 80031ba:	fa01 f202 	lsl.w	r2, r1, r2
 80031be:	4013      	ands	r3, r2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 8111 	beq.w	80033e8 <HAL_RCC_OscConfig+0x318>
 80031c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f040 8108 	bne.w	80033e8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	f000 bfc6 	b.w	800416a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ee:	d106      	bne.n	80031fe <HAL_RCC_OscConfig+0x12e>
 80031f0:	4b7c      	ldr	r3, [pc, #496]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a7b      	ldr	r2, [pc, #492]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 80031f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	e036      	b.n	800326c <HAL_RCC_OscConfig+0x19c>
 80031fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003202:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10c      	bne.n	8003228 <HAL_RCC_OscConfig+0x158>
 800320e:	4b75      	ldr	r3, [pc, #468]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a74      	ldr	r2, [pc, #464]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 8003214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	4b72      	ldr	r3, [pc, #456]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a71      	ldr	r2, [pc, #452]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 8003220:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	e021      	b.n	800326c <HAL_RCC_OscConfig+0x19c>
 8003228:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800322c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003238:	d10c      	bne.n	8003254 <HAL_RCC_OscConfig+0x184>
 800323a:	4b6a      	ldr	r3, [pc, #424]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a69      	ldr	r2, [pc, #420]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 8003240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	4b67      	ldr	r3, [pc, #412]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a66      	ldr	r2, [pc, #408]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 800324c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	e00b      	b.n	800326c <HAL_RCC_OscConfig+0x19c>
 8003254:	4b63      	ldr	r3, [pc, #396]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a62      	ldr	r2, [pc, #392]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 800325a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800325e:	6013      	str	r3, [r2, #0]
 8003260:	4b60      	ldr	r3, [pc, #384]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a5f      	ldr	r2, [pc, #380]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 8003266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800326a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800326c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003270:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d059      	beq.n	8003330 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327c:	f7fe fe44 	bl	8001f08 <HAL_GetTick>
 8003280:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003284:	e00a      	b.n	800329c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003286:	f7fe fe3f 	bl	8001f08 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b64      	cmp	r3, #100	; 0x64
 8003294:	d902      	bls.n	800329c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	f000 bf67 	b.w	800416a <HAL_RCC_OscConfig+0x109a>
 800329c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032a0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80032a8:	fa93 f3a3 	rbit	r3, r3
 80032ac:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80032b0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b4:	fab3 f383 	clz	r3, r3
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	f043 0301 	orr.w	r3, r3, #1
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d102      	bne.n	80032ce <HAL_RCC_OscConfig+0x1fe>
 80032c8:	4b46      	ldr	r3, [pc, #280]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	e015      	b.n	80032fa <HAL_RCC_OscConfig+0x22a>
 80032ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032d2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80032da:	fa93 f3a3 	rbit	r3, r3
 80032de:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80032e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032e6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80032ea:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80032ee:	fa93 f3a3 	rbit	r3, r3
 80032f2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80032f6:	4b3b      	ldr	r3, [pc, #236]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032fe:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003302:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003306:	fa92 f2a2 	rbit	r2, r2
 800330a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800330e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003312:	fab2 f282 	clz	r2, r2
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	f042 0220 	orr.w	r2, r2, #32
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	f002 021f 	and.w	r2, r2, #31
 8003322:	2101      	movs	r1, #1
 8003324:	fa01 f202 	lsl.w	r2, r1, r2
 8003328:	4013      	ands	r3, r2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0ab      	beq.n	8003286 <HAL_RCC_OscConfig+0x1b6>
 800332e:	e05c      	b.n	80033ea <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003330:	f7fe fdea 	bl	8001f08 <HAL_GetTick>
 8003334:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003338:	e00a      	b.n	8003350 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800333a:	f7fe fde5 	bl	8001f08 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b64      	cmp	r3, #100	; 0x64
 8003348:	d902      	bls.n	8003350 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	f000 bf0d 	b.w	800416a <HAL_RCC_OscConfig+0x109a>
 8003350:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003354:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003358:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800335c:	fa93 f3a3 	rbit	r3, r3
 8003360:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003364:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003368:	fab3 f383 	clz	r3, r3
 800336c:	b2db      	uxtb	r3, r3
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	b2db      	uxtb	r3, r3
 8003372:	f043 0301 	orr.w	r3, r3, #1
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b01      	cmp	r3, #1
 800337a:	d102      	bne.n	8003382 <HAL_RCC_OscConfig+0x2b2>
 800337c:	4b19      	ldr	r3, [pc, #100]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	e015      	b.n	80033ae <HAL_RCC_OscConfig+0x2de>
 8003382:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003386:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800338e:	fa93 f3a3 	rbit	r3, r3
 8003392:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003396:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800339a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800339e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80033a2:	fa93 f3a3 	rbit	r3, r3
 80033a6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80033aa:	4b0e      	ldr	r3, [pc, #56]	; (80033e4 <HAL_RCC_OscConfig+0x314>)
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033b2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80033b6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80033ba:	fa92 f2a2 	rbit	r2, r2
 80033be:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80033c2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80033c6:	fab2 f282 	clz	r2, r2
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	f042 0220 	orr.w	r2, r2, #32
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	f002 021f 	and.w	r2, r2, #31
 80033d6:	2101      	movs	r1, #1
 80033d8:	fa01 f202 	lsl.w	r2, r1, r2
 80033dc:	4013      	ands	r3, r2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1ab      	bne.n	800333a <HAL_RCC_OscConfig+0x26a>
 80033e2:	e002      	b.n	80033ea <HAL_RCC_OscConfig+0x31a>
 80033e4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 817f 	beq.w	80036fe <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003400:	4ba7      	ldr	r3, [pc, #668]	; (80036a0 <HAL_RCC_OscConfig+0x5d0>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f003 030c 	and.w	r3, r3, #12
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00c      	beq.n	8003426 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800340c:	4ba4      	ldr	r3, [pc, #656]	; (80036a0 <HAL_RCC_OscConfig+0x5d0>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f003 030c 	and.w	r3, r3, #12
 8003414:	2b08      	cmp	r3, #8
 8003416:	d173      	bne.n	8003500 <HAL_RCC_OscConfig+0x430>
 8003418:	4ba1      	ldr	r3, [pc, #644]	; (80036a0 <HAL_RCC_OscConfig+0x5d0>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003424:	d16c      	bne.n	8003500 <HAL_RCC_OscConfig+0x430>
 8003426:	2302      	movs	r3, #2
 8003428:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003430:	fa93 f3a3 	rbit	r3, r3
 8003434:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003438:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800343c:	fab3 f383 	clz	r3, r3
 8003440:	b2db      	uxtb	r3, r3
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	b2db      	uxtb	r3, r3
 8003446:	f043 0301 	orr.w	r3, r3, #1
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b01      	cmp	r3, #1
 800344e:	d102      	bne.n	8003456 <HAL_RCC_OscConfig+0x386>
 8003450:	4b93      	ldr	r3, [pc, #588]	; (80036a0 <HAL_RCC_OscConfig+0x5d0>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	e013      	b.n	800347e <HAL_RCC_OscConfig+0x3ae>
 8003456:	2302      	movs	r3, #2
 8003458:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003460:	fa93 f3a3 	rbit	r3, r3
 8003464:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003468:	2302      	movs	r3, #2
 800346a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800346e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003472:	fa93 f3a3 	rbit	r3, r3
 8003476:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800347a:	4b89      	ldr	r3, [pc, #548]	; (80036a0 <HAL_RCC_OscConfig+0x5d0>)
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	2202      	movs	r2, #2
 8003480:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003484:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003488:	fa92 f2a2 	rbit	r2, r2
 800348c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003490:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003494:	fab2 f282 	clz	r2, r2
 8003498:	b2d2      	uxtb	r2, r2
 800349a:	f042 0220 	orr.w	r2, r2, #32
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	f002 021f 	and.w	r2, r2, #31
 80034a4:	2101      	movs	r1, #1
 80034a6:	fa01 f202 	lsl.w	r2, r1, r2
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00a      	beq.n	80034c6 <HAL_RCC_OscConfig+0x3f6>
 80034b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d002      	beq.n	80034c6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	f000 be52 	b.w	800416a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c6:	4b76      	ldr	r3, [pc, #472]	; (80036a0 <HAL_RCC_OscConfig+0x5d0>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	21f8      	movs	r1, #248	; 0xf8
 80034dc:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e0:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80034e4:	fa91 f1a1 	rbit	r1, r1
 80034e8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80034ec:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80034f0:	fab1 f181 	clz	r1, r1
 80034f4:	b2c9      	uxtb	r1, r1
 80034f6:	408b      	lsls	r3, r1
 80034f8:	4969      	ldr	r1, [pc, #420]	; (80036a0 <HAL_RCC_OscConfig+0x5d0>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034fe:	e0fe      	b.n	80036fe <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003500:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003504:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 8088 	beq.w	8003622 <HAL_RCC_OscConfig+0x552>
 8003512:	2301      	movs	r3, #1
 8003514:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003518:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800351c:	fa93 f3a3 	rbit	r3, r3
 8003520:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003524:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003528:	fab3 f383 	clz	r3, r3
 800352c:	b2db      	uxtb	r3, r3
 800352e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003532:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	461a      	mov	r2, r3
 800353a:	2301      	movs	r3, #1
 800353c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353e:	f7fe fce3 	bl	8001f08 <HAL_GetTick>
 8003542:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003546:	e00a      	b.n	800355e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003548:	f7fe fcde 	bl	8001f08 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d902      	bls.n	800355e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	f000 be06 	b.w	800416a <HAL_RCC_OscConfig+0x109a>
 800355e:	2302      	movs	r3, #2
 8003560:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003564:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003568:	fa93 f3a3 	rbit	r3, r3
 800356c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003570:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003574:	fab3 f383 	clz	r3, r3
 8003578:	b2db      	uxtb	r3, r3
 800357a:	095b      	lsrs	r3, r3, #5
 800357c:	b2db      	uxtb	r3, r3
 800357e:	f043 0301 	orr.w	r3, r3, #1
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b01      	cmp	r3, #1
 8003586:	d102      	bne.n	800358e <HAL_RCC_OscConfig+0x4be>
 8003588:	4b45      	ldr	r3, [pc, #276]	; (80036a0 <HAL_RCC_OscConfig+0x5d0>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	e013      	b.n	80035b6 <HAL_RCC_OscConfig+0x4e6>
 800358e:	2302      	movs	r3, #2
 8003590:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003594:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003598:	fa93 f3a3 	rbit	r3, r3
 800359c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80035a0:	2302      	movs	r3, #2
 80035a2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80035a6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80035aa:	fa93 f3a3 	rbit	r3, r3
 80035ae:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80035b2:	4b3b      	ldr	r3, [pc, #236]	; (80036a0 <HAL_RCC_OscConfig+0x5d0>)
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	2202      	movs	r2, #2
 80035b8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80035bc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80035c0:	fa92 f2a2 	rbit	r2, r2
 80035c4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80035c8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80035cc:	fab2 f282 	clz	r2, r2
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	f042 0220 	orr.w	r2, r2, #32
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	f002 021f 	and.w	r2, r2, #31
 80035dc:	2101      	movs	r1, #1
 80035de:	fa01 f202 	lsl.w	r2, r1, r2
 80035e2:	4013      	ands	r3, r2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0af      	beq.n	8003548 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e8:	4b2d      	ldr	r3, [pc, #180]	; (80036a0 <HAL_RCC_OscConfig+0x5d0>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	21f8      	movs	r1, #248	; 0xf8
 80035fe:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003602:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003606:	fa91 f1a1 	rbit	r1, r1
 800360a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800360e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003612:	fab1 f181 	clz	r1, r1
 8003616:	b2c9      	uxtb	r1, r1
 8003618:	408b      	lsls	r3, r1
 800361a:	4921      	ldr	r1, [pc, #132]	; (80036a0 <HAL_RCC_OscConfig+0x5d0>)
 800361c:	4313      	orrs	r3, r2
 800361e:	600b      	str	r3, [r1, #0]
 8003620:	e06d      	b.n	80036fe <HAL_RCC_OscConfig+0x62e>
 8003622:	2301      	movs	r3, #1
 8003624:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003628:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800362c:	fa93 f3a3 	rbit	r3, r3
 8003630:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003634:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003638:	fab3 f383 	clz	r3, r3
 800363c:	b2db      	uxtb	r3, r3
 800363e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003642:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	461a      	mov	r2, r3
 800364a:	2300      	movs	r3, #0
 800364c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364e:	f7fe fc5b 	bl	8001f08 <HAL_GetTick>
 8003652:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003656:	e00a      	b.n	800366e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003658:	f7fe fc56 	bl	8001f08 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d902      	bls.n	800366e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	f000 bd7e 	b.w	800416a <HAL_RCC_OscConfig+0x109a>
 800366e:	2302      	movs	r3, #2
 8003670:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003674:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003678:	fa93 f3a3 	rbit	r3, r3
 800367c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003680:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003684:	fab3 f383 	clz	r3, r3
 8003688:	b2db      	uxtb	r3, r3
 800368a:	095b      	lsrs	r3, r3, #5
 800368c:	b2db      	uxtb	r3, r3
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b01      	cmp	r3, #1
 8003696:	d105      	bne.n	80036a4 <HAL_RCC_OscConfig+0x5d4>
 8003698:	4b01      	ldr	r3, [pc, #4]	; (80036a0 <HAL_RCC_OscConfig+0x5d0>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	e016      	b.n	80036cc <HAL_RCC_OscConfig+0x5fc>
 800369e:	bf00      	nop
 80036a0:	40021000 	.word	0x40021000
 80036a4:	2302      	movs	r3, #2
 80036a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80036ae:	fa93 f3a3 	rbit	r3, r3
 80036b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80036b6:	2302      	movs	r3, #2
 80036b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80036bc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80036c0:	fa93 f3a3 	rbit	r3, r3
 80036c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80036c8:	4bbf      	ldr	r3, [pc, #764]	; (80039c8 <HAL_RCC_OscConfig+0x8f8>)
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	2202      	movs	r2, #2
 80036ce:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80036d2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80036d6:	fa92 f2a2 	rbit	r2, r2
 80036da:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80036de:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80036e2:	fab2 f282 	clz	r2, r2
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	f042 0220 	orr.w	r2, r2, #32
 80036ec:	b2d2      	uxtb	r2, r2
 80036ee:	f002 021f 	and.w	r2, r2, #31
 80036f2:	2101      	movs	r1, #1
 80036f4:	fa01 f202 	lsl.w	r2, r1, r2
 80036f8:	4013      	ands	r3, r2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1ac      	bne.n	8003658 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003702:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 8113 	beq.w	800393a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003714:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003718:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d07c      	beq.n	800381e <HAL_RCC_OscConfig+0x74e>
 8003724:	2301      	movs	r3, #1
 8003726:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800372e:	fa93 f3a3 	rbit	r3, r3
 8003732:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003736:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800373a:	fab3 f383 	clz	r3, r3
 800373e:	b2db      	uxtb	r3, r3
 8003740:	461a      	mov	r2, r3
 8003742:	4ba2      	ldr	r3, [pc, #648]	; (80039cc <HAL_RCC_OscConfig+0x8fc>)
 8003744:	4413      	add	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	461a      	mov	r2, r3
 800374a:	2301      	movs	r3, #1
 800374c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800374e:	f7fe fbdb 	bl	8001f08 <HAL_GetTick>
 8003752:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003756:	e00a      	b.n	800376e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003758:	f7fe fbd6 	bl	8001f08 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d902      	bls.n	800376e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	f000 bcfe 	b.w	800416a <HAL_RCC_OscConfig+0x109a>
 800376e:	2302      	movs	r3, #2
 8003770:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003774:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003778:	fa93 f2a3 	rbit	r2, r3
 800377c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003780:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800378a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800378e:	2202      	movs	r2, #2
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003796:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	fa93 f2a3 	rbit	r2, r3
 80037a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80037b2:	2202      	movs	r2, #2
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	fa93 f2a3 	rbit	r2, r3
 80037c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037c8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80037cc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ce:	4b7e      	ldr	r3, [pc, #504]	; (80039c8 <HAL_RCC_OscConfig+0x8f8>)
 80037d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037d6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80037da:	2102      	movs	r1, #2
 80037dc:	6019      	str	r1, [r3, #0]
 80037de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037e2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	fa93 f1a3 	rbit	r1, r3
 80037ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037f0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80037f4:	6019      	str	r1, [r3, #0]
  return result;
 80037f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037fa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	fab3 f383 	clz	r3, r3
 8003804:	b2db      	uxtb	r3, r3
 8003806:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800380a:	b2db      	uxtb	r3, r3
 800380c:	f003 031f 	and.w	r3, r3, #31
 8003810:	2101      	movs	r1, #1
 8003812:	fa01 f303 	lsl.w	r3, r1, r3
 8003816:	4013      	ands	r3, r2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d09d      	beq.n	8003758 <HAL_RCC_OscConfig+0x688>
 800381c:	e08d      	b.n	800393a <HAL_RCC_OscConfig+0x86a>
 800381e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003822:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003826:	2201      	movs	r2, #1
 8003828:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800382e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	fa93 f2a3 	rbit	r2, r3
 8003838:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800383c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003840:	601a      	str	r2, [r3, #0]
  return result;
 8003842:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003846:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800384a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800384c:	fab3 f383 	clz	r3, r3
 8003850:	b2db      	uxtb	r3, r3
 8003852:	461a      	mov	r2, r3
 8003854:	4b5d      	ldr	r3, [pc, #372]	; (80039cc <HAL_RCC_OscConfig+0x8fc>)
 8003856:	4413      	add	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	461a      	mov	r2, r3
 800385c:	2300      	movs	r3, #0
 800385e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003860:	f7fe fb52 	bl	8001f08 <HAL_GetTick>
 8003864:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003868:	e00a      	b.n	8003880 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800386a:	f7fe fb4d 	bl	8001f08 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d902      	bls.n	8003880 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	f000 bc75 	b.w	800416a <HAL_RCC_OscConfig+0x109a>
 8003880:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003884:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003888:	2202      	movs	r2, #2
 800388a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003890:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	fa93 f2a3 	rbit	r2, r3
 800389a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800389e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80038a2:	601a      	str	r2, [r3, #0]
 80038a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80038ac:	2202      	movs	r2, #2
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	fa93 f2a3 	rbit	r2, r3
 80038be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038cc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80038d0:	2202      	movs	r2, #2
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038d8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	fa93 f2a3 	rbit	r2, r3
 80038e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038e6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80038ea:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ec:	4b36      	ldr	r3, [pc, #216]	; (80039c8 <HAL_RCC_OscConfig+0x8f8>)
 80038ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038f4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80038f8:	2102      	movs	r1, #2
 80038fa:	6019      	str	r1, [r3, #0]
 80038fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003900:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	fa93 f1a3 	rbit	r1, r3
 800390a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800390e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003912:	6019      	str	r1, [r3, #0]
  return result;
 8003914:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003918:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	fab3 f383 	clz	r3, r3
 8003922:	b2db      	uxtb	r3, r3
 8003924:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003928:	b2db      	uxtb	r3, r3
 800392a:	f003 031f 	and.w	r3, r3, #31
 800392e:	2101      	movs	r1, #1
 8003930:	fa01 f303 	lsl.w	r3, r1, r3
 8003934:	4013      	ands	r3, r2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d197      	bne.n	800386a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800393a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800393e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0304 	and.w	r3, r3, #4
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 81a5 	beq.w	8003c9a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003950:	2300      	movs	r3, #0
 8003952:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003956:	4b1c      	ldr	r3, [pc, #112]	; (80039c8 <HAL_RCC_OscConfig+0x8f8>)
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d116      	bne.n	8003990 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003962:	4b19      	ldr	r3, [pc, #100]	; (80039c8 <HAL_RCC_OscConfig+0x8f8>)
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	4a18      	ldr	r2, [pc, #96]	; (80039c8 <HAL_RCC_OscConfig+0x8f8>)
 8003968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800396c:	61d3      	str	r3, [r2, #28]
 800396e:	4b16      	ldr	r3, [pc, #88]	; (80039c8 <HAL_RCC_OscConfig+0x8f8>)
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003976:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800397a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003984:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003988:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800398a:	2301      	movs	r3, #1
 800398c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003990:	4b0f      	ldr	r3, [pc, #60]	; (80039d0 <HAL_RCC_OscConfig+0x900>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003998:	2b00      	cmp	r3, #0
 800399a:	d121      	bne.n	80039e0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800399c:	4b0c      	ldr	r3, [pc, #48]	; (80039d0 <HAL_RCC_OscConfig+0x900>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a0b      	ldr	r2, [pc, #44]	; (80039d0 <HAL_RCC_OscConfig+0x900>)
 80039a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039a8:	f7fe faae 	bl	8001f08 <HAL_GetTick>
 80039ac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b0:	e010      	b.n	80039d4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039b2:	f7fe faa9 	bl	8001f08 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b64      	cmp	r3, #100	; 0x64
 80039c0:	d908      	bls.n	80039d4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e3d1      	b.n	800416a <HAL_RCC_OscConfig+0x109a>
 80039c6:	bf00      	nop
 80039c8:	40021000 	.word	0x40021000
 80039cc:	10908120 	.word	0x10908120
 80039d0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d4:	4b8d      	ldr	r3, [pc, #564]	; (8003c0c <HAL_RCC_OscConfig+0xb3c>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0e8      	beq.n	80039b2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d106      	bne.n	80039fe <HAL_RCC_OscConfig+0x92e>
 80039f0:	4b87      	ldr	r3, [pc, #540]	; (8003c10 <HAL_RCC_OscConfig+0xb40>)
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	4a86      	ldr	r2, [pc, #536]	; (8003c10 <HAL_RCC_OscConfig+0xb40>)
 80039f6:	f043 0301 	orr.w	r3, r3, #1
 80039fa:	6213      	str	r3, [r2, #32]
 80039fc:	e035      	b.n	8003a6a <HAL_RCC_OscConfig+0x99a>
 80039fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a02:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10c      	bne.n	8003a28 <HAL_RCC_OscConfig+0x958>
 8003a0e:	4b80      	ldr	r3, [pc, #512]	; (8003c10 <HAL_RCC_OscConfig+0xb40>)
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	4a7f      	ldr	r2, [pc, #508]	; (8003c10 <HAL_RCC_OscConfig+0xb40>)
 8003a14:	f023 0301 	bic.w	r3, r3, #1
 8003a18:	6213      	str	r3, [r2, #32]
 8003a1a:	4b7d      	ldr	r3, [pc, #500]	; (8003c10 <HAL_RCC_OscConfig+0xb40>)
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	4a7c      	ldr	r2, [pc, #496]	; (8003c10 <HAL_RCC_OscConfig+0xb40>)
 8003a20:	f023 0304 	bic.w	r3, r3, #4
 8003a24:	6213      	str	r3, [r2, #32]
 8003a26:	e020      	b.n	8003a6a <HAL_RCC_OscConfig+0x99a>
 8003a28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a2c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	2b05      	cmp	r3, #5
 8003a36:	d10c      	bne.n	8003a52 <HAL_RCC_OscConfig+0x982>
 8003a38:	4b75      	ldr	r3, [pc, #468]	; (8003c10 <HAL_RCC_OscConfig+0xb40>)
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	4a74      	ldr	r2, [pc, #464]	; (8003c10 <HAL_RCC_OscConfig+0xb40>)
 8003a3e:	f043 0304 	orr.w	r3, r3, #4
 8003a42:	6213      	str	r3, [r2, #32]
 8003a44:	4b72      	ldr	r3, [pc, #456]	; (8003c10 <HAL_RCC_OscConfig+0xb40>)
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	4a71      	ldr	r2, [pc, #452]	; (8003c10 <HAL_RCC_OscConfig+0xb40>)
 8003a4a:	f043 0301 	orr.w	r3, r3, #1
 8003a4e:	6213      	str	r3, [r2, #32]
 8003a50:	e00b      	b.n	8003a6a <HAL_RCC_OscConfig+0x99a>
 8003a52:	4b6f      	ldr	r3, [pc, #444]	; (8003c10 <HAL_RCC_OscConfig+0xb40>)
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	4a6e      	ldr	r2, [pc, #440]	; (8003c10 <HAL_RCC_OscConfig+0xb40>)
 8003a58:	f023 0301 	bic.w	r3, r3, #1
 8003a5c:	6213      	str	r3, [r2, #32]
 8003a5e:	4b6c      	ldr	r3, [pc, #432]	; (8003c10 <HAL_RCC_OscConfig+0xb40>)
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	4a6b      	ldr	r2, [pc, #428]	; (8003c10 <HAL_RCC_OscConfig+0xb40>)
 8003a64:	f023 0304 	bic.w	r3, r3, #4
 8003a68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a6e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f000 8081 	beq.w	8003b7e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a7c:	f7fe fa44 	bl	8001f08 <HAL_GetTick>
 8003a80:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a84:	e00b      	b.n	8003a9e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a86:	f7fe fa3f 	bl	8001f08 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e365      	b.n	800416a <HAL_RCC_OscConfig+0x109a>
 8003a9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aa2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aaa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aae:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	fa93 f2a3 	rbit	r2, r3
 8003ab8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003abc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ac6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003aca:	2202      	movs	r2, #2
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ad2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	fa93 f2a3 	rbit	r2, r3
 8003adc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ae0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003ae4:	601a      	str	r2, [r3, #0]
  return result;
 8003ae6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aea:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003aee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af0:	fab3 f383 	clz	r3, r3
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	095b      	lsrs	r3, r3, #5
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	f043 0302 	orr.w	r3, r3, #2
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d102      	bne.n	8003b0a <HAL_RCC_OscConfig+0xa3a>
 8003b04:	4b42      	ldr	r3, [pc, #264]	; (8003c10 <HAL_RCC_OscConfig+0xb40>)
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	e013      	b.n	8003b32 <HAL_RCC_OscConfig+0xa62>
 8003b0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b0e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003b12:	2202      	movs	r2, #2
 8003b14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b1a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	fa93 f2a3 	rbit	r2, r3
 8003b24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b28:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	4b38      	ldr	r3, [pc, #224]	; (8003c10 <HAL_RCC_OscConfig+0xb40>)
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b36:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003b3a:	2102      	movs	r1, #2
 8003b3c:	6011      	str	r1, [r2, #0]
 8003b3e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b42:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003b46:	6812      	ldr	r2, [r2, #0]
 8003b48:	fa92 f1a2 	rbit	r1, r2
 8003b4c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b50:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003b54:	6011      	str	r1, [r2, #0]
  return result;
 8003b56:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003b5a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003b5e:	6812      	ldr	r2, [r2, #0]
 8003b60:	fab2 f282 	clz	r2, r2
 8003b64:	b2d2      	uxtb	r2, r2
 8003b66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b6a:	b2d2      	uxtb	r2, r2
 8003b6c:	f002 021f 	and.w	r2, r2, #31
 8003b70:	2101      	movs	r1, #1
 8003b72:	fa01 f202 	lsl.w	r2, r1, r2
 8003b76:	4013      	ands	r3, r2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d084      	beq.n	8003a86 <HAL_RCC_OscConfig+0x9b6>
 8003b7c:	e083      	b.n	8003c86 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b7e:	f7fe f9c3 	bl	8001f08 <HAL_GetTick>
 8003b82:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b86:	e00b      	b.n	8003ba0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b88:	f7fe f9be 	bl	8001f08 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e2e4      	b.n	800416a <HAL_RCC_OscConfig+0x109a>
 8003ba0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ba4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003ba8:	2202      	movs	r2, #2
 8003baa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bb0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	fa93 f2a3 	rbit	r2, r3
 8003bba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bbe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bc8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003bcc:	2202      	movs	r2, #2
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bd4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	fa93 f2a3 	rbit	r2, r3
 8003bde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003be2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003be6:	601a      	str	r2, [r3, #0]
  return result;
 8003be8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bec:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003bf0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf2:	fab3 f383 	clz	r3, r3
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	095b      	lsrs	r3, r3, #5
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	f043 0302 	orr.w	r3, r3, #2
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d106      	bne.n	8003c14 <HAL_RCC_OscConfig+0xb44>
 8003c06:	4b02      	ldr	r3, [pc, #8]	; (8003c10 <HAL_RCC_OscConfig+0xb40>)
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	e017      	b.n	8003c3c <HAL_RCC_OscConfig+0xb6c>
 8003c0c:	40007000 	.word	0x40007000
 8003c10:	40021000 	.word	0x40021000
 8003c14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c18:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c24:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	fa93 f2a3 	rbit	r2, r3
 8003c2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c32:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	4bb3      	ldr	r3, [pc, #716]	; (8003f08 <HAL_RCC_OscConfig+0xe38>)
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c40:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003c44:	2102      	movs	r1, #2
 8003c46:	6011      	str	r1, [r2, #0]
 8003c48:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c4c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003c50:	6812      	ldr	r2, [r2, #0]
 8003c52:	fa92 f1a2 	rbit	r1, r2
 8003c56:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c5a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003c5e:	6011      	str	r1, [r2, #0]
  return result;
 8003c60:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c64:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003c68:	6812      	ldr	r2, [r2, #0]
 8003c6a:	fab2 f282 	clz	r2, r2
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c74:	b2d2      	uxtb	r2, r2
 8003c76:	f002 021f 	and.w	r2, r2, #31
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c80:	4013      	ands	r3, r2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d180      	bne.n	8003b88 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c86:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d105      	bne.n	8003c9a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c8e:	4b9e      	ldr	r3, [pc, #632]	; (8003f08 <HAL_RCC_OscConfig+0xe38>)
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	4a9d      	ldr	r2, [pc, #628]	; (8003f08 <HAL_RCC_OscConfig+0xe38>)
 8003c94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c98:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c9e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f000 825e 	beq.w	8004168 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cac:	4b96      	ldr	r3, [pc, #600]	; (8003f08 <HAL_RCC_OscConfig+0xe38>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f003 030c 	and.w	r3, r3, #12
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	f000 821f 	beq.w	80040f8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cbe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	f040 8170 	bne.w	8003fac <HAL_RCC_OscConfig+0xedc>
 8003ccc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cd0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003cd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003cd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cde:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	fa93 f2a3 	rbit	r2, r3
 8003ce8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cec:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003cf0:	601a      	str	r2, [r3, #0]
  return result;
 8003cf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cf6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003cfa:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cfc:	fab3 f383 	clz	r3, r3
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d06:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	2300      	movs	r3, #0
 8003d10:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d12:	f7fe f8f9 	bl	8001f08 <HAL_GetTick>
 8003d16:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d1a:	e009      	b.n	8003d30 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d1c:	f7fe f8f4 	bl	8001f08 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e21c      	b.n	800416a <HAL_RCC_OscConfig+0x109a>
 8003d30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d34:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003d38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d42:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	fa93 f2a3 	rbit	r2, r3
 8003d4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d50:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003d54:	601a      	str	r2, [r3, #0]
  return result;
 8003d56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d5a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003d5e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d60:	fab3 f383 	clz	r3, r3
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	095b      	lsrs	r3, r3, #5
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d102      	bne.n	8003d7a <HAL_RCC_OscConfig+0xcaa>
 8003d74:	4b64      	ldr	r3, [pc, #400]	; (8003f08 <HAL_RCC_OscConfig+0xe38>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	e027      	b.n	8003dca <HAL_RCC_OscConfig+0xcfa>
 8003d7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d7e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003d82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d8c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	fa93 f2a3 	rbit	r2, r3
 8003d96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d9a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003da4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003da8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003db2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	fa93 f2a3 	rbit	r2, r3
 8003dbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dc0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	4b50      	ldr	r3, [pc, #320]	; (8003f08 <HAL_RCC_OscConfig+0xe38>)
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003dce:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003dd2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003dd6:	6011      	str	r1, [r2, #0]
 8003dd8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ddc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003de0:	6812      	ldr	r2, [r2, #0]
 8003de2:	fa92 f1a2 	rbit	r1, r2
 8003de6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003dea:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003dee:	6011      	str	r1, [r2, #0]
  return result;
 8003df0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003df4:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003df8:	6812      	ldr	r2, [r2, #0]
 8003dfa:	fab2 f282 	clz	r2, r2
 8003dfe:	b2d2      	uxtb	r2, r2
 8003e00:	f042 0220 	orr.w	r2, r2, #32
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	f002 021f 	and.w	r2, r2, #31
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e10:	4013      	ands	r3, r2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d182      	bne.n	8003d1c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e16:	4b3c      	ldr	r3, [pc, #240]	; (8003f08 <HAL_RCC_OscConfig+0xe38>)
 8003e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1a:	f023 020f 	bic.w	r2, r3, #15
 8003e1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e22:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	4937      	ldr	r1, [pc, #220]	; (8003f08 <HAL_RCC_OscConfig+0xe38>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003e30:	4b35      	ldr	r3, [pc, #212]	; (8003f08 <HAL_RCC_OscConfig+0xe38>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003e38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e3c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6a19      	ldr	r1, [r3, #32]
 8003e44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e48:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	69db      	ldr	r3, [r3, #28]
 8003e50:	430b      	orrs	r3, r1
 8003e52:	492d      	ldr	r1, [pc, #180]	; (8003f08 <HAL_RCC_OscConfig+0xe38>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	604b      	str	r3, [r1, #4]
 8003e58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e5c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003e60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e6a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	fa93 f2a3 	rbit	r2, r3
 8003e74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e78:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003e7c:	601a      	str	r2, [r3, #0]
  return result;
 8003e7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e82:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003e86:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e88:	fab3 f383 	clz	r3, r3
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e92:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	461a      	mov	r2, r3
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9e:	f7fe f833 	bl	8001f08 <HAL_GetTick>
 8003ea2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ea6:	e009      	b.n	8003ebc <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ea8:	f7fe f82e 	bl	8001f08 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e156      	b.n	800416a <HAL_RCC_OscConfig+0x109a>
 8003ebc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ec0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003ec4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ec8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ece:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	fa93 f2a3 	rbit	r2, r3
 8003ed8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003edc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003ee0:	601a      	str	r2, [r3, #0]
  return result;
 8003ee2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ee6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003eea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003eec:	fab3 f383 	clz	r3, r3
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	095b      	lsrs	r3, r3, #5
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	f043 0301 	orr.w	r3, r3, #1
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d105      	bne.n	8003f0c <HAL_RCC_OscConfig+0xe3c>
 8003f00:	4b01      	ldr	r3, [pc, #4]	; (8003f08 <HAL_RCC_OscConfig+0xe38>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	e02a      	b.n	8003f5c <HAL_RCC_OscConfig+0xe8c>
 8003f06:	bf00      	nop
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f10:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003f14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f1e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	fa93 f2a3 	rbit	r2, r3
 8003f28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f2c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f36:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003f3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f44:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	fa93 f2a3 	rbit	r2, r3
 8003f4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f52:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	4b86      	ldr	r3, [pc, #536]	; (8004174 <HAL_RCC_OscConfig+0x10a4>)
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f60:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003f64:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f68:	6011      	str	r1, [r2, #0]
 8003f6a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f6e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003f72:	6812      	ldr	r2, [r2, #0]
 8003f74:	fa92 f1a2 	rbit	r1, r2
 8003f78:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f7c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003f80:	6011      	str	r1, [r2, #0]
  return result;
 8003f82:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f86:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003f8a:	6812      	ldr	r2, [r2, #0]
 8003f8c:	fab2 f282 	clz	r2, r2
 8003f90:	b2d2      	uxtb	r2, r2
 8003f92:	f042 0220 	orr.w	r2, r2, #32
 8003f96:	b2d2      	uxtb	r2, r2
 8003f98:	f002 021f 	and.w	r2, r2, #31
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f43f af7f 	beq.w	8003ea8 <HAL_RCC_OscConfig+0xdd8>
 8003faa:	e0dd      	b.n	8004168 <HAL_RCC_OscConfig+0x1098>
 8003fac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fb0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003fb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fbe:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	fa93 f2a3 	rbit	r2, r3
 8003fc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fcc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003fd0:	601a      	str	r2, [r3, #0]
  return result;
 8003fd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fd6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003fda:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fdc:	fab3 f383 	clz	r3, r3
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003fe6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	461a      	mov	r2, r3
 8003fee:	2300      	movs	r3, #0
 8003ff0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff2:	f7fd ff89 	bl	8001f08 <HAL_GetTick>
 8003ff6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ffa:	e009      	b.n	8004010 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ffc:	f7fd ff84 	bl	8001f08 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e0ac      	b.n	800416a <HAL_RCC_OscConfig+0x109a>
 8004010:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004014:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004018:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800401c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004022:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	fa93 f2a3 	rbit	r2, r3
 800402c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004030:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004034:	601a      	str	r2, [r3, #0]
  return result;
 8004036:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800403a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800403e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004040:	fab3 f383 	clz	r3, r3
 8004044:	b2db      	uxtb	r3, r3
 8004046:	095b      	lsrs	r3, r3, #5
 8004048:	b2db      	uxtb	r3, r3
 800404a:	f043 0301 	orr.w	r3, r3, #1
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b01      	cmp	r3, #1
 8004052:	d102      	bne.n	800405a <HAL_RCC_OscConfig+0xf8a>
 8004054:	4b47      	ldr	r3, [pc, #284]	; (8004174 <HAL_RCC_OscConfig+0x10a4>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	e027      	b.n	80040aa <HAL_RCC_OscConfig+0xfda>
 800405a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800405e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004062:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004066:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004068:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800406c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	fa93 f2a3 	rbit	r2, r3
 8004076:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800407a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004084:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004088:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004092:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	fa93 f2a3 	rbit	r2, r3
 800409c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040a0:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	4b33      	ldr	r3, [pc, #204]	; (8004174 <HAL_RCC_OscConfig+0x10a4>)
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80040ae:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80040b2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80040b6:	6011      	str	r1, [r2, #0]
 80040b8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80040bc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80040c0:	6812      	ldr	r2, [r2, #0]
 80040c2:	fa92 f1a2 	rbit	r1, r2
 80040c6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80040ca:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80040ce:	6011      	str	r1, [r2, #0]
  return result;
 80040d0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80040d4:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80040d8:	6812      	ldr	r2, [r2, #0]
 80040da:	fab2 f282 	clz	r2, r2
 80040de:	b2d2      	uxtb	r2, r2
 80040e0:	f042 0220 	orr.w	r2, r2, #32
 80040e4:	b2d2      	uxtb	r2, r2
 80040e6:	f002 021f 	and.w	r2, r2, #31
 80040ea:	2101      	movs	r1, #1
 80040ec:	fa01 f202 	lsl.w	r2, r1, r2
 80040f0:	4013      	ands	r3, r2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d182      	bne.n	8003ffc <HAL_RCC_OscConfig+0xf2c>
 80040f6:	e037      	b.n	8004168 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e02e      	b.n	800416a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800410c:	4b19      	ldr	r3, [pc, #100]	; (8004174 <HAL_RCC_OscConfig+0x10a4>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004114:	4b17      	ldr	r3, [pc, #92]	; (8004174 <HAL_RCC_OscConfig+0x10a4>)
 8004116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004118:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800411c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004120:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004124:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004128:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	429a      	cmp	r2, r3
 8004132:	d117      	bne.n	8004164 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004134:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004138:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800413c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004140:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004148:	429a      	cmp	r2, r3
 800414a:	d10b      	bne.n	8004164 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800414c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004150:	f003 020f 	and.w	r2, r3, #15
 8004154:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004158:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004160:	429a      	cmp	r2, r3
 8004162:	d001      	beq.n	8004168 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e000      	b.n	800416a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40021000 	.word	0x40021000

08004178 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b09e      	sub	sp, #120	; 0x78
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004182:	2300      	movs	r3, #0
 8004184:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d101      	bne.n	8004190 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e162      	b.n	8004456 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004190:	4b90      	ldr	r3, [pc, #576]	; (80043d4 <HAL_RCC_ClockConfig+0x25c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0307 	and.w	r3, r3, #7
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	429a      	cmp	r2, r3
 800419c:	d910      	bls.n	80041c0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800419e:	4b8d      	ldr	r3, [pc, #564]	; (80043d4 <HAL_RCC_ClockConfig+0x25c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f023 0207 	bic.w	r2, r3, #7
 80041a6:	498b      	ldr	r1, [pc, #556]	; (80043d4 <HAL_RCC_ClockConfig+0x25c>)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ae:	4b89      	ldr	r3, [pc, #548]	; (80043d4 <HAL_RCC_ClockConfig+0x25c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d001      	beq.n	80041c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e14a      	b.n	8004456 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d008      	beq.n	80041de <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041cc:	4b82      	ldr	r3, [pc, #520]	; (80043d8 <HAL_RCC_ClockConfig+0x260>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	497f      	ldr	r1, [pc, #508]	; (80043d8 <HAL_RCC_ClockConfig+0x260>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 80dc 	beq.w	80043a4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d13c      	bne.n	800426e <HAL_RCC_ClockConfig+0xf6>
 80041f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041f8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041fc:	fa93 f3a3 	rbit	r3, r3
 8004200:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004204:	fab3 f383 	clz	r3, r3
 8004208:	b2db      	uxtb	r3, r3
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	b2db      	uxtb	r3, r3
 800420e:	f043 0301 	orr.w	r3, r3, #1
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b01      	cmp	r3, #1
 8004216:	d102      	bne.n	800421e <HAL_RCC_ClockConfig+0xa6>
 8004218:	4b6f      	ldr	r3, [pc, #444]	; (80043d8 <HAL_RCC_ClockConfig+0x260>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	e00f      	b.n	800423e <HAL_RCC_ClockConfig+0xc6>
 800421e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004222:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004224:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004226:	fa93 f3a3 	rbit	r3, r3
 800422a:	667b      	str	r3, [r7, #100]	; 0x64
 800422c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004230:	663b      	str	r3, [r7, #96]	; 0x60
 8004232:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004234:	fa93 f3a3 	rbit	r3, r3
 8004238:	65fb      	str	r3, [r7, #92]	; 0x5c
 800423a:	4b67      	ldr	r3, [pc, #412]	; (80043d8 <HAL_RCC_ClockConfig+0x260>)
 800423c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004242:	65ba      	str	r2, [r7, #88]	; 0x58
 8004244:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004246:	fa92 f2a2 	rbit	r2, r2
 800424a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800424c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800424e:	fab2 f282 	clz	r2, r2
 8004252:	b2d2      	uxtb	r2, r2
 8004254:	f042 0220 	orr.w	r2, r2, #32
 8004258:	b2d2      	uxtb	r2, r2
 800425a:	f002 021f 	and.w	r2, r2, #31
 800425e:	2101      	movs	r1, #1
 8004260:	fa01 f202 	lsl.w	r2, r1, r2
 8004264:	4013      	ands	r3, r2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d17b      	bne.n	8004362 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e0f3      	b.n	8004456 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b02      	cmp	r3, #2
 8004274:	d13c      	bne.n	80042f0 <HAL_RCC_ClockConfig+0x178>
 8004276:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800427a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800427e:	fa93 f3a3 	rbit	r3, r3
 8004282:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004286:	fab3 f383 	clz	r3, r3
 800428a:	b2db      	uxtb	r3, r3
 800428c:	095b      	lsrs	r3, r3, #5
 800428e:	b2db      	uxtb	r3, r3
 8004290:	f043 0301 	orr.w	r3, r3, #1
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b01      	cmp	r3, #1
 8004298:	d102      	bne.n	80042a0 <HAL_RCC_ClockConfig+0x128>
 800429a:	4b4f      	ldr	r3, [pc, #316]	; (80043d8 <HAL_RCC_ClockConfig+0x260>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	e00f      	b.n	80042c0 <HAL_RCC_ClockConfig+0x148>
 80042a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042a4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042a8:	fa93 f3a3 	rbit	r3, r3
 80042ac:	647b      	str	r3, [r7, #68]	; 0x44
 80042ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042b2:	643b      	str	r3, [r7, #64]	; 0x40
 80042b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042b6:	fa93 f3a3 	rbit	r3, r3
 80042ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042bc:	4b46      	ldr	r3, [pc, #280]	; (80043d8 <HAL_RCC_ClockConfig+0x260>)
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042c4:	63ba      	str	r2, [r7, #56]	; 0x38
 80042c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042c8:	fa92 f2a2 	rbit	r2, r2
 80042cc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80042ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042d0:	fab2 f282 	clz	r2, r2
 80042d4:	b2d2      	uxtb	r2, r2
 80042d6:	f042 0220 	orr.w	r2, r2, #32
 80042da:	b2d2      	uxtb	r2, r2
 80042dc:	f002 021f 	and.w	r2, r2, #31
 80042e0:	2101      	movs	r1, #1
 80042e2:	fa01 f202 	lsl.w	r2, r1, r2
 80042e6:	4013      	ands	r3, r2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d13a      	bne.n	8004362 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e0b2      	b.n	8004456 <HAL_RCC_ClockConfig+0x2de>
 80042f0:	2302      	movs	r3, #2
 80042f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f6:	fa93 f3a3 	rbit	r3, r3
 80042fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80042fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042fe:	fab3 f383 	clz	r3, r3
 8004302:	b2db      	uxtb	r3, r3
 8004304:	095b      	lsrs	r3, r3, #5
 8004306:	b2db      	uxtb	r3, r3
 8004308:	f043 0301 	orr.w	r3, r3, #1
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b01      	cmp	r3, #1
 8004310:	d102      	bne.n	8004318 <HAL_RCC_ClockConfig+0x1a0>
 8004312:	4b31      	ldr	r3, [pc, #196]	; (80043d8 <HAL_RCC_ClockConfig+0x260>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	e00d      	b.n	8004334 <HAL_RCC_ClockConfig+0x1bc>
 8004318:	2302      	movs	r3, #2
 800431a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431e:	fa93 f3a3 	rbit	r3, r3
 8004322:	627b      	str	r3, [r7, #36]	; 0x24
 8004324:	2302      	movs	r3, #2
 8004326:	623b      	str	r3, [r7, #32]
 8004328:	6a3b      	ldr	r3, [r7, #32]
 800432a:	fa93 f3a3 	rbit	r3, r3
 800432e:	61fb      	str	r3, [r7, #28]
 8004330:	4b29      	ldr	r3, [pc, #164]	; (80043d8 <HAL_RCC_ClockConfig+0x260>)
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	2202      	movs	r2, #2
 8004336:	61ba      	str	r2, [r7, #24]
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	fa92 f2a2 	rbit	r2, r2
 800433e:	617a      	str	r2, [r7, #20]
  return result;
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	fab2 f282 	clz	r2, r2
 8004346:	b2d2      	uxtb	r2, r2
 8004348:	f042 0220 	orr.w	r2, r2, #32
 800434c:	b2d2      	uxtb	r2, r2
 800434e:	f002 021f 	and.w	r2, r2, #31
 8004352:	2101      	movs	r1, #1
 8004354:	fa01 f202 	lsl.w	r2, r1, r2
 8004358:	4013      	ands	r3, r2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e079      	b.n	8004456 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004362:	4b1d      	ldr	r3, [pc, #116]	; (80043d8 <HAL_RCC_ClockConfig+0x260>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f023 0203 	bic.w	r2, r3, #3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	491a      	ldr	r1, [pc, #104]	; (80043d8 <HAL_RCC_ClockConfig+0x260>)
 8004370:	4313      	orrs	r3, r2
 8004372:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004374:	f7fd fdc8 	bl	8001f08 <HAL_GetTick>
 8004378:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800437a:	e00a      	b.n	8004392 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800437c:	f7fd fdc4 	bl	8001f08 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	f241 3288 	movw	r2, #5000	; 0x1388
 800438a:	4293      	cmp	r3, r2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e061      	b.n	8004456 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004392:	4b11      	ldr	r3, [pc, #68]	; (80043d8 <HAL_RCC_ClockConfig+0x260>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f003 020c 	and.w	r2, r3, #12
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d1eb      	bne.n	800437c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043a4:	4b0b      	ldr	r3, [pc, #44]	; (80043d4 <HAL_RCC_ClockConfig+0x25c>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0307 	and.w	r3, r3, #7
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d214      	bcs.n	80043dc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043b2:	4b08      	ldr	r3, [pc, #32]	; (80043d4 <HAL_RCC_ClockConfig+0x25c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f023 0207 	bic.w	r2, r3, #7
 80043ba:	4906      	ldr	r1, [pc, #24]	; (80043d4 <HAL_RCC_ClockConfig+0x25c>)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	4313      	orrs	r3, r2
 80043c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043c2:	4b04      	ldr	r3, [pc, #16]	; (80043d4 <HAL_RCC_ClockConfig+0x25c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d005      	beq.n	80043dc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e040      	b.n	8004456 <HAL_RCC_ClockConfig+0x2de>
 80043d4:	40022000 	.word	0x40022000
 80043d8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d008      	beq.n	80043fa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043e8:	4b1d      	ldr	r3, [pc, #116]	; (8004460 <HAL_RCC_ClockConfig+0x2e8>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	491a      	ldr	r1, [pc, #104]	; (8004460 <HAL_RCC_ClockConfig+0x2e8>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0308 	and.w	r3, r3, #8
 8004402:	2b00      	cmp	r3, #0
 8004404:	d009      	beq.n	800441a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004406:	4b16      	ldr	r3, [pc, #88]	; (8004460 <HAL_RCC_ClockConfig+0x2e8>)
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	4912      	ldr	r1, [pc, #72]	; (8004460 <HAL_RCC_ClockConfig+0x2e8>)
 8004416:	4313      	orrs	r3, r2
 8004418:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800441a:	f000 f829 	bl	8004470 <HAL_RCC_GetSysClockFreq>
 800441e:	4601      	mov	r1, r0
 8004420:	4b0f      	ldr	r3, [pc, #60]	; (8004460 <HAL_RCC_ClockConfig+0x2e8>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004428:	22f0      	movs	r2, #240	; 0xf0
 800442a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	fa92 f2a2 	rbit	r2, r2
 8004432:	60fa      	str	r2, [r7, #12]
  return result;
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	fab2 f282 	clz	r2, r2
 800443a:	b2d2      	uxtb	r2, r2
 800443c:	40d3      	lsrs	r3, r2
 800443e:	4a09      	ldr	r2, [pc, #36]	; (8004464 <HAL_RCC_ClockConfig+0x2ec>)
 8004440:	5cd3      	ldrb	r3, [r2, r3]
 8004442:	fa21 f303 	lsr.w	r3, r1, r3
 8004446:	4a08      	ldr	r2, [pc, #32]	; (8004468 <HAL_RCC_ClockConfig+0x2f0>)
 8004448:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800444a:	4b08      	ldr	r3, [pc, #32]	; (800446c <HAL_RCC_ClockConfig+0x2f4>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4618      	mov	r0, r3
 8004450:	f7fd fbe4 	bl	8001c1c <HAL_InitTick>
  
  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3778      	adds	r7, #120	; 0x78
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	40021000 	.word	0x40021000
 8004464:	0800d270 	.word	0x0800d270
 8004468:	20000004 	.word	0x20000004
 800446c:	20000008 	.word	0x20000008

08004470 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004470:	b480      	push	{r7}
 8004472:	b08b      	sub	sp, #44	; 0x2c
 8004474:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004476:	2300      	movs	r3, #0
 8004478:	61fb      	str	r3, [r7, #28]
 800447a:	2300      	movs	r3, #0
 800447c:	61bb      	str	r3, [r7, #24]
 800447e:	2300      	movs	r3, #0
 8004480:	627b      	str	r3, [r7, #36]	; 0x24
 8004482:	2300      	movs	r3, #0
 8004484:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004486:	2300      	movs	r3, #0
 8004488:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800448a:	4b2a      	ldr	r3, [pc, #168]	; (8004534 <HAL_RCC_GetSysClockFreq+0xc4>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	f003 030c 	and.w	r3, r3, #12
 8004496:	2b04      	cmp	r3, #4
 8004498:	d002      	beq.n	80044a0 <HAL_RCC_GetSysClockFreq+0x30>
 800449a:	2b08      	cmp	r3, #8
 800449c:	d003      	beq.n	80044a6 <HAL_RCC_GetSysClockFreq+0x36>
 800449e:	e03f      	b.n	8004520 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044a0:	4b25      	ldr	r3, [pc, #148]	; (8004538 <HAL_RCC_GetSysClockFreq+0xc8>)
 80044a2:	623b      	str	r3, [r7, #32]
      break;
 80044a4:	e03f      	b.n	8004526 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80044ac:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80044b0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	fa92 f2a2 	rbit	r2, r2
 80044b8:	607a      	str	r2, [r7, #4]
  return result;
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	fab2 f282 	clz	r2, r2
 80044c0:	b2d2      	uxtb	r2, r2
 80044c2:	40d3      	lsrs	r3, r2
 80044c4:	4a1d      	ldr	r2, [pc, #116]	; (800453c <HAL_RCC_GetSysClockFreq+0xcc>)
 80044c6:	5cd3      	ldrb	r3, [r2, r3]
 80044c8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80044ca:	4b1a      	ldr	r3, [pc, #104]	; (8004534 <HAL_RCC_GetSysClockFreq+0xc4>)
 80044cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	220f      	movs	r2, #15
 80044d4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	fa92 f2a2 	rbit	r2, r2
 80044dc:	60fa      	str	r2, [r7, #12]
  return result;
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	fab2 f282 	clz	r2, r2
 80044e4:	b2d2      	uxtb	r2, r2
 80044e6:	40d3      	lsrs	r3, r2
 80044e8:	4a15      	ldr	r2, [pc, #84]	; (8004540 <HAL_RCC_GetSysClockFreq+0xd0>)
 80044ea:	5cd3      	ldrb	r3, [r2, r3]
 80044ec:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d008      	beq.n	800450a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80044f8:	4a0f      	ldr	r2, [pc, #60]	; (8004538 <HAL_RCC_GetSysClockFreq+0xc8>)
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	fb02 f303 	mul.w	r3, r2, r3
 8004506:	627b      	str	r3, [r7, #36]	; 0x24
 8004508:	e007      	b.n	800451a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800450a:	4a0b      	ldr	r2, [pc, #44]	; (8004538 <HAL_RCC_GetSysClockFreq+0xc8>)
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	fb02 f303 	mul.w	r3, r2, r3
 8004518:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	623b      	str	r3, [r7, #32]
      break;
 800451e:	e002      	b.n	8004526 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004520:	4b05      	ldr	r3, [pc, #20]	; (8004538 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004522:	623b      	str	r3, [r7, #32]
      break;
 8004524:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004526:	6a3b      	ldr	r3, [r7, #32]
}
 8004528:	4618      	mov	r0, r3
 800452a:	372c      	adds	r7, #44	; 0x2c
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	40021000 	.word	0x40021000
 8004538:	007a1200 	.word	0x007a1200
 800453c:	0800d288 	.word	0x0800d288
 8004540:	0800d298 	.word	0x0800d298

08004544 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004548:	4b03      	ldr	r3, [pc, #12]	; (8004558 <HAL_RCC_GetHCLKFreq+0x14>)
 800454a:	681b      	ldr	r3, [r3, #0]
}
 800454c:	4618      	mov	r0, r3
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	20000004 	.word	0x20000004

0800455c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004562:	f7ff ffef 	bl	8004544 <HAL_RCC_GetHCLKFreq>
 8004566:	4601      	mov	r1, r0
 8004568:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004570:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004574:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	fa92 f2a2 	rbit	r2, r2
 800457c:	603a      	str	r2, [r7, #0]
  return result;
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	fab2 f282 	clz	r2, r2
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	40d3      	lsrs	r3, r2
 8004588:	4a04      	ldr	r2, [pc, #16]	; (800459c <HAL_RCC_GetPCLK1Freq+0x40>)
 800458a:	5cd3      	ldrb	r3, [r2, r3]
 800458c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004590:	4618      	mov	r0, r3
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	40021000 	.word	0x40021000
 800459c:	0800d280 	.word	0x0800d280

080045a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80045a6:	f7ff ffcd 	bl	8004544 <HAL_RCC_GetHCLKFreq>
 80045aa:	4601      	mov	r1, r0
 80045ac:	4b0b      	ldr	r3, [pc, #44]	; (80045dc <HAL_RCC_GetPCLK2Freq+0x3c>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80045b4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80045b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	fa92 f2a2 	rbit	r2, r2
 80045c0:	603a      	str	r2, [r7, #0]
  return result;
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	fab2 f282 	clz	r2, r2
 80045c8:	b2d2      	uxtb	r2, r2
 80045ca:	40d3      	lsrs	r3, r2
 80045cc:	4a04      	ldr	r2, [pc, #16]	; (80045e0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80045ce:	5cd3      	ldrb	r3, [r2, r3]
 80045d0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80045d4:	4618      	mov	r0, r3
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	40021000 	.word	0x40021000
 80045e0:	0800d280 	.word	0x0800d280

080045e4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	220f      	movs	r2, #15
 80045f2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80045f4:	4b12      	ldr	r3, [pc, #72]	; (8004640 <HAL_RCC_GetClockConfig+0x5c>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f003 0203 	and.w	r2, r3, #3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004600:	4b0f      	ldr	r3, [pc, #60]	; (8004640 <HAL_RCC_GetClockConfig+0x5c>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800460c:	4b0c      	ldr	r3, [pc, #48]	; (8004640 <HAL_RCC_GetClockConfig+0x5c>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004618:	4b09      	ldr	r3, [pc, #36]	; (8004640 <HAL_RCC_GetClockConfig+0x5c>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	08db      	lsrs	r3, r3, #3
 800461e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8004626:	4b07      	ldr	r3, [pc, #28]	; (8004644 <HAL_RCC_GetClockConfig+0x60>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0207 	and.w	r2, r3, #7
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	601a      	str	r2, [r3, #0]
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	40021000 	.word	0x40021000
 8004644:	40022000 	.word	0x40022000

08004648 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b092      	sub	sp, #72	; 0x48
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004650:	2300      	movs	r3, #0
 8004652:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004654:	2300      	movs	r3, #0
 8004656:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004658:	2300      	movs	r3, #0
 800465a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 80d4 	beq.w	8004814 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800466c:	4b4e      	ldr	r3, [pc, #312]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800466e:	69db      	ldr	r3, [r3, #28]
 8004670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10e      	bne.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004678:	4b4b      	ldr	r3, [pc, #300]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800467a:	69db      	ldr	r3, [r3, #28]
 800467c:	4a4a      	ldr	r2, [pc, #296]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800467e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004682:	61d3      	str	r3, [r2, #28]
 8004684:	4b48      	ldr	r3, [pc, #288]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800468c:	60bb      	str	r3, [r7, #8]
 800468e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004690:	2301      	movs	r3, #1
 8004692:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004696:	4b45      	ldr	r3, [pc, #276]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d118      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046a2:	4b42      	ldr	r3, [pc, #264]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a41      	ldr	r2, [pc, #260]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ae:	f7fd fc2b 	bl	8001f08 <HAL_GetTick>
 80046b2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b4:	e008      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046b6:	f7fd fc27 	bl	8001f08 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b64      	cmp	r3, #100	; 0x64
 80046c2:	d901      	bls.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e1d6      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c8:	4b38      	ldr	r3, [pc, #224]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d0f0      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046d4:	4b34      	ldr	r3, [pc, #208]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 8084 	beq.w	80047ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d07c      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046f4:	4b2c      	ldr	r3, [pc, #176]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004702:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004706:	fa93 f3a3 	rbit	r3, r3
 800470a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800470c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800470e:	fab3 f383 	clz	r3, r3
 8004712:	b2db      	uxtb	r3, r3
 8004714:	461a      	mov	r2, r3
 8004716:	4b26      	ldr	r3, [pc, #152]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004718:	4413      	add	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	461a      	mov	r2, r3
 800471e:	2301      	movs	r3, #1
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004726:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472a:	fa93 f3a3 	rbit	r3, r3
 800472e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004732:	fab3 f383 	clz	r3, r3
 8004736:	b2db      	uxtb	r3, r3
 8004738:	461a      	mov	r2, r3
 800473a:	4b1d      	ldr	r3, [pc, #116]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800473c:	4413      	add	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	461a      	mov	r2, r3
 8004742:	2300      	movs	r3, #0
 8004744:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004746:	4a18      	ldr	r2, [pc, #96]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800474a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800474c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	d04b      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004756:	f7fd fbd7 	bl	8001f08 <HAL_GetTick>
 800475a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800475c:	e00a      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800475e:	f7fd fbd3 	bl	8001f08 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	f241 3288 	movw	r2, #5000	; 0x1388
 800476c:	4293      	cmp	r3, r2
 800476e:	d901      	bls.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e180      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004774:	2302      	movs	r3, #2
 8004776:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477a:	fa93 f3a3 	rbit	r3, r3
 800477e:	627b      	str	r3, [r7, #36]	; 0x24
 8004780:	2302      	movs	r3, #2
 8004782:	623b      	str	r3, [r7, #32]
 8004784:	6a3b      	ldr	r3, [r7, #32]
 8004786:	fa93 f3a3 	rbit	r3, r3
 800478a:	61fb      	str	r3, [r7, #28]
  return result;
 800478c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800478e:	fab3 f383 	clz	r3, r3
 8004792:	b2db      	uxtb	r3, r3
 8004794:	095b      	lsrs	r3, r3, #5
 8004796:	b2db      	uxtb	r3, r3
 8004798:	f043 0302 	orr.w	r3, r3, #2
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d108      	bne.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80047a2:	4b01      	ldr	r3, [pc, #4]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	e00d      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80047a8:	40021000 	.word	0x40021000
 80047ac:	40007000 	.word	0x40007000
 80047b0:	10908100 	.word	0x10908100
 80047b4:	2302      	movs	r3, #2
 80047b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	fa93 f3a3 	rbit	r3, r3
 80047be:	617b      	str	r3, [r7, #20]
 80047c0:	4b9a      	ldr	r3, [pc, #616]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	2202      	movs	r2, #2
 80047c6:	613a      	str	r2, [r7, #16]
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	fa92 f2a2 	rbit	r2, r2
 80047ce:	60fa      	str	r2, [r7, #12]
  return result;
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	fab2 f282 	clz	r2, r2
 80047d6:	b2d2      	uxtb	r2, r2
 80047d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047dc:	b2d2      	uxtb	r2, r2
 80047de:	f002 021f 	and.w	r2, r2, #31
 80047e2:	2101      	movs	r1, #1
 80047e4:	fa01 f202 	lsl.w	r2, r1, r2
 80047e8:	4013      	ands	r3, r2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d0b7      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80047ee:	4b8f      	ldr	r3, [pc, #572]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	498c      	ldr	r1, [pc, #560]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004800:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004804:	2b01      	cmp	r3, #1
 8004806:	d105      	bne.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004808:	4b88      	ldr	r3, [pc, #544]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800480a:	69db      	ldr	r3, [r3, #28]
 800480c:	4a87      	ldr	r2, [pc, #540]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800480e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004812:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b00      	cmp	r3, #0
 800481e:	d008      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004820:	4b82      	ldr	r3, [pc, #520]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004824:	f023 0203 	bic.w	r2, r3, #3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	497f      	ldr	r1, [pc, #508]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800482e:	4313      	orrs	r3, r2
 8004830:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d008      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800483e:	4b7b      	ldr	r3, [pc, #492]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004842:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	4978      	ldr	r1, [pc, #480]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800484c:	4313      	orrs	r3, r2
 800484e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0304 	and.w	r3, r3, #4
 8004858:	2b00      	cmp	r3, #0
 800485a:	d008      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800485c:	4b73      	ldr	r3, [pc, #460]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800485e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004860:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	4970      	ldr	r1, [pc, #448]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800486a:	4313      	orrs	r3, r2
 800486c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0320 	and.w	r3, r3, #32
 8004876:	2b00      	cmp	r3, #0
 8004878:	d008      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800487a:	4b6c      	ldr	r3, [pc, #432]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800487c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487e:	f023 0210 	bic.w	r2, r3, #16
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	4969      	ldr	r1, [pc, #420]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004888:	4313      	orrs	r3, r2
 800488a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d008      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004898:	4b64      	ldr	r3, [pc, #400]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a4:	4961      	ldr	r1, [pc, #388]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d008      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048b6:	4b5d      	ldr	r3, [pc, #372]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ba:	f023 0220 	bic.w	r2, r3, #32
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	495a      	ldr	r1, [pc, #360]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d008      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048d4:	4b55      	ldr	r3, [pc, #340]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e0:	4952      	ldr	r1, [pc, #328]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0308 	and.w	r3, r3, #8
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d008      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048f2:	4b4e      	ldr	r3, [pc, #312]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	494b      	ldr	r1, [pc, #300]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004900:	4313      	orrs	r3, r2
 8004902:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0310 	and.w	r3, r3, #16
 800490c:	2b00      	cmp	r3, #0
 800490e:	d008      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004910:	4b46      	ldr	r3, [pc, #280]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004914:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	4943      	ldr	r1, [pc, #268]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800491e:	4313      	orrs	r3, r2
 8004920:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800492a:	2b00      	cmp	r3, #0
 800492c:	d008      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800492e:	4b3f      	ldr	r3, [pc, #252]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493a:	493c      	ldr	r1, [pc, #240]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800493c:	4313      	orrs	r3, r2
 800493e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004948:	2b00      	cmp	r3, #0
 800494a:	d008      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800494c:	4b37      	ldr	r3, [pc, #220]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800494e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004950:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004958:	4934      	ldr	r1, [pc, #208]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800495a:	4313      	orrs	r3, r2
 800495c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004966:	2b00      	cmp	r3, #0
 8004968:	d008      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800496a:	4b30      	ldr	r3, [pc, #192]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800496c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004976:	492d      	ldr	r1, [pc, #180]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004978:	4313      	orrs	r3, r2
 800497a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d008      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004988:	4b28      	ldr	r3, [pc, #160]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800498a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004994:	4925      	ldr	r1, [pc, #148]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004996:	4313      	orrs	r3, r2
 8004998:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d008      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80049a6:	4b21      	ldr	r3, [pc, #132]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049aa:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	491e      	ldr	r1, [pc, #120]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d008      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80049c4:	4b19      	ldr	r3, [pc, #100]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d0:	4916      	ldr	r1, [pc, #88]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d008      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80049e2:	4b12      	ldr	r3, [pc, #72]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ee:	490f      	ldr	r1, [pc, #60]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d008      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004a00:	4b0a      	ldr	r3, [pc, #40]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a04:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a0c:	4907      	ldr	r1, [pc, #28]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00c      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004a1e:	4b03      	ldr	r3, [pc, #12]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a22:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	e002      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004a2a:	bf00      	nop
 8004a2c:	40021000 	.word	0x40021000
 8004a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a32:	4913      	ldr	r1, [pc, #76]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d008      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004a44:	4b0e      	ldr	r3, [pc, #56]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a50:	490b      	ldr	r1, [pc, #44]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d008      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004a62:	4b07      	ldr	r3, [pc, #28]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a66:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a6e:	4904      	ldr	r1, [pc, #16]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3748      	adds	r7, #72	; 0x48
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	40021000 	.word	0x40021000

08004a84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e09d      	b.n	8004bd2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d108      	bne.n	8004ab0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aa6:	d009      	beq.n	8004abc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	61da      	str	r2, [r3, #28]
 8004aae:	e005      	b.n	8004abc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d106      	bne.n	8004adc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7fc ffe2 	bl	8001aa0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004af2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004afc:	d902      	bls.n	8004b04 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004afe:	2300      	movs	r3, #0
 8004b00:	60fb      	str	r3, [r7, #12]
 8004b02:	e002      	b.n	8004b0a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b08:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004b12:	d007      	beq.n	8004b24 <HAL_SPI_Init+0xa0>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b1c:	d002      	beq.n	8004b24 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b34:	431a      	orrs	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b52:	431a      	orrs	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	69db      	ldr	r3, [r3, #28]
 8004b58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b66:	ea42 0103 	orr.w	r1, r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	430a      	orrs	r2, r1
 8004b78:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	0c1b      	lsrs	r3, r3, #16
 8004b80:	f003 0204 	and.w	r2, r3, #4
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b88:	f003 0310 	and.w	r3, r3, #16
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b92:	f003 0308 	and.w	r3, r3, #8
 8004b96:	431a      	orrs	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004ba0:	ea42 0103 	orr.w	r1, r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	69da      	ldr	r2, [r3, #28]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bc0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b088      	sub	sp, #32
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	60f8      	str	r0, [r7, #12]
 8004be2:	60b9      	str	r1, [r7, #8]
 8004be4:	603b      	str	r3, [r7, #0]
 8004be6:	4613      	mov	r3, r2
 8004be8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004bea:	2300      	movs	r3, #0
 8004bec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d101      	bne.n	8004bfc <HAL_SPI_Transmit+0x22>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	e15f      	b.n	8004ebc <HAL_SPI_Transmit+0x2e2>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c04:	f7fd f980 	bl	8001f08 <HAL_GetTick>
 8004c08:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c0a:	88fb      	ldrh	r3, [r7, #6]
 8004c0c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d002      	beq.n	8004c20 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c1e:	e148      	b.n	8004eb2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d002      	beq.n	8004c2c <HAL_SPI_Transmit+0x52>
 8004c26:	88fb      	ldrh	r3, [r7, #6]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d102      	bne.n	8004c32 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c30:	e13f      	b.n	8004eb2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2203      	movs	r2, #3
 8004c36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	88fa      	ldrh	r2, [r7, #6]
 8004c4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	88fa      	ldrh	r2, [r7, #6]
 8004c50:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c7c:	d10f      	bne.n	8004c9e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c9c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca8:	2b40      	cmp	r3, #64	; 0x40
 8004caa:	d007      	beq.n	8004cbc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cc4:	d94f      	bls.n	8004d66 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d002      	beq.n	8004cd4 <HAL_SPI_Transmit+0xfa>
 8004cce:	8afb      	ldrh	r3, [r7, #22]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d142      	bne.n	8004d5a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd8:	881a      	ldrh	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce4:	1c9a      	adds	r2, r3, #2
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004cf8:	e02f      	b.n	8004d5a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d112      	bne.n	8004d2e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0c:	881a      	ldrh	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d18:	1c9a      	adds	r2, r3, #2
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	3b01      	subs	r3, #1
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d2c:	e015      	b.n	8004d5a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d2e:	f7fd f8eb 	bl	8001f08 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d803      	bhi.n	8004d46 <HAL_SPI_Transmit+0x16c>
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d44:	d102      	bne.n	8004d4c <HAL_SPI_Transmit+0x172>
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d106      	bne.n	8004d5a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004d58:	e0ab      	b.n	8004eb2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1ca      	bne.n	8004cfa <HAL_SPI_Transmit+0x120>
 8004d64:	e080      	b.n	8004e68 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d002      	beq.n	8004d74 <HAL_SPI_Transmit+0x19a>
 8004d6e:	8afb      	ldrh	r3, [r7, #22]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d174      	bne.n	8004e5e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d912      	bls.n	8004da4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d82:	881a      	ldrh	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8e:	1c9a      	adds	r2, r3, #2
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	3b02      	subs	r3, #2
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004da2:	e05c      	b.n	8004e5e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	330c      	adds	r3, #12
 8004dae:	7812      	ldrb	r2, [r2, #0]
 8004db0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004dca:	e048      	b.n	8004e5e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d12b      	bne.n	8004e32 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d912      	bls.n	8004e0a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de8:	881a      	ldrh	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df4:	1c9a      	adds	r2, r3, #2
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	3b02      	subs	r3, #2
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e08:	e029      	b.n	8004e5e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	330c      	adds	r3, #12
 8004e14:	7812      	ldrb	r2, [r2, #0]
 8004e16:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1c:	1c5a      	adds	r2, r3, #1
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e30:	e015      	b.n	8004e5e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e32:	f7fd f869 	bl	8001f08 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	683a      	ldr	r2, [r7, #0]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d803      	bhi.n	8004e4a <HAL_SPI_Transmit+0x270>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e48:	d102      	bne.n	8004e50 <HAL_SPI_Transmit+0x276>
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d106      	bne.n	8004e5e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004e5c:	e029      	b.n	8004eb2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1b1      	bne.n	8004dcc <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	6839      	ldr	r1, [r7, #0]
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f000 fb77 	bl	8005560 <SPI_EndRxTxTransaction>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d002      	beq.n	8004e7e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10a      	bne.n	8004e9c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e86:	2300      	movs	r3, #0
 8004e88:	613b      	str	r3, [r7, #16]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	613b      	str	r3, [r7, #16]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	613b      	str	r3, [r7, #16]
 8004e9a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d002      	beq.n	8004eaa <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	77fb      	strb	r3, [r7, #31]
 8004ea8:	e003      	b.n	8004eb2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004eba:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3720      	adds	r7, #32
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b08a      	sub	sp, #40	; 0x28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
 8004ed0:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d101      	bne.n	8004eea <HAL_SPI_TransmitReceive+0x26>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	e20a      	b.n	8005300 <HAL_SPI_TransmitReceive+0x43c>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ef2:	f7fd f809 	bl	8001f08 <HAL_GetTick>
 8004ef6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004efe:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004f06:	887b      	ldrh	r3, [r7, #2]
 8004f08:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004f0a:	887b      	ldrh	r3, [r7, #2]
 8004f0c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f0e:	7efb      	ldrb	r3, [r7, #27]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d00e      	beq.n	8004f32 <HAL_SPI_TransmitReceive+0x6e>
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f1a:	d106      	bne.n	8004f2a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d102      	bne.n	8004f2a <HAL_SPI_TransmitReceive+0x66>
 8004f24:	7efb      	ldrb	r3, [r7, #27]
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d003      	beq.n	8004f32 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004f30:	e1e0      	b.n	80052f4 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d005      	beq.n	8004f44 <HAL_SPI_TransmitReceive+0x80>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d002      	beq.n	8004f44 <HAL_SPI_TransmitReceive+0x80>
 8004f3e:	887b      	ldrh	r3, [r7, #2]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d103      	bne.n	8004f4c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004f4a:	e1d3      	b.n	80052f4 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b04      	cmp	r3, #4
 8004f56:	d003      	beq.n	8004f60 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2205      	movs	r2, #5
 8004f5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	887a      	ldrh	r2, [r7, #2]
 8004f70:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	887a      	ldrh	r2, [r7, #2]
 8004f78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	887a      	ldrh	r2, [r7, #2]
 8004f86:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	887a      	ldrh	r2, [r7, #2]
 8004f8c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fa2:	d802      	bhi.n	8004faa <HAL_SPI_TransmitReceive+0xe6>
 8004fa4:	8a3b      	ldrh	r3, [r7, #16]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d908      	bls.n	8004fbc <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004fb8:	605a      	str	r2, [r3, #4]
 8004fba:	e007      	b.n	8004fcc <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685a      	ldr	r2, [r3, #4]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004fca:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd6:	2b40      	cmp	r3, #64	; 0x40
 8004fd8:	d007      	beq.n	8004fea <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fe8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ff2:	f240 8081 	bls.w	80050f8 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d002      	beq.n	8005004 <HAL_SPI_TransmitReceive+0x140>
 8004ffe:	8a7b      	ldrh	r3, [r7, #18]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d16d      	bne.n	80050e0 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005008:	881a      	ldrh	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005014:	1c9a      	adds	r2, r3, #2
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800501e:	b29b      	uxth	r3, r3
 8005020:	3b01      	subs	r3, #1
 8005022:	b29a      	uxth	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005028:	e05a      	b.n	80050e0 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b02      	cmp	r3, #2
 8005036:	d11b      	bne.n	8005070 <HAL_SPI_TransmitReceive+0x1ac>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800503c:	b29b      	uxth	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d016      	beq.n	8005070 <HAL_SPI_TransmitReceive+0x1ac>
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	2b01      	cmp	r3, #1
 8005046:	d113      	bne.n	8005070 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504c:	881a      	ldrh	r2, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005058:	1c9a      	adds	r2, r3, #2
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005062:	b29b      	uxth	r3, r3
 8005064:	3b01      	subs	r3, #1
 8005066:	b29a      	uxth	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800506c:	2300      	movs	r3, #0
 800506e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b01      	cmp	r3, #1
 800507c:	d11c      	bne.n	80050b8 <HAL_SPI_TransmitReceive+0x1f4>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005084:	b29b      	uxth	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d016      	beq.n	80050b8 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68da      	ldr	r2, [r3, #12]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005094:	b292      	uxth	r2, r2
 8005096:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509c:	1c9a      	adds	r2, r3, #2
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	3b01      	subs	r3, #1
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050b4:	2301      	movs	r3, #1
 80050b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80050b8:	f7fc ff26 	bl	8001f08 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d80b      	bhi.n	80050e0 <HAL_SPI_TransmitReceive+0x21c>
 80050c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ce:	d007      	beq.n	80050e0 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80050de:	e109      	b.n	80052f4 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d19f      	bne.n	800502a <HAL_SPI_TransmitReceive+0x166>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d199      	bne.n	800502a <HAL_SPI_TransmitReceive+0x166>
 80050f6:	e0e3      	b.n	80052c0 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d003      	beq.n	8005108 <HAL_SPI_TransmitReceive+0x244>
 8005100:	8a7b      	ldrh	r3, [r7, #18]
 8005102:	2b01      	cmp	r3, #1
 8005104:	f040 80cf 	bne.w	80052a6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800510c:	b29b      	uxth	r3, r3
 800510e:	2b01      	cmp	r3, #1
 8005110:	d912      	bls.n	8005138 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005116:	881a      	ldrh	r2, [r3, #0]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005122:	1c9a      	adds	r2, r3, #2
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800512c:	b29b      	uxth	r3, r3
 800512e:	3b02      	subs	r3, #2
 8005130:	b29a      	uxth	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005136:	e0b6      	b.n	80052a6 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	330c      	adds	r3, #12
 8005142:	7812      	ldrb	r2, [r2, #0]
 8005144:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514a:	1c5a      	adds	r2, r3, #1
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005154:	b29b      	uxth	r3, r3
 8005156:	3b01      	subs	r3, #1
 8005158:	b29a      	uxth	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800515e:	e0a2      	b.n	80052a6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f003 0302 	and.w	r3, r3, #2
 800516a:	2b02      	cmp	r3, #2
 800516c:	d134      	bne.n	80051d8 <HAL_SPI_TransmitReceive+0x314>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005172:	b29b      	uxth	r3, r3
 8005174:	2b00      	cmp	r3, #0
 8005176:	d02f      	beq.n	80051d8 <HAL_SPI_TransmitReceive+0x314>
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	2b01      	cmp	r3, #1
 800517c:	d12c      	bne.n	80051d8 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005182:	b29b      	uxth	r3, r3
 8005184:	2b01      	cmp	r3, #1
 8005186:	d912      	bls.n	80051ae <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518c:	881a      	ldrh	r2, [r3, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005198:	1c9a      	adds	r2, r3, #2
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	3b02      	subs	r3, #2
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051ac:	e012      	b.n	80051d4 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	330c      	adds	r3, #12
 80051b8:	7812      	ldrb	r2, [r2, #0]
 80051ba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c0:	1c5a      	adds	r2, r3, #1
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	3b01      	subs	r3, #1
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051d4:	2300      	movs	r3, #0
 80051d6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d148      	bne.n	8005278 <HAL_SPI_TransmitReceive+0x3b4>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d042      	beq.n	8005278 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d923      	bls.n	8005246 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68da      	ldr	r2, [r3, #12]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005208:	b292      	uxth	r2, r2
 800520a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005210:	1c9a      	adds	r2, r3, #2
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800521c:	b29b      	uxth	r3, r3
 800521e:	3b02      	subs	r3, #2
 8005220:	b29a      	uxth	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800522e:	b29b      	uxth	r3, r3
 8005230:	2b01      	cmp	r3, #1
 8005232:	d81f      	bhi.n	8005274 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005242:	605a      	str	r2, [r3, #4]
 8005244:	e016      	b.n	8005274 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f103 020c 	add.w	r2, r3, #12
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005252:	7812      	ldrb	r2, [r2, #0]
 8005254:	b2d2      	uxtb	r2, r2
 8005256:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525c:	1c5a      	adds	r2, r3, #1
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005268:	b29b      	uxth	r3, r3
 800526a:	3b01      	subs	r3, #1
 800526c:	b29a      	uxth	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005274:	2301      	movs	r3, #1
 8005276:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005278:	f7fc fe46 	bl	8001f08 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005284:	429a      	cmp	r2, r3
 8005286:	d803      	bhi.n	8005290 <HAL_SPI_TransmitReceive+0x3cc>
 8005288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528e:	d102      	bne.n	8005296 <HAL_SPI_TransmitReceive+0x3d2>
 8005290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005292:	2b00      	cmp	r3, #0
 8005294:	d107      	bne.n	80052a6 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80052a4:	e026      	b.n	80052f4 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f47f af57 	bne.w	8005160 <HAL_SPI_TransmitReceive+0x29c>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f47f af50 	bne.w	8005160 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052c0:	69fa      	ldr	r2, [r7, #28]
 80052c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f000 f94b 	bl	8005560 <SPI_EndRxTxTransaction>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d005      	beq.n	80052dc <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2220      	movs	r2, #32
 80052da:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d003      	beq.n	80052ec <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ea:	e003      	b.n	80052f4 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80052fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005300:	4618      	mov	r0, r3
 8005302:	3728      	adds	r7, #40	; 0x28
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005316:	b2db      	uxtb	r3, r3
}
 8005318:	4618      	mov	r0, r3
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b088      	sub	sp, #32
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	603b      	str	r3, [r7, #0]
 8005330:	4613      	mov	r3, r2
 8005332:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005334:	f7fc fde8 	bl	8001f08 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533c:	1a9b      	subs	r3, r3, r2
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	4413      	add	r3, r2
 8005342:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005344:	f7fc fde0 	bl	8001f08 <HAL_GetTick>
 8005348:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800534a:	4b39      	ldr	r3, [pc, #228]	; (8005430 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	015b      	lsls	r3, r3, #5
 8005350:	0d1b      	lsrs	r3, r3, #20
 8005352:	69fa      	ldr	r2, [r7, #28]
 8005354:	fb02 f303 	mul.w	r3, r2, r3
 8005358:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800535a:	e054      	b.n	8005406 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005362:	d050      	beq.n	8005406 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005364:	f7fc fdd0 	bl	8001f08 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	69fa      	ldr	r2, [r7, #28]
 8005370:	429a      	cmp	r2, r3
 8005372:	d902      	bls.n	800537a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d13d      	bne.n	80053f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005388:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005392:	d111      	bne.n	80053b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800539c:	d004      	beq.n	80053a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053a6:	d107      	bne.n	80053b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053c0:	d10f      	bne.n	80053e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053d0:	601a      	str	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e017      	b.n	8005426 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053fc:	2300      	movs	r3, #0
 80053fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	3b01      	subs	r3, #1
 8005404:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	689a      	ldr	r2, [r3, #8]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	4013      	ands	r3, r2
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	429a      	cmp	r2, r3
 8005414:	bf0c      	ite	eq
 8005416:	2301      	moveq	r3, #1
 8005418:	2300      	movne	r3, #0
 800541a:	b2db      	uxtb	r3, r3
 800541c:	461a      	mov	r2, r3
 800541e:	79fb      	ldrb	r3, [r7, #7]
 8005420:	429a      	cmp	r2, r3
 8005422:	d19b      	bne.n	800535c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3720      	adds	r7, #32
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	20000004 	.word	0x20000004

08005434 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b08a      	sub	sp, #40	; 0x28
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
 8005440:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005442:	2300      	movs	r3, #0
 8005444:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005446:	f7fc fd5f 	bl	8001f08 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544e:	1a9b      	subs	r3, r3, r2
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	4413      	add	r3, r2
 8005454:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005456:	f7fc fd57 	bl	8001f08 <HAL_GetTick>
 800545a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	330c      	adds	r3, #12
 8005462:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005464:	4b3d      	ldr	r3, [pc, #244]	; (800555c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	4613      	mov	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4413      	add	r3, r2
 800546e:	00da      	lsls	r2, r3, #3
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	0d1b      	lsrs	r3, r3, #20
 8005474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005476:	fb02 f303 	mul.w	r3, r2, r3
 800547a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800547c:	e060      	b.n	8005540 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005484:	d107      	bne.n	8005496 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d104      	bne.n	8005496 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	b2db      	uxtb	r3, r3
 8005492:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005494:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549c:	d050      	beq.n	8005540 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800549e:	f7fc fd33 	bl	8001f08 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d902      	bls.n	80054b4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d13d      	bne.n	8005530 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054cc:	d111      	bne.n	80054f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054d6:	d004      	beq.n	80054e2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e0:	d107      	bne.n	80054f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054fa:	d10f      	bne.n	800551c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800551a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e010      	b.n	8005552 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005536:	2300      	movs	r3, #0
 8005538:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	3b01      	subs	r3, #1
 800553e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689a      	ldr	r2, [r3, #8]
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	4013      	ands	r3, r2
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	429a      	cmp	r2, r3
 800554e:	d196      	bne.n	800547e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3728      	adds	r7, #40	; 0x28
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	20000004 	.word	0x20000004

08005560 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af02      	add	r7, sp, #8
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	2200      	movs	r2, #0
 8005574:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f7ff ff5b 	bl	8005434 <SPI_WaitFifoStateUntilTimeout>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d007      	beq.n	8005594 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005588:	f043 0220 	orr.w	r2, r3, #32
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e027      	b.n	80055e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	2200      	movs	r2, #0
 800559c:	2180      	movs	r1, #128	; 0x80
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f7ff fec0 	bl	8005324 <SPI_WaitFlagStateUntilTimeout>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d007      	beq.n	80055ba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ae:	f043 0220 	orr.w	r2, r3, #32
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e014      	b.n	80055e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f7ff ff34 	bl	8005434 <SPI_WaitFifoStateUntilTimeout>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d007      	beq.n	80055e2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055d6:	f043 0220 	orr.w	r2, r3, #32
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e000      	b.n	80055e4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e049      	b.n	8005692 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d106      	bne.n	8005618 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7fc fa86 	bl	8001b24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2202      	movs	r2, #2
 800561c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	3304      	adds	r3, #4
 8005628:	4619      	mov	r1, r3
 800562a:	4610      	mov	r0, r2
 800562c:	f000 fb1e 	bl	8005c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
	...

0800569c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d001      	beq.n	80056b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e047      	b.n	8005744 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a23      	ldr	r2, [pc, #140]	; (8005750 <HAL_TIM_Base_Start+0xb4>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d01d      	beq.n	8005702 <HAL_TIM_Base_Start+0x66>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ce:	d018      	beq.n	8005702 <HAL_TIM_Base_Start+0x66>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a1f      	ldr	r2, [pc, #124]	; (8005754 <HAL_TIM_Base_Start+0xb8>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d013      	beq.n	8005702 <HAL_TIM_Base_Start+0x66>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a1e      	ldr	r2, [pc, #120]	; (8005758 <HAL_TIM_Base_Start+0xbc>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d00e      	beq.n	8005702 <HAL_TIM_Base_Start+0x66>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a1c      	ldr	r2, [pc, #112]	; (800575c <HAL_TIM_Base_Start+0xc0>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d009      	beq.n	8005702 <HAL_TIM_Base_Start+0x66>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a1b      	ldr	r2, [pc, #108]	; (8005760 <HAL_TIM_Base_Start+0xc4>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d004      	beq.n	8005702 <HAL_TIM_Base_Start+0x66>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a19      	ldr	r2, [pc, #100]	; (8005764 <HAL_TIM_Base_Start+0xc8>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d115      	bne.n	800572e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	689a      	ldr	r2, [r3, #8]
 8005708:	4b17      	ldr	r3, [pc, #92]	; (8005768 <HAL_TIM_Base_Start+0xcc>)
 800570a:	4013      	ands	r3, r2
 800570c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2b06      	cmp	r3, #6
 8005712:	d015      	beq.n	8005740 <HAL_TIM_Base_Start+0xa4>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800571a:	d011      	beq.n	8005740 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f042 0201 	orr.w	r2, r2, #1
 800572a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800572c:	e008      	b.n	8005740 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f042 0201 	orr.w	r2, r2, #1
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	e000      	b.n	8005742 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005740:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr
 8005750:	40012c00 	.word	0x40012c00
 8005754:	40000400 	.word	0x40000400
 8005758:	40000800 	.word	0x40000800
 800575c:	40013400 	.word	0x40013400
 8005760:	40014000 	.word	0x40014000
 8005764:	40015000 	.word	0x40015000
 8005768:	00010007 	.word	0x00010007

0800576c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b01      	cmp	r3, #1
 800577e:	d001      	beq.n	8005784 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e04f      	b.n	8005824 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2202      	movs	r2, #2
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68da      	ldr	r2, [r3, #12]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f042 0201 	orr.w	r2, r2, #1
 800579a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a23      	ldr	r2, [pc, #140]	; (8005830 <HAL_TIM_Base_Start_IT+0xc4>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d01d      	beq.n	80057e2 <HAL_TIM_Base_Start_IT+0x76>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ae:	d018      	beq.n	80057e2 <HAL_TIM_Base_Start_IT+0x76>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a1f      	ldr	r2, [pc, #124]	; (8005834 <HAL_TIM_Base_Start_IT+0xc8>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d013      	beq.n	80057e2 <HAL_TIM_Base_Start_IT+0x76>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a1e      	ldr	r2, [pc, #120]	; (8005838 <HAL_TIM_Base_Start_IT+0xcc>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d00e      	beq.n	80057e2 <HAL_TIM_Base_Start_IT+0x76>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a1c      	ldr	r2, [pc, #112]	; (800583c <HAL_TIM_Base_Start_IT+0xd0>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d009      	beq.n	80057e2 <HAL_TIM_Base_Start_IT+0x76>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a1b      	ldr	r2, [pc, #108]	; (8005840 <HAL_TIM_Base_Start_IT+0xd4>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d004      	beq.n	80057e2 <HAL_TIM_Base_Start_IT+0x76>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a19      	ldr	r2, [pc, #100]	; (8005844 <HAL_TIM_Base_Start_IT+0xd8>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d115      	bne.n	800580e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	689a      	ldr	r2, [r3, #8]
 80057e8:	4b17      	ldr	r3, [pc, #92]	; (8005848 <HAL_TIM_Base_Start_IT+0xdc>)
 80057ea:	4013      	ands	r3, r2
 80057ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2b06      	cmp	r3, #6
 80057f2:	d015      	beq.n	8005820 <HAL_TIM_Base_Start_IT+0xb4>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057fa:	d011      	beq.n	8005820 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f042 0201 	orr.w	r2, r2, #1
 800580a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800580c:	e008      	b.n	8005820 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f042 0201 	orr.w	r2, r2, #1
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	e000      	b.n	8005822 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005820:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	40012c00 	.word	0x40012c00
 8005834:	40000400 	.word	0x40000400
 8005838:	40000800 	.word	0x40000800
 800583c:	40013400 	.word	0x40013400
 8005840:	40014000 	.word	0x40014000
 8005844:	40015000 	.word	0x40015000
 8005848:	00010007 	.word	0x00010007

0800584c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	f003 0302 	and.w	r3, r3, #2
 800585e:	2b02      	cmp	r3, #2
 8005860:	d122      	bne.n	80058a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	f003 0302 	and.w	r3, r3, #2
 800586c:	2b02      	cmp	r3, #2
 800586e:	d11b      	bne.n	80058a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f06f 0202 	mvn.w	r2, #2
 8005878:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	f003 0303 	and.w	r3, r3, #3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f9ce 	bl	8005c30 <HAL_TIM_IC_CaptureCallback>
 8005894:	e005      	b.n	80058a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f9c0 	bl	8005c1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 f9d1 	bl	8005c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	f003 0304 	and.w	r3, r3, #4
 80058b2:	2b04      	cmp	r3, #4
 80058b4:	d122      	bne.n	80058fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	f003 0304 	and.w	r3, r3, #4
 80058c0:	2b04      	cmp	r3, #4
 80058c2:	d11b      	bne.n	80058fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f06f 0204 	mvn.w	r2, #4
 80058cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2202      	movs	r2, #2
 80058d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d003      	beq.n	80058ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f9a4 	bl	8005c30 <HAL_TIM_IC_CaptureCallback>
 80058e8:	e005      	b.n	80058f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f996 	bl	8005c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 f9a7 	bl	8005c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	f003 0308 	and.w	r3, r3, #8
 8005906:	2b08      	cmp	r3, #8
 8005908:	d122      	bne.n	8005950 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	f003 0308 	and.w	r3, r3, #8
 8005914:	2b08      	cmp	r3, #8
 8005916:	d11b      	bne.n	8005950 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f06f 0208 	mvn.w	r2, #8
 8005920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2204      	movs	r2, #4
 8005926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	69db      	ldr	r3, [r3, #28]
 800592e:	f003 0303 	and.w	r3, r3, #3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f97a 	bl	8005c30 <HAL_TIM_IC_CaptureCallback>
 800593c:	e005      	b.n	800594a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 f96c 	bl	8005c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 f97d 	bl	8005c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	f003 0310 	and.w	r3, r3, #16
 800595a:	2b10      	cmp	r3, #16
 800595c:	d122      	bne.n	80059a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	f003 0310 	and.w	r3, r3, #16
 8005968:	2b10      	cmp	r3, #16
 800596a:	d11b      	bne.n	80059a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f06f 0210 	mvn.w	r2, #16
 8005974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2208      	movs	r2, #8
 800597a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	69db      	ldr	r3, [r3, #28]
 8005982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f950 	bl	8005c30 <HAL_TIM_IC_CaptureCallback>
 8005990:	e005      	b.n	800599e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f942 	bl	8005c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f953 	bl	8005c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d10e      	bne.n	80059d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	f003 0301 	and.w	r3, r3, #1
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d107      	bne.n	80059d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f06f 0201 	mvn.w	r2, #1
 80059c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f7fb ffcc 	bl	8001968 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059da:	2b80      	cmp	r3, #128	; 0x80
 80059dc:	d10e      	bne.n	80059fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e8:	2b80      	cmp	r3, #128	; 0x80
 80059ea:	d107      	bne.n	80059fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 fb06 	bl	8006008 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a0a:	d10e      	bne.n	8005a2a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a16:	2b80      	cmp	r3, #128	; 0x80
 8005a18:	d107      	bne.n	8005a2a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 faf9 	bl	800601c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a34:	2b40      	cmp	r3, #64	; 0x40
 8005a36:	d10e      	bne.n	8005a56 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a42:	2b40      	cmp	r3, #64	; 0x40
 8005a44:	d107      	bne.n	8005a56 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f901 	bl	8005c58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	f003 0320 	and.w	r3, r3, #32
 8005a60:	2b20      	cmp	r3, #32
 8005a62:	d10e      	bne.n	8005a82 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	f003 0320 	and.w	r3, r3, #32
 8005a6e:	2b20      	cmp	r3, #32
 8005a70:	d107      	bne.n	8005a82 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f06f 0220 	mvn.w	r2, #32
 8005a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 fab9 	bl	8005ff4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a82:	bf00      	nop
 8005a84:	3708      	adds	r7, #8
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b084      	sub	sp, #16
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
 8005a92:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a94:	2300      	movs	r3, #0
 8005a96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d101      	bne.n	8005aa6 <HAL_TIM_ConfigClockSource+0x1c>
 8005aa2:	2302      	movs	r3, #2
 8005aa4:	e0b6      	b.n	8005c14 <HAL_TIM_ConfigClockSource+0x18a>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2202      	movs	r2, #2
 8005ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ac4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ac8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ad0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ae2:	d03e      	beq.n	8005b62 <HAL_TIM_ConfigClockSource+0xd8>
 8005ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ae8:	f200 8087 	bhi.w	8005bfa <HAL_TIM_ConfigClockSource+0x170>
 8005aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005af0:	f000 8086 	beq.w	8005c00 <HAL_TIM_ConfigClockSource+0x176>
 8005af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005af8:	d87f      	bhi.n	8005bfa <HAL_TIM_ConfigClockSource+0x170>
 8005afa:	2b70      	cmp	r3, #112	; 0x70
 8005afc:	d01a      	beq.n	8005b34 <HAL_TIM_ConfigClockSource+0xaa>
 8005afe:	2b70      	cmp	r3, #112	; 0x70
 8005b00:	d87b      	bhi.n	8005bfa <HAL_TIM_ConfigClockSource+0x170>
 8005b02:	2b60      	cmp	r3, #96	; 0x60
 8005b04:	d050      	beq.n	8005ba8 <HAL_TIM_ConfigClockSource+0x11e>
 8005b06:	2b60      	cmp	r3, #96	; 0x60
 8005b08:	d877      	bhi.n	8005bfa <HAL_TIM_ConfigClockSource+0x170>
 8005b0a:	2b50      	cmp	r3, #80	; 0x50
 8005b0c:	d03c      	beq.n	8005b88 <HAL_TIM_ConfigClockSource+0xfe>
 8005b0e:	2b50      	cmp	r3, #80	; 0x50
 8005b10:	d873      	bhi.n	8005bfa <HAL_TIM_ConfigClockSource+0x170>
 8005b12:	2b40      	cmp	r3, #64	; 0x40
 8005b14:	d058      	beq.n	8005bc8 <HAL_TIM_ConfigClockSource+0x13e>
 8005b16:	2b40      	cmp	r3, #64	; 0x40
 8005b18:	d86f      	bhi.n	8005bfa <HAL_TIM_ConfigClockSource+0x170>
 8005b1a:	2b30      	cmp	r3, #48	; 0x30
 8005b1c:	d064      	beq.n	8005be8 <HAL_TIM_ConfigClockSource+0x15e>
 8005b1e:	2b30      	cmp	r3, #48	; 0x30
 8005b20:	d86b      	bhi.n	8005bfa <HAL_TIM_ConfigClockSource+0x170>
 8005b22:	2b20      	cmp	r3, #32
 8005b24:	d060      	beq.n	8005be8 <HAL_TIM_ConfigClockSource+0x15e>
 8005b26:	2b20      	cmp	r3, #32
 8005b28:	d867      	bhi.n	8005bfa <HAL_TIM_ConfigClockSource+0x170>
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d05c      	beq.n	8005be8 <HAL_TIM_ConfigClockSource+0x15e>
 8005b2e:	2b10      	cmp	r3, #16
 8005b30:	d05a      	beq.n	8005be8 <HAL_TIM_ConfigClockSource+0x15e>
 8005b32:	e062      	b.n	8005bfa <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b44:	f000 f9aa 	bl	8005e9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b56:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	609a      	str	r2, [r3, #8]
      break;
 8005b60:	e04f      	b.n	8005c02 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b72:	f000 f993 	bl	8005e9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	689a      	ldr	r2, [r3, #8]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b84:	609a      	str	r2, [r3, #8]
      break;
 8005b86:	e03c      	b.n	8005c02 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b94:	461a      	mov	r2, r3
 8005b96:	f000 f907 	bl	8005da8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2150      	movs	r1, #80	; 0x50
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f000 f960 	bl	8005e66 <TIM_ITRx_SetConfig>
      break;
 8005ba6:	e02c      	b.n	8005c02 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	f000 f926 	bl	8005e06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2160      	movs	r1, #96	; 0x60
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f000 f950 	bl	8005e66 <TIM_ITRx_SetConfig>
      break;
 8005bc6:	e01c      	b.n	8005c02 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	f000 f8e7 	bl	8005da8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2140      	movs	r1, #64	; 0x40
 8005be0:	4618      	mov	r0, r3
 8005be2:	f000 f940 	bl	8005e66 <TIM_ITRx_SetConfig>
      break;
 8005be6:	e00c      	b.n	8005c02 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	4610      	mov	r0, r2
 8005bf4:	f000 f937 	bl	8005e66 <TIM_ITRx_SetConfig>
      break;
 8005bf8:	e003      	b.n	8005c02 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	73fb      	strb	r3, [r7, #15]
      break;
 8005bfe:	e000      	b.n	8005c02 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005c00:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3710      	adds	r7, #16
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c24:	bf00      	nop
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a42      	ldr	r2, [pc, #264]	; (8005d88 <TIM_Base_SetConfig+0x11c>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d013      	beq.n	8005cac <TIM_Base_SetConfig+0x40>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c8a:	d00f      	beq.n	8005cac <TIM_Base_SetConfig+0x40>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a3f      	ldr	r2, [pc, #252]	; (8005d8c <TIM_Base_SetConfig+0x120>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d00b      	beq.n	8005cac <TIM_Base_SetConfig+0x40>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a3e      	ldr	r2, [pc, #248]	; (8005d90 <TIM_Base_SetConfig+0x124>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d007      	beq.n	8005cac <TIM_Base_SetConfig+0x40>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a3d      	ldr	r2, [pc, #244]	; (8005d94 <TIM_Base_SetConfig+0x128>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d003      	beq.n	8005cac <TIM_Base_SetConfig+0x40>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a3c      	ldr	r2, [pc, #240]	; (8005d98 <TIM_Base_SetConfig+0x12c>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d108      	bne.n	8005cbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a31      	ldr	r2, [pc, #196]	; (8005d88 <TIM_Base_SetConfig+0x11c>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d01f      	beq.n	8005d06 <TIM_Base_SetConfig+0x9a>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ccc:	d01b      	beq.n	8005d06 <TIM_Base_SetConfig+0x9a>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a2e      	ldr	r2, [pc, #184]	; (8005d8c <TIM_Base_SetConfig+0x120>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d017      	beq.n	8005d06 <TIM_Base_SetConfig+0x9a>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a2d      	ldr	r2, [pc, #180]	; (8005d90 <TIM_Base_SetConfig+0x124>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d013      	beq.n	8005d06 <TIM_Base_SetConfig+0x9a>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a2c      	ldr	r2, [pc, #176]	; (8005d94 <TIM_Base_SetConfig+0x128>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d00f      	beq.n	8005d06 <TIM_Base_SetConfig+0x9a>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a2c      	ldr	r2, [pc, #176]	; (8005d9c <TIM_Base_SetConfig+0x130>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d00b      	beq.n	8005d06 <TIM_Base_SetConfig+0x9a>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a2b      	ldr	r2, [pc, #172]	; (8005da0 <TIM_Base_SetConfig+0x134>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d007      	beq.n	8005d06 <TIM_Base_SetConfig+0x9a>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a2a      	ldr	r2, [pc, #168]	; (8005da4 <TIM_Base_SetConfig+0x138>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d003      	beq.n	8005d06 <TIM_Base_SetConfig+0x9a>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a25      	ldr	r2, [pc, #148]	; (8005d98 <TIM_Base_SetConfig+0x12c>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d108      	bne.n	8005d18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	689a      	ldr	r2, [r3, #8]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a12      	ldr	r2, [pc, #72]	; (8005d88 <TIM_Base_SetConfig+0x11c>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d013      	beq.n	8005d6c <TIM_Base_SetConfig+0x100>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a13      	ldr	r2, [pc, #76]	; (8005d94 <TIM_Base_SetConfig+0x128>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d00f      	beq.n	8005d6c <TIM_Base_SetConfig+0x100>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a13      	ldr	r2, [pc, #76]	; (8005d9c <TIM_Base_SetConfig+0x130>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d00b      	beq.n	8005d6c <TIM_Base_SetConfig+0x100>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a12      	ldr	r2, [pc, #72]	; (8005da0 <TIM_Base_SetConfig+0x134>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d007      	beq.n	8005d6c <TIM_Base_SetConfig+0x100>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a11      	ldr	r2, [pc, #68]	; (8005da4 <TIM_Base_SetConfig+0x138>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d003      	beq.n	8005d6c <TIM_Base_SetConfig+0x100>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a0c      	ldr	r2, [pc, #48]	; (8005d98 <TIM_Base_SetConfig+0x12c>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d103      	bne.n	8005d74 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	691a      	ldr	r2, [r3, #16]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	615a      	str	r2, [r3, #20]
}
 8005d7a:	bf00      	nop
 8005d7c:	3714      	adds	r7, #20
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	40012c00 	.word	0x40012c00
 8005d8c:	40000400 	.word	0x40000400
 8005d90:	40000800 	.word	0x40000800
 8005d94:	40013400 	.word	0x40013400
 8005d98:	40015000 	.word	0x40015000
 8005d9c:	40014000 	.word	0x40014000
 8005da0:	40014400 	.word	0x40014400
 8005da4:	40014800 	.word	0x40014800

08005da8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b087      	sub	sp, #28
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6a1b      	ldr	r3, [r3, #32]
 8005db8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	f023 0201 	bic.w	r2, r3, #1
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	011b      	lsls	r3, r3, #4
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f023 030a 	bic.w	r3, r3, #10
 8005de4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	621a      	str	r2, [r3, #32]
}
 8005dfa:	bf00      	nop
 8005dfc:	371c      	adds	r7, #28
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b087      	sub	sp, #28
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	60f8      	str	r0, [r7, #12]
 8005e0e:	60b9      	str	r1, [r7, #8]
 8005e10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	f023 0210 	bic.w	r2, r3, #16
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6a1b      	ldr	r3, [r3, #32]
 8005e28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	031b      	lsls	r3, r3, #12
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	011b      	lsls	r3, r3, #4
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	621a      	str	r2, [r3, #32]
}
 8005e5a:	bf00      	nop
 8005e5c:	371c      	adds	r7, #28
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b085      	sub	sp, #20
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
 8005e6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e7e:	683a      	ldr	r2, [r7, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	f043 0307 	orr.w	r3, r3, #7
 8005e88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	609a      	str	r2, [r3, #8]
}
 8005e90:	bf00      	nop
 8005e92:	3714      	adds	r7, #20
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b087      	sub	sp, #28
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
 8005ea8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005eb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	021a      	lsls	r2, r3, #8
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	697a      	ldr	r2, [r7, #20]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	609a      	str	r2, [r3, #8]
}
 8005ed0:	bf00      	nop
 8005ed2:	371c      	adds	r7, #28
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d101      	bne.n	8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	e06d      	b.n	8005fd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2202      	movs	r2, #2
 8005f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a30      	ldr	r2, [pc, #192]	; (8005fdc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d009      	beq.n	8005f32 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a2f      	ldr	r2, [pc, #188]	; (8005fe0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d004      	beq.n	8005f32 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a2d      	ldr	r2, [pc, #180]	; (8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d108      	bne.n	8005f44 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f38:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a1e      	ldr	r2, [pc, #120]	; (8005fdc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d01d      	beq.n	8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f70:	d018      	beq.n	8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a1c      	ldr	r2, [pc, #112]	; (8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d013      	beq.n	8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a1a      	ldr	r2, [pc, #104]	; (8005fec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d00e      	beq.n	8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a15      	ldr	r2, [pc, #84]	; (8005fe0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d009      	beq.n	8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a16      	ldr	r2, [pc, #88]	; (8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d004      	beq.n	8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a11      	ldr	r2, [pc, #68]	; (8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d10c      	bne.n	8005fbe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005faa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3714      	adds	r7, #20
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr
 8005fdc:	40012c00 	.word	0x40012c00
 8005fe0:	40013400 	.word	0x40013400
 8005fe4:	40015000 	.word	0x40015000
 8005fe8:	40000400 	.word	0x40000400
 8005fec:	40000800 	.word	0x40000800
 8005ff0:	40014000 	.word	0x40014000

08005ff4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e040      	b.n	80060c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006046:	2b00      	cmp	r3, #0
 8006048:	d106      	bne.n	8006058 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7fb fda0 	bl	8001b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2224      	movs	r2, #36	; 0x24
 800605c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f022 0201 	bic.w	r2, r2, #1
 800606c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f8b6 	bl	80061e0 <UART_SetConfig>
 8006074:	4603      	mov	r3, r0
 8006076:	2b01      	cmp	r3, #1
 8006078:	d101      	bne.n	800607e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e022      	b.n	80060c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006082:	2b00      	cmp	r3, #0
 8006084:	d002      	beq.n	800608c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 fa7e 	bl	8006588 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	685a      	ldr	r2, [r3, #4]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800609a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	689a      	ldr	r2, [r3, #8]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f042 0201 	orr.w	r2, r2, #1
 80060ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 fb05 	bl	80066cc <UART_CheckIdleState>
 80060c2:	4603      	mov	r3, r0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3708      	adds	r7, #8
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b08a      	sub	sp, #40	; 0x28
 80060d0:	af02      	add	r7, sp, #8
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	603b      	str	r3, [r7, #0]
 80060d8:	4613      	mov	r3, r2
 80060da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060e0:	2b20      	cmp	r3, #32
 80060e2:	d178      	bne.n	80061d6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d002      	beq.n	80060f0 <HAL_UART_Transmit+0x24>
 80060ea:	88fb      	ldrh	r3, [r7, #6]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d101      	bne.n	80060f4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e071      	b.n	80061d8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2221      	movs	r2, #33	; 0x21
 8006100:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006102:	f7fb ff01 	bl	8001f08 <HAL_GetTick>
 8006106:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	88fa      	ldrh	r2, [r7, #6]
 800610c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	88fa      	ldrh	r2, [r7, #6]
 8006114:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006120:	d108      	bne.n	8006134 <HAL_UART_Transmit+0x68>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d104      	bne.n	8006134 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800612a:	2300      	movs	r3, #0
 800612c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	61bb      	str	r3, [r7, #24]
 8006132:	e003      	b.n	800613c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006138:	2300      	movs	r3, #0
 800613a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800613c:	e030      	b.n	80061a0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	9300      	str	r3, [sp, #0]
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	2200      	movs	r2, #0
 8006146:	2180      	movs	r1, #128	; 0x80
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f000 fb67 	bl	800681c <UART_WaitOnFlagUntilTimeout>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d004      	beq.n	800615e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2220      	movs	r2, #32
 8006158:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e03c      	b.n	80061d8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10b      	bne.n	800617c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	881a      	ldrh	r2, [r3, #0]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006170:	b292      	uxth	r2, r2
 8006172:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	3302      	adds	r3, #2
 8006178:	61bb      	str	r3, [r7, #24]
 800617a:	e008      	b.n	800618e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	781a      	ldrb	r2, [r3, #0]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	b292      	uxth	r2, r2
 8006186:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	3301      	adds	r3, #1
 800618c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006194:	b29b      	uxth	r3, r3
 8006196:	3b01      	subs	r3, #1
 8006198:	b29a      	uxth	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d1c8      	bne.n	800613e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	9300      	str	r3, [sp, #0]
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	2200      	movs	r2, #0
 80061b4:	2140      	movs	r1, #64	; 0x40
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f000 fb30 	bl	800681c <UART_WaitOnFlagUntilTimeout>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d004      	beq.n	80061cc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2220      	movs	r2, #32
 80061c6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e005      	b.n	80061d8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2220      	movs	r2, #32
 80061d0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80061d2:	2300      	movs	r3, #0
 80061d4:	e000      	b.n	80061d8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80061d6:	2302      	movs	r3, #2
  }
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3720      	adds	r7, #32
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b088      	sub	sp, #32
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061e8:	2300      	movs	r3, #0
 80061ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	689a      	ldr	r2, [r3, #8]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	431a      	orrs	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	431a      	orrs	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	69db      	ldr	r3, [r3, #28]
 8006200:	4313      	orrs	r3, r2
 8006202:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	4b92      	ldr	r3, [pc, #584]	; (8006454 <UART_SetConfig+0x274>)
 800620c:	4013      	ands	r3, r2
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	6812      	ldr	r2, [r2, #0]
 8006212:	6979      	ldr	r1, [r7, #20]
 8006214:	430b      	orrs	r3, r1
 8006216:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68da      	ldr	r2, [r3, #12]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	430a      	orrs	r2, r1
 800622c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a1b      	ldr	r3, [r3, #32]
 8006238:	697a      	ldr	r2, [r7, #20]
 800623a:	4313      	orrs	r3, r2
 800623c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	430a      	orrs	r2, r1
 8006250:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a80      	ldr	r2, [pc, #512]	; (8006458 <UART_SetConfig+0x278>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d120      	bne.n	800629e <UART_SetConfig+0xbe>
 800625c:	4b7f      	ldr	r3, [pc, #508]	; (800645c <UART_SetConfig+0x27c>)
 800625e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006260:	f003 0303 	and.w	r3, r3, #3
 8006264:	2b03      	cmp	r3, #3
 8006266:	d817      	bhi.n	8006298 <UART_SetConfig+0xb8>
 8006268:	a201      	add	r2, pc, #4	; (adr r2, 8006270 <UART_SetConfig+0x90>)
 800626a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626e:	bf00      	nop
 8006270:	08006281 	.word	0x08006281
 8006274:	0800628d 	.word	0x0800628d
 8006278:	08006293 	.word	0x08006293
 800627c:	08006287 	.word	0x08006287
 8006280:	2301      	movs	r3, #1
 8006282:	77fb      	strb	r3, [r7, #31]
 8006284:	e0b5      	b.n	80063f2 <UART_SetConfig+0x212>
 8006286:	2302      	movs	r3, #2
 8006288:	77fb      	strb	r3, [r7, #31]
 800628a:	e0b2      	b.n	80063f2 <UART_SetConfig+0x212>
 800628c:	2304      	movs	r3, #4
 800628e:	77fb      	strb	r3, [r7, #31]
 8006290:	e0af      	b.n	80063f2 <UART_SetConfig+0x212>
 8006292:	2308      	movs	r3, #8
 8006294:	77fb      	strb	r3, [r7, #31]
 8006296:	e0ac      	b.n	80063f2 <UART_SetConfig+0x212>
 8006298:	2310      	movs	r3, #16
 800629a:	77fb      	strb	r3, [r7, #31]
 800629c:	e0a9      	b.n	80063f2 <UART_SetConfig+0x212>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a6f      	ldr	r2, [pc, #444]	; (8006460 <UART_SetConfig+0x280>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d124      	bne.n	80062f2 <UART_SetConfig+0x112>
 80062a8:	4b6c      	ldr	r3, [pc, #432]	; (800645c <UART_SetConfig+0x27c>)
 80062aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80062b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80062b4:	d011      	beq.n	80062da <UART_SetConfig+0xfa>
 80062b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80062ba:	d817      	bhi.n	80062ec <UART_SetConfig+0x10c>
 80062bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062c0:	d011      	beq.n	80062e6 <UART_SetConfig+0x106>
 80062c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062c6:	d811      	bhi.n	80062ec <UART_SetConfig+0x10c>
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d003      	beq.n	80062d4 <UART_SetConfig+0xf4>
 80062cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062d0:	d006      	beq.n	80062e0 <UART_SetConfig+0x100>
 80062d2:	e00b      	b.n	80062ec <UART_SetConfig+0x10c>
 80062d4:	2300      	movs	r3, #0
 80062d6:	77fb      	strb	r3, [r7, #31]
 80062d8:	e08b      	b.n	80063f2 <UART_SetConfig+0x212>
 80062da:	2302      	movs	r3, #2
 80062dc:	77fb      	strb	r3, [r7, #31]
 80062de:	e088      	b.n	80063f2 <UART_SetConfig+0x212>
 80062e0:	2304      	movs	r3, #4
 80062e2:	77fb      	strb	r3, [r7, #31]
 80062e4:	e085      	b.n	80063f2 <UART_SetConfig+0x212>
 80062e6:	2308      	movs	r3, #8
 80062e8:	77fb      	strb	r3, [r7, #31]
 80062ea:	e082      	b.n	80063f2 <UART_SetConfig+0x212>
 80062ec:	2310      	movs	r3, #16
 80062ee:	77fb      	strb	r3, [r7, #31]
 80062f0:	e07f      	b.n	80063f2 <UART_SetConfig+0x212>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a5b      	ldr	r2, [pc, #364]	; (8006464 <UART_SetConfig+0x284>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d124      	bne.n	8006346 <UART_SetConfig+0x166>
 80062fc:	4b57      	ldr	r3, [pc, #348]	; (800645c <UART_SetConfig+0x27c>)
 80062fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006300:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006304:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006308:	d011      	beq.n	800632e <UART_SetConfig+0x14e>
 800630a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800630e:	d817      	bhi.n	8006340 <UART_SetConfig+0x160>
 8006310:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006314:	d011      	beq.n	800633a <UART_SetConfig+0x15a>
 8006316:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800631a:	d811      	bhi.n	8006340 <UART_SetConfig+0x160>
 800631c:	2b00      	cmp	r3, #0
 800631e:	d003      	beq.n	8006328 <UART_SetConfig+0x148>
 8006320:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006324:	d006      	beq.n	8006334 <UART_SetConfig+0x154>
 8006326:	e00b      	b.n	8006340 <UART_SetConfig+0x160>
 8006328:	2300      	movs	r3, #0
 800632a:	77fb      	strb	r3, [r7, #31]
 800632c:	e061      	b.n	80063f2 <UART_SetConfig+0x212>
 800632e:	2302      	movs	r3, #2
 8006330:	77fb      	strb	r3, [r7, #31]
 8006332:	e05e      	b.n	80063f2 <UART_SetConfig+0x212>
 8006334:	2304      	movs	r3, #4
 8006336:	77fb      	strb	r3, [r7, #31]
 8006338:	e05b      	b.n	80063f2 <UART_SetConfig+0x212>
 800633a:	2308      	movs	r3, #8
 800633c:	77fb      	strb	r3, [r7, #31]
 800633e:	e058      	b.n	80063f2 <UART_SetConfig+0x212>
 8006340:	2310      	movs	r3, #16
 8006342:	77fb      	strb	r3, [r7, #31]
 8006344:	e055      	b.n	80063f2 <UART_SetConfig+0x212>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a47      	ldr	r2, [pc, #284]	; (8006468 <UART_SetConfig+0x288>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d124      	bne.n	800639a <UART_SetConfig+0x1ba>
 8006350:	4b42      	ldr	r3, [pc, #264]	; (800645c <UART_SetConfig+0x27c>)
 8006352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006354:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006358:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800635c:	d011      	beq.n	8006382 <UART_SetConfig+0x1a2>
 800635e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006362:	d817      	bhi.n	8006394 <UART_SetConfig+0x1b4>
 8006364:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006368:	d011      	beq.n	800638e <UART_SetConfig+0x1ae>
 800636a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800636e:	d811      	bhi.n	8006394 <UART_SetConfig+0x1b4>
 8006370:	2b00      	cmp	r3, #0
 8006372:	d003      	beq.n	800637c <UART_SetConfig+0x19c>
 8006374:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006378:	d006      	beq.n	8006388 <UART_SetConfig+0x1a8>
 800637a:	e00b      	b.n	8006394 <UART_SetConfig+0x1b4>
 800637c:	2300      	movs	r3, #0
 800637e:	77fb      	strb	r3, [r7, #31]
 8006380:	e037      	b.n	80063f2 <UART_SetConfig+0x212>
 8006382:	2302      	movs	r3, #2
 8006384:	77fb      	strb	r3, [r7, #31]
 8006386:	e034      	b.n	80063f2 <UART_SetConfig+0x212>
 8006388:	2304      	movs	r3, #4
 800638a:	77fb      	strb	r3, [r7, #31]
 800638c:	e031      	b.n	80063f2 <UART_SetConfig+0x212>
 800638e:	2308      	movs	r3, #8
 8006390:	77fb      	strb	r3, [r7, #31]
 8006392:	e02e      	b.n	80063f2 <UART_SetConfig+0x212>
 8006394:	2310      	movs	r3, #16
 8006396:	77fb      	strb	r3, [r7, #31]
 8006398:	e02b      	b.n	80063f2 <UART_SetConfig+0x212>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a33      	ldr	r2, [pc, #204]	; (800646c <UART_SetConfig+0x28c>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d124      	bne.n	80063ee <UART_SetConfig+0x20e>
 80063a4:	4b2d      	ldr	r3, [pc, #180]	; (800645c <UART_SetConfig+0x27c>)
 80063a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80063ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80063b0:	d011      	beq.n	80063d6 <UART_SetConfig+0x1f6>
 80063b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80063b6:	d817      	bhi.n	80063e8 <UART_SetConfig+0x208>
 80063b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80063bc:	d011      	beq.n	80063e2 <UART_SetConfig+0x202>
 80063be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80063c2:	d811      	bhi.n	80063e8 <UART_SetConfig+0x208>
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d003      	beq.n	80063d0 <UART_SetConfig+0x1f0>
 80063c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063cc:	d006      	beq.n	80063dc <UART_SetConfig+0x1fc>
 80063ce:	e00b      	b.n	80063e8 <UART_SetConfig+0x208>
 80063d0:	2300      	movs	r3, #0
 80063d2:	77fb      	strb	r3, [r7, #31]
 80063d4:	e00d      	b.n	80063f2 <UART_SetConfig+0x212>
 80063d6:	2302      	movs	r3, #2
 80063d8:	77fb      	strb	r3, [r7, #31]
 80063da:	e00a      	b.n	80063f2 <UART_SetConfig+0x212>
 80063dc:	2304      	movs	r3, #4
 80063de:	77fb      	strb	r3, [r7, #31]
 80063e0:	e007      	b.n	80063f2 <UART_SetConfig+0x212>
 80063e2:	2308      	movs	r3, #8
 80063e4:	77fb      	strb	r3, [r7, #31]
 80063e6:	e004      	b.n	80063f2 <UART_SetConfig+0x212>
 80063e8:	2310      	movs	r3, #16
 80063ea:	77fb      	strb	r3, [r7, #31]
 80063ec:	e001      	b.n	80063f2 <UART_SetConfig+0x212>
 80063ee:	2310      	movs	r3, #16
 80063f0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	69db      	ldr	r3, [r3, #28]
 80063f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063fa:	d16b      	bne.n	80064d4 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80063fc:	7ffb      	ldrb	r3, [r7, #31]
 80063fe:	2b08      	cmp	r3, #8
 8006400:	d838      	bhi.n	8006474 <UART_SetConfig+0x294>
 8006402:	a201      	add	r2, pc, #4	; (adr r2, 8006408 <UART_SetConfig+0x228>)
 8006404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006408:	0800642d 	.word	0x0800642d
 800640c:	08006435 	.word	0x08006435
 8006410:	0800643d 	.word	0x0800643d
 8006414:	08006475 	.word	0x08006475
 8006418:	08006443 	.word	0x08006443
 800641c:	08006475 	.word	0x08006475
 8006420:	08006475 	.word	0x08006475
 8006424:	08006475 	.word	0x08006475
 8006428:	0800644b 	.word	0x0800644b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800642c:	f7fe f896 	bl	800455c <HAL_RCC_GetPCLK1Freq>
 8006430:	61b8      	str	r0, [r7, #24]
        break;
 8006432:	e024      	b.n	800647e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006434:	f7fe f8b4 	bl	80045a0 <HAL_RCC_GetPCLK2Freq>
 8006438:	61b8      	str	r0, [r7, #24]
        break;
 800643a:	e020      	b.n	800647e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800643c:	4b0c      	ldr	r3, [pc, #48]	; (8006470 <UART_SetConfig+0x290>)
 800643e:	61bb      	str	r3, [r7, #24]
        break;
 8006440:	e01d      	b.n	800647e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006442:	f7fe f815 	bl	8004470 <HAL_RCC_GetSysClockFreq>
 8006446:	61b8      	str	r0, [r7, #24]
        break;
 8006448:	e019      	b.n	800647e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800644a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800644e:	61bb      	str	r3, [r7, #24]
        break;
 8006450:	e015      	b.n	800647e <UART_SetConfig+0x29e>
 8006452:	bf00      	nop
 8006454:	efff69f3 	.word	0xefff69f3
 8006458:	40013800 	.word	0x40013800
 800645c:	40021000 	.word	0x40021000
 8006460:	40004400 	.word	0x40004400
 8006464:	40004800 	.word	0x40004800
 8006468:	40004c00 	.word	0x40004c00
 800646c:	40005000 	.word	0x40005000
 8006470:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8006474:	2300      	movs	r3, #0
 8006476:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	77bb      	strb	r3, [r7, #30]
        break;
 800647c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d073      	beq.n	800656c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	005a      	lsls	r2, r3, #1
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	085b      	lsrs	r3, r3, #1
 800648e:	441a      	add	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	fbb2 f3f3 	udiv	r3, r2, r3
 8006498:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	2b0f      	cmp	r3, #15
 800649e:	d916      	bls.n	80064ce <UART_SetConfig+0x2ee>
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064a6:	d212      	bcs.n	80064ce <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	f023 030f 	bic.w	r3, r3, #15
 80064b0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	085b      	lsrs	r3, r3, #1
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	f003 0307 	and.w	r3, r3, #7
 80064bc:	b29a      	uxth	r2, r3
 80064be:	89fb      	ldrh	r3, [r7, #14]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	89fa      	ldrh	r2, [r7, #14]
 80064ca:	60da      	str	r2, [r3, #12]
 80064cc:	e04e      	b.n	800656c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	77bb      	strb	r3, [r7, #30]
 80064d2:	e04b      	b.n	800656c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064d4:	7ffb      	ldrb	r3, [r7, #31]
 80064d6:	2b08      	cmp	r3, #8
 80064d8:	d827      	bhi.n	800652a <UART_SetConfig+0x34a>
 80064da:	a201      	add	r2, pc, #4	; (adr r2, 80064e0 <UART_SetConfig+0x300>)
 80064dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e0:	08006505 	.word	0x08006505
 80064e4:	0800650d 	.word	0x0800650d
 80064e8:	08006515 	.word	0x08006515
 80064ec:	0800652b 	.word	0x0800652b
 80064f0:	0800651b 	.word	0x0800651b
 80064f4:	0800652b 	.word	0x0800652b
 80064f8:	0800652b 	.word	0x0800652b
 80064fc:	0800652b 	.word	0x0800652b
 8006500:	08006523 	.word	0x08006523
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006504:	f7fe f82a 	bl	800455c <HAL_RCC_GetPCLK1Freq>
 8006508:	61b8      	str	r0, [r7, #24]
        break;
 800650a:	e013      	b.n	8006534 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800650c:	f7fe f848 	bl	80045a0 <HAL_RCC_GetPCLK2Freq>
 8006510:	61b8      	str	r0, [r7, #24]
        break;
 8006512:	e00f      	b.n	8006534 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006514:	4b1b      	ldr	r3, [pc, #108]	; (8006584 <UART_SetConfig+0x3a4>)
 8006516:	61bb      	str	r3, [r7, #24]
        break;
 8006518:	e00c      	b.n	8006534 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800651a:	f7fd ffa9 	bl	8004470 <HAL_RCC_GetSysClockFreq>
 800651e:	61b8      	str	r0, [r7, #24]
        break;
 8006520:	e008      	b.n	8006534 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006526:	61bb      	str	r3, [r7, #24]
        break;
 8006528:	e004      	b.n	8006534 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800652a:	2300      	movs	r3, #0
 800652c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	77bb      	strb	r3, [r7, #30]
        break;
 8006532:	bf00      	nop
    }

    if (pclk != 0U)
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d018      	beq.n	800656c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	085a      	lsrs	r2, r3, #1
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	441a      	add	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	fbb2 f3f3 	udiv	r3, r2, r3
 800654c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	2b0f      	cmp	r3, #15
 8006552:	d909      	bls.n	8006568 <UART_SetConfig+0x388>
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800655a:	d205      	bcs.n	8006568 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	b29a      	uxth	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	60da      	str	r2, [r3, #12]
 8006566:	e001      	b.n	800656c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006578:	7fbb      	ldrb	r3, [r7, #30]
}
 800657a:	4618      	mov	r0, r3
 800657c:	3720      	adds	r7, #32
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	007a1200 	.word	0x007a1200

08006588 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006594:	f003 0301 	and.w	r3, r3, #1
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00a      	beq.n	80065b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	430a      	orrs	r2, r1
 80065b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00a      	beq.n	80065d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	430a      	orrs	r2, r1
 80065d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d8:	f003 0304 	and.w	r3, r3, #4
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00a      	beq.n	80065f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	430a      	orrs	r2, r1
 80065f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fa:	f003 0308 	and.w	r3, r3, #8
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00a      	beq.n	8006618 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	430a      	orrs	r2, r1
 8006616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661c:	f003 0310 	and.w	r3, r3, #16
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00a      	beq.n	800663a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	430a      	orrs	r2, r1
 8006638:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663e:	f003 0320 	and.w	r3, r3, #32
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00a      	beq.n	800665c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	430a      	orrs	r2, r1
 800665a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006664:	2b00      	cmp	r3, #0
 8006666:	d01a      	beq.n	800669e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	430a      	orrs	r2, r1
 800667c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006686:	d10a      	bne.n	800669e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	430a      	orrs	r2, r1
 800669c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00a      	beq.n	80066c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	430a      	orrs	r2, r1
 80066be:	605a      	str	r2, [r3, #4]
  }
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b098      	sub	sp, #96	; 0x60
 80066d0:	af02      	add	r7, sp, #8
 80066d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066dc:	f7fb fc14 	bl	8001f08 <HAL_GetTick>
 80066e0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0308 	and.w	r3, r3, #8
 80066ec:	2b08      	cmp	r3, #8
 80066ee:	d12e      	bne.n	800674e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066f8:	2200      	movs	r2, #0
 80066fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f88c 	bl	800681c <UART_WaitOnFlagUntilTimeout>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d021      	beq.n	800674e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006712:	e853 3f00 	ldrex	r3, [r3]
 8006716:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800671a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800671e:	653b      	str	r3, [r7, #80]	; 0x50
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	461a      	mov	r2, r3
 8006726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006728:	647b      	str	r3, [r7, #68]	; 0x44
 800672a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800672e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006730:	e841 2300 	strex	r3, r2, [r1]
 8006734:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1e6      	bne.n	800670a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2220      	movs	r2, #32
 8006740:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e062      	b.n	8006814 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0304 	and.w	r3, r3, #4
 8006758:	2b04      	cmp	r3, #4
 800675a:	d149      	bne.n	80067f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800675c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006760:	9300      	str	r3, [sp, #0]
 8006762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006764:	2200      	movs	r2, #0
 8006766:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 f856 	bl	800681c <UART_WaitOnFlagUntilTimeout>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d03c      	beq.n	80067f0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677e:	e853 3f00 	ldrex	r3, [r3]
 8006782:	623b      	str	r3, [r7, #32]
   return(result);
 8006784:	6a3b      	ldr	r3, [r7, #32]
 8006786:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800678a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	461a      	mov	r2, r3
 8006792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006794:	633b      	str	r3, [r7, #48]	; 0x30
 8006796:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006798:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800679a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800679c:	e841 2300 	strex	r3, r2, [r1]
 80067a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1e6      	bne.n	8006776 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	3308      	adds	r3, #8
 80067ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	e853 3f00 	ldrex	r3, [r3]
 80067b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f023 0301 	bic.w	r3, r3, #1
 80067be:	64bb      	str	r3, [r7, #72]	; 0x48
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	3308      	adds	r3, #8
 80067c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067c8:	61fa      	str	r2, [r7, #28]
 80067ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067cc:	69b9      	ldr	r1, [r7, #24]
 80067ce:	69fa      	ldr	r2, [r7, #28]
 80067d0:	e841 2300 	strex	r3, r2, [r1]
 80067d4:	617b      	str	r3, [r7, #20]
   return(result);
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1e5      	bne.n	80067a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2220      	movs	r2, #32
 80067e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e011      	b.n	8006814 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2220      	movs	r2, #32
 80067f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2220      	movs	r2, #32
 80067fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3758      	adds	r7, #88	; 0x58
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	603b      	str	r3, [r7, #0]
 8006828:	4613      	mov	r3, r2
 800682a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800682c:	e049      	b.n	80068c2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006834:	d045      	beq.n	80068c2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006836:	f7fb fb67 	bl	8001f08 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	69ba      	ldr	r2, [r7, #24]
 8006842:	429a      	cmp	r2, r3
 8006844:	d302      	bcc.n	800684c <UART_WaitOnFlagUntilTimeout+0x30>
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800684c:	2303      	movs	r3, #3
 800684e:	e048      	b.n	80068e2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0304 	and.w	r3, r3, #4
 800685a:	2b00      	cmp	r3, #0
 800685c:	d031      	beq.n	80068c2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	f003 0308 	and.w	r3, r3, #8
 8006868:	2b08      	cmp	r3, #8
 800686a:	d110      	bne.n	800688e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2208      	movs	r2, #8
 8006872:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f000 f838 	bl	80068ea <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2208      	movs	r2, #8
 800687e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e029      	b.n	80068e2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	69db      	ldr	r3, [r3, #28]
 8006894:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006898:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800689c:	d111      	bne.n	80068c2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f000 f81e 	bl	80068ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2220      	movs	r2, #32
 80068b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	e00f      	b.n	80068e2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	69da      	ldr	r2, [r3, #28]
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	4013      	ands	r3, r2
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	bf0c      	ite	eq
 80068d2:	2301      	moveq	r3, #1
 80068d4:	2300      	movne	r3, #0
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	461a      	mov	r2, r3
 80068da:	79fb      	ldrb	r3, [r7, #7]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d0a6      	beq.n	800682e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b095      	sub	sp, #84	; 0x54
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068fa:	e853 3f00 	ldrex	r3, [r3]
 80068fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006902:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006906:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	461a      	mov	r2, r3
 800690e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006910:	643b      	str	r3, [r7, #64]	; 0x40
 8006912:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006914:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006916:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006918:	e841 2300 	strex	r3, r2, [r1]
 800691c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800691e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1e6      	bne.n	80068f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	3308      	adds	r3, #8
 800692a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692c:	6a3b      	ldr	r3, [r7, #32]
 800692e:	e853 3f00 	ldrex	r3, [r3]
 8006932:	61fb      	str	r3, [r7, #28]
   return(result);
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	f023 0301 	bic.w	r3, r3, #1
 800693a:	64bb      	str	r3, [r7, #72]	; 0x48
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	3308      	adds	r3, #8
 8006942:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006944:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006946:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006948:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800694a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800694c:	e841 2300 	strex	r3, r2, [r1]
 8006950:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006954:	2b00      	cmp	r3, #0
 8006956:	d1e5      	bne.n	8006924 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800695c:	2b01      	cmp	r3, #1
 800695e:	d118      	bne.n	8006992 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	e853 3f00 	ldrex	r3, [r3]
 800696c:	60bb      	str	r3, [r7, #8]
   return(result);
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	f023 0310 	bic.w	r3, r3, #16
 8006974:	647b      	str	r3, [r7, #68]	; 0x44
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	461a      	mov	r2, r3
 800697c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800697e:	61bb      	str	r3, [r7, #24]
 8006980:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006982:	6979      	ldr	r1, [r7, #20]
 8006984:	69ba      	ldr	r2, [r7, #24]
 8006986:	e841 2300 	strex	r3, r2, [r1]
 800698a:	613b      	str	r3, [r7, #16]
   return(result);
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1e6      	bne.n	8006960 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2220      	movs	r2, #32
 8006996:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80069a6:	bf00      	nop
 80069a8:	3754      	adds	r7, #84	; 0x54
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
	...

080069b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80069b8:	4904      	ldr	r1, [pc, #16]	; (80069cc <MX_FATFS_Init+0x18>)
 80069ba:	4805      	ldr	r0, [pc, #20]	; (80069d0 <MX_FATFS_Init+0x1c>)
 80069bc:	f003 f8d4 	bl	8009b68 <FATFS_LinkDriver>
 80069c0:	4603      	mov	r3, r0
 80069c2:	461a      	mov	r2, r3
 80069c4:	4b03      	ldr	r3, [pc, #12]	; (80069d4 <MX_FATFS_Init+0x20>)
 80069c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80069c8:	bf00      	nop
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	20000a0c 	.word	0x20000a0c
 80069d0:	20000010 	.word	0x20000010
 80069d4:	20000a08 	.word	0x20000a08

080069d8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80069d8:	b480      	push	{r7}
 80069da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80069dc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80069de:	4618      	mov	r0, r3
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	4603      	mov	r3, r0
 80069f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80069f2:	79fb      	ldrb	r3, [r7, #7]
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7fa f985 	bl	8000d04 <SD_disk_initialize>
 80069fa:	4603      	mov	r3, r0
    //Stat = STA_NOINIT;
    //return Stat;
  /* USER CODE END INIT */
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3708      	adds	r7, #8
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8006a0e:	79fb      	ldrb	r3, [r7, #7]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7fa fa61 	bl	8000ed8 <SD_disk_status>
 8006a16:	4603      	mov	r3, r0
    //Stat = STA_NOINIT;
    //return Stat;
  /* USER CODE END STATUS */
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3708      	adds	r7, #8
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60b9      	str	r1, [r7, #8]
 8006a28:	607a      	str	r2, [r7, #4]
 8006a2a:	603b      	str	r3, [r7, #0]
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8006a30:	7bf8      	ldrb	r0, [r7, #15]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	68b9      	ldr	r1, [r7, #8]
 8006a38:	f7fa fa64 	bl	8000f04 <SD_disk_read>
 8006a3c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b084      	sub	sp, #16
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	607a      	str	r2, [r7, #4]
 8006a50:	603b      	str	r3, [r7, #0]
 8006a52:	4603      	mov	r3, r0
 8006a54:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8006a56:	7bf8      	ldrb	r0, [r7, #15]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	68b9      	ldr	r1, [r7, #8]
 8006a5e:	f7fa fabb 	bl	8000fd8 <SD_disk_write>
 8006a62:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	4603      	mov	r3, r0
 8006a74:	603a      	str	r2, [r7, #0]
 8006a76:	71fb      	strb	r3, [r7, #7]
 8006a78:	460b      	mov	r3, r1
 8006a7a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8006a7c:	79b9      	ldrb	r1, [r7, #6]
 8006a7e:	79fb      	ldrb	r3, [r7, #7]
 8006a80:	683a      	ldr	r2, [r7, #0]
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7fa fb2c 	bl	80010e0 <SD_disk_ioctl>
 8006a88:	4603      	mov	r3, r0
    //DRESULT res = RES_ERROR;
    //return res;
  /* USER CODE END IOCTL */
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3708      	adds	r7, #8
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
	...

08006a94 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006a9e:	79fb      	ldrb	r3, [r7, #7]
 8006aa0:	4a08      	ldr	r2, [pc, #32]	; (8006ac4 <disk_status+0x30>)
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	4413      	add	r3, r2
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	79fa      	ldrb	r2, [r7, #7]
 8006aac:	4905      	ldr	r1, [pc, #20]	; (8006ac4 <disk_status+0x30>)
 8006aae:	440a      	add	r2, r1
 8006ab0:	7a12      	ldrb	r2, [r2, #8]
 8006ab2:	4610      	mov	r0, r2
 8006ab4:	4798      	blx	r3
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3710      	adds	r7, #16
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	20000a30 	.word	0x20000a30

08006ac8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	4603      	mov	r3, r0
 8006ad0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8006ad6:	79fb      	ldrb	r3, [r7, #7]
 8006ad8:	4a0d      	ldr	r2, [pc, #52]	; (8006b10 <disk_initialize+0x48>)
 8006ada:	5cd3      	ldrb	r3, [r2, r3]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d111      	bne.n	8006b04 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8006ae0:	79fb      	ldrb	r3, [r7, #7]
 8006ae2:	4a0b      	ldr	r2, [pc, #44]	; (8006b10 <disk_initialize+0x48>)
 8006ae4:	2101      	movs	r1, #1
 8006ae6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006ae8:	79fb      	ldrb	r3, [r7, #7]
 8006aea:	4a09      	ldr	r2, [pc, #36]	; (8006b10 <disk_initialize+0x48>)
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4413      	add	r3, r2
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	79fa      	ldrb	r2, [r7, #7]
 8006af6:	4906      	ldr	r1, [pc, #24]	; (8006b10 <disk_initialize+0x48>)
 8006af8:	440a      	add	r2, r1
 8006afa:	7a12      	ldrb	r2, [r2, #8]
 8006afc:	4610      	mov	r0, r2
 8006afe:	4798      	blx	r3
 8006b00:	4603      	mov	r3, r0
 8006b02:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3710      	adds	r7, #16
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	20000a30 	.word	0x20000a30

08006b14 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006b14:	b590      	push	{r4, r7, lr}
 8006b16:	b087      	sub	sp, #28
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60b9      	str	r1, [r7, #8]
 8006b1c:	607a      	str	r2, [r7, #4]
 8006b1e:	603b      	str	r3, [r7, #0]
 8006b20:	4603      	mov	r3, r0
 8006b22:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006b24:	7bfb      	ldrb	r3, [r7, #15]
 8006b26:	4a0a      	ldr	r2, [pc, #40]	; (8006b50 <disk_read+0x3c>)
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	4413      	add	r3, r2
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	689c      	ldr	r4, [r3, #8]
 8006b30:	7bfb      	ldrb	r3, [r7, #15]
 8006b32:	4a07      	ldr	r2, [pc, #28]	; (8006b50 <disk_read+0x3c>)
 8006b34:	4413      	add	r3, r2
 8006b36:	7a18      	ldrb	r0, [r3, #8]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	68b9      	ldr	r1, [r7, #8]
 8006b3e:	47a0      	blx	r4
 8006b40:	4603      	mov	r3, r0
 8006b42:	75fb      	strb	r3, [r7, #23]
  return res;
 8006b44:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	371c      	adds	r7, #28
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd90      	pop	{r4, r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	20000a30 	.word	0x20000a30

08006b54 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006b54:	b590      	push	{r4, r7, lr}
 8006b56:	b087      	sub	sp, #28
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60b9      	str	r1, [r7, #8]
 8006b5c:	607a      	str	r2, [r7, #4]
 8006b5e:	603b      	str	r3, [r7, #0]
 8006b60:	4603      	mov	r3, r0
 8006b62:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006b64:	7bfb      	ldrb	r3, [r7, #15]
 8006b66:	4a0a      	ldr	r2, [pc, #40]	; (8006b90 <disk_write+0x3c>)
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	4413      	add	r3, r2
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	68dc      	ldr	r4, [r3, #12]
 8006b70:	7bfb      	ldrb	r3, [r7, #15]
 8006b72:	4a07      	ldr	r2, [pc, #28]	; (8006b90 <disk_write+0x3c>)
 8006b74:	4413      	add	r3, r2
 8006b76:	7a18      	ldrb	r0, [r3, #8]
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	68b9      	ldr	r1, [r7, #8]
 8006b7e:	47a0      	blx	r4
 8006b80:	4603      	mov	r3, r0
 8006b82:	75fb      	strb	r3, [r7, #23]
  return res;
 8006b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	371c      	adds	r7, #28
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd90      	pop	{r4, r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	20000a30 	.word	0x20000a30

08006b94 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	603a      	str	r2, [r7, #0]
 8006b9e:	71fb      	strb	r3, [r7, #7]
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006ba4:	79fb      	ldrb	r3, [r7, #7]
 8006ba6:	4a09      	ldr	r2, [pc, #36]	; (8006bcc <disk_ioctl+0x38>)
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	4413      	add	r3, r2
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	79fa      	ldrb	r2, [r7, #7]
 8006bb2:	4906      	ldr	r1, [pc, #24]	; (8006bcc <disk_ioctl+0x38>)
 8006bb4:	440a      	add	r2, r1
 8006bb6:	7a10      	ldrb	r0, [r2, #8]
 8006bb8:	79b9      	ldrb	r1, [r7, #6]
 8006bba:	683a      	ldr	r2, [r7, #0]
 8006bbc:	4798      	blx	r3
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	73fb      	strb	r3, [r7, #15]
  return res;
 8006bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	20000a30 	.word	0x20000a30

08006bd0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006bd0:	b480      	push	{r7}
 8006bd2:	b087      	sub	sp, #28
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8006be4:	e007      	b.n	8006bf6 <mem_cpy+0x26>
		*d++ = *s++;
 8006be6:	693a      	ldr	r2, [r7, #16]
 8006be8:	1c53      	adds	r3, r2, #1
 8006bea:	613b      	str	r3, [r7, #16]
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	1c59      	adds	r1, r3, #1
 8006bf0:	6179      	str	r1, [r7, #20]
 8006bf2:	7812      	ldrb	r2, [r2, #0]
 8006bf4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	1e5a      	subs	r2, r3, #1
 8006bfa:	607a      	str	r2, [r7, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d1f2      	bne.n	8006be6 <mem_cpy+0x16>
}
 8006c00:	bf00      	nop
 8006c02:	bf00      	nop
 8006c04:	371c      	adds	r7, #28
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr

08006c0e <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006c0e:	b480      	push	{r7}
 8006c10:	b087      	sub	sp, #28
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	60f8      	str	r0, [r7, #12]
 8006c16:	60b9      	str	r1, [r7, #8]
 8006c18:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8006c1e:	e005      	b.n	8006c2c <mem_set+0x1e>
		*d++ = (BYTE)val;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	1c5a      	adds	r2, r3, #1
 8006c24:	617a      	str	r2, [r7, #20]
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	b2d2      	uxtb	r2, r2
 8006c2a:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	1e5a      	subs	r2, r3, #1
 8006c30:	607a      	str	r2, [r7, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1f4      	bne.n	8006c20 <mem_set+0x12>
}
 8006c36:	bf00      	nop
 8006c38:	bf00      	nop
 8006c3a:	371c      	adds	r7, #28
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8006c44:	b480      	push	{r7}
 8006c46:	b089      	sub	sp, #36	; 0x24
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	61fb      	str	r3, [r7, #28]
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8006c5c:	bf00      	nop
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	1e5a      	subs	r2, r3, #1
 8006c62:	607a      	str	r2, [r7, #4]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00d      	beq.n	8006c84 <mem_cmp+0x40>
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	1c5a      	adds	r2, r3, #1
 8006c6c:	61fa      	str	r2, [r7, #28]
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	4619      	mov	r1, r3
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	1c5a      	adds	r2, r3, #1
 8006c76:	61ba      	str	r2, [r7, #24]
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	1acb      	subs	r3, r1, r3
 8006c7c:	617b      	str	r3, [r7, #20]
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d0ec      	beq.n	8006c5e <mem_cmp+0x1a>
	return r;
 8006c84:	697b      	ldr	r3, [r7, #20]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3724      	adds	r7, #36	; 0x24
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8006c92:	b480      	push	{r7}
 8006c94:	b083      	sub	sp, #12
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
 8006c9a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006c9c:	e002      	b.n	8006ca4 <chk_chr+0x12>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	607b      	str	r3, [r7, #4]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d005      	beq.n	8006cb8 <chk_chr+0x26>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d1f2      	bne.n	8006c9e <chk_chr+0xc>
	return *str;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	781b      	ldrb	r3, [r3, #0]
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f002 ff81 	bl	8009bde <ff_req_grant>
 8006cdc:	4603      	mov	r3, r0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3708      	adds	r7, #8
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b082      	sub	sp, #8
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
 8006cee:	460b      	mov	r3, r1
 8006cf0:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d011      	beq.n	8006d1c <unlock_fs+0x36>
 8006cf8:	78fb      	ldrb	r3, [r7, #3]
 8006cfa:	2b0c      	cmp	r3, #12
 8006cfc:	d00e      	beq.n	8006d1c <unlock_fs+0x36>
		res != FR_NOT_ENABLED &&
 8006cfe:	78fb      	ldrb	r3, [r7, #3]
 8006d00:	2b0b      	cmp	r3, #11
 8006d02:	d00b      	beq.n	8006d1c <unlock_fs+0x36>
		res != FR_INVALID_DRIVE &&
 8006d04:	78fb      	ldrb	r3, [r7, #3]
 8006d06:	2b09      	cmp	r3, #9
 8006d08:	d008      	beq.n	8006d1c <unlock_fs+0x36>
		res != FR_INVALID_OBJECT &&
 8006d0a:	78fb      	ldrb	r3, [r7, #3]
 8006d0c:	2b0f      	cmp	r3, #15
 8006d0e:	d005      	beq.n	8006d1c <unlock_fs+0x36>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006d16:	4618      	mov	r0, r3
 8006d18:	f002 ff76 	bl	8009c08 <ff_rel_grant>
	}
}
 8006d1c:	bf00      	nop
 8006d1e:	3708      	adds	r7, #8
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006d2e:	2300      	movs	r3, #0
 8006d30:	60bb      	str	r3, [r7, #8]
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	60fb      	str	r3, [r7, #12]
 8006d36:	e038      	b.n	8006daa <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8006d38:	4930      	ldr	r1, [pc, #192]	; (8006dfc <chk_lock+0xd8>)
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	005b      	lsls	r3, r3, #1
 8006d40:	4413      	add	r3, r2
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	440b      	add	r3, r1
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d029      	beq.n	8006da0 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006d4c:	492b      	ldr	r1, [pc, #172]	; (8006dfc <chk_lock+0xd8>)
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	4613      	mov	r3, r2
 8006d52:	005b      	lsls	r3, r3, #1
 8006d54:	4413      	add	r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	440b      	add	r3, r1
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d11e      	bne.n	8006da4 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8006d66:	4925      	ldr	r1, [pc, #148]	; (8006dfc <chk_lock+0xd8>)
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	005b      	lsls	r3, r3, #1
 8006d6e:	4413      	add	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	440b      	add	r3, r1
 8006d74:	3304      	adds	r3, #4
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d110      	bne.n	8006da4 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8006d82:	491e      	ldr	r1, [pc, #120]	; (8006dfc <chk_lock+0xd8>)
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	4613      	mov	r3, r2
 8006d88:	005b      	lsls	r3, r3, #1
 8006d8a:	4413      	add	r3, r2
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	440b      	add	r3, r1
 8006d90:	3308      	adds	r3, #8
 8006d92:	881a      	ldrh	r2, [r3, #0]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d102      	bne.n	8006da4 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8006d9e:	e007      	b.n	8006db0 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8006da0:	2301      	movs	r3, #1
 8006da2:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	3301      	adds	r3, #1
 8006da8:	60fb      	str	r3, [r7, #12]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d9c3      	bls.n	8006d38 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d109      	bne.n	8006dca <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d102      	bne.n	8006dc2 <chk_lock+0x9e>
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	d101      	bne.n	8006dc6 <chk_lock+0xa2>
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	e013      	b.n	8006dee <chk_lock+0xca>
 8006dc6:	2312      	movs	r3, #18
 8006dc8:	e011      	b.n	8006dee <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d10b      	bne.n	8006de8 <chk_lock+0xc4>
 8006dd0:	490a      	ldr	r1, [pc, #40]	; (8006dfc <chk_lock+0xd8>)
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	005b      	lsls	r3, r3, #1
 8006dd8:	4413      	add	r3, r2
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	440b      	add	r3, r1
 8006dde:	330a      	adds	r3, #10
 8006de0:	881b      	ldrh	r3, [r3, #0]
 8006de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006de6:	d101      	bne.n	8006dec <chk_lock+0xc8>
 8006de8:	2310      	movs	r3, #16
 8006dea:	e000      	b.n	8006dee <chk_lock+0xca>
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3714      	adds	r7, #20
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	20000a18 	.word	0x20000a18

08006e00 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006e06:	2300      	movs	r3, #0
 8006e08:	607b      	str	r3, [r7, #4]
 8006e0a:	e002      	b.n	8006e12 <enq_lock+0x12>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	607b      	str	r3, [r7, #4]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d809      	bhi.n	8006e2c <enq_lock+0x2c>
 8006e18:	490a      	ldr	r1, [pc, #40]	; (8006e44 <enq_lock+0x44>)
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	005b      	lsls	r3, r3, #1
 8006e20:	4413      	add	r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	440b      	add	r3, r1
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d1ef      	bne.n	8006e0c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	bf14      	ite	ne
 8006e32:	2301      	movne	r3, #1
 8006e34:	2300      	moveq	r3, #0
 8006e36:	b2db      	uxtb	r3, r3
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr
 8006e44:	20000a18 	.word	0x20000a18

08006e48 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006e52:	2300      	movs	r3, #0
 8006e54:	60fb      	str	r3, [r7, #12]
 8006e56:	e02b      	b.n	8006eb0 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8006e58:	4956      	ldr	r1, [pc, #344]	; (8006fb4 <inc_lock+0x16c>)
 8006e5a:	68fa      	ldr	r2, [r7, #12]
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	005b      	lsls	r3, r3, #1
 8006e60:	4413      	add	r3, r2
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	440b      	add	r3, r1
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d11b      	bne.n	8006eaa <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8006e72:	4950      	ldr	r1, [pc, #320]	; (8006fb4 <inc_lock+0x16c>)
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	4613      	mov	r3, r2
 8006e78:	005b      	lsls	r3, r3, #1
 8006e7a:	4413      	add	r3, r2
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	440b      	add	r3, r1
 8006e80:	3304      	adds	r3, #4
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d10d      	bne.n	8006eaa <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8006e8e:	4949      	ldr	r1, [pc, #292]	; (8006fb4 <inc_lock+0x16c>)
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	4613      	mov	r3, r2
 8006e94:	005b      	lsls	r3, r3, #1
 8006e96:	4413      	add	r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	440b      	add	r3, r1
 8006e9c:	3308      	adds	r3, #8
 8006e9e:	881a      	ldrh	r2, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d006      	beq.n	8006eb8 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	3301      	adds	r3, #1
 8006eae:	60fb      	str	r3, [r7, #12]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d9d0      	bls.n	8006e58 <inc_lock+0x10>
 8006eb6:	e000      	b.n	8006eba <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8006eb8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d145      	bne.n	8006f4c <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	60fb      	str	r3, [r7, #12]
 8006ec4:	e002      	b.n	8006ecc <inc_lock+0x84>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	3301      	adds	r3, #1
 8006eca:	60fb      	str	r3, [r7, #12]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d809      	bhi.n	8006ee6 <inc_lock+0x9e>
 8006ed2:	4938      	ldr	r1, [pc, #224]	; (8006fb4 <inc_lock+0x16c>)
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	005b      	lsls	r3, r3, #1
 8006eda:	4413      	add	r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	440b      	add	r3, r1
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1ef      	bne.n	8006ec6 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d101      	bne.n	8006ef0 <inc_lock+0xa8>
 8006eec:	2300      	movs	r3, #0
 8006eee:	e05a      	b.n	8006fa6 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8006ef6:	482f      	ldr	r0, [pc, #188]	; (8006fb4 <inc_lock+0x16c>)
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	4613      	mov	r3, r2
 8006efc:	005b      	lsls	r3, r3, #1
 8006efe:	4413      	add	r3, r2
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	4403      	add	r3, r0
 8006f04:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8006f0c:	4829      	ldr	r0, [pc, #164]	; (8006fb4 <inc_lock+0x16c>)
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	4613      	mov	r3, r2
 8006f12:	005b      	lsls	r3, r3, #1
 8006f14:	4413      	add	r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	4403      	add	r3, r0
 8006f1a:	3304      	adds	r3, #4
 8006f1c:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8006f24:	4923      	ldr	r1, [pc, #140]	; (8006fb4 <inc_lock+0x16c>)
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	4613      	mov	r3, r2
 8006f2a:	005b      	lsls	r3, r3, #1
 8006f2c:	4413      	add	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	440b      	add	r3, r1
 8006f32:	3308      	adds	r3, #8
 8006f34:	4602      	mov	r2, r0
 8006f36:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8006f38:	491e      	ldr	r1, [pc, #120]	; (8006fb4 <inc_lock+0x16c>)
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	005b      	lsls	r3, r3, #1
 8006f40:	4413      	add	r3, r2
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	440b      	add	r3, r1
 8006f46:	330a      	adds	r3, #10
 8006f48:	2200      	movs	r2, #0
 8006f4a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d00c      	beq.n	8006f6c <inc_lock+0x124>
 8006f52:	4918      	ldr	r1, [pc, #96]	; (8006fb4 <inc_lock+0x16c>)
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	4613      	mov	r3, r2
 8006f58:	005b      	lsls	r3, r3, #1
 8006f5a:	4413      	add	r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	440b      	add	r3, r1
 8006f60:	330a      	adds	r3, #10
 8006f62:	881b      	ldrh	r3, [r3, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d001      	beq.n	8006f6c <inc_lock+0x124>
 8006f68:	2300      	movs	r3, #0
 8006f6a:	e01c      	b.n	8006fa6 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d10b      	bne.n	8006f8a <inc_lock+0x142>
 8006f72:	4910      	ldr	r1, [pc, #64]	; (8006fb4 <inc_lock+0x16c>)
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	4613      	mov	r3, r2
 8006f78:	005b      	lsls	r3, r3, #1
 8006f7a:	4413      	add	r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	440b      	add	r3, r1
 8006f80:	330a      	adds	r3, #10
 8006f82:	881b      	ldrh	r3, [r3, #0]
 8006f84:	3301      	adds	r3, #1
 8006f86:	b299      	uxth	r1, r3
 8006f88:	e001      	b.n	8006f8e <inc_lock+0x146>
 8006f8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f8e:	4809      	ldr	r0, [pc, #36]	; (8006fb4 <inc_lock+0x16c>)
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	4613      	mov	r3, r2
 8006f94:	005b      	lsls	r3, r3, #1
 8006f96:	4413      	add	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4403      	add	r3, r0
 8006f9c:	330a      	adds	r3, #10
 8006f9e:	460a      	mov	r2, r1
 8006fa0:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	3301      	adds	r3, #1
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3714      	adds	r7, #20
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	20000a18 	.word	0x20000a18

08006fb8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	607b      	str	r3, [r7, #4]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d82e      	bhi.n	800702a <dec_lock+0x72>
		n = Files[i].ctr;
 8006fcc:	491b      	ldr	r1, [pc, #108]	; (800703c <dec_lock+0x84>)
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	005b      	lsls	r3, r3, #1
 8006fd4:	4413      	add	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	440b      	add	r3, r1
 8006fda:	330a      	adds	r3, #10
 8006fdc:	881b      	ldrh	r3, [r3, #0]
 8006fde:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006fe0:	89fb      	ldrh	r3, [r7, #14]
 8006fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fe6:	d101      	bne.n	8006fec <dec_lock+0x34>
 8006fe8:	2300      	movs	r3, #0
 8006fea:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8006fec:	89fb      	ldrh	r3, [r7, #14]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d002      	beq.n	8006ff8 <dec_lock+0x40>
 8006ff2:	89fb      	ldrh	r3, [r7, #14]
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006ff8:	4910      	ldr	r1, [pc, #64]	; (800703c <dec_lock+0x84>)
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	005b      	lsls	r3, r3, #1
 8007000:	4413      	add	r3, r2
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	440b      	add	r3, r1
 8007006:	330a      	adds	r3, #10
 8007008:	89fa      	ldrh	r2, [r7, #14]
 800700a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800700c:	89fb      	ldrh	r3, [r7, #14]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d108      	bne.n	8007024 <dec_lock+0x6c>
 8007012:	490a      	ldr	r1, [pc, #40]	; (800703c <dec_lock+0x84>)
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	4613      	mov	r3, r2
 8007018:	005b      	lsls	r3, r3, #1
 800701a:	4413      	add	r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	440b      	add	r3, r1
 8007020:	2200      	movs	r2, #0
 8007022:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007024:	2300      	movs	r3, #0
 8007026:	737b      	strb	r3, [r7, #13]
 8007028:	e001      	b.n	800702e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800702a:	2302      	movs	r3, #2
 800702c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800702e:	7b7b      	ldrb	r3, [r7, #13]
}
 8007030:	4618      	mov	r0, r3
 8007032:	3714      	adds	r7, #20
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr
 800703c:	20000a18 	.word	0x20000a18

08007040 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007048:	2300      	movs	r3, #0
 800704a:	60fb      	str	r3, [r7, #12]
 800704c:	e016      	b.n	800707c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800704e:	4910      	ldr	r1, [pc, #64]	; (8007090 <clear_lock+0x50>)
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	4613      	mov	r3, r2
 8007054:	005b      	lsls	r3, r3, #1
 8007056:	4413      	add	r3, r2
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	440b      	add	r3, r1
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	429a      	cmp	r2, r3
 8007062:	d108      	bne.n	8007076 <clear_lock+0x36>
 8007064:	490a      	ldr	r1, [pc, #40]	; (8007090 <clear_lock+0x50>)
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	4613      	mov	r3, r2
 800706a:	005b      	lsls	r3, r3, #1
 800706c:	4413      	add	r3, r2
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	440b      	add	r3, r1
 8007072:	2200      	movs	r2, #0
 8007074:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	3301      	adds	r3, #1
 800707a:	60fb      	str	r3, [r7, #12]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d9e5      	bls.n	800704e <clear_lock+0xe>
	}
}
 8007082:	bf00      	nop
 8007084:	bf00      	nop
 8007086:	3714      	adds	r7, #20
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr
 8007090:	20000a18 	.word	0x20000a18

08007094 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b086      	sub	sp, #24
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800709c:	2300      	movs	r3, #0
 800709e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d038      	beq.n	800711c <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 80070b0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80070b8:	6879      	ldr	r1, [r7, #4]
 80070ba:	2301      	movs	r3, #1
 80070bc:	697a      	ldr	r2, [r7, #20]
 80070be:	f7ff fd49 	bl	8006b54 <disk_write>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d002      	beq.n	80070ce <sync_window+0x3a>
			res = FR_DISK_ERR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	73fb      	strb	r3, [r7, #15]
 80070cc:	e026      	b.n	800711c <sync_window+0x88>
		} else {
			fs->wflag = 0;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80070dc:	697a      	ldr	r2, [r7, #20]
 80070de:	1ad2      	subs	r2, r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d218      	bcs.n	800711c <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80070f0:	613b      	str	r3, [r7, #16]
 80070f2:	e010      	b.n	8007116 <sync_window+0x82>
					wsect += fs->fsize;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	4413      	add	r3, r2
 80070fe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007106:	6879      	ldr	r1, [r7, #4]
 8007108:	2301      	movs	r3, #1
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	f7ff fd22 	bl	8006b54 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	3b01      	subs	r3, #1
 8007114:	613b      	str	r3, [r7, #16]
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	2b01      	cmp	r3, #1
 800711a:	d8eb      	bhi.n	80070f4 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800711c:	7bfb      	ldrb	r3, [r7, #15]
}
 800711e:	4618      	mov	r0, r3
 8007120:	3718      	adds	r7, #24
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b084      	sub	sp, #16
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
 800712e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007130:	2300      	movs	r3, #0
 8007132:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800713a:	683a      	ldr	r2, [r7, #0]
 800713c:	429a      	cmp	r2, r3
 800713e:	d01b      	beq.n	8007178 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f7ff ffa7 	bl	8007094 <sync_window>
 8007146:	4603      	mov	r3, r0
 8007148:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800714a:	7bfb      	ldrb	r3, [r7, #15]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d113      	bne.n	8007178 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007156:	6879      	ldr	r1, [r7, #4]
 8007158:	2301      	movs	r3, #1
 800715a:	683a      	ldr	r2, [r7, #0]
 800715c:	f7ff fcda 	bl	8006b14 <disk_read>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d004      	beq.n	8007170 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007166:	f04f 33ff 	mov.w	r3, #4294967295
 800716a:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800716c:	2301      	movs	r3, #1
 800716e:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	683a      	ldr	r2, [r7, #0]
 8007174:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
		}
	}
	return res;
 8007178:	7bfb      	ldrb	r3, [r7, #15]
}
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8007182:	b580      	push	{r7, lr}
 8007184:	b084      	sub	sp, #16
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f7ff ff82 	bl	8007094 <sync_window>
 8007190:	4603      	mov	r3, r0
 8007192:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007194:	7bfb      	ldrb	r3, [r7, #15]
 8007196:	2b00      	cmp	r3, #0
 8007198:	f040 809b 	bne.w	80072d2 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80071a2:	2b03      	cmp	r3, #3
 80071a4:	f040 8088 	bne.w	80072b8 <sync_fs+0x136>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	f040 8082 	bne.w	80072b8 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071ba:	2100      	movs	r1, #0
 80071bc:	4618      	mov	r0, r3
 80071be:	f7ff fd26 	bl	8006c0e <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2255      	movs	r2, #85	; 0x55
 80071c6:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	22aa      	movs	r2, #170	; 0xaa
 80071ce:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2252      	movs	r2, #82	; 0x52
 80071d6:	701a      	strb	r2, [r3, #0]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2252      	movs	r2, #82	; 0x52
 80071dc:	705a      	strb	r2, [r3, #1]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2261      	movs	r2, #97	; 0x61
 80071e2:	709a      	strb	r2, [r3, #2]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2241      	movs	r2, #65	; 0x41
 80071e8:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2272      	movs	r2, #114	; 0x72
 80071ee:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2272      	movs	r2, #114	; 0x72
 80071f6:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2241      	movs	r2, #65	; 0x41
 80071fe:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2261      	movs	r2, #97	; 0x61
 8007206:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007210:	b2da      	uxtb	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800721e:	b29b      	uxth	r3, r3
 8007220:	0a1b      	lsrs	r3, r3, #8
 8007222:	b29b      	uxth	r3, r3
 8007224:	b2da      	uxtb	r2, r3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007232:	0c1b      	lsrs	r3, r3, #16
 8007234:	b2da      	uxtb	r2, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007242:	0e1b      	lsrs	r3, r3, #24
 8007244:	b2da      	uxtb	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007252:	b2da      	uxtb	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007260:	b29b      	uxth	r3, r3
 8007262:	0a1b      	lsrs	r3, r3, #8
 8007264:	b29b      	uxth	r3, r3
 8007266:	b2da      	uxtb	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007274:	0c1b      	lsrs	r3, r3, #16
 8007276:	b2da      	uxtb	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007284:	0e1b      	lsrs	r3, r3, #24
 8007286:	b2da      	uxtb	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007294:	1c5a      	adds	r2, r3, #1
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80072a2:	6879      	ldr	r1, [r7, #4]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 80072aa:	2301      	movs	r3, #1
 80072ac:	f7ff fc52 	bl	8006b54 <disk_write>
			fs->fsi_flag = 0;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80072be:	2200      	movs	r2, #0
 80072c0:	2100      	movs	r1, #0
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7ff fc66 	bl	8006b94 <disk_ioctl>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d001      	beq.n	80072d2 <sync_fs+0x150>
			res = FR_DISK_ERR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80072d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	3b02      	subs	r3, #2
 80072ea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80072f2:	3b02      	subs	r3, #2
 80072f4:	683a      	ldr	r2, [r7, #0]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d301      	bcc.n	80072fe <clust2sect+0x22>
 80072fa:	2300      	movs	r3, #0
 80072fc:	e00a      	b.n	8007314 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007304:	461a      	mov	r2, r3
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	fb03 f202 	mul.w	r2, r3, r2
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8007312:	4413      	add	r3, r2
}
 8007314:	4618      	mov	r0, r3
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b086      	sub	sp, #24
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	2b01      	cmp	r3, #1
 800732e:	d905      	bls.n	800733c <get_fat+0x1c>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	429a      	cmp	r2, r3
 800733a:	d302      	bcc.n	8007342 <get_fat+0x22>
		val = 1;	/* Internal error */
 800733c:	2301      	movs	r3, #1
 800733e:	617b      	str	r3, [r7, #20]
 8007340:	e0a3      	b.n	800748a <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007342:	f04f 33ff 	mov.w	r3, #4294967295
 8007346:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800734e:	2b03      	cmp	r3, #3
 8007350:	d068      	beq.n	8007424 <get_fat+0x104>
 8007352:	2b03      	cmp	r3, #3
 8007354:	f300 808f 	bgt.w	8007476 <get_fat+0x156>
 8007358:	2b01      	cmp	r3, #1
 800735a:	d002      	beq.n	8007362 <get_fat+0x42>
 800735c:	2b02      	cmp	r3, #2
 800735e:	d040      	beq.n	80073e2 <get_fat+0xc2>
 8007360:	e089      	b.n	8007476 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	60fb      	str	r3, [r7, #12]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	085b      	lsrs	r3, r3, #1
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	4413      	add	r3, r2
 800736e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	0a5b      	lsrs	r3, r3, #9
 800737a:	4413      	add	r3, r2
 800737c:	4619      	mov	r1, r3
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f7ff fed1 	bl	8007126 <move_window>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d178      	bne.n	800747c <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	1c5a      	adds	r2, r3, #1
 800738e:	60fa      	str	r2, [r7, #12]
 8007390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	5cd3      	ldrb	r3, [r2, r3]
 8007398:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	0a5b      	lsrs	r3, r3, #9
 80073a4:	4413      	add	r3, r2
 80073a6:	4619      	mov	r1, r3
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f7ff febc 	bl	8007126 <move_window>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d165      	bne.n	8007480 <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	5cd3      	ldrb	r3, [r2, r3]
 80073be:	021b      	lsls	r3, r3, #8
 80073c0:	461a      	mov	r2, r3
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	f003 0301 	and.w	r3, r3, #1
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d002      	beq.n	80073d8 <get_fat+0xb8>
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	091b      	lsrs	r3, r3, #4
 80073d6:	e002      	b.n	80073de <get_fat+0xbe>
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073de:	617b      	str	r3, [r7, #20]
			break;
 80073e0:	e053      	b.n	800748a <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	0a1b      	lsrs	r3, r3, #8
 80073ec:	4413      	add	r3, r2
 80073ee:	4619      	mov	r1, r3
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f7ff fe98 	bl	8007126 <move_window>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d143      	bne.n	8007484 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	005b      	lsls	r3, r3, #1
 8007400:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	4413      	add	r3, r2
 8007408:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	3301      	adds	r3, #1
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	021b      	lsls	r3, r3, #8
 8007412:	b21a      	sxth	r2, r3
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	b21b      	sxth	r3, r3
 800741a:	4313      	orrs	r3, r2
 800741c:	b21b      	sxth	r3, r3
 800741e:	b29b      	uxth	r3, r3
 8007420:	617b      	str	r3, [r7, #20]
			break;
 8007422:	e032      	b.n	800748a <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	09db      	lsrs	r3, r3, #7
 800742e:	4413      	add	r3, r2
 8007430:	4619      	mov	r1, r3
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f7ff fe77 	bl	8007126 <move_window>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d124      	bne.n	8007488 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	4413      	add	r3, r2
 800744a:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	3303      	adds	r3, #3
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	061a      	lsls	r2, r3, #24
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	3302      	adds	r3, #2
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	041b      	lsls	r3, r3, #16
 800745c:	4313      	orrs	r3, r2
 800745e:	693a      	ldr	r2, [r7, #16]
 8007460:	3201      	adds	r2, #1
 8007462:	7812      	ldrb	r2, [r2, #0]
 8007464:	0212      	lsls	r2, r2, #8
 8007466:	4313      	orrs	r3, r2
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	7812      	ldrb	r2, [r2, #0]
 800746c:	4313      	orrs	r3, r2
 800746e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007472:	617b      	str	r3, [r7, #20]
			break;
 8007474:	e009      	b.n	800748a <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 8007476:	2301      	movs	r3, #1
 8007478:	617b      	str	r3, [r7, #20]
 800747a:	e006      	b.n	800748a <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800747c:	bf00      	nop
 800747e:	e004      	b.n	800748a <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007480:	bf00      	nop
 8007482:	e002      	b.n	800748a <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007484:	bf00      	nop
 8007486:	e000      	b.n	800748a <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007488:	bf00      	nop
		}
	}

	return val;
 800748a:	697b      	ldr	r3, [r7, #20]
}
 800748c:	4618      	mov	r0, r3
 800748e:	3718      	adds	r7, #24
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b088      	sub	sp, #32
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d905      	bls.n	80074b2 <put_fat+0x1e>
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d302      	bcc.n	80074b8 <put_fat+0x24>
		res = FR_INT_ERR;
 80074b2:	2302      	movs	r3, #2
 80074b4:	77fb      	strb	r3, [r7, #31]
 80074b6:	e0f6      	b.n	80076a6 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80074be:	2b03      	cmp	r3, #3
 80074c0:	f000 809e 	beq.w	8007600 <put_fat+0x16c>
 80074c4:	2b03      	cmp	r3, #3
 80074c6:	f300 80e4 	bgt.w	8007692 <put_fat+0x1fe>
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d002      	beq.n	80074d4 <put_fat+0x40>
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	d06f      	beq.n	80075b2 <put_fat+0x11e>
 80074d2:	e0de      	b.n	8007692 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	617b      	str	r3, [r7, #20]
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	085b      	lsrs	r3, r3, #1
 80074dc:	697a      	ldr	r2, [r7, #20]
 80074de:	4413      	add	r3, r2
 80074e0:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	0a5b      	lsrs	r3, r3, #9
 80074ec:	4413      	add	r3, r2
 80074ee:	4619      	mov	r1, r3
 80074f0:	68f8      	ldr	r0, [r7, #12]
 80074f2:	f7ff fe18 	bl	8007126 <move_window>
 80074f6:	4603      	mov	r3, r0
 80074f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80074fa:	7ffb      	ldrb	r3, [r7, #31]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f040 80cb 	bne.w	8007698 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	1c5a      	adds	r2, r3, #1
 8007506:	617a      	str	r2, [r7, #20]
 8007508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	4413      	add	r3, r2
 8007510:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	f003 0301 	and.w	r3, r3, #1
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00d      	beq.n	8007538 <put_fat+0xa4>
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	b25b      	sxtb	r3, r3
 8007522:	f003 030f 	and.w	r3, r3, #15
 8007526:	b25a      	sxtb	r2, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	b2db      	uxtb	r3, r3
 800752c:	011b      	lsls	r3, r3, #4
 800752e:	b25b      	sxtb	r3, r3
 8007530:	4313      	orrs	r3, r2
 8007532:	b25b      	sxtb	r3, r3
 8007534:	b2db      	uxtb	r3, r3
 8007536:	e001      	b.n	800753c <put_fat+0xa8>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	b2db      	uxtb	r3, r3
 800753c:	69ba      	ldr	r2, [r7, #24]
 800753e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	0a5b      	lsrs	r3, r3, #9
 8007552:	4413      	add	r3, r2
 8007554:	4619      	mov	r1, r3
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f7ff fde5 	bl	8007126 <move_window>
 800755c:	4603      	mov	r3, r0
 800755e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007560:	7ffb      	ldrb	r3, [r7, #31]
 8007562:	2b00      	cmp	r3, #0
 8007564:	f040 809a 	bne.w	800769c <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	4413      	add	r3, r2
 8007572:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	f003 0301 	and.w	r3, r3, #1
 800757a:	2b00      	cmp	r3, #0
 800757c:	d003      	beq.n	8007586 <put_fat+0xf2>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	091b      	lsrs	r3, r3, #4
 8007582:	b2db      	uxtb	r3, r3
 8007584:	e00e      	b.n	80075a4 <put_fat+0x110>
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	b25b      	sxtb	r3, r3
 800758c:	f023 030f 	bic.w	r3, r3, #15
 8007590:	b25a      	sxtb	r2, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	0a1b      	lsrs	r3, r3, #8
 8007596:	b25b      	sxtb	r3, r3
 8007598:	f003 030f 	and.w	r3, r3, #15
 800759c:	b25b      	sxtb	r3, r3
 800759e:	4313      	orrs	r3, r2
 80075a0:	b25b      	sxtb	r3, r3
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	69ba      	ldr	r2, [r7, #24]
 80075a6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80075b0:	e079      	b.n	80076a6 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	0a1b      	lsrs	r3, r3, #8
 80075bc:	4413      	add	r3, r2
 80075be:	4619      	mov	r1, r3
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	f7ff fdb0 	bl	8007126 <move_window>
 80075c6:	4603      	mov	r3, r0
 80075c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80075ca:	7ffb      	ldrb	r3, [r7, #31]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d167      	bne.n	80076a0 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	005b      	lsls	r3, r3, #1
 80075d4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	4413      	add	r3, r2
 80075dc:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	b2da      	uxtb	r2, r3
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	701a      	strb	r2, [r3, #0]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	0a1b      	lsrs	r3, r3, #8
 80075ec:	b29a      	uxth	r2, r3
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	3301      	adds	r3, #1
 80075f2:	b2d2      	uxtb	r2, r2
 80075f4:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2201      	movs	r2, #1
 80075fa:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80075fe:	e052      	b.n	80076a6 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	09db      	lsrs	r3, r3, #7
 800760a:	4413      	add	r3, r2
 800760c:	4619      	mov	r1, r3
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	f7ff fd89 	bl	8007126 <move_window>
 8007614:	4603      	mov	r3, r0
 8007616:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007618:	7ffb      	ldrb	r3, [r7, #31]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d142      	bne.n	80076a4 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007626:	68fa      	ldr	r2, [r7, #12]
 8007628:	4413      	add	r3, r2
 800762a:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	3303      	adds	r3, #3
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	061a      	lsls	r2, r3, #24
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	3302      	adds	r3, #2
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	041b      	lsls	r3, r3, #16
 800763c:	4313      	orrs	r3, r2
 800763e:	69ba      	ldr	r2, [r7, #24]
 8007640:	3201      	adds	r2, #1
 8007642:	7812      	ldrb	r2, [r2, #0]
 8007644:	0212      	lsls	r2, r2, #8
 8007646:	4313      	orrs	r3, r2
 8007648:	69ba      	ldr	r2, [r7, #24]
 800764a:	7812      	ldrb	r2, [r2, #0]
 800764c:	4313      	orrs	r3, r2
 800764e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	4313      	orrs	r3, r2
 8007656:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	b2da      	uxtb	r2, r3
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	701a      	strb	r2, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	b29b      	uxth	r3, r3
 8007664:	0a1b      	lsrs	r3, r3, #8
 8007666:	b29a      	uxth	r2, r3
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	3301      	adds	r3, #1
 800766c:	b2d2      	uxtb	r2, r2
 800766e:	701a      	strb	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	0c1a      	lsrs	r2, r3, #16
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	3302      	adds	r3, #2
 8007678:	b2d2      	uxtb	r2, r2
 800767a:	701a      	strb	r2, [r3, #0]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	0e1a      	lsrs	r2, r3, #24
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	3303      	adds	r3, #3
 8007684:	b2d2      	uxtb	r2, r2
 8007686:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8007690:	e009      	b.n	80076a6 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 8007692:	2302      	movs	r3, #2
 8007694:	77fb      	strb	r3, [r7, #31]
 8007696:	e006      	b.n	80076a6 <put_fat+0x212>
			if (res != FR_OK) break;
 8007698:	bf00      	nop
 800769a:	e004      	b.n	80076a6 <put_fat+0x212>
			if (res != FR_OK) break;
 800769c:	bf00      	nop
 800769e:	e002      	b.n	80076a6 <put_fat+0x212>
			if (res != FR_OK) break;
 80076a0:	bf00      	nop
 80076a2:	e000      	b.n	80076a6 <put_fat+0x212>
			if (res != FR_OK) break;
 80076a4:	bf00      	nop
		}
	}

	return res;
 80076a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3720      	adds	r7, #32
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d905      	bls.n	80076cc <remove_chain+0x1c>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80076c6:	683a      	ldr	r2, [r7, #0]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d302      	bcc.n	80076d2 <remove_chain+0x22>
		res = FR_INT_ERR;
 80076cc:	2302      	movs	r3, #2
 80076ce:	73fb      	strb	r3, [r7, #15]
 80076d0:	e043      	b.n	800775a <remove_chain+0xaa>

	} else {
		res = FR_OK;
 80076d2:	2300      	movs	r3, #0
 80076d4:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80076d6:	e036      	b.n	8007746 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80076d8:	6839      	ldr	r1, [r7, #0]
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f7ff fe20 	bl	8007320 <get_fat>
 80076e0:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d035      	beq.n	8007754 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d102      	bne.n	80076f4 <remove_chain+0x44>
 80076ee:	2302      	movs	r3, #2
 80076f0:	73fb      	strb	r3, [r7, #15]
 80076f2:	e032      	b.n	800775a <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076fa:	d102      	bne.n	8007702 <remove_chain+0x52>
 80076fc:	2301      	movs	r3, #1
 80076fe:	73fb      	strb	r3, [r7, #15]
 8007700:	e02b      	b.n	800775a <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8007702:	2200      	movs	r2, #0
 8007704:	6839      	ldr	r1, [r7, #0]
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f7ff fec4 	bl	8007494 <put_fat>
 800770c:	4603      	mov	r3, r0
 800770e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007710:	7bfb      	ldrb	r3, [r7, #15]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d120      	bne.n	8007758 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800771c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007720:	d00f      	beq.n	8007742 <remove_chain+0x92>
				fs->free_clust++;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007728:	1c5a      	adds	r2, r3, #1
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				fs->fsi_flag |= 1;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8007736:	f043 0301 	orr.w	r3, r3, #1
 800773a:	b2da      	uxtb	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800774c:	683a      	ldr	r2, [r7, #0]
 800774e:	429a      	cmp	r2, r3
 8007750:	d3c2      	bcc.n	80076d8 <remove_chain+0x28>
 8007752:	e002      	b.n	800775a <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8007754:	bf00      	nop
 8007756:	e000      	b.n	800775a <remove_chain+0xaa>
			if (res != FR_OK) break;
 8007758:	bf00      	nop
		}
	}

	return res;
 800775a:	7bfb      	ldrb	r3, [r7, #15]
}
 800775c:	4618      	mov	r0, r3
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b086      	sub	sp, #24
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d10f      	bne.n	8007794 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800777a:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d005      	beq.n	800778e <create_chain+0x2a>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007788:	693a      	ldr	r2, [r7, #16]
 800778a:	429a      	cmp	r2, r3
 800778c:	d31c      	bcc.n	80077c8 <create_chain+0x64>
 800778e:	2301      	movs	r3, #1
 8007790:	613b      	str	r3, [r7, #16]
 8007792:	e019      	b.n	80077c8 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8007794:	6839      	ldr	r1, [r7, #0]
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f7ff fdc2 	bl	8007320 <get_fat>
 800779c:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d801      	bhi.n	80077a8 <create_chain+0x44>
 80077a4:	2301      	movs	r3, #1
 80077a6:	e076      	b.n	8007896 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ae:	d101      	bne.n	80077b4 <create_chain+0x50>
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	e070      	b.n	8007896 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80077ba:	68ba      	ldr	r2, [r7, #8]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d201      	bcs.n	80077c4 <create_chain+0x60>
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	e068      	b.n	8007896 <create_chain+0x132>
		scl = clst;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	3301      	adds	r3, #1
 80077d0:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80077d8:	697a      	ldr	r2, [r7, #20]
 80077da:	429a      	cmp	r2, r3
 80077dc:	d307      	bcc.n	80077ee <create_chain+0x8a>
			ncl = 2;
 80077de:	2302      	movs	r3, #2
 80077e0:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80077e2:	697a      	ldr	r2, [r7, #20]
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d901      	bls.n	80077ee <create_chain+0x8a>
 80077ea:	2300      	movs	r3, #0
 80077ec:	e053      	b.n	8007896 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80077ee:	6979      	ldr	r1, [r7, #20]
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f7ff fd95 	bl	8007320 <get_fat>
 80077f6:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00e      	beq.n	800781c <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007804:	d002      	beq.n	800780c <create_chain+0xa8>
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	2b01      	cmp	r3, #1
 800780a:	d101      	bne.n	8007810 <create_chain+0xac>
			return cs;
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	e042      	b.n	8007896 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8007810:	697a      	ldr	r2, [r7, #20]
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	429a      	cmp	r2, r3
 8007816:	d1d9      	bne.n	80077cc <create_chain+0x68>
 8007818:	2300      	movs	r3, #0
 800781a:	e03c      	b.n	8007896 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800781c:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800781e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8007822:	6979      	ldr	r1, [r7, #20]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f7ff fe35 	bl	8007494 <put_fat>
 800782a:	4603      	mov	r3, r0
 800782c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800782e:	7bfb      	ldrb	r3, [r7, #15]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d109      	bne.n	8007848 <create_chain+0xe4>
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d006      	beq.n	8007848 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800783a:	697a      	ldr	r2, [r7, #20]
 800783c:	6839      	ldr	r1, [r7, #0]
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f7ff fe28 	bl	8007494 <put_fat>
 8007844:	4603      	mov	r3, r0
 8007846:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8007848:	7bfb      	ldrb	r3, [r7, #15]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d11a      	bne.n	8007884 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	697a      	ldr	r2, [r7, #20]
 8007852:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
		if (fs->free_clust != 0xFFFFFFFF) {
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800785c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007860:	d018      	beq.n	8007894 <create_chain+0x130>
			fs->free_clust--;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007868:	1e5a      	subs	r2, r3, #1
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			fs->fsi_flag |= 1;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8007876:	f043 0301 	orr.w	r3, r3, #1
 800787a:	b2da      	uxtb	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8007882:	e007      	b.n	8007894 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8007884:	7bfb      	ldrb	r3, [r7, #15]
 8007886:	2b01      	cmp	r3, #1
 8007888:	d102      	bne.n	8007890 <create_chain+0x12c>
 800788a:	f04f 33ff 	mov.w	r3, #4294967295
 800788e:	e000      	b.n	8007892 <create_chain+0x12e>
 8007890:	2301      	movs	r3, #1
 8007892:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8007894:	697b      	ldr	r3, [r7, #20]
}
 8007896:	4618      	mov	r0, r3
 8007898:	3718      	adds	r7, #24
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800789e:	b480      	push	{r7}
 80078a0:	b087      	sub	sp, #28
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
 80078a6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80078ae:	3304      	adds	r3, #4
 80078b0:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	0a5b      	lsrs	r3, r3, #9
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80078bc:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80078c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80078c4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	1d1a      	adds	r2, r3, #4
 80078ca:	613a      	str	r2, [r7, #16]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d101      	bne.n	80078da <clmt_clust+0x3c>
 80078d6:	2300      	movs	r3, #0
 80078d8:	e010      	b.n	80078fc <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 80078da:	697a      	ldr	r2, [r7, #20]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d307      	bcc.n	80078f2 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 80078e2:	697a      	ldr	r2, [r7, #20]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	617b      	str	r3, [r7, #20]
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	3304      	adds	r3, #4
 80078ee:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80078f0:	e7e9      	b.n	80078c6 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 80078f2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	4413      	add	r3, r2
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	371c      	adds	r7, #28
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b086      	sub	sp, #24
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	b29a      	uxth	r2, r3
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007922:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	2b01      	cmp	r3, #1
 8007928:	d007      	beq.n	800793a <dir_sdi+0x32>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007930:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007934:	697a      	ldr	r2, [r7, #20]
 8007936:	429a      	cmp	r2, r3
 8007938:	d301      	bcc.n	800793e <dir_sdi+0x36>
		return FR_INT_ERR;
 800793a:	2302      	movs	r3, #2
 800793c:	e074      	b.n	8007a28 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10c      	bne.n	800795e <dir_sdi+0x56>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800794a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800794e:	2b03      	cmp	r3, #3
 8007950:	d105      	bne.n	800795e <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007958:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800795c:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d111      	bne.n	8007988 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800796a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800796e:	461a      	mov	r2, r3
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	4293      	cmp	r3, r2
 8007974:	d301      	bcc.n	800797a <dir_sdi+0x72>
			return FR_INT_ERR;
 8007976:	2302      	movs	r3, #2
 8007978:	e056      	b.n	8007a28 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007980:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8007984:	613b      	str	r3, [r7, #16]
 8007986:	e032      	b.n	80079ee <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800798e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007992:	011b      	lsls	r3, r3, #4
 8007994:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8007996:	e01e      	b.n	80079d6 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800799e:	6979      	ldr	r1, [r7, #20]
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7ff fcbd 	bl	8007320 <get_fat>
 80079a6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ae:	d101      	bne.n	80079b4 <dir_sdi+0xac>
 80079b0:	2301      	movs	r3, #1
 80079b2:	e039      	b.n	8007a28 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d907      	bls.n	80079ca <dir_sdi+0xc2>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80079c0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80079c4:	697a      	ldr	r2, [r7, #20]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d301      	bcc.n	80079ce <dir_sdi+0xc6>
				return FR_INT_ERR;
 80079ca:	2302      	movs	r3, #2
 80079cc:	e02c      	b.n	8007a28 <dir_sdi+0x120>
			idx -= ic;
 80079ce:	683a      	ldr	r2, [r7, #0]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	1ad3      	subs	r3, r2, r3
 80079d4:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80079d6:	683a      	ldr	r2, [r7, #0]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d2dc      	bcs.n	8007998 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80079e4:	6979      	ldr	r1, [r7, #20]
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7ff fc78 	bl	80072dc <clust2sect>
 80079ec:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d101      	bne.n	8007a00 <dir_sdi+0xf8>
 80079fc:	2302      	movs	r3, #2
 80079fe:	e013      	b.n	8007a28 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	091a      	lsrs	r2, r3, #4
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	441a      	add	r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007a14:	461a      	mov	r2, r3
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	f003 030f 	and.w	r3, r3, #15
 8007a1c:	015b      	lsls	r3, r3, #5
 8007a1e:	441a      	add	r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3718      	adds	r7, #24
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007a30:	b590      	push	{r4, r7, lr}
 8007a32:	b087      	sub	sp, #28
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8007a40:	3301      	adds	r3, #1
 8007a42:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d004      	beq.n	8007a56 <dir_next+0x26>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d101      	bne.n	8007a5a <dir_next+0x2a>
		return FR_NO_FILE;
 8007a56:	2304      	movs	r3, #4
 8007a58:	e0dd      	b.n	8007c16 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f003 030f 	and.w	r3, r3, #15
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f040 80c6 	bne.w	8007bf2 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007a6c:	1c5a      	adds	r2, r3, #1
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d10b      	bne.n	8007a96 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007a84:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8007a88:	461a      	mov	r2, r3
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	f0c0 80b0 	bcc.w	8007bf2 <dir_next+0x1c2>
				return FR_NO_FILE;
 8007a92:	2304      	movs	r3, #4
 8007a94:	e0bf      	b.n	8007c16 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	091b      	lsrs	r3, r3, #4
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8007aa0:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8007aa4:	3a01      	subs	r2, #1
 8007aa6:	4013      	ands	r3, r2
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	f040 80a2 	bne.w	8007bf2 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007aba:	4619      	mov	r1, r3
 8007abc:	4610      	mov	r0, r2
 8007abe:	f7ff fc2f 	bl	8007320 <get_fat>
 8007ac2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d801      	bhi.n	8007ace <dir_next+0x9e>
 8007aca:	2302      	movs	r3, #2
 8007acc:	e0a3      	b.n	8007c16 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ad4:	d101      	bne.n	8007ada <dir_next+0xaa>
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e09d      	b.n	8007c16 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007ae0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007ae4:	697a      	ldr	r2, [r7, #20]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d374      	bcc.n	8007bd4 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d101      	bne.n	8007af4 <dir_next+0xc4>
 8007af0:	2304      	movs	r3, #4
 8007af2:	e090      	b.n	8007c16 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007b00:	4619      	mov	r1, r3
 8007b02:	4610      	mov	r0, r2
 8007b04:	f7ff fe2e 	bl	8007764 <create_chain>
 8007b08:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d101      	bne.n	8007b14 <dir_next+0xe4>
 8007b10:	2307      	movs	r3, #7
 8007b12:	e080      	b.n	8007c16 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d101      	bne.n	8007b1e <dir_next+0xee>
 8007b1a:	2302      	movs	r3, #2
 8007b1c:	e07b      	b.n	8007c16 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b24:	d101      	bne.n	8007b2a <dir_next+0xfa>
 8007b26:	2301      	movs	r3, #1
 8007b28:	e075      	b.n	8007c16 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007b30:	4618      	mov	r0, r3
 8007b32:	f7ff faaf 	bl	8007094 <sync_window>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d001      	beq.n	8007b40 <dir_next+0x110>
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e06a      	b.n	8007c16 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007b46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7ff f85e 	bl	8006c0e <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 8007b5e:	6979      	ldr	r1, [r7, #20]
 8007b60:	4610      	mov	r0, r2
 8007b62:	f7ff fbbb 	bl	80072dc <clust2sect>
 8007b66:	4603      	mov	r3, r0
 8007b68:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	613b      	str	r3, [r7, #16]
 8007b70:	e01b      	b.n	8007baa <dir_next+0x17a>
						dp->fs->wflag = 1;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007b84:	4618      	mov	r0, r3
 8007b86:	f7ff fa85 	bl	8007094 <sync_window>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d001      	beq.n	8007b94 <dir_next+0x164>
 8007b90:	2301      	movs	r3, #1
 8007b92:	e040      	b.n	8007c16 <dir_next+0x1e6>
						dp->fs->winsect++;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007b9a:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 8007b9e:	3201      	adds	r2, #1
 8007ba0:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	613b      	str	r3, [r7, #16]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007bb0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d3da      	bcc.n	8007b72 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007bc2:	f8d3 1230 	ldr.w	r1, [r3, #560]	; 0x230
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007bcc:	693a      	ldr	r2, [r7, #16]
 8007bce:	1a8a      	subs	r2, r1, r2
 8007bd0:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	697a      	ldr	r2, [r7, #20]
 8007bd8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007be2:	6979      	ldr	r1, [r7, #20]
 8007be4:	4618      	mov	r0, r3
 8007be6:	f7ff fb79 	bl	80072dc <clust2sect>
 8007bea:	4602      	mov	r2, r0
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007c02:	461a      	mov	r2, r3
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f003 030f 	and.w	r3, r3, #15
 8007c0a:	015b      	lsls	r3, r3, #5
 8007c0c:	441a      	add	r2, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	371c      	adds	r7, #28
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd90      	pop	{r4, r7, pc}

08007c1e <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b084      	sub	sp, #16
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
 8007c26:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8007c28:	2100      	movs	r1, #0
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f7ff fe6c 	bl	8007908 <dir_sdi>
 8007c30:	4603      	mov	r3, r0
 8007c32:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007c34:	7bfb      	ldrb	r3, [r7, #15]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d131      	bne.n	8007c9e <dir_alloc+0x80>
		n = 0;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	4610      	mov	r0, r2
 8007c4e:	f7ff fa6a 	bl	8007126 <move_window>
 8007c52:	4603      	mov	r3, r0
 8007c54:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007c56:	7bfb      	ldrb	r3, [r7, #15]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d11f      	bne.n	8007c9c <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	2be5      	cmp	r3, #229	; 0xe5
 8007c66:	d005      	beq.n	8007c74 <dir_alloc+0x56>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d107      	bne.n	8007c84 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	3301      	adds	r3, #1
 8007c78:	60bb      	str	r3, [r7, #8]
 8007c7a:	68ba      	ldr	r2, [r7, #8]
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d102      	bne.n	8007c88 <dir_alloc+0x6a>
 8007c82:	e00c      	b.n	8007c9e <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007c84:	2300      	movs	r3, #0
 8007c86:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8007c88:	2101      	movs	r1, #1
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f7ff fed0 	bl	8007a30 <dir_next>
 8007c90:	4603      	mov	r3, r0
 8007c92:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8007c94:	7bfb      	ldrb	r3, [r7, #15]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d0d1      	beq.n	8007c3e <dir_alloc+0x20>
 8007c9a:	e000      	b.n	8007c9e <dir_alloc+0x80>
			if (res != FR_OK) break;
 8007c9c:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007c9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ca0:	2b04      	cmp	r3, #4
 8007ca2:	d101      	bne.n	8007ca8 <dir_alloc+0x8a>
 8007ca4:	2307      	movs	r3, #7
 8007ca6:	73fb      	strb	r3, [r7, #15]
	return res;
 8007ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8007cb2:	b480      	push	{r7}
 8007cb4:	b085      	sub	sp, #20
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
 8007cba:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	331b      	adds	r3, #27
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	021b      	lsls	r3, r3, #8
 8007cc4:	b21a      	sxth	r2, r3
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	331a      	adds	r3, #26
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	b21b      	sxth	r3, r3
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	b21b      	sxth	r3, r3
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007cdc:	2b03      	cmp	r3, #3
 8007cde:	d10f      	bne.n	8007d00 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	3315      	adds	r3, #21
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	021b      	lsls	r3, r3, #8
 8007ce8:	b21a      	sxth	r2, r3
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	3314      	adds	r3, #20
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	b21b      	sxth	r3, r3
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	b21b      	sxth	r3, r3
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	041b      	lsls	r3, r3, #16
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	60fb      	str	r3, [r7, #12]

	return cl;
 8007d00:	68fb      	ldr	r3, [r7, #12]
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3714      	adds	r7, #20
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr

08007d0e <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b083      	sub	sp, #12
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
 8007d16:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	331a      	adds	r3, #26
 8007d1c:	683a      	ldr	r2, [r7, #0]
 8007d1e:	b2d2      	uxtb	r2, r2
 8007d20:	701a      	strb	r2, [r3, #0]
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	0a1b      	lsrs	r3, r3, #8
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	331b      	adds	r3, #27
 8007d2e:	b2d2      	uxtb	r2, r2
 8007d30:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	0c1a      	lsrs	r2, r3, #16
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	3314      	adds	r3, #20
 8007d3a:	b2d2      	uxtb	r2, r2
 8007d3c:	701a      	strb	r2, [r3, #0]
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	0c1b      	lsrs	r3, r3, #16
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	0a1b      	lsrs	r3, r3, #8
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	3315      	adds	r3, #21
 8007d4c:	b2d2      	uxtb	r2, r2
 8007d4e:	701a      	strb	r2, [r3, #0]
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b086      	sub	sp, #24
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007d64:	2100      	movs	r1, #0
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f7ff fdce 	bl	8007908 <dir_sdi>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007d70:	7dfb      	ldrb	r3, [r7, #23]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d001      	beq.n	8007d7a <dir_find+0x1e>
 8007d76:	7dfb      	ldrb	r3, [r7, #23]
 8007d78:	e03b      	b.n	8007df2 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007d86:	4619      	mov	r1, r3
 8007d88:	4610      	mov	r0, r2
 8007d8a:	f7ff f9cc 	bl	8007126 <move_window>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007d92:	7dfb      	ldrb	r3, [r7, #23]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d128      	bne.n	8007dea <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d9e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007da6:	7bfb      	ldrb	r3, [r7, #15]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d102      	bne.n	8007db2 <dir_find+0x56>
 8007dac:	2304      	movs	r3, #4
 8007dae:	75fb      	strb	r3, [r7, #23]
 8007db0:	e01e      	b.n	8007df0 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	330b      	adds	r3, #11
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	f003 0308 	and.w	r3, r3, #8
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d10a      	bne.n	8007dd6 <dir_find+0x7a>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007dc6:	220b      	movs	r2, #11
 8007dc8:	4619      	mov	r1, r3
 8007dca:	6938      	ldr	r0, [r7, #16]
 8007dcc:	f7fe ff3a 	bl	8006c44 <mem_cmp>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00b      	beq.n	8007dee <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8007dd6:	2100      	movs	r1, #0
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f7ff fe29 	bl	8007a30 <dir_next>
 8007dde:	4603      	mov	r3, r0
 8007de0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007de2:	7dfb      	ldrb	r3, [r7, #23]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d0c8      	beq.n	8007d7a <dir_find+0x1e>
 8007de8:	e002      	b.n	8007df0 <dir_find+0x94>
		if (res != FR_OK) break;
 8007dea:	bf00      	nop
 8007dec:	e000      	b.n	8007df0 <dir_find+0x94>
			break;
 8007dee:	bf00      	nop

	return res;
 8007df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3718      	adds	r7, #24
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b086      	sub	sp, #24
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
 8007e02:	6039      	str	r1, [r7, #0]
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
 8007e04:	2304      	movs	r3, #4
 8007e06:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 8007e08:	e03f      	b.n	8007e8a <dir_read+0x90>
		res = move_window(dp->fs, dp->sect);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007e16:	4619      	mov	r1, r3
 8007e18:	4610      	mov	r0, r2
 8007e1a:	f7ff f984 	bl	8007126 <move_window>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007e22:	7dfb      	ldrb	r3, [r7, #23]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d136      	bne.n	8007e96 <dir_read+0x9c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007e2e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007e36:	7bfb      	ldrb	r3, [r7, #15]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d102      	bne.n	8007e42 <dir_read+0x48>
 8007e3c:	2304      	movs	r3, #4
 8007e3e:	75fb      	strb	r3, [r7, #23]
 8007e40:	e02e      	b.n	8007ea0 <dir_read+0xa6>
		a = dir[DIR_Attr] & AM_MASK;
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	330b      	adds	r3, #11
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e4c:	73bb      	strb	r3, [r7, #14]
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 8007e4e:	7bfb      	ldrb	r3, [r7, #15]
 8007e50:	2be5      	cmp	r3, #229	; 0xe5
 8007e52:	d011      	beq.n	8007e78 <dir_read+0x7e>
 8007e54:	7bfb      	ldrb	r3, [r7, #15]
 8007e56:	2b2e      	cmp	r3, #46	; 0x2e
 8007e58:	d00e      	beq.n	8007e78 <dir_read+0x7e>
 8007e5a:	7bbb      	ldrb	r3, [r7, #14]
 8007e5c:	2b0f      	cmp	r3, #15
 8007e5e:	d00b      	beq.n	8007e78 <dir_read+0x7e>
 8007e60:	7bbb      	ldrb	r3, [r7, #14]
 8007e62:	f023 0320 	bic.w	r3, r3, #32
 8007e66:	2b08      	cmp	r3, #8
 8007e68:	bf0c      	ite	eq
 8007e6a:	2301      	moveq	r3, #1
 8007e6c:	2300      	movne	r3, #0
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	461a      	mov	r2, r3
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d010      	beq.n	8007e9a <dir_read+0xa0>
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 8007e78:	2100      	movs	r1, #0
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f7ff fdd8 	bl	8007a30 <dir_next>
 8007e80:	4603      	mov	r3, r0
 8007e82:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007e84:	7dfb      	ldrb	r3, [r7, #23]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d109      	bne.n	8007e9e <dir_read+0xa4>
	while (dp->sect) {
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d1ba      	bne.n	8007e0a <dir_read+0x10>
 8007e94:	e004      	b.n	8007ea0 <dir_read+0xa6>
		if (res != FR_OK) break;
 8007e96:	bf00      	nop
 8007e98:	e002      	b.n	8007ea0 <dir_read+0xa6>
			break;
 8007e9a:	bf00      	nop
 8007e9c:	e000      	b.n	8007ea0 <dir_read+0xa6>
		if (res != FR_OK) break;
 8007e9e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 8007ea0:	7dfb      	ldrb	r3, [r7, #23]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d003      	beq.n	8007eae <dir_read+0xb4>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	return res;
 8007eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3718      	adds	r7, #24
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007ec0:	2101      	movs	r1, #1
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f7ff feab 	bl	8007c1e <dir_alloc>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8007ecc:	7bfb      	ldrb	r3, [r7, #15]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d126      	bne.n	8007f20 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007ede:	4619      	mov	r1, r3
 8007ee0:	4610      	mov	r0, r2
 8007ee2:	f7ff f920 	bl	8007126 <move_window>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007eea:	7bfb      	ldrb	r3, [r7, #15]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d117      	bne.n	8007f20 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007ef6:	2220      	movs	r2, #32
 8007ef8:	2100      	movs	r1, #0
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7fe fe87 	bl	8006c0e <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007f0c:	220b      	movs	r2, #11
 8007f0e:	4619      	mov	r1, r3
 8007f10:	f7fe fe5e 	bl	8006bd0 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8007f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3710      	adds	r7, #16
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b084      	sub	sp, #16
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_sdi(dp, dp->index);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f7ff fce4 	bl	8007908 <dir_sdi>
 8007f40:	4603      	mov	r3, r0
 8007f42:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007f44:	7bfb      	ldrb	r3, [r7, #15]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d121      	bne.n	8007f8e <dir_remove+0x64>
		res = move_window(dp->fs, dp->sect);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007f56:	4619      	mov	r1, r3
 8007f58:	4610      	mov	r0, r2
 8007f5a:	f7ff f8e4 	bl	8007126 <move_window>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007f62:	7bfb      	ldrb	r3, [r7, #15]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d112      	bne.n	8007f8e <dir_remove+0x64>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007f6e:	2220      	movs	r2, #32
 8007f70:	2100      	movs	r1, #0
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7fe fe4b 	bl	8006c0e <mem_set>
			*dp->dir = DDEM;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007f7e:	22e5      	movs	r2, #229	; 0xe5
 8007f80:	701a      	strb	r2, [r3, #0]
			dp->fs->wflag = 1;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}
#endif

	return res;
 8007f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b087      	sub	sp, #28
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	3309      	adds	r3, #9
 8007fa6:	613b      	str	r3, [r7, #16]
	if (dp->sect) {		/* Get SFN */
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d05a      	beq.n	8008068 <get_fileinfo+0xd0>
		dir = dp->dir;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007fb8:	60bb      	str	r3, [r7, #8]
		i = 0;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	617b      	str	r3, [r7, #20]
		while (i < 11) {		/* Copy name body and extension */
 8007fbe:	e01c      	b.n	8007ffa <get_fileinfo+0x62>
			c = (TCHAR)dir[i++];
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	1c5a      	adds	r2, r3, #1
 8007fc4:	617a      	str	r2, [r7, #20]
 8007fc6:	68ba      	ldr	r2, [r7, #8]
 8007fc8:	4413      	add	r3, r2
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	73fb      	strb	r3, [r7, #15]
			if (c == ' ') continue;				/* Skip padding spaces */
 8007fce:	7bfb      	ldrb	r3, [r7, #15]
 8007fd0:	2b20      	cmp	r3, #32
 8007fd2:	d100      	bne.n	8007fd6 <get_fileinfo+0x3e>
 8007fd4:	e011      	b.n	8007ffa <get_fileinfo+0x62>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8007fd6:	7bfb      	ldrb	r3, [r7, #15]
 8007fd8:	2b05      	cmp	r3, #5
 8007fda:	d101      	bne.n	8007fe0 <get_fileinfo+0x48>
 8007fdc:	23e5      	movs	r3, #229	; 0xe5
 8007fde:	73fb      	strb	r3, [r7, #15]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	2b09      	cmp	r3, #9
 8007fe4:	d104      	bne.n	8007ff0 <get_fileinfo+0x58>
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	1c5a      	adds	r2, r3, #1
 8007fea:	613a      	str	r2, [r7, #16]
 8007fec:	222e      	movs	r2, #46	; 0x2e
 8007fee:	701a      	strb	r2, [r3, #0]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	1c5a      	adds	r2, r3, #1
 8007ff4:	613a      	str	r2, [r7, #16]
 8007ff6:	7bfa      	ldrb	r2, [r7, #15]
 8007ff8:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	2b0a      	cmp	r3, #10
 8007ffe:	d9df      	bls.n	8007fc0 <get_fileinfo+0x28>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	7ada      	ldrb	r2, [r3, #11]
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	331f      	adds	r3, #31
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	061a      	lsls	r2, r3, #24
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	331e      	adds	r3, #30
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	041b      	lsls	r3, r3, #16
 8008018:	4313      	orrs	r3, r2
 800801a:	68ba      	ldr	r2, [r7, #8]
 800801c:	321d      	adds	r2, #29
 800801e:	7812      	ldrb	r2, [r2, #0]
 8008020:	0212      	lsls	r2, r2, #8
 8008022:	4313      	orrs	r3, r2
 8008024:	68ba      	ldr	r2, [r7, #8]
 8008026:	321c      	adds	r2, #28
 8008028:	7812      	ldrb	r2, [r2, #0]
 800802a:	431a      	orrs	r2, r3
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	3319      	adds	r3, #25
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	021b      	lsls	r3, r3, #8
 8008038:	b21a      	sxth	r2, r3
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	3318      	adds	r3, #24
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	b21b      	sxth	r3, r3
 8008042:	4313      	orrs	r3, r2
 8008044:	b21b      	sxth	r3, r3
 8008046:	b29a      	uxth	r2, r3
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	3317      	adds	r3, #23
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	021b      	lsls	r3, r3, #8
 8008054:	b21a      	sxth	r2, r3
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	3316      	adds	r3, #22
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	b21b      	sxth	r3, r3
 800805e:	4313      	orrs	r3, r2
 8008060:	b21b      	sxth	r3, r3
 8008062:	b29a      	uxth	r2, r3
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	2200      	movs	r2, #0
 800806c:	701a      	strb	r2, [r3, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
 800806e:	bf00      	nop
 8008070:	371c      	adds	r7, #28
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr
	...

0800807c <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b088      	sub	sp, #32
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	60fb      	str	r3, [r7, #12]
 800808c:	e002      	b.n	8008094 <create_name+0x18>
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	3301      	adds	r3, #1
 8008092:	60fb      	str	r3, [r7, #12]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	2b2f      	cmp	r3, #47	; 0x2f
 800809a:	d0f8      	beq.n	800808e <create_name+0x12>
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	2b5c      	cmp	r3, #92	; 0x5c
 80080a2:	d0f4      	beq.n	800808e <create_name+0x12>
	sfn = dp->fn;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80080aa:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80080ac:	220b      	movs	r2, #11
 80080ae:	2120      	movs	r1, #32
 80080b0:	68b8      	ldr	r0, [r7, #8]
 80080b2:	f7fe fdac 	bl	8006c0e <mem_set>
	si = i = b = 0; ni = 8;
 80080b6:	2300      	movs	r3, #0
 80080b8:	77fb      	strb	r3, [r7, #31]
 80080ba:	2300      	movs	r3, #0
 80080bc:	613b      	str	r3, [r7, #16]
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	617b      	str	r3, [r7, #20]
 80080c2:	2308      	movs	r3, #8
 80080c4:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	1c5a      	adds	r2, r3, #1
 80080ca:	617a      	str	r2, [r7, #20]
 80080cc:	68fa      	ldr	r2, [r7, #12]
 80080ce:	4413      	add	r3, r2
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80080d4:	7fbb      	ldrb	r3, [r7, #30]
 80080d6:	2b20      	cmp	r3, #32
 80080d8:	d953      	bls.n	8008182 <create_name+0x106>
 80080da:	7fbb      	ldrb	r3, [r7, #30]
 80080dc:	2b2f      	cmp	r3, #47	; 0x2f
 80080de:	d050      	beq.n	8008182 <create_name+0x106>
 80080e0:	7fbb      	ldrb	r3, [r7, #30]
 80080e2:	2b5c      	cmp	r3, #92	; 0x5c
 80080e4:	d04d      	beq.n	8008182 <create_name+0x106>
		if (c == '.' || i >= ni) {
 80080e6:	7fbb      	ldrb	r3, [r7, #30]
 80080e8:	2b2e      	cmp	r3, #46	; 0x2e
 80080ea:	d003      	beq.n	80080f4 <create_name+0x78>
 80080ec:	693a      	ldr	r2, [r7, #16]
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d30f      	bcc.n	8008114 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	2b08      	cmp	r3, #8
 80080f8:	d102      	bne.n	8008100 <create_name+0x84>
 80080fa:	7fbb      	ldrb	r3, [r7, #30]
 80080fc:	2b2e      	cmp	r3, #46	; 0x2e
 80080fe:	d001      	beq.n	8008104 <create_name+0x88>
 8008100:	2306      	movs	r3, #6
 8008102:	e073      	b.n	80081ec <create_name+0x170>
			i = 8; ni = 11;
 8008104:	2308      	movs	r3, #8
 8008106:	613b      	str	r3, [r7, #16]
 8008108:	230b      	movs	r3, #11
 800810a:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 800810c:	7ffb      	ldrb	r3, [r7, #31]
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	77fb      	strb	r3, [r7, #31]
 8008112:	e035      	b.n	8008180 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008114:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8008118:	2b00      	cmp	r3, #0
 800811a:	da08      	bge.n	800812e <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 800811c:	7ffb      	ldrb	r3, [r7, #31]
 800811e:	f043 0303 	orr.w	r3, r3, #3
 8008122:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008124:	7fbb      	ldrb	r3, [r7, #30]
 8008126:	3b80      	subs	r3, #128	; 0x80
 8008128:	4a32      	ldr	r2, [pc, #200]	; (80081f4 <create_name+0x178>)
 800812a:	5cd3      	ldrb	r3, [r2, r3]
 800812c:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800812e:	7fbb      	ldrb	r3, [r7, #30]
 8008130:	4619      	mov	r1, r3
 8008132:	4831      	ldr	r0, [pc, #196]	; (80081f8 <create_name+0x17c>)
 8008134:	f7fe fdad 	bl	8006c92 <chk_chr>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	d001      	beq.n	8008142 <create_name+0xc6>
				return FR_INVALID_NAME;
 800813e:	2306      	movs	r3, #6
 8008140:	e054      	b.n	80081ec <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8008142:	7fbb      	ldrb	r3, [r7, #30]
 8008144:	2b40      	cmp	r3, #64	; 0x40
 8008146:	d907      	bls.n	8008158 <create_name+0xdc>
 8008148:	7fbb      	ldrb	r3, [r7, #30]
 800814a:	2b5a      	cmp	r3, #90	; 0x5a
 800814c:	d804      	bhi.n	8008158 <create_name+0xdc>
				b |= 2;
 800814e:	7ffb      	ldrb	r3, [r7, #31]
 8008150:	f043 0302 	orr.w	r3, r3, #2
 8008154:	77fb      	strb	r3, [r7, #31]
 8008156:	e00c      	b.n	8008172 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8008158:	7fbb      	ldrb	r3, [r7, #30]
 800815a:	2b60      	cmp	r3, #96	; 0x60
 800815c:	d909      	bls.n	8008172 <create_name+0xf6>
 800815e:	7fbb      	ldrb	r3, [r7, #30]
 8008160:	2b7a      	cmp	r3, #122	; 0x7a
 8008162:	d806      	bhi.n	8008172 <create_name+0xf6>
					b |= 1; c -= 0x20;
 8008164:	7ffb      	ldrb	r3, [r7, #31]
 8008166:	f043 0301 	orr.w	r3, r3, #1
 800816a:	77fb      	strb	r3, [r7, #31]
 800816c:	7fbb      	ldrb	r3, [r7, #30]
 800816e:	3b20      	subs	r3, #32
 8008170:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	1c5a      	adds	r2, r3, #1
 8008176:	613a      	str	r2, [r7, #16]
 8008178:	68ba      	ldr	r2, [r7, #8]
 800817a:	4413      	add	r3, r2
 800817c:	7fba      	ldrb	r2, [r7, #30]
 800817e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008180:	e7a1      	b.n	80080c6 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	441a      	add	r2, r3
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800818c:	7fbb      	ldrb	r3, [r7, #30]
 800818e:	2b20      	cmp	r3, #32
 8008190:	d801      	bhi.n	8008196 <create_name+0x11a>
 8008192:	2304      	movs	r3, #4
 8008194:	e000      	b.n	8008198 <create_name+0x11c>
 8008196:	2300      	movs	r3, #0
 8008198:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d101      	bne.n	80081a4 <create_name+0x128>
 80081a0:	2306      	movs	r3, #6
 80081a2:	e023      	b.n	80081ec <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	2be5      	cmp	r3, #229	; 0xe5
 80081aa:	d102      	bne.n	80081b2 <create_name+0x136>
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	2205      	movs	r2, #5
 80081b0:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	2b08      	cmp	r3, #8
 80081b6:	d102      	bne.n	80081be <create_name+0x142>
 80081b8:	7ffb      	ldrb	r3, [r7, #31]
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 80081be:	7ffb      	ldrb	r3, [r7, #31]
 80081c0:	f003 0303 	and.w	r3, r3, #3
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d103      	bne.n	80081d0 <create_name+0x154>
 80081c8:	7fbb      	ldrb	r3, [r7, #30]
 80081ca:	f043 0310 	orr.w	r3, r3, #16
 80081ce:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 80081d0:	7ffb      	ldrb	r3, [r7, #31]
 80081d2:	f003 030c 	and.w	r3, r3, #12
 80081d6:	2b04      	cmp	r3, #4
 80081d8:	d103      	bne.n	80081e2 <create_name+0x166>
 80081da:	7fbb      	ldrb	r3, [r7, #30]
 80081dc:	f043 0308 	orr.w	r3, r3, #8
 80081e0:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	330b      	adds	r3, #11
 80081e6:	7fba      	ldrb	r2, [r7, #30]
 80081e8:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80081ea:	2300      	movs	r3, #0
#endif
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3720      	adds	r7, #32
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	0800d2a8 	.word	0x0800d2a8
 80081f8:	0800d224 	.word	0x0800d224

080081fc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	2b2f      	cmp	r3, #47	; 0x2f
 800820c:	d003      	beq.n	8008216 <follow_path+0x1a>
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	2b5c      	cmp	r3, #92	; 0x5c
 8008214:	d102      	bne.n	800821c <follow_path+0x20>
		path++;
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	3301      	adds	r3, #1
 800821a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	2b1f      	cmp	r3, #31
 800822a:	d80a      	bhi.n	8008242 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 800822c:	2100      	movs	r1, #0
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f7ff fb6a 	bl	8007908 <dir_sdi>
 8008234:	4603      	mov	r3, r0
 8008236:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8008240:	e045      	b.n	80082ce <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008242:	463b      	mov	r3, r7
 8008244:	4619      	mov	r1, r3
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f7ff ff18 	bl	800807c <create_name>
 800824c:	4603      	mov	r3, r0
 800824e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8008250:	7bfb      	ldrb	r3, [r7, #15]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d136      	bne.n	80082c4 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f7ff fd80 	bl	8007d5c <dir_find>
 800825c:	4603      	mov	r3, r0
 800825e:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008266:	7adb      	ldrb	r3, [r3, #11]
 8008268:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800826a:	7bfb      	ldrb	r3, [r7, #15]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d00a      	beq.n	8008286 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008270:	7bfb      	ldrb	r3, [r7, #15]
 8008272:	2b04      	cmp	r3, #4
 8008274:	d128      	bne.n	80082c8 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008276:	7bbb      	ldrb	r3, [r7, #14]
 8008278:	f003 0304 	and.w	r3, r3, #4
 800827c:	2b00      	cmp	r3, #0
 800827e:	d123      	bne.n	80082c8 <follow_path+0xcc>
 8008280:	2305      	movs	r3, #5
 8008282:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8008284:	e020      	b.n	80082c8 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008286:	7bbb      	ldrb	r3, [r7, #14]
 8008288:	f003 0304 	and.w	r3, r3, #4
 800828c:	2b00      	cmp	r3, #0
 800828e:	d11d      	bne.n	80082cc <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008296:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	330b      	adds	r3, #11
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	f003 0310 	and.w	r3, r3, #16
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d102      	bne.n	80082ac <follow_path+0xb0>
				res = FR_NO_PATH; break;
 80082a6:	2305      	movs	r3, #5
 80082a8:	73fb      	strb	r3, [r7, #15]
 80082aa:	e010      	b.n	80082ce <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80082b2:	68b9      	ldr	r1, [r7, #8]
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7ff fcfc 	bl	8007cb2 <ld_clust>
 80082ba:	4602      	mov	r2, r0
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80082c2:	e7be      	b.n	8008242 <follow_path+0x46>
			if (res != FR_OK) break;
 80082c4:	bf00      	nop
 80082c6:	e002      	b.n	80082ce <follow_path+0xd2>
				break;
 80082c8:	bf00      	nop
 80082ca:	e000      	b.n	80082ce <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80082cc:	bf00      	nop
		}
	}

	return res;
 80082ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3710      	adds	r7, #16
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80082d8:	b480      	push	{r7}
 80082da:	b087      	sub	sp, #28
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80082e0:	f04f 33ff 	mov.w	r3, #4294967295
 80082e4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d031      	beq.n	8008352 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	617b      	str	r3, [r7, #20]
 80082f4:	e002      	b.n	80082fc <get_ldnumber+0x24>
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	3301      	adds	r3, #1
 80082fa:	617b      	str	r3, [r7, #20]
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	2b20      	cmp	r3, #32
 8008302:	d903      	bls.n	800830c <get_ldnumber+0x34>
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	2b3a      	cmp	r3, #58	; 0x3a
 800830a:	d1f4      	bne.n	80082f6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	2b3a      	cmp	r3, #58	; 0x3a
 8008312:	d11c      	bne.n	800834e <get_ldnumber+0x76>
			tp = *path;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	1c5a      	adds	r2, r3, #1
 800831e:	60fa      	str	r2, [r7, #12]
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	3b30      	subs	r3, #48	; 0x30
 8008324:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	2b09      	cmp	r3, #9
 800832a:	d80e      	bhi.n	800834a <get_ldnumber+0x72>
 800832c:	68fa      	ldr	r2, [r7, #12]
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	429a      	cmp	r2, r3
 8008332:	d10a      	bne.n	800834a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d107      	bne.n	800834a <get_ldnumber+0x72>
					vol = (int)i;
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	3301      	adds	r3, #1
 8008342:	617b      	str	r3, [r7, #20]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	697a      	ldr	r2, [r7, #20]
 8008348:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	e002      	b.n	8008354 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800834e:	2300      	movs	r3, #0
 8008350:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008352:	693b      	ldr	r3, [r7, #16]
}
 8008354:	4618      	mov	r0, r3
 8008356:	371c      	adds	r7, #28
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f04f 32ff 	mov.w	r2, #4294967295
 8008378:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800837c:	6839      	ldr	r1, [r7, #0]
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f7fe fed1 	bl	8007126 <move_window>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d001      	beq.n	800838e <check_fs+0x2e>
		return 3;
 800838a:	2303      	movs	r3, #3
 800838c:	e04a      	b.n	8008424 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008394:	3301      	adds	r3, #1
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	021b      	lsls	r3, r3, #8
 800839a:	b21a      	sxth	r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80083a2:	b21b      	sxth	r3, r3
 80083a4:	4313      	orrs	r3, r2
 80083a6:	b21b      	sxth	r3, r3
 80083a8:	4a20      	ldr	r2, [pc, #128]	; (800842c <check_fs+0xcc>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d001      	beq.n	80083b2 <check_fs+0x52>
		return 2;
 80083ae:	2302      	movs	r3, #2
 80083b0:	e038      	b.n	8008424 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	3336      	adds	r3, #54	; 0x36
 80083b6:	3303      	adds	r3, #3
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	061a      	lsls	r2, r3, #24
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	3336      	adds	r3, #54	; 0x36
 80083c0:	3302      	adds	r3, #2
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	041b      	lsls	r3, r3, #16
 80083c6:	4313      	orrs	r3, r2
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	3236      	adds	r2, #54	; 0x36
 80083cc:	3201      	adds	r2, #1
 80083ce:	7812      	ldrb	r2, [r2, #0]
 80083d0:	0212      	lsls	r2, r2, #8
 80083d2:	4313      	orrs	r3, r2
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80083da:	4313      	orrs	r3, r2
 80083dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80083e0:	4a13      	ldr	r2, [pc, #76]	; (8008430 <check_fs+0xd0>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d101      	bne.n	80083ea <check_fs+0x8a>
		return 0;
 80083e6:	2300      	movs	r3, #0
 80083e8:	e01c      	b.n	8008424 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	3352      	adds	r3, #82	; 0x52
 80083ee:	3303      	adds	r3, #3
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	061a      	lsls	r2, r3, #24
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	3352      	adds	r3, #82	; 0x52
 80083f8:	3302      	adds	r3, #2
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	041b      	lsls	r3, r3, #16
 80083fe:	4313      	orrs	r3, r2
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	3252      	adds	r2, #82	; 0x52
 8008404:	3201      	adds	r2, #1
 8008406:	7812      	ldrb	r2, [r2, #0]
 8008408:	0212      	lsls	r2, r2, #8
 800840a:	4313      	orrs	r3, r2
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8008412:	4313      	orrs	r3, r2
 8008414:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008418:	4a05      	ldr	r2, [pc, #20]	; (8008430 <check_fs+0xd0>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d101      	bne.n	8008422 <check_fs+0xc2>
		return 0;
 800841e:	2300      	movs	r3, #0
 8008420:	e000      	b.n	8008424 <check_fs+0xc4>

	return 1;
 8008422:	2301      	movs	r3, #1
}
 8008424:	4618      	mov	r0, r3
 8008426:	3708      	adds	r7, #8
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}
 800842c:	ffffaa55 	.word	0xffffaa55
 8008430:	00544146 	.word	0x00544146

08008434 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b096      	sub	sp, #88	; 0x58
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	4613      	mov	r3, r2
 8008440:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008448:	68b8      	ldr	r0, [r7, #8]
 800844a:	f7ff ff45 	bl	80082d8 <get_ldnumber>
 800844e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008452:	2b00      	cmp	r3, #0
 8008454:	da01      	bge.n	800845a <find_volume+0x26>
 8008456:	230b      	movs	r3, #11
 8008458:	e2b0      	b.n	80089bc <find_volume+0x588>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800845a:	4aa1      	ldr	r2, [pc, #644]	; (80086e0 <find_volume+0x2ac>)
 800845c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800845e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008462:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008466:	2b00      	cmp	r3, #0
 8008468:	d101      	bne.n	800846e <find_volume+0x3a>
 800846a:	230c      	movs	r3, #12
 800846c:	e2a6      	b.n	80089bc <find_volume+0x588>

	ENTER_FF(fs);						/* Lock the volume */
 800846e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008470:	f7fe fc2a 	bl	8006cc8 <lock_fs>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d101      	bne.n	800847e <find_volume+0x4a>
 800847a:	230f      	movs	r3, #15
 800847c:	e29e      	b.n	80089bc <find_volume+0x588>
	*rfs = fs;							/* Return pointer to the file system object */
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008482:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8008484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008486:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800848a:	2b00      	cmp	r3, #0
 800848c:	d01b      	beq.n	80084c6 <find_volume+0x92>
		stat = disk_status(fs->drv);
 800848e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008490:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008494:	4618      	mov	r0, r3
 8008496:	f7fe fafd 	bl	8006a94 <disk_status>
 800849a:	4603      	mov	r3, r0
 800849c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80084a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80084a4:	f003 0301 	and.w	r3, r3, #1
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d10c      	bne.n	80084c6 <find_volume+0x92>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80084ac:	79fb      	ldrb	r3, [r7, #7]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d007      	beq.n	80084c2 <find_volume+0x8e>
 80084b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80084b6:	f003 0304 	and.w	r3, r3, #4
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d001      	beq.n	80084c2 <find_volume+0x8e>
				return FR_WRITE_PROTECTED;
 80084be:	230a      	movs	r3, #10
 80084c0:	e27c      	b.n	80089bc <find_volume+0x588>
			return FR_OK;				/* The file system object is valid */
 80084c2:	2300      	movs	r3, #0
 80084c4:	e27a      	b.n	80089bc <find_volume+0x588>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80084c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c8:	2200      	movs	r2, #0
 80084ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80084ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084d0:	b2da      	uxtb	r2, r3
 80084d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80084d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084da:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80084de:	4618      	mov	r0, r3
 80084e0:	f7fe faf2 	bl	8006ac8 <disk_initialize>
 80084e4:	4603      	mov	r3, r0
 80084e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80084ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80084ee:	f003 0301 	and.w	r3, r3, #1
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d001      	beq.n	80084fa <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80084f6:	2303      	movs	r3, #3
 80084f8:	e260      	b.n	80089bc <find_volume+0x588>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80084fa:	79fb      	ldrb	r3, [r7, #7]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d007      	beq.n	8008510 <find_volume+0xdc>
 8008500:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008504:	f003 0304 	and.w	r3, r3, #4
 8008508:	2b00      	cmp	r3, #0
 800850a:	d001      	beq.n	8008510 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800850c:	230a      	movs	r3, #10
 800850e:	e255      	b.n	80089bc <find_volume+0x588>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8008510:	2300      	movs	r3, #0
 8008512:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8008514:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008516:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008518:	f7ff ff22 	bl	8008360 <check_fs>
 800851c:	4603      	mov	r3, r0
 800851e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8008522:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008526:	2b01      	cmp	r3, #1
 8008528:	d153      	bne.n	80085d2 <find_volume+0x19e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800852a:	2300      	movs	r3, #0
 800852c:	643b      	str	r3, [r7, #64]	; 0x40
 800852e:	e028      	b.n	8008582 <find_volume+0x14e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8008530:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008534:	011b      	lsls	r3, r3, #4
 8008536:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800853a:	4413      	add	r3, r2
 800853c:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800853e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008540:	3304      	adds	r3, #4
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d012      	beq.n	800856e <find_volume+0x13a>
 8008548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854a:	330b      	adds	r3, #11
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	061a      	lsls	r2, r3, #24
 8008550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008552:	330a      	adds	r3, #10
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	041b      	lsls	r3, r3, #16
 8008558:	4313      	orrs	r3, r2
 800855a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800855c:	3209      	adds	r2, #9
 800855e:	7812      	ldrb	r2, [r2, #0]
 8008560:	0212      	lsls	r2, r2, #8
 8008562:	4313      	orrs	r3, r2
 8008564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008566:	3208      	adds	r2, #8
 8008568:	7812      	ldrb	r2, [r2, #0]
 800856a:	431a      	orrs	r2, r3
 800856c:	e000      	b.n	8008570 <find_volume+0x13c>
 800856e:	2200      	movs	r2, #0
 8008570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	3358      	adds	r3, #88	; 0x58
 8008576:	443b      	add	r3, r7
 8008578:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800857c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800857e:	3301      	adds	r3, #1
 8008580:	643b      	str	r3, [r7, #64]	; 0x40
 8008582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008584:	2b03      	cmp	r3, #3
 8008586:	d9d3      	bls.n	8008530 <find_volume+0xfc>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8008588:	2300      	movs	r3, #0
 800858a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800858c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800858e:	2b00      	cmp	r3, #0
 8008590:	d002      	beq.n	8008598 <find_volume+0x164>
 8008592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008594:	3b01      	subs	r3, #1
 8008596:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8008598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	3358      	adds	r3, #88	; 0x58
 800859e:	443b      	add	r3, r7
 80085a0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80085a4:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80085a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d005      	beq.n	80085b8 <find_volume+0x184>
 80085ac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80085ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80085b0:	f7ff fed6 	bl	8008360 <check_fs>
 80085b4:	4603      	mov	r3, r0
 80085b6:	e000      	b.n	80085ba <find_volume+0x186>
 80085b8:	2302      	movs	r3, #2
 80085ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80085be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d005      	beq.n	80085d2 <find_volume+0x19e>
 80085c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085c8:	3301      	adds	r3, #1
 80085ca:	643b      	str	r3, [r7, #64]	; 0x40
 80085cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085ce:	2b03      	cmp	r3, #3
 80085d0:	d9e2      	bls.n	8008598 <find_volume+0x164>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80085d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80085d6:	2b03      	cmp	r3, #3
 80085d8:	d101      	bne.n	80085de <find_volume+0x1aa>
 80085da:	2301      	movs	r3, #1
 80085dc:	e1ee      	b.n	80089bc <find_volume+0x588>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80085de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d001      	beq.n	80085ea <find_volume+0x1b6>
 80085e6:	230d      	movs	r3, #13
 80085e8:	e1e8      	b.n	80089bc <find_volume+0x588>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80085ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ec:	7b1b      	ldrb	r3, [r3, #12]
 80085ee:	021b      	lsls	r3, r3, #8
 80085f0:	b21a      	sxth	r2, r3
 80085f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f4:	7adb      	ldrb	r3, [r3, #11]
 80085f6:	b21b      	sxth	r3, r3
 80085f8:	4313      	orrs	r3, r2
 80085fa:	b21b      	sxth	r3, r3
 80085fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008600:	d001      	beq.n	8008606 <find_volume+0x1d2>
		return FR_NO_FILESYSTEM;
 8008602:	230d      	movs	r3, #13
 8008604:	e1da      	b.n	80089bc <find_volume+0x588>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8008606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008608:	7ddb      	ldrb	r3, [r3, #23]
 800860a:	021b      	lsls	r3, r3, #8
 800860c:	b21a      	sxth	r2, r3
 800860e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008610:	7d9b      	ldrb	r3, [r3, #22]
 8008612:	b21b      	sxth	r3, r3
 8008614:	4313      	orrs	r3, r2
 8008616:	b21b      	sxth	r3, r3
 8008618:	b29b      	uxth	r3, r3
 800861a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800861c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800861e:	2b00      	cmp	r3, #0
 8008620:	d112      	bne.n	8008648 <find_volume+0x214>
 8008622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008624:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8008628:	061a      	lsls	r2, r3, #24
 800862a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800862c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8008630:	041b      	lsls	r3, r3, #16
 8008632:	4313      	orrs	r3, r2
 8008634:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008636:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800863a:	0212      	lsls	r2, r2, #8
 800863c:	4313      	orrs	r3, r2
 800863e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008640:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8008644:	4313      	orrs	r3, r2
 8008646:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8008648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800864a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800864c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8008650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008652:	7c1a      	ldrb	r2, [r3, #16]
 8008654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008656:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800865a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8008660:	2b01      	cmp	r3, #1
 8008662:	d006      	beq.n	8008672 <find_volume+0x23e>
 8008664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008666:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800866a:	2b02      	cmp	r3, #2
 800866c:	d001      	beq.n	8008672 <find_volume+0x23e>
		return FR_NO_FILESYSTEM;
 800866e:	230d      	movs	r3, #13
 8008670:	e1a4      	b.n	80089bc <find_volume+0x588>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8008672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008674:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8008678:	461a      	mov	r2, r3
 800867a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800867c:	fb02 f303 	mul.w	r3, r2, r3
 8008680:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8008682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008684:	7b5a      	ldrb	r2, [r3, #13]
 8008686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008688:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800868c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00a      	beq.n	80086ac <find_volume+0x278>
 8008696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008698:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800869c:	461a      	mov	r2, r3
 800869e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80086a4:	3b01      	subs	r3, #1
 80086a6:	4013      	ands	r3, r2
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d001      	beq.n	80086b0 <find_volume+0x27c>
		return FR_NO_FILESYSTEM;
 80086ac:	230d      	movs	r3, #13
 80086ae:	e185      	b.n	80089bc <find_volume+0x588>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80086b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b2:	7c9b      	ldrb	r3, [r3, #18]
 80086b4:	021b      	lsls	r3, r3, #8
 80086b6:	b21a      	sxth	r2, r3
 80086b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ba:	7c5b      	ldrb	r3, [r3, #17]
 80086bc:	b21b      	sxth	r3, r3
 80086be:	4313      	orrs	r3, r2
 80086c0:	b21b      	sxth	r3, r3
 80086c2:	b29a      	uxth	r2, r3
 80086c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c6:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80086ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086cc:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80086d0:	f003 030f 	and.w	r3, r3, #15
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d004      	beq.n	80086e4 <find_volume+0x2b0>
		return FR_NO_FILESYSTEM;
 80086da:	230d      	movs	r3, #13
 80086dc:	e16e      	b.n	80089bc <find_volume+0x588>
 80086de:	bf00      	nop
 80086e0:	20000a10 	.word	0x20000a10

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80086e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e6:	7d1b      	ldrb	r3, [r3, #20]
 80086e8:	021b      	lsls	r3, r3, #8
 80086ea:	b21a      	sxth	r2, r3
 80086ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ee:	7cdb      	ldrb	r3, [r3, #19]
 80086f0:	b21b      	sxth	r3, r3
 80086f2:	4313      	orrs	r3, r2
 80086f4:	b21b      	sxth	r3, r3
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80086fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d112      	bne.n	8008726 <find_volume+0x2f2>
 8008700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008702:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008706:	061a      	lsls	r2, r3, #24
 8008708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800870e:	041b      	lsls	r3, r3, #16
 8008710:	4313      	orrs	r3, r2
 8008712:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008714:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8008718:	0212      	lsls	r2, r2, #8
 800871a:	4313      	orrs	r3, r2
 800871c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800871e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8008722:	4313      	orrs	r3, r2
 8008724:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8008726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008728:	7bdb      	ldrb	r3, [r3, #15]
 800872a:	021b      	lsls	r3, r3, #8
 800872c:	b21a      	sxth	r2, r3
 800872e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008730:	7b9b      	ldrb	r3, [r3, #14]
 8008732:	b21b      	sxth	r3, r3
 8008734:	4313      	orrs	r3, r2
 8008736:	b21b      	sxth	r3, r3
 8008738:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800873a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800873c:	2b00      	cmp	r3, #0
 800873e:	d101      	bne.n	8008744 <find_volume+0x310>
 8008740:	230d      	movs	r3, #13
 8008742:	e13b      	b.n	80089bc <find_volume+0x588>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8008744:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008748:	4413      	add	r3, r2
 800874a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800874c:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8008750:	0912      	lsrs	r2, r2, #4
 8008752:	b292      	uxth	r2, r2
 8008754:	4413      	add	r3, r2
 8008756:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008758:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800875a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875c:	429a      	cmp	r2, r3
 800875e:	d201      	bcs.n	8008764 <find_volume+0x330>
 8008760:	230d      	movs	r3, #13
 8008762:	e12b      	b.n	80089bc <find_volume+0x588>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8008764:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008768:	1ad3      	subs	r3, r2, r3
 800876a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800876c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8008770:	fbb3 f3f2 	udiv	r3, r3, r2
 8008774:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8008776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008778:	2b00      	cmp	r3, #0
 800877a:	d101      	bne.n	8008780 <find_volume+0x34c>
 800877c:	230d      	movs	r3, #13
 800877e:	e11d      	b.n	80089bc <find_volume+0x588>
	fmt = FS_FAT12;
 8008780:	2301      	movs	r3, #1
 8008782:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8008786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008788:	f640 72f5 	movw	r2, #4085	; 0xff5
 800878c:	4293      	cmp	r3, r2
 800878e:	d902      	bls.n	8008796 <find_volume+0x362>
 8008790:	2302      	movs	r3, #2
 8008792:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8008796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008798:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800879c:	4293      	cmp	r3, r2
 800879e:	d902      	bls.n	80087a6 <find_volume+0x372>
 80087a0:	2303      	movs	r3, #3
 80087a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80087a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a8:	1c9a      	adds	r2, r3, #2
 80087aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ac:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	fs->volbase = bsect;								/* Volume start sector */
 80087b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80087b4:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80087b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80087ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087bc:	441a      	add	r2, r3
 80087be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c0:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 80087c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80087c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c8:	441a      	add	r2, r3
 80087ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087cc:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (fmt == FS_FAT32) {
 80087d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80087d4:	2b03      	cmp	r3, #3
 80087d6:	d121      	bne.n	800881c <find_volume+0x3e8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80087d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087da:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d001      	beq.n	80087e6 <find_volume+0x3b2>
 80087e2:	230d      	movs	r3, #13
 80087e4:	e0ea      	b.n	80089bc <find_volume+0x588>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80087e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80087ec:	061a      	lsls	r2, r3, #24
 80087ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80087f4:	041b      	lsls	r3, r3, #16
 80087f6:	4313      	orrs	r3, r2
 80087f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087fa:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80087fe:	0212      	lsls	r2, r2, #8
 8008800:	4313      	orrs	r3, r2
 8008802:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008804:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8008808:	431a      	orrs	r2, r3
 800880a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800880c:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8008810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008812:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	647b      	str	r3, [r7, #68]	; 0x44
 800881a:	e025      	b.n	8008868 <find_volume+0x434>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800881c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8008822:	2b00      	cmp	r3, #0
 8008824:	d101      	bne.n	800882a <find_volume+0x3f6>
 8008826:	230d      	movs	r3, #13
 8008828:	e0c8      	b.n	80089bc <find_volume+0x588>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800882a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800882c:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8008830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008832:	441a      	add	r2, r3
 8008834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008836:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800883a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800883e:	2b02      	cmp	r3, #2
 8008840:	d104      	bne.n	800884c <find_volume+0x418>
 8008842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008844:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008848:	005b      	lsls	r3, r3, #1
 800884a:	e00c      	b.n	8008866 <find_volume+0x432>
 800884c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800884e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8008852:	4613      	mov	r3, r2
 8008854:	005b      	lsls	r3, r3, #1
 8008856:	4413      	add	r3, r2
 8008858:	085a      	lsrs	r2, r3, #1
 800885a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800885c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008860:	f003 0301 	and.w	r3, r3, #1
 8008864:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8008866:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8008868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800886e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008870:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008874:	0a5b      	lsrs	r3, r3, #9
 8008876:	429a      	cmp	r2, r3
 8008878:	d201      	bcs.n	800887e <find_volume+0x44a>
		return FR_NO_FILESYSTEM;
 800887a:	230d      	movs	r3, #13
 800887c:	e09e      	b.n	80089bc <find_volume+0x588>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800887e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008880:	f04f 32ff 	mov.w	r2, #4294967295
 8008884:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8008888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800888e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008890:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8008894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008896:	2280      	movs	r2, #128	; 0x80
 8008898:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800889c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80088a0:	2b03      	cmp	r3, #3
 80088a2:	d177      	bne.n	8008994 <find_volume+0x560>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80088a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80088aa:	021b      	lsls	r3, r3, #8
 80088ac:	b21a      	sxth	r2, r3
 80088ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80088b4:	b21b      	sxth	r3, r3
 80088b6:	4313      	orrs	r3, r2
 80088b8:	b21b      	sxth	r3, r3
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d16a      	bne.n	8008994 <find_volume+0x560>
		&& move_window(fs, bsect + 1) == FR_OK)
 80088be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088c0:	3301      	adds	r3, #1
 80088c2:	4619      	mov	r1, r3
 80088c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80088c6:	f7fe fc2e 	bl	8007126 <move_window>
 80088ca:	4603      	mov	r3, r0
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d161      	bne.n	8008994 <find_volume+0x560>
	{
		fs->fsi_flag = 0;
 80088d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d2:	2200      	movs	r2, #0
 80088d4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80088d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088da:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80088de:	021b      	lsls	r3, r3, #8
 80088e0:	b21a      	sxth	r2, r3
 80088e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e4:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80088e8:	b21b      	sxth	r3, r3
 80088ea:	4313      	orrs	r3, r2
 80088ec:	b21b      	sxth	r3, r3
 80088ee:	4a35      	ldr	r2, [pc, #212]	; (80089c4 <find_volume+0x590>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d14f      	bne.n	8008994 <find_volume+0x560>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80088f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f6:	78db      	ldrb	r3, [r3, #3]
 80088f8:	061a      	lsls	r2, r3, #24
 80088fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fc:	789b      	ldrb	r3, [r3, #2]
 80088fe:	041b      	lsls	r3, r3, #16
 8008900:	4313      	orrs	r3, r2
 8008902:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008904:	7852      	ldrb	r2, [r2, #1]
 8008906:	0212      	lsls	r2, r2, #8
 8008908:	4313      	orrs	r3, r2
 800890a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800890c:	7812      	ldrb	r2, [r2, #0]
 800890e:	4313      	orrs	r3, r2
 8008910:	4a2d      	ldr	r2, [pc, #180]	; (80089c8 <find_volume+0x594>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d13e      	bne.n	8008994 <find_volume+0x560>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8008916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008918:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800891c:	061a      	lsls	r2, r3, #24
 800891e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008920:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8008924:	041b      	lsls	r3, r3, #16
 8008926:	4313      	orrs	r3, r2
 8008928:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800892a:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800892e:	0212      	lsls	r2, r2, #8
 8008930:	4313      	orrs	r3, r2
 8008932:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008934:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8008938:	4313      	orrs	r3, r2
 800893a:	4a24      	ldr	r2, [pc, #144]	; (80089cc <find_volume+0x598>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d129      	bne.n	8008994 <find_volume+0x560>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8008940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008942:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8008946:	061a      	lsls	r2, r3, #24
 8008948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800894a:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800894e:	041b      	lsls	r3, r3, #16
 8008950:	4313      	orrs	r3, r2
 8008952:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008954:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8008958:	0212      	lsls	r2, r2, #8
 800895a:	4313      	orrs	r3, r2
 800895c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800895e:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8008962:	431a      	orrs	r2, r3
 8008964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008966:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800896a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800896c:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8008970:	061a      	lsls	r2, r3, #24
 8008972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008974:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8008978:	041b      	lsls	r3, r3, #16
 800897a:	4313      	orrs	r3, r2
 800897c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800897e:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8008982:	0212      	lsls	r2, r2, #8
 8008984:	4313      	orrs	r3, r2
 8008986:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008988:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800898c:	431a      	orrs	r2, r3
 800898e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008990:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8008994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008996:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800899a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800899e:	4b0c      	ldr	r3, [pc, #48]	; (80089d0 <find_volume+0x59c>)
 80089a0:	881b      	ldrh	r3, [r3, #0]
 80089a2:	3301      	adds	r3, #1
 80089a4:	b29a      	uxth	r2, r3
 80089a6:	4b0a      	ldr	r3, [pc, #40]	; (80089d0 <find_volume+0x59c>)
 80089a8:	801a      	strh	r2, [r3, #0]
 80089aa:	4b09      	ldr	r3, [pc, #36]	; (80089d0 <find_volume+0x59c>)
 80089ac:	881a      	ldrh	r2, [r3, #0]
 80089ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b0:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80089b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80089b6:	f7fe fb43 	bl	8007040 <clear_lock>
#endif

	return FR_OK;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3758      	adds	r7, #88	; 0x58
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	ffffaa55 	.word	0xffffaa55
 80089c8:	41615252 	.word	0x41615252
 80089cc:	61417272 	.word	0x61417272
 80089d0:	20000a14 	.word	0x20000a14

080089d4 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d022      	beq.n	8008a2c <validate+0x58>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d01d      	beq.n	8008a2c <validate+0x58>
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80089f6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d016      	beq.n	8008a2c <validate+0x58>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008a04:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d10c      	bne.n	8008a2c <validate+0x58>
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008a18:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7fe f839 	bl	8006a94 <disk_status>
 8008a22:	4603      	mov	r3, r0
 8008a24:	f003 0301 	and.w	r3, r3, #1
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d001      	beq.n	8008a30 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8008a2c:	2309      	movs	r3, #9
 8008a2e:	e00b      	b.n	8008a48 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7fe f946 	bl	8006cc8 <lock_fs>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d101      	bne.n	8008a46 <validate+0x72>
 8008a42:	230f      	movs	r3, #15
 8008a44:	e000      	b.n	8008a48 <validate+0x74>

	return FR_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3710      	adds	r7, #16
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b088      	sub	sp, #32
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	4613      	mov	r3, r2
 8008a5c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8008a62:	f107 0310 	add.w	r3, r7, #16
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7ff fc36 	bl	80082d8 <get_ldnumber>
 8008a6c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	da01      	bge.n	8008a78 <f_mount+0x28>
 8008a74:	230b      	movs	r3, #11
 8008a76:	e04c      	b.n	8008b12 <f_mount+0xc2>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008a78:	4a28      	ldr	r2, [pc, #160]	; (8008b1c <f_mount+0xcc>)
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a80:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d011      	beq.n	8008aac <f_mount+0x5c>
#if _FS_LOCK
		clear_lock(cfs);
 8008a88:	69b8      	ldr	r0, [r7, #24]
 8008a8a:	f7fe fad9 	bl	8007040 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008a94:	4618      	mov	r0, r3
 8008a96:	f001 f896 	bl	8009bc6 <ff_del_syncobj>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d101      	bne.n	8008aa4 <f_mount+0x54>
 8008aa0:	2302      	movs	r3, #2
 8008aa2:	e036      	b.n	8008b12 <f_mount+0xc2>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008aa4:	69bb      	ldr	r3, [r7, #24]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d011      	beq.n	8008ad6 <f_mount+0x86>
		fs->fs_type = 0;				/* Clear new fs object */
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	b2da      	uxtb	r2, r3
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	4610      	mov	r0, r2
 8008ac8:	f001 f85d 	bl	8009b86 <ff_cre_syncobj>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d101      	bne.n	8008ad6 <f_mount+0x86>
 8008ad2:	2302      	movs	r3, #2
 8008ad4:	e01d      	b.n	8008b12 <f_mount+0xc2>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008ad6:	68fa      	ldr	r2, [r7, #12]
 8008ad8:	4910      	ldr	r1, [pc, #64]	; (8008b1c <f_mount+0xcc>)
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d002      	beq.n	8008aec <f_mount+0x9c>
 8008ae6:	79fb      	ldrb	r3, [r7, #7]
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d001      	beq.n	8008af0 <f_mount+0xa0>
 8008aec:	2300      	movs	r3, #0
 8008aee:	e010      	b.n	8008b12 <f_mount+0xc2>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8008af0:	f107 0108 	add.w	r1, r7, #8
 8008af4:	f107 030c 	add.w	r3, r7, #12
 8008af8:	2200      	movs	r2, #0
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7ff fc9a 	bl	8008434 <find_volume>
 8008b00:	4603      	mov	r3, r0
 8008b02:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	7dfa      	ldrb	r2, [r7, #23]
 8008b08:	4611      	mov	r1, r2
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7fe f8eb 	bl	8006ce6 <unlock_fs>
 8008b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3720      	adds	r7, #32
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	20000a10 	.word	0x20000a10

08008b20 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b2c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008b30:	6018      	str	r0, [r3, #0]
 8008b32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b36:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8008b3a:	6019      	str	r1, [r3, #0]
 8008b3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b40:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8008b44:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8008b46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b4a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d101      	bne.n	8008b58 <f_open+0x38>
 8008b54:	2309      	movs	r3, #9
 8008b56:	e263      	b.n	8009020 <f_open+0x500>
	fp->fs = 0;			/* Clear file object */
 8008b58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b5c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8008b68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b6c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8008b70:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008b74:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8008b78:	7812      	ldrb	r2, [r2, #0]
 8008b7a:	f002 021f 	and.w	r2, r2, #31
 8008b7e:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8008b80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b84:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	f023 0301 	bic.w	r3, r3, #1
 8008b8e:	b2da      	uxtb	r2, r3
 8008b90:	f107 0108 	add.w	r1, r7, #8
 8008b94:	f107 0320 	add.w	r3, r7, #32
 8008b98:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7ff fc49 	bl	8008434 <find_volume>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8008ba8:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	f040 8229 	bne.w	8009004 <f_open+0x4e4>
		INIT_BUF(dj);
 8008bb2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bb6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8008bba:	f107 0214 	add.w	r2, r7, #20
 8008bbe:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8008bc2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bc6:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	f107 0320 	add.w	r3, r7, #32
 8008bd0:	4611      	mov	r1, r2
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7ff fb12 	bl	80081fc <follow_path>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 8008bde:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008be2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8008be6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008bea:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008bee:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d11d      	bne.n	8008c32 <f_open+0x112>
			if (!dir)	/* Default directory itself */
 8008bf6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d103      	bne.n	8008c06 <f_open+0xe6>
				res = FR_INVALID_NAME;
 8008bfe:	2306      	movs	r3, #6
 8008c00:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8008c04:	e015      	b.n	8008c32 <f_open+0x112>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008c06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c0a:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	f023 0301 	bic.w	r3, r3, #1
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	bf14      	ite	ne
 8008c18:	2301      	movne	r3, #1
 8008c1a:	2300      	moveq	r3, #0
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	461a      	mov	r2, r3
 8008c20:	f107 0320 	add.w	r3, r7, #32
 8008c24:	4611      	mov	r1, r2
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7fe f87c 	bl	8006d24 <chk_lock>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008c32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c36:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	f003 031c 	and.w	r3, r3, #28
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	f000 80e6 	beq.w	8008e12 <f_open+0x2f2>
			if (res != FR_OK) {					/* No file, create new */
 8008c46:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d027      	beq.n	8008c9e <f_open+0x17e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8008c4e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8008c52:	2b04      	cmp	r3, #4
 8008c54:	d10e      	bne.n	8008c74 <f_open+0x154>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008c56:	f7fe f8d3 	bl	8006e00 <enq_lock>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d006      	beq.n	8008c6e <f_open+0x14e>
 8008c60:	f107 0320 	add.w	r3, r7, #32
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7ff f927 	bl	8007eb8 <dir_register>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	e000      	b.n	8008c70 <f_open+0x150>
 8008c6e:	2312      	movs	r3, #18
 8008c70:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008c74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c78:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8008c7c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008c80:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8008c84:	7812      	ldrb	r2, [r2, #0]
 8008c86:	f042 0208 	orr.w	r2, r2, #8
 8008c8a:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8008c8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c90:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8008c94:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008c98:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8008c9c:	e017      	b.n	8008cce <f_open+0x1ae>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008c9e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008ca2:	330b      	adds	r3, #11
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	f003 0311 	and.w	r3, r3, #17
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d003      	beq.n	8008cb6 <f_open+0x196>
					res = FR_DENIED;
 8008cae:	2307      	movs	r3, #7
 8008cb0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8008cb4:	e00b      	b.n	8008cce <f_open+0x1ae>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8008cb6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cba:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	f003 0304 	and.w	r3, r3, #4
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d002      	beq.n	8008cce <f_open+0x1ae>
						res = FR_EXIST;
 8008cc8:	2308      	movs	r3, #8
 8008cca:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008cce:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f040 80c1 	bne.w	8008e5a <f_open+0x33a>
 8008cd8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cdc:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	f003 0308 	and.w	r3, r3, #8
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	f000 80b7 	beq.w	8008e5a <f_open+0x33a>
				dw = GET_FATTIME();				/* Created time */
 8008cec:	f7fd fe74 	bl	80069d8 <get_fattime>
 8008cf0:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8008cf4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008cf8:	330e      	adds	r3, #14
 8008cfa:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8008cfe:	b2d2      	uxtb	r2, r2
 8008d00:	701a      	strb	r2, [r3, #0]
 8008d02:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	0a1b      	lsrs	r3, r3, #8
 8008d0a:	b29a      	uxth	r2, r3
 8008d0c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008d10:	330f      	adds	r3, #15
 8008d12:	b2d2      	uxtb	r2, r2
 8008d14:	701a      	strb	r2, [r3, #0]
 8008d16:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008d1a:	0c1a      	lsrs	r2, r3, #16
 8008d1c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008d20:	3310      	adds	r3, #16
 8008d22:	b2d2      	uxtb	r2, r2
 8008d24:	701a      	strb	r2, [r3, #0]
 8008d26:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008d2a:	0e1a      	lsrs	r2, r3, #24
 8008d2c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008d30:	3311      	adds	r3, #17
 8008d32:	b2d2      	uxtb	r2, r2
 8008d34:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8008d36:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008d3a:	330b      	adds	r3, #11
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8008d40:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008d44:	331c      	adds	r3, #28
 8008d46:	2200      	movs	r2, #0
 8008d48:	701a      	strb	r2, [r3, #0]
 8008d4a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008d4e:	331d      	adds	r3, #29
 8008d50:	2200      	movs	r2, #0
 8008d52:	701a      	strb	r2, [r3, #0]
 8008d54:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008d58:	331e      	adds	r3, #30
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	701a      	strb	r2, [r3, #0]
 8008d5e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008d62:	331f      	adds	r3, #31
 8008d64:	2200      	movs	r2, #0
 8008d66:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8008d68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d6c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8008d70:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008d74:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f7fe ff9a 	bl	8007cb2 <ld_clust>
 8008d7e:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 8008d82:	2100      	movs	r1, #0
 8008d84:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8008d88:	f7fe ffc1 	bl	8007d0e <st_clust>
				dj.fs->wflag = 1;
 8008d8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d90:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8008d94:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008d98:	2201      	movs	r2, #1
 8008d9a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8008d9e:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d059      	beq.n	8008e5a <f_open+0x33a>
					dw = dj.fs->winsect;
 8008da6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008daa:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8008dae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008db2:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8008db6:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8008dba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dbe:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8008dc2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008dc6:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7fe fc70 	bl	80076b0 <remove_chain>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 8008dd6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d13d      	bne.n	8008e5a <f_open+0x33a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8008dde:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008de2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8008de6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008dea:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8008dee:	3a01      	subs	r2, #1
 8008df0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
						res = move_window(dj.fs, dw);
 8008df4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008df8:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8008dfc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008e00:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7fe f98e 	bl	8007126 <move_window>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8008e10:	e023      	b.n	8008e5a <f_open+0x33a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8008e12:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d11f      	bne.n	8008e5a <f_open+0x33a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8008e1a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008e1e:	330b      	adds	r3, #11
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	f003 0310 	and.w	r3, r3, #16
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d003      	beq.n	8008e32 <f_open+0x312>
					res = FR_NO_FILE;
 8008e2a:	2304      	movs	r3, #4
 8008e2c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8008e30:	e013      	b.n	8008e5a <f_open+0x33a>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8008e32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e36:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	f003 0302 	and.w	r3, r3, #2
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d00a      	beq.n	8008e5a <f_open+0x33a>
 8008e44:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008e48:	330b      	adds	r3, #11
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	f003 0301 	and.w	r3, r3, #1
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d002      	beq.n	8008e5a <f_open+0x33a>
						res = FR_DENIED;
 8008e54:	2307      	movs	r3, #7
 8008e56:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8008e5a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d153      	bne.n	8008f0a <f_open+0x3ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008e62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e66:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	f003 0308 	and.w	r3, r3, #8
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d00b      	beq.n	8008e8c <f_open+0x36c>
				mode |= FA__WRITTEN;
 8008e74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e78:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8008e7c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008e80:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8008e84:	7812      	ldrb	r2, [r2, #0]
 8008e86:	f042 0220 	orr.w	r2, r2, #32
 8008e8a:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8008e8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e90:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8008e94:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008e98:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 8008e9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ea0:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8008eaa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008eae:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008eb8:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008ebc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ec0:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	f023 0301 	bic.w	r3, r3, #1
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	bf14      	ite	ne
 8008ece:	2301      	movne	r3, #1
 8008ed0:	2300      	moveq	r3, #0
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	f107 0320 	add.w	r3, r7, #32
 8008eda:	4611      	mov	r1, r2
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7fd ffb3 	bl	8006e48 <inc_lock>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ee8:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8008ef2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ef6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d102      	bne.n	8008f0a <f_open+0x3ea>
 8008f04:	2302      	movs	r3, #2
 8008f06:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8008f0a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d178      	bne.n	8009004 <f_open+0x4e4>
			fp->flag = mode;					/* File access mode */
 8008f12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f16:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008f20:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8008f24:	7812      	ldrb	r2, [r2, #0]
 8008f26:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8008f2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f2e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	2200      	movs	r2, #0
 8008f36:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8008f3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f3e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8008f42:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008f46:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7fe feb1 	bl	8007cb2 <ld_clust>
 8008f50:	4602      	mov	r2, r0
 8008f52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f56:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8008f60:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008f64:	331f      	adds	r3, #31
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	061a      	lsls	r2, r3, #24
 8008f6a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8008f6e:	331e      	adds	r3, #30
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	041b      	lsls	r3, r3, #16
 8008f74:	4313      	orrs	r3, r2
 8008f76:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008f7a:	321d      	adds	r2, #29
 8008f7c:	7812      	ldrb	r2, [r2, #0]
 8008f7e:	0212      	lsls	r2, r2, #8
 8008f80:	4313      	orrs	r3, r2
 8008f82:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8008f86:	321c      	adds	r2, #28
 8008f88:	7812      	ldrb	r2, [r2, #0]
 8008f8a:	431a      	orrs	r2, r3
 8008f8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f90:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 8008f9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f9e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8008faa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fae:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8008fba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fbe:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8008fca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fce:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8008fd2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008fd6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fda:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8008fe4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fe8:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008ff2:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8008ff6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ffa:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8009004:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009008:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800900c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009010:	f897 224f 	ldrb.w	r2, [r7, #591]	; 0x24f
 8009014:	4611      	mov	r1, r2
 8009016:	4618      	mov	r0, r3
 8009018:	f7fd fe65 	bl	8006ce6 <unlock_fs>
 800901c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 8009020:	4618      	mov	r0, r3
 8009022:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b08a      	sub	sp, #40	; 0x28
 800902e:	af00      	add	r7, sp, #0
 8009030:	60f8      	str	r0, [r7, #12]
 8009032:	60b9      	str	r1, [r7, #8]
 8009034:	607a      	str	r2, [r7, #4]
 8009036:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	2200      	movs	r2, #0
 8009040:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f7ff fcc6 	bl	80089d4 <validate>
 8009048:	4603      	mov	r3, r0
 800904a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800904c:	7dfb      	ldrb	r3, [r7, #23]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d009      	beq.n	8009066 <f_write+0x3c>
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009058:	7dfa      	ldrb	r2, [r7, #23]
 800905a:	4611      	mov	r1, r2
 800905c:	4618      	mov	r0, r3
 800905e:	f7fd fe42 	bl	8006ce6 <unlock_fs>
 8009062:	7dfb      	ldrb	r3, [r7, #23]
 8009064:	e1d4      	b.n	8009410 <f_write+0x3e6>
	if (fp->err)							/* Check error */
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800906c:	2b00      	cmp	r3, #0
 800906e:	d00d      	beq.n	800908c <f_write+0x62>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800907c:	4619      	mov	r1, r3
 800907e:	4610      	mov	r0, r2
 8009080:	f7fd fe31 	bl	8006ce6 <unlock_fs>
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800908a:	e1c1      	b.n	8009410 <f_write+0x3e6>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009092:	f003 0302 	and.w	r3, r3, #2
 8009096:	2b00      	cmp	r3, #0
 8009098:	d108      	bne.n	80090ac <f_write+0x82>
		LEAVE_FF(fp->fs, FR_DENIED);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80090a0:	2107      	movs	r1, #7
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7fd fe1f 	bl	8006ce6 <unlock_fs>
 80090a8:	2307      	movs	r3, #7
 80090aa:	e1b1      	b.n	8009410 <f_write+0x3e6>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	441a      	add	r2, r3
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80090bc:	429a      	cmp	r2, r3
 80090be:	f080 8182 	bcs.w	80093c6 <f_write+0x39c>
 80090c2:	2300      	movs	r3, #0
 80090c4:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80090c6:	e17e      	b.n	80093c6 <f_write+0x39c>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80090ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	f040 813e 	bne.w	8009354 <f_write+0x32a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80090de:	0a5b      	lsrs	r3, r3, #9
 80090e0:	b2da      	uxtb	r2, r3
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80090e8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80090ec:	3b01      	subs	r3, #1
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	4013      	ands	r3, r2
 80090f2:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 80090f4:	7dbb      	ldrb	r3, [r7, #22]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d15f      	bne.n	80091ba <f_write+0x190>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009100:	2b00      	cmp	r3, #0
 8009102:	d10f      	bne.n	8009124 <f_write+0xfa>
					clst = fp->sclust;		/* Follow from the origin */
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800910a:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800910c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910e:	2b00      	cmp	r3, #0
 8009110:	d121      	bne.n	8009156 <f_write+0x12c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009118:	2100      	movs	r1, #0
 800911a:	4618      	mov	r0, r3
 800911c:	f7fe fb22 	bl	8007764 <create_chain>
 8009120:	6278      	str	r0, [r7, #36]	; 0x24
 8009122:	e018      	b.n	8009156 <f_write+0x12c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800912a:	2b00      	cmp	r3, #0
 800912c:	d008      	beq.n	8009140 <f_write+0x116>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009134:	4619      	mov	r1, r3
 8009136:	68f8      	ldr	r0, [r7, #12]
 8009138:	f7fe fbb1 	bl	800789e <clmt_clust>
 800913c:	6278      	str	r0, [r7, #36]	; 0x24
 800913e:	e00a      	b.n	8009156 <f_write+0x12c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800914c:	4619      	mov	r1, r3
 800914e:	4610      	mov	r0, r2
 8009150:	f7fe fb08 	bl	8007764 <create_chain>
 8009154:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009158:	2b00      	cmp	r3, #0
 800915a:	f000 8139 	beq.w	80093d0 <f_write+0x3a6>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800915e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009160:	2b01      	cmp	r3, #1
 8009162:	d10c      	bne.n	800917e <f_write+0x154>
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2202      	movs	r2, #2
 8009168:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009172:	2102      	movs	r1, #2
 8009174:	4618      	mov	r0, r3
 8009176:	f7fd fdb6 	bl	8006ce6 <unlock_fs>
 800917a:	2302      	movs	r3, #2
 800917c:	e148      	b.n	8009410 <f_write+0x3e6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800917e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009184:	d10c      	bne.n	80091a0 <f_write+0x176>
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2201      	movs	r2, #1
 800918a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009194:	2101      	movs	r1, #1
 8009196:	4618      	mov	r0, r3
 8009198:	f7fd fda5 	bl	8006ce6 <unlock_fs>
 800919c:	2301      	movs	r3, #1
 800919e:	e137      	b.n	8009410 <f_write+0x3e6>
				fp->clust = clst;			/* Update current cluster */
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d103      	bne.n	80091ba <f_write+0x190>
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091b6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80091c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d024      	beq.n	8009212 <f_write+0x1e8>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80091ce:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80091d2:	68f9      	ldr	r1, [r7, #12]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80091da:	2301      	movs	r3, #1
 80091dc:	f7fd fcba 	bl	8006b54 <disk_write>
 80091e0:	4603      	mov	r3, r0
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d00c      	beq.n	8009200 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2201      	movs	r2, #1
 80091ea:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80091f4:	2101      	movs	r1, #1
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7fd fd75 	bl	8006ce6 <unlock_fs>
 80091fc:	2301      	movs	r3, #1
 80091fe:	e107      	b.n	8009410 <f_write+0x3e6>
				fp->flag &= ~FA__DIRTY;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009206:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800920a:	b2da      	uxtb	r2, r3
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800921e:	4619      	mov	r1, r3
 8009220:	4610      	mov	r0, r2
 8009222:	f7fe f85b 	bl	80072dc <clust2sect>
 8009226:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d10c      	bne.n	8009248 <f_write+0x21e>
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2202      	movs	r2, #2
 8009232:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800923c:	2102      	movs	r1, #2
 800923e:	4618      	mov	r0, r3
 8009240:	f7fd fd51 	bl	8006ce6 <unlock_fs>
 8009244:	2302      	movs	r3, #2
 8009246:	e0e3      	b.n	8009410 <f_write+0x3e6>
			sect += csect;
 8009248:	7dbb      	ldrb	r3, [r7, #22]
 800924a:	693a      	ldr	r2, [r7, #16]
 800924c:	4413      	add	r3, r2
 800924e:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	0a5b      	lsrs	r3, r3, #9
 8009254:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d04f      	beq.n	80092fc <f_write+0x2d2>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800925c:	7dba      	ldrb	r2, [r7, #22]
 800925e:	69fb      	ldr	r3, [r7, #28]
 8009260:	4413      	add	r3, r2
 8009262:	68fa      	ldr	r2, [r7, #12]
 8009264:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8009268:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800926c:	4293      	cmp	r3, r2
 800926e:	d908      	bls.n	8009282 <f_write+0x258>
					cc = fp->fs->csize - csect;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009276:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800927a:	461a      	mov	r2, r3
 800927c:	7dbb      	ldrb	r3, [r7, #22]
 800927e:	1ad3      	subs	r3, r2, r3
 8009280:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009288:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	693a      	ldr	r2, [r7, #16]
 8009290:	69b9      	ldr	r1, [r7, #24]
 8009292:	f7fd fc5f 	bl	8006b54 <disk_write>
 8009296:	4603      	mov	r3, r0
 8009298:	2b00      	cmp	r3, #0
 800929a:	d00c      	beq.n	80092b6 <f_write+0x28c>
					ABORT(fp->fs, FR_DISK_ERR);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2201      	movs	r2, #1
 80092a0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80092aa:	2101      	movs	r1, #1
 80092ac:	4618      	mov	r0, r3
 80092ae:	f7fd fd1a 	bl	8006ce6 <unlock_fs>
 80092b2:	2301      	movs	r3, #1
 80092b4:	e0ac      	b.n	8009410 <f_write+0x3e6>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	1ad3      	subs	r3, r2, r3
 80092c0:	69fa      	ldr	r2, [r7, #28]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d916      	bls.n	80092f4 <f_write+0x2ca>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80092c6:	68f8      	ldr	r0, [r7, #12]
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	1ad3      	subs	r3, r2, r3
 80092d2:	025b      	lsls	r3, r3, #9
 80092d4:	69ba      	ldr	r2, [r7, #24]
 80092d6:	4413      	add	r3, r2
 80092d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092dc:	4619      	mov	r1, r3
 80092de:	f7fd fc77 	bl	8006bd0 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80092e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092ec:	b2da      	uxtb	r2, r3
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80092f4:	69fb      	ldr	r3, [r7, #28]
 80092f6:	025b      	lsls	r3, r3, #9
 80092f8:	623b      	str	r3, [r7, #32]
				continue;
 80092fa:	e04e      	b.n	800939a <f_write+0x370>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009302:	693a      	ldr	r2, [r7, #16]
 8009304:	429a      	cmp	r2, r3
 8009306:	d021      	beq.n	800934c <f_write+0x322>
				if (fp->fptr < fp->fsize &&
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009314:	429a      	cmp	r2, r3
 8009316:	d219      	bcs.n	800934c <f_write+0x322>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800931e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009322:	68f9      	ldr	r1, [r7, #12]
 8009324:	2301      	movs	r3, #1
 8009326:	693a      	ldr	r2, [r7, #16]
 8009328:	f7fd fbf4 	bl	8006b14 <disk_read>
 800932c:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00c      	beq.n	800934c <f_write+0x322>
						ABORT(fp->fs, FR_DISK_ERR);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2201      	movs	r2, #1
 8009336:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009340:	2101      	movs	r1, #1
 8009342:	4618      	mov	r0, r3
 8009344:	f7fd fccf 	bl	8006ce6 <unlock_fs>
 8009348:	2301      	movs	r3, #1
 800934a:	e061      	b.n	8009410 <f_write+0x3e6>
			}
#endif
			fp->dsect = sect;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	693a      	ldr	r2, [r7, #16]
 8009350:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800935a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800935e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009362:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8009364:	6a3a      	ldr	r2, [r7, #32]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	429a      	cmp	r2, r3
 800936a:	d901      	bls.n	8009370 <f_write+0x346>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800937a:	68fa      	ldr	r2, [r7, #12]
 800937c:	4413      	add	r3, r2
 800937e:	6a3a      	ldr	r2, [r7, #32]
 8009380:	69b9      	ldr	r1, [r7, #24]
 8009382:	4618      	mov	r0, r3
 8009384:	f7fd fc24 	bl	8006bd0 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800938e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009392:	b2da      	uxtb	r2, r3
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800939a:	69ba      	ldr	r2, [r7, #24]
 800939c:	6a3b      	ldr	r3, [r7, #32]
 800939e:	4413      	add	r3, r2
 80093a0:	61bb      	str	r3, [r7, #24]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80093a8:	6a3b      	ldr	r3, [r7, #32]
 80093aa:	441a      	add	r2, r3
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	681a      	ldr	r2, [r3, #0]
 80093b6:	6a3b      	ldr	r3, [r7, #32]
 80093b8:	441a      	add	r2, r3
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	601a      	str	r2, [r3, #0]
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	6a3b      	ldr	r3, [r7, #32]
 80093c2:	1ad3      	subs	r3, r2, r3
 80093c4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f47f ae7d 	bne.w	80090c8 <f_write+0x9e>
 80093ce:	e000      	b.n	80093d2 <f_write+0x3a8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80093d0:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80093de:	429a      	cmp	r2, r3
 80093e0:	d905      	bls.n	80093ee <f_write+0x3c4>
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80093f4:	f043 0320 	orr.w	r3, r3, #32
 80093f8:	b2da      	uxtb	r2, r3
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009406:	2100      	movs	r1, #0
 8009408:	4618      	mov	r0, r3
 800940a:	f7fd fc6c 	bl	8006ce6 <unlock_fs>
 800940e:	2300      	movs	r3, #0
}
 8009410:	4618      	mov	r0, r3
 8009412:	3728      	adds	r7, #40	; 0x28
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b086      	sub	sp, #24
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f7ff fad7 	bl	80089d4 <validate>
 8009426:	4603      	mov	r3, r0
 8009428:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800942a:	7dfb      	ldrb	r3, [r7, #23]
 800942c:	2b00      	cmp	r3, #0
 800942e:	f040 80af 	bne.w	8009590 <f_sync+0x178>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009438:	f003 0320 	and.w	r3, r3, #32
 800943c:	2b00      	cmp	r3, #0
 800943e:	f000 80a7 	beq.w	8009590 <f_sync+0x178>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800944c:	2b00      	cmp	r3, #0
 800944e:	d020      	beq.n	8009492 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009456:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800945a:	6879      	ldr	r1, [r7, #4]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8009462:	2301      	movs	r3, #1
 8009464:	f7fd fb76 	bl	8006b54 <disk_write>
 8009468:	4603      	mov	r3, r0
 800946a:	2b00      	cmp	r3, #0
 800946c:	d008      	beq.n	8009480 <f_sync+0x68>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009474:	2101      	movs	r1, #1
 8009476:	4618      	mov	r0, r3
 8009478:	f7fd fc35 	bl	8006ce6 <unlock_fs>
 800947c:	2301      	movs	r3, #1
 800947e:	e090      	b.n	80095a2 <f_sync+0x18a>
				fp->flag &= ~FA__DIRTY;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009486:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800948a:	b2da      	uxtb	r2, r3
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800949e:	4619      	mov	r1, r3
 80094a0:	4610      	mov	r0, r2
 80094a2:	f7fd fe40 	bl	8007126 <move_window>
 80094a6:	4603      	mov	r3, r0
 80094a8:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 80094aa:	7dfb      	ldrb	r3, [r7, #23]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d16f      	bne.n	8009590 <f_sync+0x178>
				dir = fp->dir_ptr;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80094b6:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	330b      	adds	r3, #11
 80094bc:	781a      	ldrb	r2, [r3, #0]
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	330b      	adds	r3, #11
 80094c2:	f042 0220 	orr.w	r2, r2, #32
 80094c6:	b2d2      	uxtb	r2, r2
 80094c8:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	331c      	adds	r3, #28
 80094d4:	b2d2      	uxtb	r2, r2
 80094d6:	701a      	strb	r2, [r3, #0]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80094de:	b29b      	uxth	r3, r3
 80094e0:	0a1b      	lsrs	r3, r3, #8
 80094e2:	b29a      	uxth	r2, r3
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	331d      	adds	r3, #29
 80094e8:	b2d2      	uxtb	r2, r2
 80094ea:	701a      	strb	r2, [r3, #0]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80094f2:	0c1a      	lsrs	r2, r3, #16
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	331e      	adds	r3, #30
 80094f8:	b2d2      	uxtb	r2, r2
 80094fa:	701a      	strb	r2, [r3, #0]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009502:	0e1a      	lsrs	r2, r3, #24
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	331f      	adds	r3, #31
 8009508:	b2d2      	uxtb	r2, r2
 800950a:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009512:	4619      	mov	r1, r3
 8009514:	6938      	ldr	r0, [r7, #16]
 8009516:	f7fe fbfa 	bl	8007d0e <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800951a:	f7fd fa5d 	bl	80069d8 <get_fattime>
 800951e:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	3316      	adds	r3, #22
 8009524:	68fa      	ldr	r2, [r7, #12]
 8009526:	b2d2      	uxtb	r2, r2
 8009528:	701a      	strb	r2, [r3, #0]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	b29b      	uxth	r3, r3
 800952e:	0a1b      	lsrs	r3, r3, #8
 8009530:	b29a      	uxth	r2, r3
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	3317      	adds	r3, #23
 8009536:	b2d2      	uxtb	r2, r2
 8009538:	701a      	strb	r2, [r3, #0]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	0c1a      	lsrs	r2, r3, #16
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	3318      	adds	r3, #24
 8009542:	b2d2      	uxtb	r2, r2
 8009544:	701a      	strb	r2, [r3, #0]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	0e1a      	lsrs	r2, r3, #24
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	3319      	adds	r3, #25
 800954e:	b2d2      	uxtb	r2, r2
 8009550:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	3312      	adds	r3, #18
 8009556:	2200      	movs	r2, #0
 8009558:	701a      	strb	r2, [r3, #0]
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	3313      	adds	r3, #19
 800955e:	2200      	movs	r2, #0
 8009560:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009568:	f023 0320 	bic.w	r3, r3, #32
 800956c:	b2da      	uxtb	r2, r3
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800957a:	2201      	movs	r2, #1
 800957c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009586:	4618      	mov	r0, r3
 8009588:	f7fd fdfb 	bl	8007182 <sync_fs>
 800958c:	4603      	mov	r3, r0
 800958e:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009596:	7dfa      	ldrb	r2, [r7, #23]
 8009598:	4611      	mov	r1, r2
 800959a:	4618      	mov	r0, r3
 800959c:	f7fd fba3 	bl	8006ce6 <unlock_fs>
 80095a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3718      	adds	r7, #24
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}

080095aa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 80095aa:	b580      	push	{r7, lr}
 80095ac:	b084      	sub	sp, #16
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f7ff ff30 	bl	8009418 <f_sync>
 80095b8:	4603      	mov	r3, r0
 80095ba:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80095bc:	7bfb      	ldrb	r3, [r7, #15]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d11e      	bne.n	8009600 <f_close+0x56>
#endif
	{
		res = validate(fp);				/* Lock volume */
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f7ff fa06 	bl	80089d4 <validate>
 80095c8:	4603      	mov	r3, r0
 80095ca:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80095cc:	7bfb      	ldrb	r3, [r7, #15]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d116      	bne.n	8009600 <f_close+0x56>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80095d8:	60bb      	str	r3, [r7, #8]
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80095e0:	4618      	mov	r0, r3
 80095e2:	f7fd fce9 	bl	8006fb8 <dec_lock>
 80095e6:	4603      	mov	r3, r0
 80095e8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80095ea:	7bfb      	ldrb	r3, [r7, #15]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d103      	bne.n	80095f8 <f_close+0x4e>
#endif
				fp->fs = 0;				/* Invalidate file object */
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2200      	movs	r2, #0
 80095f4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80095f8:	2100      	movs	r1, #0
 80095fa:	68b8      	ldr	r0, [r7, #8]
 80095fc:	f7fd fb73 	bl	8006ce6 <unlock_fs>
#endif
		}
	}
	return res;
 8009600:	7bfb      	ldrb	r3, [r7, #15]
}
 8009602:	4618      	mov	r0, r3
 8009604:	3710      	adds	r7, #16
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}

0800960a <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800960a:	b580      	push	{r7, lr}
 800960c:	b088      	sub	sp, #32
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
 8009612:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d101      	bne.n	800961e <f_opendir+0x14>
 800961a:	2309      	movs	r3, #9
 800961c:	e079      	b.n	8009712 <f_opendir+0x108>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 800961e:	4639      	mov	r1, r7
 8009620:	f107 0318 	add.w	r3, r7, #24
 8009624:	2200      	movs	r2, #0
 8009626:	4618      	mov	r0, r3
 8009628:	f7fe ff04 	bl	8008434 <find_volume>
 800962c:	4603      	mov	r3, r0
 800962e:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) {
 8009630:	7ffb      	ldrb	r3, [r7, #31]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d15f      	bne.n	80096f6 <f_opendir+0xec>
		dp->fs = fs;
 8009636:	69ba      	ldr	r2, [r7, #24]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		INIT_BUF(*dp);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f107 020c 	add.w	r2, r7, #12
 8009644:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	4619      	mov	r1, r3
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f7fe fdd5 	bl	80081fc <follow_path>
 8009652:	4603      	mov	r3, r0
 8009654:	77fb      	strb	r3, [r7, #31]
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 8009656:	7ffb      	ldrb	r3, [r7, #31]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d147      	bne.n	80096ec <f_opendir+0xe2>
			if (dp->dir) {						/* It is not the origin directory itself */
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009662:	2b00      	cmp	r3, #0
 8009664:	d017      	beq.n	8009696 <f_opendir+0x8c>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800966c:	330b      	adds	r3, #11
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	f003 0310 	and.w	r3, r3, #16
 8009674:	2b00      	cmp	r3, #0
 8009676:	d00c      	beq.n	8009692 <f_opendir+0x88>
					dp->sclust = ld_clust(fs, dp->dir);
 8009678:	69ba      	ldr	r2, [r7, #24]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009680:	4619      	mov	r1, r3
 8009682:	4610      	mov	r0, r2
 8009684:	f7fe fb15 	bl	8007cb2 <ld_clust>
 8009688:	4602      	mov	r2, r0
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8009690:	e001      	b.n	8009696 <f_opendir+0x8c>
				else							/* The object is a file */
					res = FR_NO_PATH;
 8009692:	2305      	movs	r3, #5
 8009694:	77fb      	strb	r3, [r7, #31]
			}
			if (res == FR_OK) {
 8009696:	7ffb      	ldrb	r3, [r7, #31]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d127      	bne.n	80096ec <f_opendir+0xe2>
				dp->id = fs->id;
 800969c:	69bb      	ldr	r3, [r7, #24]
 800969e:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80096a8:	2100      	movs	r1, #0
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f7fe f92c 	bl	8007908 <dir_sdi>
 80096b0:	4603      	mov	r3, r0
 80096b2:	77fb      	strb	r3, [r7, #31]
#if _FS_LOCK
				if (res == FR_OK) {
 80096b4:	7ffb      	ldrb	r3, [r7, #31]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d118      	bne.n	80096ec <f_opendir+0xe2>
					if (dp->sclust) {
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d00f      	beq.n	80096e4 <f_opendir+0xda>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80096c4:	2100      	movs	r1, #0
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f7fd fbbe 	bl	8006e48 <inc_lock>
 80096cc:	4602      	mov	r2, r0
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
						if (!dp->lockid)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d106      	bne.n	80096ec <f_opendir+0xe2>
							res = FR_TOO_MANY_OPEN_FILES;
 80096de:	2312      	movs	r3, #18
 80096e0:	77fb      	strb	r3, [r7, #31]
 80096e2:	e003      	b.n	80096ec <f_opendir+0xe2>
					} else {
						dp->lockid = 0;	/* Root directory need not to be locked */
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80096ec:	7ffb      	ldrb	r3, [r7, #31]
 80096ee:	2b04      	cmp	r3, #4
 80096f0:	d101      	bne.n	80096f6 <f_opendir+0xec>
 80096f2:	2305      	movs	r3, #5
 80096f4:	77fb      	strb	r3, [r7, #31]
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 80096f6:	7ffb      	ldrb	r3, [r7, #31]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d003      	beq.n	8009704 <f_opendir+0xfa>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2200      	movs	r2, #0
 8009700:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	LEAVE_FF(fs, res);
 8009704:	69bb      	ldr	r3, [r7, #24]
 8009706:	7ffa      	ldrb	r2, [r7, #31]
 8009708:	4611      	mov	r1, r2
 800970a:	4618      	mov	r0, r3
 800970c:	f7fd faeb 	bl	8006ce6 <unlock_fs>
 8009710:	7ffb      	ldrb	r3, [r7, #31]
}
 8009712:	4618      	mov	r0, r3
 8009714:	3720      	adds	r7, #32
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800971a:	b580      	push	{r7, lr}
 800971c:	b084      	sub	sp, #16
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = validate(dp);
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f7ff f956 	bl	80089d4 <validate>
 8009728:	4603      	mov	r3, r0
 800972a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800972c:	7bfb      	ldrb	r3, [r7, #15]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d11b      	bne.n	800976a <f_closedir+0x50>
#if _FS_REENTRANT
		FATFS *fs = dp->fs;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009738:	60bb      	str	r3, [r7, #8]
#endif
#if _FS_LOCK
		if (dp->lockid)				/* Decrement sub-directory open counter */
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8009740:	2b00      	cmp	r3, #0
 8009742:	d007      	beq.n	8009754 <f_closedir+0x3a>
			res = dec_lock(dp->lockid);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800974a:	4618      	mov	r0, r3
 800974c:	f7fd fc34 	bl	8006fb8 <dec_lock>
 8009750:	4603      	mov	r3, r0
 8009752:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK)
 8009754:	7bfb      	ldrb	r3, [r7, #15]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d103      	bne.n	8009762 <f_closedir+0x48>
#endif
			dp->fs = 0;				/* Invalidate directory object */
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8009762:	2100      	movs	r1, #0
 8009764:	68b8      	ldr	r0, [r7, #8]
 8009766:	f7fd fabe 	bl	8006ce6 <unlock_fs>
#endif
	}
	return res;
 800976a:	7bfb      	ldrb	r3, [r7, #15]
}
 800976c:	4618      	mov	r0, r3
 800976e:	3710      	adds	r7, #16
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b086      	sub	sp, #24
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f7ff f928 	bl	80089d4 <validate>
 8009784:	4603      	mov	r3, r0
 8009786:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009788:	7dfb      	ldrb	r3, [r7, #23]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d133      	bne.n	80097f6 <f_readdir+0x82>
		if (!fno) {
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d106      	bne.n	80097a2 <f_readdir+0x2e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8009794:	2100      	movs	r1, #0
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f7fe f8b6 	bl	8007908 <dir_sdi>
 800979c:	4603      	mov	r3, r0
 800979e:	75fb      	strb	r3, [r7, #23]
 80097a0:	e029      	b.n	80097f6 <f_readdir+0x82>
		} else {
			INIT_BUF(*dp);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f107 0208 	add.w	r2, r7, #8
 80097a8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
			res = dir_read(dp, 0);			/* Read an item */
 80097ac:	2100      	movs	r1, #0
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f7fe fb23 	bl	8007dfa <dir_read>
 80097b4:	4603      	mov	r3, r0
 80097b6:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 80097b8:	7dfb      	ldrb	r3, [r7, #23]
 80097ba:	2b04      	cmp	r3, #4
 80097bc:	d105      	bne.n	80097ca <f_readdir+0x56>
				dp->sect = 0;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2200      	movs	r2, #0
 80097c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				res = FR_OK;
 80097c6:	2300      	movs	r3, #0
 80097c8:	75fb      	strb	r3, [r7, #23]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 80097ca:	7dfb      	ldrb	r3, [r7, #23]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d112      	bne.n	80097f6 <f_readdir+0x82>
				get_fileinfo(dp, fno);		/* Get the object information */
 80097d0:	6839      	ldr	r1, [r7, #0]
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f7fe fbe0 	bl	8007f98 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80097d8:	2100      	movs	r1, #0
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f7fe f928 	bl	8007a30 <dir_next>
 80097e0:	4603      	mov	r3, r0
 80097e2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) {
 80097e4:	7dfb      	ldrb	r3, [r7, #23]
 80097e6:	2b04      	cmp	r3, #4
 80097e8:	d105      	bne.n	80097f6 <f_readdir+0x82>
					dp->sect = 0;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
					res = FR_OK;
 80097f2:	2300      	movs	r3, #0
 80097f4:	75fb      	strb	r3, [r7, #23]
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80097fc:	7dfa      	ldrb	r2, [r7, #23]
 80097fe:	4611      	mov	r1, r2
 8009800:	4618      	mov	r0, r3
 8009802:	f7fd fa70 	bl	8006ce6 <unlock_fs>
 8009806:	7dfb      	ldrb	r3, [r7, #23]
}
 8009808:	4618      	mov	r0, r3
 800980a:	3718      	adds	r7, #24
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8009816:	af00      	add	r7, sp, #0
 8009818:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800981c:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8009820:	6018      	str	r0, [r3, #0]
 8009822:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8009826:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 800982a:	6019      	str	r1, [r3, #0]
	DIR dj;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 0);
 800982c:	1d39      	adds	r1, r7, #4
 800982e:	f107 0314 	add.w	r3, r7, #20
 8009832:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009836:	2200      	movs	r2, #0
 8009838:	4618      	mov	r0, r3
 800983a:	f7fe fdfb 	bl	8008434 <find_volume>
 800983e:	4603      	mov	r3, r0
 8009840:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
	if (res == FR_OK) {
 8009844:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8009848:	2b00      	cmp	r3, #0
 800984a:	d136      	bne.n	80098ba <f_stat+0xaa>
		INIT_BUF(dj);
 800984c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8009850:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8009854:	f107 0208 	add.w	r2, r7, #8
 8009858:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 800985c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8009860:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	f107 0314 	add.w	r3, r7, #20
 800986a:	4611      	mov	r1, r2
 800986c:	4618      	mov	r0, r3
 800986e:	f7fe fcc5 	bl	80081fc <follow_path>
 8009872:	4603      	mov	r3, r0
 8009874:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
		if (res == FR_OK) {				/* Follow completed */
 8009878:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 800987c:	2b00      	cmp	r3, #0
 800987e:	d11c      	bne.n	80098ba <f_stat+0xaa>
			if (dj.dir) {		/* Found an object */
 8009880:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8009884:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8009888:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800988c:	2b00      	cmp	r3, #0
 800988e:	d011      	beq.n	80098b4 <f_stat+0xa4>
				if (fno) get_fileinfo(&dj, fno);
 8009890:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8009894:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00d      	beq.n	80098ba <f_stat+0xaa>
 800989e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80098a2:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80098a6:	f107 0214 	add.w	r2, r7, #20
 80098aa:	6819      	ldr	r1, [r3, #0]
 80098ac:	4610      	mov	r0, r2
 80098ae:	f7fe fb73 	bl	8007f98 <get_fileinfo>
 80098b2:	e002      	b.n	80098ba <f_stat+0xaa>
			} else {			/* It is root directory */
				res = FR_INVALID_NAME;
 80098b4:	2306      	movs	r3, #6
 80098b6:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
			}
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
 80098ba:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80098be:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80098c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80098c6:	f897 2237 	ldrb.w	r2, [r7, #567]	; 0x237
 80098ca:	4611      	mov	r1, r2
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7fd fa0a 	bl	8006ce6 <unlock_fs>
 80098d2:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	f507 770e 	add.w	r7, r7, #568	; 0x238
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	f5ad 6d8c 	sub.w	sp, sp, #1120	; 0x460
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80098ec:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 80098f0:	6018      	str	r0, [r3, #0]
	FRESULT res;
	DIR dj, sdj;
	BYTE *dir;
	DWORD dclst = 0;
 80098f2:	2300      	movs	r3, #0
 80098f4:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
 80098f8:	1d39      	adds	r1, r7, #4
 80098fa:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80098fe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009902:	2201      	movs	r2, #1
 8009904:	4618      	mov	r0, r3
 8009906:	f7fe fd95 	bl	8008434 <find_volume>
 800990a:	4603      	mov	r3, r0
 800990c:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	if (res == FR_OK) {
 8009910:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8009914:	2b00      	cmp	r3, #0
 8009916:	f040 80c7 	bne.w	8009aa8 <f_unlink+0x1c8>
		INIT_BUF(dj);
 800991a:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800991e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8009922:	f107 0208 	add.w	r2, r7, #8
 8009926:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);		/* Follow the file path */
 800992a:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800992e:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8009938:	4611      	mov	r1, r2
 800993a:	4618      	mov	r0, r3
 800993c:	f7fe fc5e 	bl	80081fc <follow_path>
 8009940:	4603      	mov	r3, r0
 8009942:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open object */
 8009946:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 800994a:	2b00      	cmp	r3, #0
 800994c:	d108      	bne.n	8009960 <f_unlink+0x80>
 800994e:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8009952:	2102      	movs	r1, #2
 8009954:	4618      	mov	r0, r3
 8009956:	f7fd f9e5 	bl	8006d24 <chk_lock>
 800995a:	4603      	mov	r3, r0
 800995c:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8009960:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8009964:	2b00      	cmp	r3, #0
 8009966:	f040 809f 	bne.w	8009aa8 <f_unlink+0x1c8>
			dir = dj.dir;
 800996a:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800996e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8009972:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009976:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
			if (!dir) {
 800997a:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 800997e:	2b00      	cmp	r3, #0
 8009980:	d103      	bne.n	800998a <f_unlink+0xaa>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8009982:	2306      	movs	r3, #6
 8009984:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
 8009988:	e00a      	b.n	80099a0 <f_unlink+0xc0>
			} else {
				if (dir[DIR_Attr] & AM_RDO)
 800998a:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 800998e:	330b      	adds	r3, #11
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	f003 0301 	and.w	r3, r3, #1
 8009996:	2b00      	cmp	r3, #0
 8009998:	d002      	beq.n	80099a0 <f_unlink+0xc0>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800999a:	2307      	movs	r3, #7
 800999c:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
			}
			if (res == FR_OK) {
 80099a0:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d14d      	bne.n	8009a44 <f_unlink+0x164>
				dclst = ld_clust(dj.fs, dir);
 80099a8:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80099ac:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80099b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80099b4:	f8d7 1454 	ldr.w	r1, [r7, #1108]	; 0x454
 80099b8:	4618      	mov	r0, r3
 80099ba:	f7fe f97a 	bl	8007cb2 <ld_clust>
 80099be:	f8c7 0458 	str.w	r0, [r7, #1112]	; 0x458
				if (dclst && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-directory ? */
 80099c2:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d03c      	beq.n	8009a44 <f_unlink+0x164>
 80099ca:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 80099ce:	330b      	adds	r3, #11
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	f003 0310 	and.w	r3, r3, #16
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d034      	beq.n	8009a44 <f_unlink+0x164>
					if (dclst == dj.fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						mem_cpy(&sdj, &dj, sizeof (DIR));	/* Open the sub-directory */
 80099da:	f507 710d 	add.w	r1, r7, #564	; 0x234
 80099de:	f107 0314 	add.w	r3, r7, #20
 80099e2:	f44f 7208 	mov.w	r2, #544	; 0x220
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7fd f8f2 	bl	8006bd0 <mem_cpy>
						sdj.sclust = dclst;
 80099ec:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80099f0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 80099f4:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 80099f8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
						res = dir_sdi(&sdj, 2);
 80099fc:	f107 0314 	add.w	r3, r7, #20
 8009a00:	2102      	movs	r1, #2
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7fd ff80 	bl	8007908 <dir_sdi>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
						if (res == FR_OK) {
 8009a0e:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d116      	bne.n	8009a44 <f_unlink+0x164>
							res = dir_read(&sdj, 0);			/* Read an item (excluding dot entries) */
 8009a16:	f107 0314 	add.w	r3, r7, #20
 8009a1a:	2100      	movs	r1, #0
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f7fe f9ec 	bl	8007dfa <dir_read>
 8009a22:	4603      	mov	r3, r0
 8009a24:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? (cannot remove) */
 8009a28:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d102      	bne.n	8009a36 <f_unlink+0x156>
 8009a30:	2307      	movs	r3, #7
 8009a32:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? (can remove) */
 8009a36:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8009a3a:	2b04      	cmp	r3, #4
 8009a3c:	d102      	bne.n	8009a44 <f_unlink+0x164>
 8009a3e:	2300      	movs	r3, #0
 8009a40:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
						}
					}
				}
			}
			if (res == FR_OK) {
 8009a44:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d12d      	bne.n	8009aa8 <f_unlink+0x1c8>
				res = dir_remove(&dj);		/* Remove the directory entry */
 8009a4c:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8009a50:	4618      	mov	r0, r3
 8009a52:	f7fe fa6a 	bl	8007f2a <dir_remove>
 8009a56:	4603      	mov	r3, r0
 8009a58:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
				if (res == FR_OK && dclst)	/* Remove the cluster chain if exist */
 8009a5c:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d111      	bne.n	8009a88 <f_unlink+0x1a8>
 8009a64:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d00d      	beq.n	8009a88 <f_unlink+0x1a8>
					res = remove_chain(dj.fs, dclst);
 8009a6c:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8009a70:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8009a74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009a78:	f8d7 1458 	ldr.w	r1, [r7, #1112]	; 0x458
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f7fd fe17 	bl	80076b0 <remove_chain>
 8009a82:	4603      	mov	r3, r0
 8009a84:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
				if (res == FR_OK) res = sync_fs(dj.fs);
 8009a88:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d10b      	bne.n	8009aa8 <f_unlink+0x1c8>
 8009a90:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8009a94:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8009a98:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f7fd fb70 	bl	8007182 <sync_fs>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
			}
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
 8009aa8:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8009aac:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8009ab0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009ab4:	f897 245f 	ldrb.w	r2, [r7, #1119]	; 0x45f
 8009ab8:	4611      	mov	r1, r2
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7fd f913 	bl	8006ce6 <unlock_fs>
 8009ac0:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f507 678c 	add.w	r7, r7, #1120	; 0x460
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
	...

08009ad0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b087      	sub	sp, #28
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	4613      	mov	r3, r2
 8009adc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009ade:	2301      	movs	r3, #1
 8009ae0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8009ae6:	4b1f      	ldr	r3, [pc, #124]	; (8009b64 <FATFS_LinkDriverEx+0x94>)
 8009ae8:	7a5b      	ldrb	r3, [r3, #9]
 8009aea:	b2db      	uxtb	r3, r3
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d831      	bhi.n	8009b54 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009af0:	4b1c      	ldr	r3, [pc, #112]	; (8009b64 <FATFS_LinkDriverEx+0x94>)
 8009af2:	7a5b      	ldrb	r3, [r3, #9]
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	461a      	mov	r2, r3
 8009af8:	4b1a      	ldr	r3, [pc, #104]	; (8009b64 <FATFS_LinkDriverEx+0x94>)
 8009afa:	2100      	movs	r1, #0
 8009afc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8009afe:	4b19      	ldr	r3, [pc, #100]	; (8009b64 <FATFS_LinkDriverEx+0x94>)
 8009b00:	7a5b      	ldrb	r3, [r3, #9]
 8009b02:	b2db      	uxtb	r3, r3
 8009b04:	4a17      	ldr	r2, [pc, #92]	; (8009b64 <FATFS_LinkDriverEx+0x94>)
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	4413      	add	r3, r2
 8009b0a:	68fa      	ldr	r2, [r7, #12]
 8009b0c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8009b0e:	4b15      	ldr	r3, [pc, #84]	; (8009b64 <FATFS_LinkDriverEx+0x94>)
 8009b10:	7a5b      	ldrb	r3, [r3, #9]
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	461a      	mov	r2, r3
 8009b16:	4b13      	ldr	r3, [pc, #76]	; (8009b64 <FATFS_LinkDriverEx+0x94>)
 8009b18:	4413      	add	r3, r2
 8009b1a:	79fa      	ldrb	r2, [r7, #7]
 8009b1c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009b1e:	4b11      	ldr	r3, [pc, #68]	; (8009b64 <FATFS_LinkDriverEx+0x94>)
 8009b20:	7a5b      	ldrb	r3, [r3, #9]
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	1c5a      	adds	r2, r3, #1
 8009b26:	b2d1      	uxtb	r1, r2
 8009b28:	4a0e      	ldr	r2, [pc, #56]	; (8009b64 <FATFS_LinkDriverEx+0x94>)
 8009b2a:	7251      	strb	r1, [r2, #9]
 8009b2c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009b2e:	7dbb      	ldrb	r3, [r7, #22]
 8009b30:	3330      	adds	r3, #48	; 0x30
 8009b32:	b2da      	uxtb	r2, r3
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	223a      	movs	r2, #58	; 0x3a
 8009b3e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	3302      	adds	r3, #2
 8009b44:	222f      	movs	r2, #47	; 0x2f
 8009b46:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	3303      	adds	r3, #3
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009b50:	2300      	movs	r3, #0
 8009b52:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8009b54:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	371c      	adds	r7, #28
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr
 8009b62:	bf00      	nop
 8009b64:	20000a30 	.word	0x20000a30

08009b68 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b082      	sub	sp, #8
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009b72:	2200      	movs	r2, #0
 8009b74:	6839      	ldr	r1, [r7, #0]
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f7ff ffaa 	bl	8009ad0 <FATFS_LinkDriverEx>
 8009b7c:	4603      	mov	r3, r0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3708      	adds	r7, #8
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b086      	sub	sp, #24
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	6039      	str	r1, [r7, #0]
 8009b90:	71fb      	strb	r3, [r7, #7]
  int ret;
  
  osSemaphoreDef(SEM);
 8009b92:	2300      	movs	r3, #0
 8009b94:	60fb      	str	r3, [r7, #12]
 8009b96:	2300      	movs	r3, #0
 8009b98:	613b      	str	r3, [r7, #16]
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 8009b9a:	f107 030c 	add.w	r3, r7, #12
 8009b9e:	2101      	movs	r1, #1
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f000 f84e 	bl	8009c42 <osSemaphoreCreate>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	601a      	str	r2, [r3, #0]
  ret = (*sobj != NULL);
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	bf14      	ite	ne
 8009bb4:	2301      	movne	r3, #1
 8009bb6:	2300      	moveq	r3, #0
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	617b      	str	r3, [r7, #20]
  
  return ret;
 8009bbc:	697b      	ldr	r3, [r7, #20]
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3718      	adds	r7, #24
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}

08009bc6 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8009bc6:	b580      	push	{r7, lr}
 8009bc8:	b082      	sub	sp, #8
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
  osSemaphoreDelete (sobj);
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 f8ee 	bl	8009db0 <osSemaphoreDelete>
  return 1;
 8009bd4:	2301      	movs	r3, #1
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3708      	adds	r7, #8
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}

08009bde <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8009bde:	b580      	push	{r7, lr}
 8009be0:	b084      	sub	sp, #16
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8009be6:	2300      	movs	r3, #0
 8009be8:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8009bea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 f85a 	bl	8009ca8 <osSemaphoreWait>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d101      	bne.n	8009bfe <ff_req_grant+0x20>
  {
    ret = 1;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3710      	adds	r7, #16
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b082      	sub	sp, #8
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 f897 	bl	8009d44 <osSemaphoreRelease>
}
 8009c16:	bf00      	nop
 8009c18:	3708      	adds	r7, #8
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}

08009c1e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009c1e:	b480      	push	{r7}
 8009c20:	b083      	sub	sp, #12
 8009c22:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c24:	f3ef 8305 	mrs	r3, IPSR
 8009c28:	607b      	str	r3, [r7, #4]
  return(result);
 8009c2a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	bf14      	ite	ne
 8009c30:	2301      	movne	r3, #1
 8009c32:	2300      	moveq	r3, #0
 8009c34:	b2db      	uxtb	r3, r3
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	370c      	adds	r7, #12
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr

08009c42 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b086      	sub	sp, #24
 8009c46:	af02      	add	r7, sp, #8
 8009c48:	6078      	str	r0, [r7, #4]
 8009c4a:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d00f      	beq.n	8009c74 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d10a      	bne.n	8009c70 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	2203      	movs	r2, #3
 8009c60:	9200      	str	r2, [sp, #0]
 8009c62:	2200      	movs	r2, #0
 8009c64:	2100      	movs	r1, #0
 8009c66:	2001      	movs	r0, #1
 8009c68:	f000 f9d2 	bl	800a010 <xQueueGenericCreateStatic>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	e016      	b.n	8009c9e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8009c70:	2300      	movs	r3, #0
 8009c72:	e014      	b.n	8009c9e <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	2b01      	cmp	r3, #1
 8009c78:	d110      	bne.n	8009c9c <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8009c7a:	2203      	movs	r2, #3
 8009c7c:	2100      	movs	r1, #0
 8009c7e:	2001      	movs	r0, #1
 8009c80:	f000 fa3d 	bl	800a0fe <xQueueGenericCreate>
 8009c84:	60f8      	str	r0, [r7, #12]
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d005      	beq.n	8009c98 <osSemaphoreCreate+0x56>
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	2200      	movs	r2, #0
 8009c90:	2100      	movs	r1, #0
 8009c92:	68f8      	ldr	r0, [r7, #12]
 8009c94:	f000 fa90 	bl	800a1b8 <xQueueGenericSend>
      return sema;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	e000      	b.n	8009c9e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8009c9c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3710      	adds	r7, #16
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
	...

08009ca8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d101      	bne.n	8009cc0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8009cbc:	2380      	movs	r3, #128	; 0x80
 8009cbe:	e03a      	b.n	8009d36 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cca:	d103      	bne.n	8009cd4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8009ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8009cd0:	60fb      	str	r3, [r7, #12]
 8009cd2:	e009      	b.n	8009ce8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d006      	beq.n	8009ce8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d101      	bne.n	8009ce8 <osSemaphoreWait+0x40>
      ticks = 1;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009ce8:	f7ff ff99 	bl	8009c1e <inHandlerMode>
 8009cec:	4603      	mov	r3, r0
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d017      	beq.n	8009d22 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009cf2:	f107 0308 	add.w	r3, r7, #8
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	2100      	movs	r1, #0
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 fcf4 	bl	800a6e8 <xQueueReceiveFromISR>
 8009d00:	4603      	mov	r3, r0
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d001      	beq.n	8009d0a <osSemaphoreWait+0x62>
      return osErrorOS;
 8009d06:	23ff      	movs	r3, #255	; 0xff
 8009d08:	e015      	b.n	8009d36 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d011      	beq.n	8009d34 <osSemaphoreWait+0x8c>
 8009d10:	4b0b      	ldr	r3, [pc, #44]	; (8009d40 <osSemaphoreWait+0x98>)
 8009d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d16:	601a      	str	r2, [r3, #0]
 8009d18:	f3bf 8f4f 	dsb	sy
 8009d1c:	f3bf 8f6f 	isb	sy
 8009d20:	e008      	b.n	8009d34 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8009d22:	68f9      	ldr	r1, [r7, #12]
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 fbd3 	bl	800a4d0 <xQueueSemaphoreTake>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d001      	beq.n	8009d34 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8009d30:	23ff      	movs	r3, #255	; 0xff
 8009d32:	e000      	b.n	8009d36 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8009d34:	2300      	movs	r3, #0
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	e000ed04 	.word	0xe000ed04

08009d44 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009d50:	2300      	movs	r3, #0
 8009d52:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8009d54:	f7ff ff63 	bl	8009c1e <inHandlerMode>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d016      	beq.n	8009d8c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009d5e:	f107 0308 	add.w	r3, r7, #8
 8009d62:	4619      	mov	r1, r3
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f000 fb25 	bl	800a3b4 <xQueueGiveFromISR>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d001      	beq.n	8009d74 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8009d70:	23ff      	movs	r3, #255	; 0xff
 8009d72:	e017      	b.n	8009da4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d013      	beq.n	8009da2 <osSemaphoreRelease+0x5e>
 8009d7a:	4b0c      	ldr	r3, [pc, #48]	; (8009dac <osSemaphoreRelease+0x68>)
 8009d7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d80:	601a      	str	r2, [r3, #0]
 8009d82:	f3bf 8f4f 	dsb	sy
 8009d86:	f3bf 8f6f 	isb	sy
 8009d8a:	e00a      	b.n	8009da2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	2200      	movs	r2, #0
 8009d90:	2100      	movs	r1, #0
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 fa10 	bl	800a1b8 <xQueueGenericSend>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d001      	beq.n	8009da2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8009d9e:	23ff      	movs	r3, #255	; 0xff
 8009da0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8009da2:	68fb      	ldr	r3, [r7, #12]
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3710      	adds	r7, #16
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}
 8009dac:	e000ed04 	.word	0xe000ed04

08009db0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b082      	sub	sp, #8
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8009db8:	f7ff ff31 	bl	8009c1e <inHandlerMode>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d001      	beq.n	8009dc6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8009dc2:	2382      	movs	r3, #130	; 0x82
 8009dc4:	e003      	b.n	8009dce <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 fd0e 	bl	800a7e8 <vQueueDelete>

  return osOK; 
 8009dcc:	2300      	movs	r3, #0
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3708      	adds	r7, #8
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}

08009dd6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009dd6:	b480      	push	{r7}
 8009dd8:	b083      	sub	sp, #12
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f103 0208 	add.w	r2, r3, #8
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f04f 32ff 	mov.w	r2, #4294967295
 8009dee:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f103 0208 	add.w	r2, r3, #8
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f103 0208 	add.w	r2, r3, #8
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2200      	movs	r2, #0
 8009e08:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009e0a:	bf00      	nop
 8009e0c:	370c      	adds	r7, #12
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr

08009e16 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009e16:	b480      	push	{r7}
 8009e18:	b083      	sub	sp, #12
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2200      	movs	r2, #0
 8009e22:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009e24:	bf00      	nop
 8009e26:	370c      	adds	r7, #12
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr

08009e30 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e30:	b480      	push	{r7}
 8009e32:	b085      	sub	sp, #20
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	68fa      	ldr	r2, [r7, #12]
 8009e44:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	689a      	ldr	r2, [r3, #8]
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	683a      	ldr	r2, [r7, #0]
 8009e54:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	683a      	ldr	r2, [r7, #0]
 8009e5a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	1c5a      	adds	r2, r3, #1
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	601a      	str	r2, [r3, #0]
}
 8009e6c:	bf00      	nop
 8009e6e:	3714      	adds	r7, #20
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr

08009e78 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b085      	sub	sp, #20
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e8e:	d103      	bne.n	8009e98 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	691b      	ldr	r3, [r3, #16]
 8009e94:	60fb      	str	r3, [r7, #12]
 8009e96:	e00c      	b.n	8009eb2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	3308      	adds	r3, #8
 8009e9c:	60fb      	str	r3, [r7, #12]
 8009e9e:	e002      	b.n	8009ea6 <vListInsert+0x2e>
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	60fb      	str	r3, [r7, #12]
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	68ba      	ldr	r2, [r7, #8]
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	d2f6      	bcs.n	8009ea0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	685a      	ldr	r2, [r3, #4]
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	683a      	ldr	r2, [r7, #0]
 8009ec0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	68fa      	ldr	r2, [r7, #12]
 8009ec6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	683a      	ldr	r2, [r7, #0]
 8009ecc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	1c5a      	adds	r2, r3, #1
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	601a      	str	r2, [r3, #0]
}
 8009ede:	bf00      	nop
 8009ee0:	3714      	adds	r7, #20
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr

08009eea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009eea:	b480      	push	{r7}
 8009eec:	b085      	sub	sp, #20
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	691b      	ldr	r3, [r3, #16]
 8009ef6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	6892      	ldr	r2, [r2, #8]
 8009f00:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	689b      	ldr	r3, [r3, #8]
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	6852      	ldr	r2, [r2, #4]
 8009f0a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d103      	bne.n	8009f1e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	689a      	ldr	r2, [r3, #8]
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2200      	movs	r2, #0
 8009f22:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	1e5a      	subs	r2, r3, #1
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3714      	adds	r7, #20
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr
	...

08009f40 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d10a      	bne.n	8009f6a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f58:	f383 8811 	msr	BASEPRI, r3
 8009f5c:	f3bf 8f6f 	isb	sy
 8009f60:	f3bf 8f4f 	dsb	sy
 8009f64:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009f66:	bf00      	nop
 8009f68:	e7fe      	b.n	8009f68 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009f6a:	f001 ff1b 	bl	800bda4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f76:	68f9      	ldr	r1, [r7, #12]
 8009f78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f7a:	fb01 f303 	mul.w	r3, r1, r3
 8009f7e:	441a      	add	r2, r3
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2200      	movs	r2, #0
 8009f88:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f9a:	3b01      	subs	r3, #1
 8009f9c:	68f9      	ldr	r1, [r7, #12]
 8009f9e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009fa0:	fb01 f303 	mul.w	r3, r1, r3
 8009fa4:	441a      	add	r2, r3
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	22ff      	movs	r2, #255	; 0xff
 8009fae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	22ff      	movs	r2, #255	; 0xff
 8009fb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d114      	bne.n	8009fea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	691b      	ldr	r3, [r3, #16]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d01a      	beq.n	8009ffe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	3310      	adds	r3, #16
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f001 f9af 	bl	800b330 <xTaskRemoveFromEventList>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d012      	beq.n	8009ffe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009fd8:	4b0c      	ldr	r3, [pc, #48]	; (800a00c <xQueueGenericReset+0xcc>)
 8009fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fde:	601a      	str	r2, [r3, #0]
 8009fe0:	f3bf 8f4f 	dsb	sy
 8009fe4:	f3bf 8f6f 	isb	sy
 8009fe8:	e009      	b.n	8009ffe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	3310      	adds	r3, #16
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7ff fef1 	bl	8009dd6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	3324      	adds	r3, #36	; 0x24
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f7ff feec 	bl	8009dd6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009ffe:	f001 ff01 	bl	800be04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a002:	2301      	movs	r3, #1
}
 800a004:	4618      	mov	r0, r3
 800a006:	3710      	adds	r7, #16
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}
 800a00c:	e000ed04 	.word	0xe000ed04

0800a010 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a010:	b580      	push	{r7, lr}
 800a012:	b08e      	sub	sp, #56	; 0x38
 800a014:	af02      	add	r7, sp, #8
 800a016:	60f8      	str	r0, [r7, #12]
 800a018:	60b9      	str	r1, [r7, #8]
 800a01a:	607a      	str	r2, [r7, #4]
 800a01c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d10a      	bne.n	800a03a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a028:	f383 8811 	msr	BASEPRI, r3
 800a02c:	f3bf 8f6f 	isb	sy
 800a030:	f3bf 8f4f 	dsb	sy
 800a034:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a036:	bf00      	nop
 800a038:	e7fe      	b.n	800a038 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d10a      	bne.n	800a056 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a044:	f383 8811 	msr	BASEPRI, r3
 800a048:	f3bf 8f6f 	isb	sy
 800a04c:	f3bf 8f4f 	dsb	sy
 800a050:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a052:	bf00      	nop
 800a054:	e7fe      	b.n	800a054 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d002      	beq.n	800a062 <xQueueGenericCreateStatic+0x52>
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d001      	beq.n	800a066 <xQueueGenericCreateStatic+0x56>
 800a062:	2301      	movs	r3, #1
 800a064:	e000      	b.n	800a068 <xQueueGenericCreateStatic+0x58>
 800a066:	2300      	movs	r3, #0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d10a      	bne.n	800a082 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a070:	f383 8811 	msr	BASEPRI, r3
 800a074:	f3bf 8f6f 	isb	sy
 800a078:	f3bf 8f4f 	dsb	sy
 800a07c:	623b      	str	r3, [r7, #32]
}
 800a07e:	bf00      	nop
 800a080:	e7fe      	b.n	800a080 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d102      	bne.n	800a08e <xQueueGenericCreateStatic+0x7e>
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d101      	bne.n	800a092 <xQueueGenericCreateStatic+0x82>
 800a08e:	2301      	movs	r3, #1
 800a090:	e000      	b.n	800a094 <xQueueGenericCreateStatic+0x84>
 800a092:	2300      	movs	r3, #0
 800a094:	2b00      	cmp	r3, #0
 800a096:	d10a      	bne.n	800a0ae <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a09c:	f383 8811 	msr	BASEPRI, r3
 800a0a0:	f3bf 8f6f 	isb	sy
 800a0a4:	f3bf 8f4f 	dsb	sy
 800a0a8:	61fb      	str	r3, [r7, #28]
}
 800a0aa:	bf00      	nop
 800a0ac:	e7fe      	b.n	800a0ac <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a0ae:	2348      	movs	r3, #72	; 0x48
 800a0b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	2b48      	cmp	r3, #72	; 0x48
 800a0b6:	d00a      	beq.n	800a0ce <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0bc:	f383 8811 	msr	BASEPRI, r3
 800a0c0:	f3bf 8f6f 	isb	sy
 800a0c4:	f3bf 8f4f 	dsb	sy
 800a0c8:	61bb      	str	r3, [r7, #24]
}
 800a0ca:	bf00      	nop
 800a0cc:	e7fe      	b.n	800a0cc <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d00d      	beq.n	800a0f4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a0e0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e6:	9300      	str	r3, [sp, #0]
 800a0e8:	4613      	mov	r3, r2
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	68b9      	ldr	r1, [r7, #8]
 800a0ee:	68f8      	ldr	r0, [r7, #12]
 800a0f0:	f000 f843 	bl	800a17a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3730      	adds	r7, #48	; 0x30
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}

0800a0fe <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a0fe:	b580      	push	{r7, lr}
 800a100:	b08a      	sub	sp, #40	; 0x28
 800a102:	af02      	add	r7, sp, #8
 800a104:	60f8      	str	r0, [r7, #12]
 800a106:	60b9      	str	r1, [r7, #8]
 800a108:	4613      	mov	r3, r2
 800a10a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d10a      	bne.n	800a128 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a116:	f383 8811 	msr	BASEPRI, r3
 800a11a:	f3bf 8f6f 	isb	sy
 800a11e:	f3bf 8f4f 	dsb	sy
 800a122:	613b      	str	r3, [r7, #16]
}
 800a124:	bf00      	nop
 800a126:	e7fe      	b.n	800a126 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d102      	bne.n	800a134 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a12e:	2300      	movs	r3, #0
 800a130:	61fb      	str	r3, [r7, #28]
 800a132:	e004      	b.n	800a13e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	68ba      	ldr	r2, [r7, #8]
 800a138:	fb02 f303 	mul.w	r3, r2, r3
 800a13c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800a13e:	69fb      	ldr	r3, [r7, #28]
 800a140:	3348      	adds	r3, #72	; 0x48
 800a142:	4618      	mov	r0, r3
 800a144:	f001 ff50 	bl	800bfe8 <pvPortMalloc>
 800a148:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a14a:	69bb      	ldr	r3, [r7, #24]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d00f      	beq.n	800a170 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800a150:	69bb      	ldr	r3, [r7, #24]
 800a152:	3348      	adds	r3, #72	; 0x48
 800a154:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a156:	69bb      	ldr	r3, [r7, #24]
 800a158:	2200      	movs	r2, #0
 800a15a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a15e:	79fa      	ldrb	r2, [r7, #7]
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	9300      	str	r3, [sp, #0]
 800a164:	4613      	mov	r3, r2
 800a166:	697a      	ldr	r2, [r7, #20]
 800a168:	68b9      	ldr	r1, [r7, #8]
 800a16a:	68f8      	ldr	r0, [r7, #12]
 800a16c:	f000 f805 	bl	800a17a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a170:	69bb      	ldr	r3, [r7, #24]
	}
 800a172:	4618      	mov	r0, r3
 800a174:	3720      	adds	r7, #32
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}

0800a17a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b084      	sub	sp, #16
 800a17e:	af00      	add	r7, sp, #0
 800a180:	60f8      	str	r0, [r7, #12]
 800a182:	60b9      	str	r1, [r7, #8]
 800a184:	607a      	str	r2, [r7, #4]
 800a186:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d103      	bne.n	800a196 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a18e:	69bb      	ldr	r3, [r7, #24]
 800a190:	69ba      	ldr	r2, [r7, #24]
 800a192:	601a      	str	r2, [r3, #0]
 800a194:	e002      	b.n	800a19c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a196:	69bb      	ldr	r3, [r7, #24]
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a19c:	69bb      	ldr	r3, [r7, #24]
 800a19e:	68fa      	ldr	r2, [r7, #12]
 800a1a0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a1a2:	69bb      	ldr	r3, [r7, #24]
 800a1a4:	68ba      	ldr	r2, [r7, #8]
 800a1a6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a1a8:	2101      	movs	r1, #1
 800a1aa:	69b8      	ldr	r0, [r7, #24]
 800a1ac:	f7ff fec8 	bl	8009f40 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a1b0:	bf00      	nop
 800a1b2:	3710      	adds	r7, #16
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b08e      	sub	sp, #56	; 0x38
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	60b9      	str	r1, [r7, #8]
 800a1c2:	607a      	str	r2, [r7, #4]
 800a1c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d10a      	bne.n	800a1ea <xQueueGenericSend+0x32>
	__asm volatile
 800a1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d8:	f383 8811 	msr	BASEPRI, r3
 800a1dc:	f3bf 8f6f 	isb	sy
 800a1e0:	f3bf 8f4f 	dsb	sy
 800a1e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a1e6:	bf00      	nop
 800a1e8:	e7fe      	b.n	800a1e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d103      	bne.n	800a1f8 <xQueueGenericSend+0x40>
 800a1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d101      	bne.n	800a1fc <xQueueGenericSend+0x44>
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	e000      	b.n	800a1fe <xQueueGenericSend+0x46>
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d10a      	bne.n	800a218 <xQueueGenericSend+0x60>
	__asm volatile
 800a202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a206:	f383 8811 	msr	BASEPRI, r3
 800a20a:	f3bf 8f6f 	isb	sy
 800a20e:	f3bf 8f4f 	dsb	sy
 800a212:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a214:	bf00      	nop
 800a216:	e7fe      	b.n	800a216 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	2b02      	cmp	r3, #2
 800a21c:	d103      	bne.n	800a226 <xQueueGenericSend+0x6e>
 800a21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a222:	2b01      	cmp	r3, #1
 800a224:	d101      	bne.n	800a22a <xQueueGenericSend+0x72>
 800a226:	2301      	movs	r3, #1
 800a228:	e000      	b.n	800a22c <xQueueGenericSend+0x74>
 800a22a:	2300      	movs	r3, #0
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d10a      	bne.n	800a246 <xQueueGenericSend+0x8e>
	__asm volatile
 800a230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a234:	f383 8811 	msr	BASEPRI, r3
 800a238:	f3bf 8f6f 	isb	sy
 800a23c:	f3bf 8f4f 	dsb	sy
 800a240:	623b      	str	r3, [r7, #32]
}
 800a242:	bf00      	nop
 800a244:	e7fe      	b.n	800a244 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a246:	f001 fa39 	bl	800b6bc <xTaskGetSchedulerState>
 800a24a:	4603      	mov	r3, r0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d102      	bne.n	800a256 <xQueueGenericSend+0x9e>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d101      	bne.n	800a25a <xQueueGenericSend+0xa2>
 800a256:	2301      	movs	r3, #1
 800a258:	e000      	b.n	800a25c <xQueueGenericSend+0xa4>
 800a25a:	2300      	movs	r3, #0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d10a      	bne.n	800a276 <xQueueGenericSend+0xbe>
	__asm volatile
 800a260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a264:	f383 8811 	msr	BASEPRI, r3
 800a268:	f3bf 8f6f 	isb	sy
 800a26c:	f3bf 8f4f 	dsb	sy
 800a270:	61fb      	str	r3, [r7, #28]
}
 800a272:	bf00      	nop
 800a274:	e7fe      	b.n	800a274 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a276:	f001 fd95 	bl	800bda4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a27c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a282:	429a      	cmp	r2, r3
 800a284:	d302      	bcc.n	800a28c <xQueueGenericSend+0xd4>
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	2b02      	cmp	r3, #2
 800a28a:	d129      	bne.n	800a2e0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a28c:	683a      	ldr	r2, [r7, #0]
 800a28e:	68b9      	ldr	r1, [r7, #8]
 800a290:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a292:	f000 fae4 	bl	800a85e <prvCopyDataToQueue>
 800a296:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d010      	beq.n	800a2c2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a2:	3324      	adds	r3, #36	; 0x24
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f001 f843 	bl	800b330 <xTaskRemoveFromEventList>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d013      	beq.n	800a2d8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a2b0:	4b3f      	ldr	r3, [pc, #252]	; (800a3b0 <xQueueGenericSend+0x1f8>)
 800a2b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2b6:	601a      	str	r2, [r3, #0]
 800a2b8:	f3bf 8f4f 	dsb	sy
 800a2bc:	f3bf 8f6f 	isb	sy
 800a2c0:	e00a      	b.n	800a2d8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d007      	beq.n	800a2d8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a2c8:	4b39      	ldr	r3, [pc, #228]	; (800a3b0 <xQueueGenericSend+0x1f8>)
 800a2ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2ce:	601a      	str	r2, [r3, #0]
 800a2d0:	f3bf 8f4f 	dsb	sy
 800a2d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a2d8:	f001 fd94 	bl	800be04 <vPortExitCritical>
				return pdPASS;
 800a2dc:	2301      	movs	r3, #1
 800a2de:	e063      	b.n	800a3a8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d103      	bne.n	800a2ee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a2e6:	f001 fd8d 	bl	800be04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	e05c      	b.n	800a3a8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a2ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d106      	bne.n	800a302 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a2f4:	f107 0314 	add.w	r3, r7, #20
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f001 f87b 	bl	800b3f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a2fe:	2301      	movs	r3, #1
 800a300:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a302:	f001 fd7f 	bl	800be04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a306:	f000 fe25 	bl	800af54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a30a:	f001 fd4b 	bl	800bda4 <vPortEnterCritical>
 800a30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a310:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a314:	b25b      	sxtb	r3, r3
 800a316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a31a:	d103      	bne.n	800a324 <xQueueGenericSend+0x16c>
 800a31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31e:	2200      	movs	r2, #0
 800a320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a326:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a32a:	b25b      	sxtb	r3, r3
 800a32c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a330:	d103      	bne.n	800a33a <xQueueGenericSend+0x182>
 800a332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a334:	2200      	movs	r2, #0
 800a336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a33a:	f001 fd63 	bl	800be04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a33e:	1d3a      	adds	r2, r7, #4
 800a340:	f107 0314 	add.w	r3, r7, #20
 800a344:	4611      	mov	r1, r2
 800a346:	4618      	mov	r0, r3
 800a348:	f001 f86a 	bl	800b420 <xTaskCheckForTimeOut>
 800a34c:	4603      	mov	r3, r0
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d124      	bne.n	800a39c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a352:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a354:	f000 fb7b 	bl	800aa4e <prvIsQueueFull>
 800a358:	4603      	mov	r3, r0
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d018      	beq.n	800a390 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a360:	3310      	adds	r3, #16
 800a362:	687a      	ldr	r2, [r7, #4]
 800a364:	4611      	mov	r1, r2
 800a366:	4618      	mov	r0, r3
 800a368:	f000 ffbe 	bl	800b2e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a36c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a36e:	f000 fb06 	bl	800a97e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a372:	f000 fdfd 	bl	800af70 <xTaskResumeAll>
 800a376:	4603      	mov	r3, r0
 800a378:	2b00      	cmp	r3, #0
 800a37a:	f47f af7c 	bne.w	800a276 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a37e:	4b0c      	ldr	r3, [pc, #48]	; (800a3b0 <xQueueGenericSend+0x1f8>)
 800a380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a384:	601a      	str	r2, [r3, #0]
 800a386:	f3bf 8f4f 	dsb	sy
 800a38a:	f3bf 8f6f 	isb	sy
 800a38e:	e772      	b.n	800a276 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a390:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a392:	f000 faf4 	bl	800a97e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a396:	f000 fdeb 	bl	800af70 <xTaskResumeAll>
 800a39a:	e76c      	b.n	800a276 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a39c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a39e:	f000 faee 	bl	800a97e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a3a2:	f000 fde5 	bl	800af70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a3a6:	2300      	movs	r3, #0
		}
	}
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3738      	adds	r7, #56	; 0x38
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}
 800a3b0:	e000ed04 	.word	0xe000ed04

0800a3b4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b08e      	sub	sp, #56	; 0x38
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d10a      	bne.n	800a3de <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3cc:	f383 8811 	msr	BASEPRI, r3
 800a3d0:	f3bf 8f6f 	isb	sy
 800a3d4:	f3bf 8f4f 	dsb	sy
 800a3d8:	623b      	str	r3, [r7, #32]
}
 800a3da:	bf00      	nop
 800a3dc:	e7fe      	b.n	800a3dc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d00a      	beq.n	800a3fc <xQueueGiveFromISR+0x48>
	__asm volatile
 800a3e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ea:	f383 8811 	msr	BASEPRI, r3
 800a3ee:	f3bf 8f6f 	isb	sy
 800a3f2:	f3bf 8f4f 	dsb	sy
 800a3f6:	61fb      	str	r3, [r7, #28]
}
 800a3f8:	bf00      	nop
 800a3fa:	e7fe      	b.n	800a3fa <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800a3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d103      	bne.n	800a40c <xQueueGiveFromISR+0x58>
 800a404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d101      	bne.n	800a410 <xQueueGiveFromISR+0x5c>
 800a40c:	2301      	movs	r3, #1
 800a40e:	e000      	b.n	800a412 <xQueueGiveFromISR+0x5e>
 800a410:	2300      	movs	r3, #0
 800a412:	2b00      	cmp	r3, #0
 800a414:	d10a      	bne.n	800a42c <xQueueGiveFromISR+0x78>
	__asm volatile
 800a416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41a:	f383 8811 	msr	BASEPRI, r3
 800a41e:	f3bf 8f6f 	isb	sy
 800a422:	f3bf 8f4f 	dsb	sy
 800a426:	61bb      	str	r3, [r7, #24]
}
 800a428:	bf00      	nop
 800a42a:	e7fe      	b.n	800a42a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a42c:	f001 fd9c 	bl	800bf68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a430:	f3ef 8211 	mrs	r2, BASEPRI
 800a434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a438:	f383 8811 	msr	BASEPRI, r3
 800a43c:	f3bf 8f6f 	isb	sy
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	617a      	str	r2, [r7, #20]
 800a446:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a448:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a44a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a450:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a458:	429a      	cmp	r2, r3
 800a45a:	d22b      	bcs.n	800a4b4 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a45e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a468:	1c5a      	adds	r2, r3, #1
 800a46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a46c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a46e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a472:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a476:	d112      	bne.n	800a49e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d016      	beq.n	800a4ae <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a482:	3324      	adds	r3, #36	; 0x24
 800a484:	4618      	mov	r0, r3
 800a486:	f000 ff53 	bl	800b330 <xTaskRemoveFromEventList>
 800a48a:	4603      	mov	r3, r0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d00e      	beq.n	800a4ae <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d00b      	beq.n	800a4ae <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	2201      	movs	r2, #1
 800a49a:	601a      	str	r2, [r3, #0]
 800a49c:	e007      	b.n	800a4ae <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a49e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	b25a      	sxtb	r2, r3
 800a4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	637b      	str	r3, [r7, #52]	; 0x34
 800a4b2:	e001      	b.n	800a4b8 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	637b      	str	r3, [r7, #52]	; 0x34
 800a4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ba:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a4c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a4c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3738      	adds	r7, #56	; 0x38
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}
	...

0800a4d0 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b08e      	sub	sp, #56	; 0x38
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d10a      	bne.n	800a502 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f0:	f383 8811 	msr	BASEPRI, r3
 800a4f4:	f3bf 8f6f 	isb	sy
 800a4f8:	f3bf 8f4f 	dsb	sy
 800a4fc:	623b      	str	r3, [r7, #32]
}
 800a4fe:	bf00      	nop
 800a500:	e7fe      	b.n	800a500 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a506:	2b00      	cmp	r3, #0
 800a508:	d00a      	beq.n	800a520 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a50e:	f383 8811 	msr	BASEPRI, r3
 800a512:	f3bf 8f6f 	isb	sy
 800a516:	f3bf 8f4f 	dsb	sy
 800a51a:	61fb      	str	r3, [r7, #28]
}
 800a51c:	bf00      	nop
 800a51e:	e7fe      	b.n	800a51e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a520:	f001 f8cc 	bl	800b6bc <xTaskGetSchedulerState>
 800a524:	4603      	mov	r3, r0
 800a526:	2b00      	cmp	r3, #0
 800a528:	d102      	bne.n	800a530 <xQueueSemaphoreTake+0x60>
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d101      	bne.n	800a534 <xQueueSemaphoreTake+0x64>
 800a530:	2301      	movs	r3, #1
 800a532:	e000      	b.n	800a536 <xQueueSemaphoreTake+0x66>
 800a534:	2300      	movs	r3, #0
 800a536:	2b00      	cmp	r3, #0
 800a538:	d10a      	bne.n	800a550 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a53e:	f383 8811 	msr	BASEPRI, r3
 800a542:	f3bf 8f6f 	isb	sy
 800a546:	f3bf 8f4f 	dsb	sy
 800a54a:	61bb      	str	r3, [r7, #24]
}
 800a54c:	bf00      	nop
 800a54e:	e7fe      	b.n	800a54e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a550:	f001 fc28 	bl	800bda4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a558:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d024      	beq.n	800a5aa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a562:	1e5a      	subs	r2, r3, #1
 800a564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a566:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d104      	bne.n	800a57a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800a570:	f001 fa6e 	bl	800ba50 <pvTaskIncrementMutexHeldCount>
 800a574:	4602      	mov	r2, r0
 800a576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a578:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a57c:	691b      	ldr	r3, [r3, #16]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d00f      	beq.n	800a5a2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a584:	3310      	adds	r3, #16
 800a586:	4618      	mov	r0, r3
 800a588:	f000 fed2 	bl	800b330 <xTaskRemoveFromEventList>
 800a58c:	4603      	mov	r3, r0
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d007      	beq.n	800a5a2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a592:	4b54      	ldr	r3, [pc, #336]	; (800a6e4 <xQueueSemaphoreTake+0x214>)
 800a594:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a598:	601a      	str	r2, [r3, #0]
 800a59a:	f3bf 8f4f 	dsb	sy
 800a59e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a5a2:	f001 fc2f 	bl	800be04 <vPortExitCritical>
				return pdPASS;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	e097      	b.n	800a6da <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d111      	bne.n	800a5d4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d00a      	beq.n	800a5cc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a5b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ba:	f383 8811 	msr	BASEPRI, r3
 800a5be:	f3bf 8f6f 	isb	sy
 800a5c2:	f3bf 8f4f 	dsb	sy
 800a5c6:	617b      	str	r3, [r7, #20]
}
 800a5c8:	bf00      	nop
 800a5ca:	e7fe      	b.n	800a5ca <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a5cc:	f001 fc1a 	bl	800be04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	e082      	b.n	800a6da <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a5d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d106      	bne.n	800a5e8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a5da:	f107 030c 	add.w	r3, r7, #12
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f000 ff08 	bl	800b3f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a5e8:	f001 fc0c 	bl	800be04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a5ec:	f000 fcb2 	bl	800af54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a5f0:	f001 fbd8 	bl	800bda4 <vPortEnterCritical>
 800a5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5fa:	b25b      	sxtb	r3, r3
 800a5fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a600:	d103      	bne.n	800a60a <xQueueSemaphoreTake+0x13a>
 800a602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a604:	2200      	movs	r2, #0
 800a606:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a60c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a610:	b25b      	sxtb	r3, r3
 800a612:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a616:	d103      	bne.n	800a620 <xQueueSemaphoreTake+0x150>
 800a618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a61a:	2200      	movs	r2, #0
 800a61c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a620:	f001 fbf0 	bl	800be04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a624:	463a      	mov	r2, r7
 800a626:	f107 030c 	add.w	r3, r7, #12
 800a62a:	4611      	mov	r1, r2
 800a62c:	4618      	mov	r0, r3
 800a62e:	f000 fef7 	bl	800b420 <xTaskCheckForTimeOut>
 800a632:	4603      	mov	r3, r0
 800a634:	2b00      	cmp	r3, #0
 800a636:	d132      	bne.n	800a69e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a638:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a63a:	f000 f9f2 	bl	800aa22 <prvIsQueueEmpty>
 800a63e:	4603      	mov	r3, r0
 800a640:	2b00      	cmp	r3, #0
 800a642:	d026      	beq.n	800a692 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d109      	bne.n	800a660 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a64c:	f001 fbaa 	bl	800bda4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800a650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	4618      	mov	r0, r3
 800a656:	f001 f84f 	bl	800b6f8 <xTaskPriorityInherit>
 800a65a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a65c:	f001 fbd2 	bl	800be04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a662:	3324      	adds	r3, #36	; 0x24
 800a664:	683a      	ldr	r2, [r7, #0]
 800a666:	4611      	mov	r1, r2
 800a668:	4618      	mov	r0, r3
 800a66a:	f000 fe3d 	bl	800b2e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a66e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a670:	f000 f985 	bl	800a97e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a674:	f000 fc7c 	bl	800af70 <xTaskResumeAll>
 800a678:	4603      	mov	r3, r0
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	f47f af68 	bne.w	800a550 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a680:	4b18      	ldr	r3, [pc, #96]	; (800a6e4 <xQueueSemaphoreTake+0x214>)
 800a682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a686:	601a      	str	r2, [r3, #0]
 800a688:	f3bf 8f4f 	dsb	sy
 800a68c:	f3bf 8f6f 	isb	sy
 800a690:	e75e      	b.n	800a550 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a692:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a694:	f000 f973 	bl	800a97e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a698:	f000 fc6a 	bl	800af70 <xTaskResumeAll>
 800a69c:	e758      	b.n	800a550 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a69e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6a0:	f000 f96d 	bl	800a97e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a6a4:	f000 fc64 	bl	800af70 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6aa:	f000 f9ba 	bl	800aa22 <prvIsQueueEmpty>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	f43f af4d 	beq.w	800a550 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d00d      	beq.n	800a6d8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a6bc:	f001 fb72 	bl	800bda4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a6c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a6c2:	f000 f8b4 	bl	800a82e <prvGetDisinheritPriorityAfterTimeout>
 800a6c6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800a6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ca:	685b      	ldr	r3, [r3, #4]
 800a6cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f001 f91e 	bl	800b910 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a6d4:	f001 fb96 	bl	800be04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a6d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3738      	adds	r7, #56	; 0x38
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
 800a6e2:	bf00      	nop
 800a6e4:	e000ed04 	.word	0xe000ed04

0800a6e8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b08e      	sub	sp, #56	; 0x38
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	60f8      	str	r0, [r7, #12]
 800a6f0:	60b9      	str	r1, [r7, #8]
 800a6f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d10a      	bne.n	800a714 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a702:	f383 8811 	msr	BASEPRI, r3
 800a706:	f3bf 8f6f 	isb	sy
 800a70a:	f3bf 8f4f 	dsb	sy
 800a70e:	623b      	str	r3, [r7, #32]
}
 800a710:	bf00      	nop
 800a712:	e7fe      	b.n	800a712 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d103      	bne.n	800a722 <xQueueReceiveFromISR+0x3a>
 800a71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a71c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d101      	bne.n	800a726 <xQueueReceiveFromISR+0x3e>
 800a722:	2301      	movs	r3, #1
 800a724:	e000      	b.n	800a728 <xQueueReceiveFromISR+0x40>
 800a726:	2300      	movs	r3, #0
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d10a      	bne.n	800a742 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a730:	f383 8811 	msr	BASEPRI, r3
 800a734:	f3bf 8f6f 	isb	sy
 800a738:	f3bf 8f4f 	dsb	sy
 800a73c:	61fb      	str	r3, [r7, #28]
}
 800a73e:	bf00      	nop
 800a740:	e7fe      	b.n	800a740 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a742:	f001 fc11 	bl	800bf68 <vPortValidateInterruptPriority>
	__asm volatile
 800a746:	f3ef 8211 	mrs	r2, BASEPRI
 800a74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74e:	f383 8811 	msr	BASEPRI, r3
 800a752:	f3bf 8f6f 	isb	sy
 800a756:	f3bf 8f4f 	dsb	sy
 800a75a:	61ba      	str	r2, [r7, #24]
 800a75c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a75e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a760:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a766:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d02f      	beq.n	800a7ce <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a770:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a774:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a778:	68b9      	ldr	r1, [r7, #8]
 800a77a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a77c:	f000 f8d9 	bl	800a932 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a782:	1e5a      	subs	r2, r3, #1
 800a784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a786:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a788:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a78c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a790:	d112      	bne.n	800a7b8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a794:	691b      	ldr	r3, [r3, #16]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d016      	beq.n	800a7c8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a79c:	3310      	adds	r3, #16
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f000 fdc6 	bl	800b330 <xTaskRemoveFromEventList>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d00e      	beq.n	800a7c8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d00b      	beq.n	800a7c8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	601a      	str	r2, [r3, #0]
 800a7b6:	e007      	b.n	800a7c8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a7b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7bc:	3301      	adds	r3, #1
 800a7be:	b2db      	uxtb	r3, r3
 800a7c0:	b25a      	sxtb	r2, r3
 800a7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	637b      	str	r3, [r7, #52]	; 0x34
 800a7cc:	e001      	b.n	800a7d2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	637b      	str	r3, [r7, #52]	; 0x34
 800a7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7d4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	f383 8811 	msr	BASEPRI, r3
}
 800a7dc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a7de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3738      	adds	r7, #56	; 0x38
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d10a      	bne.n	800a810 <vQueueDelete+0x28>
	__asm volatile
 800a7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7fe:	f383 8811 	msr	BASEPRI, r3
 800a802:	f3bf 8f6f 	isb	sy
 800a806:	f3bf 8f4f 	dsb	sy
 800a80a:	60bb      	str	r3, [r7, #8]
}
 800a80c:	bf00      	nop
 800a80e:	e7fe      	b.n	800a80e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a810:	68f8      	ldr	r0, [r7, #12]
 800a812:	f000 f935 	bl	800aa80 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d102      	bne.n	800a826 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a820:	68f8      	ldr	r0, [r7, #12]
 800a822:	f001 fca5 	bl	800c170 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a826:	bf00      	nop
 800a828:	3710      	adds	r7, #16
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}

0800a82e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a82e:	b480      	push	{r7}
 800a830:	b085      	sub	sp, #20
 800a832:	af00      	add	r7, sp, #0
 800a834:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d006      	beq.n	800a84c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f1c3 0307 	rsb	r3, r3, #7
 800a848:	60fb      	str	r3, [r7, #12]
 800a84a:	e001      	b.n	800a850 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a84c:	2300      	movs	r3, #0
 800a84e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a850:	68fb      	ldr	r3, [r7, #12]
	}
 800a852:	4618      	mov	r0, r3
 800a854:	3714      	adds	r7, #20
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr

0800a85e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a85e:	b580      	push	{r7, lr}
 800a860:	b086      	sub	sp, #24
 800a862:	af00      	add	r7, sp, #0
 800a864:	60f8      	str	r0, [r7, #12]
 800a866:	60b9      	str	r1, [r7, #8]
 800a868:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a86a:	2300      	movs	r3, #0
 800a86c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a872:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d10d      	bne.n	800a898 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d14d      	bne.n	800a920 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	4618      	mov	r0, r3
 800a88a:	f000 ffbb 	bl	800b804 <xTaskPriorityDisinherit>
 800a88e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2200      	movs	r2, #0
 800a894:	605a      	str	r2, [r3, #4]
 800a896:	e043      	b.n	800a920 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d119      	bne.n	800a8d2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	6898      	ldr	r0, [r3, #8]
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	68b9      	ldr	r1, [r7, #8]
 800a8aa:	f001 fe21 	bl	800c4f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	689a      	ldr	r2, [r3, #8]
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8b6:	441a      	add	r2, r3
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	689a      	ldr	r2, [r3, #8]
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d32b      	bcc.n	800a920 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681a      	ldr	r2, [r3, #0]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	609a      	str	r2, [r3, #8]
 800a8d0:	e026      	b.n	800a920 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	68d8      	ldr	r0, [r3, #12]
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8da:	461a      	mov	r2, r3
 800a8dc:	68b9      	ldr	r1, [r7, #8]
 800a8de:	f001 fe07 	bl	800c4f0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	68da      	ldr	r2, [r3, #12]
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ea:	425b      	negs	r3, r3
 800a8ec:	441a      	add	r2, r3
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	68da      	ldr	r2, [r3, #12]
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	d207      	bcs.n	800a90e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	685a      	ldr	r2, [r3, #4]
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a906:	425b      	negs	r3, r3
 800a908:	441a      	add	r2, r3
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2b02      	cmp	r3, #2
 800a912:	d105      	bne.n	800a920 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d002      	beq.n	800a920 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	3b01      	subs	r3, #1
 800a91e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	1c5a      	adds	r2, r3, #1
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a928:	697b      	ldr	r3, [r7, #20]
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3718      	adds	r7, #24
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}

0800a932 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a932:	b580      	push	{r7, lr}
 800a934:	b082      	sub	sp, #8
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
 800a93a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a940:	2b00      	cmp	r3, #0
 800a942:	d018      	beq.n	800a976 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	68da      	ldr	r2, [r3, #12]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a94c:	441a      	add	r2, r3
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	68da      	ldr	r2, [r3, #12]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d303      	bcc.n	800a966 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681a      	ldr	r2, [r3, #0]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	68d9      	ldr	r1, [r3, #12]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a96e:	461a      	mov	r2, r3
 800a970:	6838      	ldr	r0, [r7, #0]
 800a972:	f001 fdbd 	bl	800c4f0 <memcpy>
	}
}
 800a976:	bf00      	nop
 800a978:	3708      	adds	r7, #8
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}

0800a97e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a97e:	b580      	push	{r7, lr}
 800a980:	b084      	sub	sp, #16
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a986:	f001 fa0d 	bl	800bda4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a990:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a992:	e011      	b.n	800a9b8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d012      	beq.n	800a9c2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	3324      	adds	r3, #36	; 0x24
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f000 fcc5 	bl	800b330 <xTaskRemoveFromEventList>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d001      	beq.n	800a9b0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a9ac:	f000 fd9a 	bl	800b4e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a9b0:	7bfb      	ldrb	r3, [r7, #15]
 800a9b2:	3b01      	subs	r3, #1
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a9b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	dce9      	bgt.n	800a994 <prvUnlockQueue+0x16>
 800a9c0:	e000      	b.n	800a9c4 <prvUnlockQueue+0x46>
					break;
 800a9c2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	22ff      	movs	r2, #255	; 0xff
 800a9c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a9cc:	f001 fa1a 	bl	800be04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a9d0:	f001 f9e8 	bl	800bda4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9da:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a9dc:	e011      	b.n	800aa02 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	691b      	ldr	r3, [r3, #16]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d012      	beq.n	800aa0c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	3310      	adds	r3, #16
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f000 fca0 	bl	800b330 <xTaskRemoveFromEventList>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d001      	beq.n	800a9fa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a9f6:	f000 fd75 	bl	800b4e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a9fa:	7bbb      	ldrb	r3, [r7, #14]
 800a9fc:	3b01      	subs	r3, #1
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	dce9      	bgt.n	800a9de <prvUnlockQueue+0x60>
 800aa0a:	e000      	b.n	800aa0e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aa0c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	22ff      	movs	r2, #255	; 0xff
 800aa12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800aa16:	f001 f9f5 	bl	800be04 <vPortExitCritical>
}
 800aa1a:	bf00      	nop
 800aa1c:	3710      	adds	r7, #16
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}

0800aa22 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aa22:	b580      	push	{r7, lr}
 800aa24:	b084      	sub	sp, #16
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa2a:	f001 f9bb 	bl	800bda4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d102      	bne.n	800aa3c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aa36:	2301      	movs	r3, #1
 800aa38:	60fb      	str	r3, [r7, #12]
 800aa3a:	e001      	b.n	800aa40 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa40:	f001 f9e0 	bl	800be04 <vPortExitCritical>

	return xReturn;
 800aa44:	68fb      	ldr	r3, [r7, #12]
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3710      	adds	r7, #16
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}

0800aa4e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aa4e:	b580      	push	{r7, lr}
 800aa50:	b084      	sub	sp, #16
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa56:	f001 f9a5 	bl	800bda4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa62:	429a      	cmp	r2, r3
 800aa64:	d102      	bne.n	800aa6c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aa66:	2301      	movs	r3, #1
 800aa68:	60fb      	str	r3, [r7, #12]
 800aa6a:	e001      	b.n	800aa70 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa70:	f001 f9c8 	bl	800be04 <vPortExitCritical>

	return xReturn;
 800aa74:	68fb      	ldr	r3, [r7, #12]
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3710      	adds	r7, #16
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
	...

0800aa80 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800aa80:	b480      	push	{r7}
 800aa82:	b085      	sub	sp, #20
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa88:	2300      	movs	r3, #0
 800aa8a:	60fb      	str	r3, [r7, #12]
 800aa8c:	e016      	b.n	800aabc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800aa8e:	4a10      	ldr	r2, [pc, #64]	; (800aad0 <vQueueUnregisterQueue+0x50>)
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	00db      	lsls	r3, r3, #3
 800aa94:	4413      	add	r3, r2
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	687a      	ldr	r2, [r7, #4]
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	d10b      	bne.n	800aab6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800aa9e:	4a0c      	ldr	r2, [pc, #48]	; (800aad0 <vQueueUnregisterQueue+0x50>)
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	2100      	movs	r1, #0
 800aaa4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800aaa8:	4a09      	ldr	r2, [pc, #36]	; (800aad0 <vQueueUnregisterQueue+0x50>)
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	00db      	lsls	r3, r3, #3
 800aaae:	4413      	add	r3, r2
 800aab0:	2200      	movs	r2, #0
 800aab2:	605a      	str	r2, [r3, #4]
				break;
 800aab4:	e006      	b.n	800aac4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	3301      	adds	r3, #1
 800aaba:	60fb      	str	r3, [r7, #12]
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2b07      	cmp	r3, #7
 800aac0:	d9e5      	bls.n	800aa8e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800aac2:	bf00      	nop
 800aac4:	bf00      	nop
 800aac6:	3714      	adds	r7, #20
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr
 800aad0:	20000a3c 	.word	0x20000a3c

0800aad4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b08e      	sub	sp, #56	; 0x38
 800aad8:	af04      	add	r7, sp, #16
 800aada:	60f8      	str	r0, [r7, #12]
 800aadc:	60b9      	str	r1, [r7, #8]
 800aade:	607a      	str	r2, [r7, #4]
 800aae0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d10a      	bne.n	800aafe <xTaskCreateStatic+0x2a>
	__asm volatile
 800aae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaec:	f383 8811 	msr	BASEPRI, r3
 800aaf0:	f3bf 8f6f 	isb	sy
 800aaf4:	f3bf 8f4f 	dsb	sy
 800aaf8:	623b      	str	r3, [r7, #32]
}
 800aafa:	bf00      	nop
 800aafc:	e7fe      	b.n	800aafc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d10a      	bne.n	800ab1a <xTaskCreateStatic+0x46>
	__asm volatile
 800ab04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab08:	f383 8811 	msr	BASEPRI, r3
 800ab0c:	f3bf 8f6f 	isb	sy
 800ab10:	f3bf 8f4f 	dsb	sy
 800ab14:	61fb      	str	r3, [r7, #28]
}
 800ab16:	bf00      	nop
 800ab18:	e7fe      	b.n	800ab18 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ab1a:	23a0      	movs	r3, #160	; 0xa0
 800ab1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	2ba0      	cmp	r3, #160	; 0xa0
 800ab22:	d00a      	beq.n	800ab3a <xTaskCreateStatic+0x66>
	__asm volatile
 800ab24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab28:	f383 8811 	msr	BASEPRI, r3
 800ab2c:	f3bf 8f6f 	isb	sy
 800ab30:	f3bf 8f4f 	dsb	sy
 800ab34:	61bb      	str	r3, [r7, #24]
}
 800ab36:	bf00      	nop
 800ab38:	e7fe      	b.n	800ab38 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ab3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d01e      	beq.n	800ab7e <xTaskCreateStatic+0xaa>
 800ab40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d01b      	beq.n	800ab7e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ab46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab48:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ab4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab4e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ab50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab52:	2202      	movs	r2, #2
 800ab54:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ab58:	2300      	movs	r3, #0
 800ab5a:	9303      	str	r3, [sp, #12]
 800ab5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5e:	9302      	str	r3, [sp, #8]
 800ab60:	f107 0314 	add.w	r3, r7, #20
 800ab64:	9301      	str	r3, [sp, #4]
 800ab66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab68:	9300      	str	r3, [sp, #0]
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	687a      	ldr	r2, [r7, #4]
 800ab6e:	68b9      	ldr	r1, [r7, #8]
 800ab70:	68f8      	ldr	r0, [r7, #12]
 800ab72:	f000 f851 	bl	800ac18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab78:	f000 f8e4 	bl	800ad44 <prvAddNewTaskToReadyList>
 800ab7c:	e001      	b.n	800ab82 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ab82:	697b      	ldr	r3, [r7, #20]
	}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3728      	adds	r7, #40	; 0x28
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b08c      	sub	sp, #48	; 0x30
 800ab90:	af04      	add	r7, sp, #16
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	60b9      	str	r1, [r7, #8]
 800ab96:	603b      	str	r3, [r7, #0]
 800ab98:	4613      	mov	r3, r2
 800ab9a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab9c:	88fb      	ldrh	r3, [r7, #6]
 800ab9e:	009b      	lsls	r3, r3, #2
 800aba0:	4618      	mov	r0, r3
 800aba2:	f001 fa21 	bl	800bfe8 <pvPortMalloc>
 800aba6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d00e      	beq.n	800abcc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800abae:	20a0      	movs	r0, #160	; 0xa0
 800abb0:	f001 fa1a 	bl	800bfe8 <pvPortMalloc>
 800abb4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800abb6:	69fb      	ldr	r3, [r7, #28]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d003      	beq.n	800abc4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800abbc:	69fb      	ldr	r3, [r7, #28]
 800abbe:	697a      	ldr	r2, [r7, #20]
 800abc0:	631a      	str	r2, [r3, #48]	; 0x30
 800abc2:	e005      	b.n	800abd0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800abc4:	6978      	ldr	r0, [r7, #20]
 800abc6:	f001 fad3 	bl	800c170 <vPortFree>
 800abca:	e001      	b.n	800abd0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800abcc:	2300      	movs	r3, #0
 800abce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800abd0:	69fb      	ldr	r3, [r7, #28]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d017      	beq.n	800ac06 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800abd6:	69fb      	ldr	r3, [r7, #28]
 800abd8:	2200      	movs	r2, #0
 800abda:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800abde:	88fa      	ldrh	r2, [r7, #6]
 800abe0:	2300      	movs	r3, #0
 800abe2:	9303      	str	r3, [sp, #12]
 800abe4:	69fb      	ldr	r3, [r7, #28]
 800abe6:	9302      	str	r3, [sp, #8]
 800abe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abea:	9301      	str	r3, [sp, #4]
 800abec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abee:	9300      	str	r3, [sp, #0]
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	68b9      	ldr	r1, [r7, #8]
 800abf4:	68f8      	ldr	r0, [r7, #12]
 800abf6:	f000 f80f 	bl	800ac18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800abfa:	69f8      	ldr	r0, [r7, #28]
 800abfc:	f000 f8a2 	bl	800ad44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ac00:	2301      	movs	r3, #1
 800ac02:	61bb      	str	r3, [r7, #24]
 800ac04:	e002      	b.n	800ac0c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ac06:	f04f 33ff 	mov.w	r3, #4294967295
 800ac0a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ac0c:	69bb      	ldr	r3, [r7, #24]
	}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3720      	adds	r7, #32
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}
	...

0800ac18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b088      	sub	sp, #32
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	60f8      	str	r0, [r7, #12]
 800ac20:	60b9      	str	r1, [r7, #8]
 800ac22:	607a      	str	r2, [r7, #4]
 800ac24:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800ac26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ac30:	3b01      	subs	r3, #1
 800ac32:	009b      	lsls	r3, r3, #2
 800ac34:	4413      	add	r3, r2
 800ac36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800ac38:	69bb      	ldr	r3, [r7, #24]
 800ac3a:	f023 0307 	bic.w	r3, r3, #7
 800ac3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ac40:	69bb      	ldr	r3, [r7, #24]
 800ac42:	f003 0307 	and.w	r3, r3, #7
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d00a      	beq.n	800ac60 <prvInitialiseNewTask+0x48>
	__asm volatile
 800ac4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac4e:	f383 8811 	msr	BASEPRI, r3
 800ac52:	f3bf 8f6f 	isb	sy
 800ac56:	f3bf 8f4f 	dsb	sy
 800ac5a:	617b      	str	r3, [r7, #20]
}
 800ac5c:	bf00      	nop
 800ac5e:	e7fe      	b.n	800ac5e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac60:	2300      	movs	r3, #0
 800ac62:	61fb      	str	r3, [r7, #28]
 800ac64:	e012      	b.n	800ac8c <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac66:	68ba      	ldr	r2, [r7, #8]
 800ac68:	69fb      	ldr	r3, [r7, #28]
 800ac6a:	4413      	add	r3, r2
 800ac6c:	7819      	ldrb	r1, [r3, #0]
 800ac6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac70:	69fb      	ldr	r3, [r7, #28]
 800ac72:	4413      	add	r3, r2
 800ac74:	3334      	adds	r3, #52	; 0x34
 800ac76:	460a      	mov	r2, r1
 800ac78:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800ac7a:	68ba      	ldr	r2, [r7, #8]
 800ac7c:	69fb      	ldr	r3, [r7, #28]
 800ac7e:	4413      	add	r3, r2
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d006      	beq.n	800ac94 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac86:	69fb      	ldr	r3, [r7, #28]
 800ac88:	3301      	adds	r3, #1
 800ac8a:	61fb      	str	r3, [r7, #28]
 800ac8c:	69fb      	ldr	r3, [r7, #28]
 800ac8e:	2b0f      	cmp	r3, #15
 800ac90:	d9e9      	bls.n	800ac66 <prvInitialiseNewTask+0x4e>
 800ac92:	e000      	b.n	800ac96 <prvInitialiseNewTask+0x7e>
		{
			break;
 800ac94:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ac96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac98:	2200      	movs	r2, #0
 800ac9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ac9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca0:	2b06      	cmp	r3, #6
 800aca2:	d901      	bls.n	800aca8 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aca4:	2306      	movs	r3, #6
 800aca6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800acae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acb2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800acb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb6:	2200      	movs	r2, #0
 800acb8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800acba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acbc:	3304      	adds	r3, #4
 800acbe:	4618      	mov	r0, r3
 800acc0:	f7ff f8a9 	bl	8009e16 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800acc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc6:	3318      	adds	r3, #24
 800acc8:	4618      	mov	r0, r3
 800acca:	f7ff f8a4 	bl	8009e16 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800acce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acd2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd6:	f1c3 0207 	rsb	r2, r3, #7
 800acda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acdc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800acde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ace2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ace4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace6:	2200      	movs	r2, #0
 800ace8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800acec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acee:	2200      	movs	r2, #0
 800acf0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800acf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf6:	334c      	adds	r3, #76	; 0x4c
 800acf8:	224c      	movs	r2, #76	; 0x4c
 800acfa:	2100      	movs	r1, #0
 800acfc:	4618      	mov	r0, r3
 800acfe:	f001 fb6d 	bl	800c3dc <memset>
 800ad02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad04:	4a0c      	ldr	r2, [pc, #48]	; (800ad38 <prvInitialiseNewTask+0x120>)
 800ad06:	651a      	str	r2, [r3, #80]	; 0x50
 800ad08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad0a:	4a0c      	ldr	r2, [pc, #48]	; (800ad3c <prvInitialiseNewTask+0x124>)
 800ad0c:	655a      	str	r2, [r3, #84]	; 0x54
 800ad0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad10:	4a0b      	ldr	r2, [pc, #44]	; (800ad40 <prvInitialiseNewTask+0x128>)
 800ad12:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ad14:	683a      	ldr	r2, [r7, #0]
 800ad16:	68f9      	ldr	r1, [r7, #12]
 800ad18:	69b8      	ldr	r0, [r7, #24]
 800ad1a:	f000 ff13 	bl	800bb44 <pxPortInitialiseStack>
 800ad1e:	4602      	mov	r2, r0
 800ad20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad22:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800ad24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d002      	beq.n	800ad30 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ad2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad2e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad30:	bf00      	nop
 800ad32:	3720      	adds	r7, #32
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}
 800ad38:	200017c8 	.word	0x200017c8
 800ad3c:	20001830 	.word	0x20001830
 800ad40:	20001898 	.word	0x20001898

0800ad44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b082      	sub	sp, #8
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ad4c:	f001 f82a 	bl	800bda4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ad50:	4b2a      	ldr	r3, [pc, #168]	; (800adfc <prvAddNewTaskToReadyList+0xb8>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	3301      	adds	r3, #1
 800ad56:	4a29      	ldr	r2, [pc, #164]	; (800adfc <prvAddNewTaskToReadyList+0xb8>)
 800ad58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ad5a:	4b29      	ldr	r3, [pc, #164]	; (800ae00 <prvAddNewTaskToReadyList+0xbc>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d109      	bne.n	800ad76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ad62:	4a27      	ldr	r2, [pc, #156]	; (800ae00 <prvAddNewTaskToReadyList+0xbc>)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ad68:	4b24      	ldr	r3, [pc, #144]	; (800adfc <prvAddNewTaskToReadyList+0xb8>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d110      	bne.n	800ad92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ad70:	f000 fbdc 	bl	800b52c <prvInitialiseTaskLists>
 800ad74:	e00d      	b.n	800ad92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ad76:	4b23      	ldr	r3, [pc, #140]	; (800ae04 <prvAddNewTaskToReadyList+0xc0>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d109      	bne.n	800ad92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ad7e:	4b20      	ldr	r3, [pc, #128]	; (800ae00 <prvAddNewTaskToReadyList+0xbc>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d802      	bhi.n	800ad92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ad8c:	4a1c      	ldr	r2, [pc, #112]	; (800ae00 <prvAddNewTaskToReadyList+0xbc>)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ad92:	4b1d      	ldr	r3, [pc, #116]	; (800ae08 <prvAddNewTaskToReadyList+0xc4>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	3301      	adds	r3, #1
 800ad98:	4a1b      	ldr	r2, [pc, #108]	; (800ae08 <prvAddNewTaskToReadyList+0xc4>)
 800ad9a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ada0:	2201      	movs	r2, #1
 800ada2:	409a      	lsls	r2, r3
 800ada4:	4b19      	ldr	r3, [pc, #100]	; (800ae0c <prvAddNewTaskToReadyList+0xc8>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4313      	orrs	r3, r2
 800adaa:	4a18      	ldr	r2, [pc, #96]	; (800ae0c <prvAddNewTaskToReadyList+0xc8>)
 800adac:	6013      	str	r3, [r2, #0]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adb2:	4613      	mov	r3, r2
 800adb4:	009b      	lsls	r3, r3, #2
 800adb6:	4413      	add	r3, r2
 800adb8:	009b      	lsls	r3, r3, #2
 800adba:	4a15      	ldr	r2, [pc, #84]	; (800ae10 <prvAddNewTaskToReadyList+0xcc>)
 800adbc:	441a      	add	r2, r3
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	3304      	adds	r3, #4
 800adc2:	4619      	mov	r1, r3
 800adc4:	4610      	mov	r0, r2
 800adc6:	f7ff f833 	bl	8009e30 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800adca:	f001 f81b 	bl	800be04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800adce:	4b0d      	ldr	r3, [pc, #52]	; (800ae04 <prvAddNewTaskToReadyList+0xc0>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d00e      	beq.n	800adf4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800add6:	4b0a      	ldr	r3, [pc, #40]	; (800ae00 <prvAddNewTaskToReadyList+0xbc>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d207      	bcs.n	800adf4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ade4:	4b0b      	ldr	r3, [pc, #44]	; (800ae14 <prvAddNewTaskToReadyList+0xd0>)
 800ade6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adea:	601a      	str	r2, [r3, #0]
 800adec:	f3bf 8f4f 	dsb	sy
 800adf0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800adf4:	bf00      	nop
 800adf6:	3708      	adds	r7, #8
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}
 800adfc:	20000b7c 	.word	0x20000b7c
 800ae00:	20000a7c 	.word	0x20000a7c
 800ae04:	20000b88 	.word	0x20000b88
 800ae08:	20000b98 	.word	0x20000b98
 800ae0c:	20000b84 	.word	0x20000b84
 800ae10:	20000a80 	.word	0x20000a80
 800ae14:	e000ed04 	.word	0xe000ed04

0800ae18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b084      	sub	sp, #16
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ae20:	2300      	movs	r3, #0
 800ae22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d017      	beq.n	800ae5a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ae2a:	4b13      	ldr	r3, [pc, #76]	; (800ae78 <vTaskDelay+0x60>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d00a      	beq.n	800ae48 <vTaskDelay+0x30>
	__asm volatile
 800ae32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae36:	f383 8811 	msr	BASEPRI, r3
 800ae3a:	f3bf 8f6f 	isb	sy
 800ae3e:	f3bf 8f4f 	dsb	sy
 800ae42:	60bb      	str	r3, [r7, #8]
}
 800ae44:	bf00      	nop
 800ae46:	e7fe      	b.n	800ae46 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ae48:	f000 f884 	bl	800af54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ae4c:	2100      	movs	r1, #0
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f000 fe12 	bl	800ba78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ae54:	f000 f88c 	bl	800af70 <xTaskResumeAll>
 800ae58:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d107      	bne.n	800ae70 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ae60:	4b06      	ldr	r3, [pc, #24]	; (800ae7c <vTaskDelay+0x64>)
 800ae62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae66:	601a      	str	r2, [r3, #0]
 800ae68:	f3bf 8f4f 	dsb	sy
 800ae6c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae70:	bf00      	nop
 800ae72:	3710      	adds	r7, #16
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}
 800ae78:	20000ba4 	.word	0x20000ba4
 800ae7c:	e000ed04 	.word	0xe000ed04

0800ae80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b08a      	sub	sp, #40	; 0x28
 800ae84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ae86:	2300      	movs	r3, #0
 800ae88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ae8e:	463a      	mov	r2, r7
 800ae90:	1d39      	adds	r1, r7, #4
 800ae92:	f107 0308 	add.w	r3, r7, #8
 800ae96:	4618      	mov	r0, r3
 800ae98:	f7f6 fa54 	bl	8001344 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ae9c:	6839      	ldr	r1, [r7, #0]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	68ba      	ldr	r2, [r7, #8]
 800aea2:	9202      	str	r2, [sp, #8]
 800aea4:	9301      	str	r3, [sp, #4]
 800aea6:	2300      	movs	r3, #0
 800aea8:	9300      	str	r3, [sp, #0]
 800aeaa:	2300      	movs	r3, #0
 800aeac:	460a      	mov	r2, r1
 800aeae:	4921      	ldr	r1, [pc, #132]	; (800af34 <vTaskStartScheduler+0xb4>)
 800aeb0:	4821      	ldr	r0, [pc, #132]	; (800af38 <vTaskStartScheduler+0xb8>)
 800aeb2:	f7ff fe0f 	bl	800aad4 <xTaskCreateStatic>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	4a20      	ldr	r2, [pc, #128]	; (800af3c <vTaskStartScheduler+0xbc>)
 800aeba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aebc:	4b1f      	ldr	r3, [pc, #124]	; (800af3c <vTaskStartScheduler+0xbc>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d002      	beq.n	800aeca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aec4:	2301      	movs	r3, #1
 800aec6:	617b      	str	r3, [r7, #20]
 800aec8:	e001      	b.n	800aece <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aeca:	2300      	movs	r3, #0
 800aecc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d11b      	bne.n	800af0c <vTaskStartScheduler+0x8c>
	__asm volatile
 800aed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed8:	f383 8811 	msr	BASEPRI, r3
 800aedc:	f3bf 8f6f 	isb	sy
 800aee0:	f3bf 8f4f 	dsb	sy
 800aee4:	613b      	str	r3, [r7, #16]
}
 800aee6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aee8:	4b15      	ldr	r3, [pc, #84]	; (800af40 <vTaskStartScheduler+0xc0>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	334c      	adds	r3, #76	; 0x4c
 800aeee:	4a15      	ldr	r2, [pc, #84]	; (800af44 <vTaskStartScheduler+0xc4>)
 800aef0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aef2:	4b15      	ldr	r3, [pc, #84]	; (800af48 <vTaskStartScheduler+0xc8>)
 800aef4:	f04f 32ff 	mov.w	r2, #4294967295
 800aef8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aefa:	4b14      	ldr	r3, [pc, #80]	; (800af4c <vTaskStartScheduler+0xcc>)
 800aefc:	2201      	movs	r2, #1
 800aefe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800af00:	4b13      	ldr	r3, [pc, #76]	; (800af50 <vTaskStartScheduler+0xd0>)
 800af02:	2200      	movs	r2, #0
 800af04:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800af06:	f000 feab 	bl	800bc60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800af0a:	e00e      	b.n	800af2a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af12:	d10a      	bne.n	800af2a <vTaskStartScheduler+0xaa>
	__asm volatile
 800af14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af18:	f383 8811 	msr	BASEPRI, r3
 800af1c:	f3bf 8f6f 	isb	sy
 800af20:	f3bf 8f4f 	dsb	sy
 800af24:	60fb      	str	r3, [r7, #12]
}
 800af26:	bf00      	nop
 800af28:	e7fe      	b.n	800af28 <vTaskStartScheduler+0xa8>
}
 800af2a:	bf00      	nop
 800af2c:	3718      	adds	r7, #24
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}
 800af32:	bf00      	nop
 800af34:	0800d268 	.word	0x0800d268
 800af38:	0800b4fd 	.word	0x0800b4fd
 800af3c:	20000ba0 	.word	0x20000ba0
 800af40:	20000a7c 	.word	0x20000a7c
 800af44:	20000074 	.word	0x20000074
 800af48:	20000b9c 	.word	0x20000b9c
 800af4c:	20000b88 	.word	0x20000b88
 800af50:	20000b80 	.word	0x20000b80

0800af54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800af54:	b480      	push	{r7}
 800af56:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800af58:	4b04      	ldr	r3, [pc, #16]	; (800af6c <vTaskSuspendAll+0x18>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	3301      	adds	r3, #1
 800af5e:	4a03      	ldr	r2, [pc, #12]	; (800af6c <vTaskSuspendAll+0x18>)
 800af60:	6013      	str	r3, [r2, #0]
}
 800af62:	bf00      	nop
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr
 800af6c:	20000ba4 	.word	0x20000ba4

0800af70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b084      	sub	sp, #16
 800af74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800af76:	2300      	movs	r3, #0
 800af78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800af7a:	2300      	movs	r3, #0
 800af7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800af7e:	4b41      	ldr	r3, [pc, #260]	; (800b084 <xTaskResumeAll+0x114>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d10a      	bne.n	800af9c <xTaskResumeAll+0x2c>
	__asm volatile
 800af86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af8a:	f383 8811 	msr	BASEPRI, r3
 800af8e:	f3bf 8f6f 	isb	sy
 800af92:	f3bf 8f4f 	dsb	sy
 800af96:	603b      	str	r3, [r7, #0]
}
 800af98:	bf00      	nop
 800af9a:	e7fe      	b.n	800af9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800af9c:	f000 ff02 	bl	800bda4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800afa0:	4b38      	ldr	r3, [pc, #224]	; (800b084 <xTaskResumeAll+0x114>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	3b01      	subs	r3, #1
 800afa6:	4a37      	ldr	r2, [pc, #220]	; (800b084 <xTaskResumeAll+0x114>)
 800afa8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800afaa:	4b36      	ldr	r3, [pc, #216]	; (800b084 <xTaskResumeAll+0x114>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d161      	bne.n	800b076 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800afb2:	4b35      	ldr	r3, [pc, #212]	; (800b088 <xTaskResumeAll+0x118>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d05d      	beq.n	800b076 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800afba:	e02e      	b.n	800b01a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800afbc:	4b33      	ldr	r3, [pc, #204]	; (800b08c <xTaskResumeAll+0x11c>)
 800afbe:	68db      	ldr	r3, [r3, #12]
 800afc0:	68db      	ldr	r3, [r3, #12]
 800afc2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	3318      	adds	r3, #24
 800afc8:	4618      	mov	r0, r3
 800afca:	f7fe ff8e 	bl	8009eea <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	3304      	adds	r3, #4
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7fe ff89 	bl	8009eea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afdc:	2201      	movs	r2, #1
 800afde:	409a      	lsls	r2, r3
 800afe0:	4b2b      	ldr	r3, [pc, #172]	; (800b090 <xTaskResumeAll+0x120>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	4313      	orrs	r3, r2
 800afe6:	4a2a      	ldr	r2, [pc, #168]	; (800b090 <xTaskResumeAll+0x120>)
 800afe8:	6013      	str	r3, [r2, #0]
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afee:	4613      	mov	r3, r2
 800aff0:	009b      	lsls	r3, r3, #2
 800aff2:	4413      	add	r3, r2
 800aff4:	009b      	lsls	r3, r3, #2
 800aff6:	4a27      	ldr	r2, [pc, #156]	; (800b094 <xTaskResumeAll+0x124>)
 800aff8:	441a      	add	r2, r3
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	3304      	adds	r3, #4
 800affe:	4619      	mov	r1, r3
 800b000:	4610      	mov	r0, r2
 800b002:	f7fe ff15 	bl	8009e30 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b00a:	4b23      	ldr	r3, [pc, #140]	; (800b098 <xTaskResumeAll+0x128>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b010:	429a      	cmp	r2, r3
 800b012:	d302      	bcc.n	800b01a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b014:	4b21      	ldr	r3, [pc, #132]	; (800b09c <xTaskResumeAll+0x12c>)
 800b016:	2201      	movs	r2, #1
 800b018:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b01a:	4b1c      	ldr	r3, [pc, #112]	; (800b08c <xTaskResumeAll+0x11c>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d1cc      	bne.n	800afbc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d001      	beq.n	800b02c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b028:	f000 fb22 	bl	800b670 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b02c:	4b1c      	ldr	r3, [pc, #112]	; (800b0a0 <xTaskResumeAll+0x130>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d010      	beq.n	800b05a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b038:	f000 f836 	bl	800b0a8 <xTaskIncrementTick>
 800b03c:	4603      	mov	r3, r0
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d002      	beq.n	800b048 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b042:	4b16      	ldr	r3, [pc, #88]	; (800b09c <xTaskResumeAll+0x12c>)
 800b044:	2201      	movs	r2, #1
 800b046:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	3b01      	subs	r3, #1
 800b04c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d1f1      	bne.n	800b038 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800b054:	4b12      	ldr	r3, [pc, #72]	; (800b0a0 <xTaskResumeAll+0x130>)
 800b056:	2200      	movs	r2, #0
 800b058:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b05a:	4b10      	ldr	r3, [pc, #64]	; (800b09c <xTaskResumeAll+0x12c>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d009      	beq.n	800b076 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b062:	2301      	movs	r3, #1
 800b064:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b066:	4b0f      	ldr	r3, [pc, #60]	; (800b0a4 <xTaskResumeAll+0x134>)
 800b068:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b06c:	601a      	str	r2, [r3, #0]
 800b06e:	f3bf 8f4f 	dsb	sy
 800b072:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b076:	f000 fec5 	bl	800be04 <vPortExitCritical>

	return xAlreadyYielded;
 800b07a:	68bb      	ldr	r3, [r7, #8]
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3710      	adds	r7, #16
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}
 800b084:	20000ba4 	.word	0x20000ba4
 800b088:	20000b7c 	.word	0x20000b7c
 800b08c:	20000b3c 	.word	0x20000b3c
 800b090:	20000b84 	.word	0x20000b84
 800b094:	20000a80 	.word	0x20000a80
 800b098:	20000a7c 	.word	0x20000a7c
 800b09c:	20000b90 	.word	0x20000b90
 800b0a0:	20000b8c 	.word	0x20000b8c
 800b0a4:	e000ed04 	.word	0xe000ed04

0800b0a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b086      	sub	sp, #24
 800b0ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0b2:	4b51      	ldr	r3, [pc, #324]	; (800b1f8 <xTaskIncrementTick+0x150>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	f040 808d 	bne.w	800b1d6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b0bc:	4b4f      	ldr	r3, [pc, #316]	; (800b1fc <xTaskIncrementTick+0x154>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	3301      	adds	r3, #1
 800b0c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b0c4:	4a4d      	ldr	r2, [pc, #308]	; (800b1fc <xTaskIncrementTick+0x154>)
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d120      	bne.n	800b112 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b0d0:	4b4b      	ldr	r3, [pc, #300]	; (800b200 <xTaskIncrementTick+0x158>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d00a      	beq.n	800b0f0 <xTaskIncrementTick+0x48>
	__asm volatile
 800b0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0de:	f383 8811 	msr	BASEPRI, r3
 800b0e2:	f3bf 8f6f 	isb	sy
 800b0e6:	f3bf 8f4f 	dsb	sy
 800b0ea:	603b      	str	r3, [r7, #0]
}
 800b0ec:	bf00      	nop
 800b0ee:	e7fe      	b.n	800b0ee <xTaskIncrementTick+0x46>
 800b0f0:	4b43      	ldr	r3, [pc, #268]	; (800b200 <xTaskIncrementTick+0x158>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	60fb      	str	r3, [r7, #12]
 800b0f6:	4b43      	ldr	r3, [pc, #268]	; (800b204 <xTaskIncrementTick+0x15c>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	4a41      	ldr	r2, [pc, #260]	; (800b200 <xTaskIncrementTick+0x158>)
 800b0fc:	6013      	str	r3, [r2, #0]
 800b0fe:	4a41      	ldr	r2, [pc, #260]	; (800b204 <xTaskIncrementTick+0x15c>)
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	6013      	str	r3, [r2, #0]
 800b104:	4b40      	ldr	r3, [pc, #256]	; (800b208 <xTaskIncrementTick+0x160>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	3301      	adds	r3, #1
 800b10a:	4a3f      	ldr	r2, [pc, #252]	; (800b208 <xTaskIncrementTick+0x160>)
 800b10c:	6013      	str	r3, [r2, #0]
 800b10e:	f000 faaf 	bl	800b670 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b112:	4b3e      	ldr	r3, [pc, #248]	; (800b20c <xTaskIncrementTick+0x164>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	693a      	ldr	r2, [r7, #16]
 800b118:	429a      	cmp	r2, r3
 800b11a:	d34d      	bcc.n	800b1b8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b11c:	4b38      	ldr	r3, [pc, #224]	; (800b200 <xTaskIncrementTick+0x158>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d101      	bne.n	800b12a <xTaskIncrementTick+0x82>
 800b126:	2301      	movs	r3, #1
 800b128:	e000      	b.n	800b12c <xTaskIncrementTick+0x84>
 800b12a:	2300      	movs	r3, #0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d004      	beq.n	800b13a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b130:	4b36      	ldr	r3, [pc, #216]	; (800b20c <xTaskIncrementTick+0x164>)
 800b132:	f04f 32ff 	mov.w	r2, #4294967295
 800b136:	601a      	str	r2, [r3, #0]
					break;
 800b138:	e03e      	b.n	800b1b8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b13a:	4b31      	ldr	r3, [pc, #196]	; (800b200 <xTaskIncrementTick+0x158>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	68db      	ldr	r3, [r3, #12]
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	685b      	ldr	r3, [r3, #4]
 800b148:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b14a:	693a      	ldr	r2, [r7, #16]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	429a      	cmp	r2, r3
 800b150:	d203      	bcs.n	800b15a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b152:	4a2e      	ldr	r2, [pc, #184]	; (800b20c <xTaskIncrementTick+0x164>)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6013      	str	r3, [r2, #0]
						break;
 800b158:	e02e      	b.n	800b1b8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	3304      	adds	r3, #4
 800b15e:	4618      	mov	r0, r3
 800b160:	f7fe fec3 	bl	8009eea <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d004      	beq.n	800b176 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	3318      	adds	r3, #24
 800b170:	4618      	mov	r0, r3
 800b172:	f7fe feba 	bl	8009eea <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b17a:	2201      	movs	r2, #1
 800b17c:	409a      	lsls	r2, r3
 800b17e:	4b24      	ldr	r3, [pc, #144]	; (800b210 <xTaskIncrementTick+0x168>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	4313      	orrs	r3, r2
 800b184:	4a22      	ldr	r2, [pc, #136]	; (800b210 <xTaskIncrementTick+0x168>)
 800b186:	6013      	str	r3, [r2, #0]
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b18c:	4613      	mov	r3, r2
 800b18e:	009b      	lsls	r3, r3, #2
 800b190:	4413      	add	r3, r2
 800b192:	009b      	lsls	r3, r3, #2
 800b194:	4a1f      	ldr	r2, [pc, #124]	; (800b214 <xTaskIncrementTick+0x16c>)
 800b196:	441a      	add	r2, r3
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	3304      	adds	r3, #4
 800b19c:	4619      	mov	r1, r3
 800b19e:	4610      	mov	r0, r2
 800b1a0:	f7fe fe46 	bl	8009e30 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1a8:	4b1b      	ldr	r3, [pc, #108]	; (800b218 <xTaskIncrementTick+0x170>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d3b4      	bcc.n	800b11c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1b6:	e7b1      	b.n	800b11c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b1b8:	4b17      	ldr	r3, [pc, #92]	; (800b218 <xTaskIncrementTick+0x170>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1be:	4915      	ldr	r1, [pc, #84]	; (800b214 <xTaskIncrementTick+0x16c>)
 800b1c0:	4613      	mov	r3, r2
 800b1c2:	009b      	lsls	r3, r3, #2
 800b1c4:	4413      	add	r3, r2
 800b1c6:	009b      	lsls	r3, r3, #2
 800b1c8:	440b      	add	r3, r1
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d907      	bls.n	800b1e0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	617b      	str	r3, [r7, #20]
 800b1d4:	e004      	b.n	800b1e0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b1d6:	4b11      	ldr	r3, [pc, #68]	; (800b21c <xTaskIncrementTick+0x174>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	3301      	adds	r3, #1
 800b1dc:	4a0f      	ldr	r2, [pc, #60]	; (800b21c <xTaskIncrementTick+0x174>)
 800b1de:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b1e0:	4b0f      	ldr	r3, [pc, #60]	; (800b220 <xTaskIncrementTick+0x178>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d001      	beq.n	800b1ec <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b1ec:	697b      	ldr	r3, [r7, #20]
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3718      	adds	r7, #24
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	20000ba4 	.word	0x20000ba4
 800b1fc:	20000b80 	.word	0x20000b80
 800b200:	20000b34 	.word	0x20000b34
 800b204:	20000b38 	.word	0x20000b38
 800b208:	20000b94 	.word	0x20000b94
 800b20c:	20000b9c 	.word	0x20000b9c
 800b210:	20000b84 	.word	0x20000b84
 800b214:	20000a80 	.word	0x20000a80
 800b218:	20000a7c 	.word	0x20000a7c
 800b21c:	20000b8c 	.word	0x20000b8c
 800b220:	20000b90 	.word	0x20000b90

0800b224 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b224:	b480      	push	{r7}
 800b226:	b087      	sub	sp, #28
 800b228:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b22a:	4b29      	ldr	r3, [pc, #164]	; (800b2d0 <vTaskSwitchContext+0xac>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d003      	beq.n	800b23a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b232:	4b28      	ldr	r3, [pc, #160]	; (800b2d4 <vTaskSwitchContext+0xb0>)
 800b234:	2201      	movs	r2, #1
 800b236:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b238:	e044      	b.n	800b2c4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800b23a:	4b26      	ldr	r3, [pc, #152]	; (800b2d4 <vTaskSwitchContext+0xb0>)
 800b23c:	2200      	movs	r2, #0
 800b23e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b240:	4b25      	ldr	r3, [pc, #148]	; (800b2d8 <vTaskSwitchContext+0xb4>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	fab3 f383 	clz	r3, r3
 800b24c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b24e:	7afb      	ldrb	r3, [r7, #11]
 800b250:	f1c3 031f 	rsb	r3, r3, #31
 800b254:	617b      	str	r3, [r7, #20]
 800b256:	4921      	ldr	r1, [pc, #132]	; (800b2dc <vTaskSwitchContext+0xb8>)
 800b258:	697a      	ldr	r2, [r7, #20]
 800b25a:	4613      	mov	r3, r2
 800b25c:	009b      	lsls	r3, r3, #2
 800b25e:	4413      	add	r3, r2
 800b260:	009b      	lsls	r3, r3, #2
 800b262:	440b      	add	r3, r1
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d10a      	bne.n	800b280 <vTaskSwitchContext+0x5c>
	__asm volatile
 800b26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b26e:	f383 8811 	msr	BASEPRI, r3
 800b272:	f3bf 8f6f 	isb	sy
 800b276:	f3bf 8f4f 	dsb	sy
 800b27a:	607b      	str	r3, [r7, #4]
}
 800b27c:	bf00      	nop
 800b27e:	e7fe      	b.n	800b27e <vTaskSwitchContext+0x5a>
 800b280:	697a      	ldr	r2, [r7, #20]
 800b282:	4613      	mov	r3, r2
 800b284:	009b      	lsls	r3, r3, #2
 800b286:	4413      	add	r3, r2
 800b288:	009b      	lsls	r3, r3, #2
 800b28a:	4a14      	ldr	r2, [pc, #80]	; (800b2dc <vTaskSwitchContext+0xb8>)
 800b28c:	4413      	add	r3, r2
 800b28e:	613b      	str	r3, [r7, #16]
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	685a      	ldr	r2, [r3, #4]
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	605a      	str	r2, [r3, #4]
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	685a      	ldr	r2, [r3, #4]
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	3308      	adds	r3, #8
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d104      	bne.n	800b2b0 <vTaskSwitchContext+0x8c>
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	685a      	ldr	r2, [r3, #4]
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	605a      	str	r2, [r3, #4]
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	68db      	ldr	r3, [r3, #12]
 800b2b6:	4a0a      	ldr	r2, [pc, #40]	; (800b2e0 <vTaskSwitchContext+0xbc>)
 800b2b8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b2ba:	4b09      	ldr	r3, [pc, #36]	; (800b2e0 <vTaskSwitchContext+0xbc>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	334c      	adds	r3, #76	; 0x4c
 800b2c0:	4a08      	ldr	r2, [pc, #32]	; (800b2e4 <vTaskSwitchContext+0xc0>)
 800b2c2:	6013      	str	r3, [r2, #0]
}
 800b2c4:	bf00      	nop
 800b2c6:	371c      	adds	r7, #28
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ce:	4770      	bx	lr
 800b2d0:	20000ba4 	.word	0x20000ba4
 800b2d4:	20000b90 	.word	0x20000b90
 800b2d8:	20000b84 	.word	0x20000b84
 800b2dc:	20000a80 	.word	0x20000a80
 800b2e0:	20000a7c 	.word	0x20000a7c
 800b2e4:	20000074 	.word	0x20000074

0800b2e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b084      	sub	sp, #16
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d10a      	bne.n	800b30e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2fc:	f383 8811 	msr	BASEPRI, r3
 800b300:	f3bf 8f6f 	isb	sy
 800b304:	f3bf 8f4f 	dsb	sy
 800b308:	60fb      	str	r3, [r7, #12]
}
 800b30a:	bf00      	nop
 800b30c:	e7fe      	b.n	800b30c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b30e:	4b07      	ldr	r3, [pc, #28]	; (800b32c <vTaskPlaceOnEventList+0x44>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	3318      	adds	r3, #24
 800b314:	4619      	mov	r1, r3
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f7fe fdae 	bl	8009e78 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b31c:	2101      	movs	r1, #1
 800b31e:	6838      	ldr	r0, [r7, #0]
 800b320:	f000 fbaa 	bl	800ba78 <prvAddCurrentTaskToDelayedList>
}
 800b324:	bf00      	nop
 800b326:	3710      	adds	r7, #16
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}
 800b32c:	20000a7c 	.word	0x20000a7c

0800b330 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b086      	sub	sp, #24
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	68db      	ldr	r3, [r3, #12]
 800b33c:	68db      	ldr	r3, [r3, #12]
 800b33e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d10a      	bne.n	800b35c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b34a:	f383 8811 	msr	BASEPRI, r3
 800b34e:	f3bf 8f6f 	isb	sy
 800b352:	f3bf 8f4f 	dsb	sy
 800b356:	60fb      	str	r3, [r7, #12]
}
 800b358:	bf00      	nop
 800b35a:	e7fe      	b.n	800b35a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	3318      	adds	r3, #24
 800b360:	4618      	mov	r0, r3
 800b362:	f7fe fdc2 	bl	8009eea <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b366:	4b1d      	ldr	r3, [pc, #116]	; (800b3dc <xTaskRemoveFromEventList+0xac>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d11c      	bne.n	800b3a8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	3304      	adds	r3, #4
 800b372:	4618      	mov	r0, r3
 800b374:	f7fe fdb9 	bl	8009eea <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b37c:	2201      	movs	r2, #1
 800b37e:	409a      	lsls	r2, r3
 800b380:	4b17      	ldr	r3, [pc, #92]	; (800b3e0 <xTaskRemoveFromEventList+0xb0>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	4313      	orrs	r3, r2
 800b386:	4a16      	ldr	r2, [pc, #88]	; (800b3e0 <xTaskRemoveFromEventList+0xb0>)
 800b388:	6013      	str	r3, [r2, #0]
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b38e:	4613      	mov	r3, r2
 800b390:	009b      	lsls	r3, r3, #2
 800b392:	4413      	add	r3, r2
 800b394:	009b      	lsls	r3, r3, #2
 800b396:	4a13      	ldr	r2, [pc, #76]	; (800b3e4 <xTaskRemoveFromEventList+0xb4>)
 800b398:	441a      	add	r2, r3
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	3304      	adds	r3, #4
 800b39e:	4619      	mov	r1, r3
 800b3a0:	4610      	mov	r0, r2
 800b3a2:	f7fe fd45 	bl	8009e30 <vListInsertEnd>
 800b3a6:	e005      	b.n	800b3b4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	3318      	adds	r3, #24
 800b3ac:	4619      	mov	r1, r3
 800b3ae:	480e      	ldr	r0, [pc, #56]	; (800b3e8 <xTaskRemoveFromEventList+0xb8>)
 800b3b0:	f7fe fd3e 	bl	8009e30 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3b8:	4b0c      	ldr	r3, [pc, #48]	; (800b3ec <xTaskRemoveFromEventList+0xbc>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	d905      	bls.n	800b3ce <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b3c6:	4b0a      	ldr	r3, [pc, #40]	; (800b3f0 <xTaskRemoveFromEventList+0xc0>)
 800b3c8:	2201      	movs	r2, #1
 800b3ca:	601a      	str	r2, [r3, #0]
 800b3cc:	e001      	b.n	800b3d2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800b3d2:	697b      	ldr	r3, [r7, #20]
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3718      	adds	r7, #24
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}
 800b3dc:	20000ba4 	.word	0x20000ba4
 800b3e0:	20000b84 	.word	0x20000b84
 800b3e4:	20000a80 	.word	0x20000a80
 800b3e8:	20000b3c 	.word	0x20000b3c
 800b3ec:	20000a7c 	.word	0x20000a7c
 800b3f0:	20000b90 	.word	0x20000b90

0800b3f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b083      	sub	sp, #12
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b3fc:	4b06      	ldr	r3, [pc, #24]	; (800b418 <vTaskInternalSetTimeOutState+0x24>)
 800b3fe:	681a      	ldr	r2, [r3, #0]
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b404:	4b05      	ldr	r3, [pc, #20]	; (800b41c <vTaskInternalSetTimeOutState+0x28>)
 800b406:	681a      	ldr	r2, [r3, #0]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	605a      	str	r2, [r3, #4]
}
 800b40c:	bf00      	nop
 800b40e:	370c      	adds	r7, #12
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr
 800b418:	20000b94 	.word	0x20000b94
 800b41c:	20000b80 	.word	0x20000b80

0800b420 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b088      	sub	sp, #32
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d10a      	bne.n	800b446 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b434:	f383 8811 	msr	BASEPRI, r3
 800b438:	f3bf 8f6f 	isb	sy
 800b43c:	f3bf 8f4f 	dsb	sy
 800b440:	613b      	str	r3, [r7, #16]
}
 800b442:	bf00      	nop
 800b444:	e7fe      	b.n	800b444 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d10a      	bne.n	800b462 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b450:	f383 8811 	msr	BASEPRI, r3
 800b454:	f3bf 8f6f 	isb	sy
 800b458:	f3bf 8f4f 	dsb	sy
 800b45c:	60fb      	str	r3, [r7, #12]
}
 800b45e:	bf00      	nop
 800b460:	e7fe      	b.n	800b460 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b462:	f000 fc9f 	bl	800bda4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b466:	4b1d      	ldr	r3, [pc, #116]	; (800b4dc <xTaskCheckForTimeOut+0xbc>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	685b      	ldr	r3, [r3, #4]
 800b470:	69ba      	ldr	r2, [r7, #24]
 800b472:	1ad3      	subs	r3, r2, r3
 800b474:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b47e:	d102      	bne.n	800b486 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b480:	2300      	movs	r3, #0
 800b482:	61fb      	str	r3, [r7, #28]
 800b484:	e023      	b.n	800b4ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	4b15      	ldr	r3, [pc, #84]	; (800b4e0 <xTaskCheckForTimeOut+0xc0>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	429a      	cmp	r2, r3
 800b490:	d007      	beq.n	800b4a2 <xTaskCheckForTimeOut+0x82>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	685b      	ldr	r3, [r3, #4]
 800b496:	69ba      	ldr	r2, [r7, #24]
 800b498:	429a      	cmp	r2, r3
 800b49a:	d302      	bcc.n	800b4a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b49c:	2301      	movs	r3, #1
 800b49e:	61fb      	str	r3, [r7, #28]
 800b4a0:	e015      	b.n	800b4ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	697a      	ldr	r2, [r7, #20]
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	d20b      	bcs.n	800b4c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	681a      	ldr	r2, [r3, #0]
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	1ad2      	subs	r2, r2, r3
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f7ff ff9b 	bl	800b3f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	61fb      	str	r3, [r7, #28]
 800b4c2:	e004      	b.n	800b4ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b4ce:	f000 fc99 	bl	800be04 <vPortExitCritical>

	return xReturn;
 800b4d2:	69fb      	ldr	r3, [r7, #28]
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3720      	adds	r7, #32
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}
 800b4dc:	20000b80 	.word	0x20000b80
 800b4e0:	20000b94 	.word	0x20000b94

0800b4e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b4e8:	4b03      	ldr	r3, [pc, #12]	; (800b4f8 <vTaskMissedYield+0x14>)
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	601a      	str	r2, [r3, #0]
}
 800b4ee:	bf00      	nop
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr
 800b4f8:	20000b90 	.word	0x20000b90

0800b4fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b082      	sub	sp, #8
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b504:	f000 f852 	bl	800b5ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b508:	4b06      	ldr	r3, [pc, #24]	; (800b524 <prvIdleTask+0x28>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d9f9      	bls.n	800b504 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b510:	4b05      	ldr	r3, [pc, #20]	; (800b528 <prvIdleTask+0x2c>)
 800b512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b516:	601a      	str	r2, [r3, #0]
 800b518:	f3bf 8f4f 	dsb	sy
 800b51c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b520:	e7f0      	b.n	800b504 <prvIdleTask+0x8>
 800b522:	bf00      	nop
 800b524:	20000a80 	.word	0x20000a80
 800b528:	e000ed04 	.word	0xe000ed04

0800b52c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b082      	sub	sp, #8
 800b530:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b532:	2300      	movs	r3, #0
 800b534:	607b      	str	r3, [r7, #4]
 800b536:	e00c      	b.n	800b552 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b538:	687a      	ldr	r2, [r7, #4]
 800b53a:	4613      	mov	r3, r2
 800b53c:	009b      	lsls	r3, r3, #2
 800b53e:	4413      	add	r3, r2
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	4a12      	ldr	r2, [pc, #72]	; (800b58c <prvInitialiseTaskLists+0x60>)
 800b544:	4413      	add	r3, r2
 800b546:	4618      	mov	r0, r3
 800b548:	f7fe fc45 	bl	8009dd6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	3301      	adds	r3, #1
 800b550:	607b      	str	r3, [r7, #4]
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2b06      	cmp	r3, #6
 800b556:	d9ef      	bls.n	800b538 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b558:	480d      	ldr	r0, [pc, #52]	; (800b590 <prvInitialiseTaskLists+0x64>)
 800b55a:	f7fe fc3c 	bl	8009dd6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b55e:	480d      	ldr	r0, [pc, #52]	; (800b594 <prvInitialiseTaskLists+0x68>)
 800b560:	f7fe fc39 	bl	8009dd6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b564:	480c      	ldr	r0, [pc, #48]	; (800b598 <prvInitialiseTaskLists+0x6c>)
 800b566:	f7fe fc36 	bl	8009dd6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b56a:	480c      	ldr	r0, [pc, #48]	; (800b59c <prvInitialiseTaskLists+0x70>)
 800b56c:	f7fe fc33 	bl	8009dd6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b570:	480b      	ldr	r0, [pc, #44]	; (800b5a0 <prvInitialiseTaskLists+0x74>)
 800b572:	f7fe fc30 	bl	8009dd6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b576:	4b0b      	ldr	r3, [pc, #44]	; (800b5a4 <prvInitialiseTaskLists+0x78>)
 800b578:	4a05      	ldr	r2, [pc, #20]	; (800b590 <prvInitialiseTaskLists+0x64>)
 800b57a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b57c:	4b0a      	ldr	r3, [pc, #40]	; (800b5a8 <prvInitialiseTaskLists+0x7c>)
 800b57e:	4a05      	ldr	r2, [pc, #20]	; (800b594 <prvInitialiseTaskLists+0x68>)
 800b580:	601a      	str	r2, [r3, #0]
}
 800b582:	bf00      	nop
 800b584:	3708      	adds	r7, #8
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	bf00      	nop
 800b58c:	20000a80 	.word	0x20000a80
 800b590:	20000b0c 	.word	0x20000b0c
 800b594:	20000b20 	.word	0x20000b20
 800b598:	20000b3c 	.word	0x20000b3c
 800b59c:	20000b50 	.word	0x20000b50
 800b5a0:	20000b68 	.word	0x20000b68
 800b5a4:	20000b34 	.word	0x20000b34
 800b5a8:	20000b38 	.word	0x20000b38

0800b5ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b082      	sub	sp, #8
 800b5b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b5b2:	e019      	b.n	800b5e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b5b4:	f000 fbf6 	bl	800bda4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b5b8:	4b10      	ldr	r3, [pc, #64]	; (800b5fc <prvCheckTasksWaitingTermination+0x50>)
 800b5ba:	68db      	ldr	r3, [r3, #12]
 800b5bc:	68db      	ldr	r3, [r3, #12]
 800b5be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	3304      	adds	r3, #4
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f7fe fc90 	bl	8009eea <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b5ca:	4b0d      	ldr	r3, [pc, #52]	; (800b600 <prvCheckTasksWaitingTermination+0x54>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	3b01      	subs	r3, #1
 800b5d0:	4a0b      	ldr	r2, [pc, #44]	; (800b600 <prvCheckTasksWaitingTermination+0x54>)
 800b5d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b5d4:	4b0b      	ldr	r3, [pc, #44]	; (800b604 <prvCheckTasksWaitingTermination+0x58>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	3b01      	subs	r3, #1
 800b5da:	4a0a      	ldr	r2, [pc, #40]	; (800b604 <prvCheckTasksWaitingTermination+0x58>)
 800b5dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b5de:	f000 fc11 	bl	800be04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 f810 	bl	800b608 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b5e8:	4b06      	ldr	r3, [pc, #24]	; (800b604 <prvCheckTasksWaitingTermination+0x58>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d1e1      	bne.n	800b5b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b5f0:	bf00      	nop
 800b5f2:	bf00      	nop
 800b5f4:	3708      	adds	r7, #8
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	bf00      	nop
 800b5fc:	20000b50 	.word	0x20000b50
 800b600:	20000b7c 	.word	0x20000b7c
 800b604:	20000b64 	.word	0x20000b64

0800b608 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b084      	sub	sp, #16
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	334c      	adds	r3, #76	; 0x4c
 800b614:	4618      	mov	r0, r3
 800b616:	f000 fee9 	bl	800c3ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800b620:	2b00      	cmp	r3, #0
 800b622:	d108      	bne.n	800b636 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b628:	4618      	mov	r0, r3
 800b62a:	f000 fda1 	bl	800c170 <vPortFree>
				vPortFree( pxTCB );
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f000 fd9e 	bl	800c170 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b634:	e018      	b.n	800b668 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d103      	bne.n	800b648 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f000 fd95 	bl	800c170 <vPortFree>
	}
 800b646:	e00f      	b.n	800b668 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800b64e:	2b02      	cmp	r3, #2
 800b650:	d00a      	beq.n	800b668 <prvDeleteTCB+0x60>
	__asm volatile
 800b652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b656:	f383 8811 	msr	BASEPRI, r3
 800b65a:	f3bf 8f6f 	isb	sy
 800b65e:	f3bf 8f4f 	dsb	sy
 800b662:	60fb      	str	r3, [r7, #12]
}
 800b664:	bf00      	nop
 800b666:	e7fe      	b.n	800b666 <prvDeleteTCB+0x5e>
	}
 800b668:	bf00      	nop
 800b66a:	3710      	adds	r7, #16
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}

0800b670 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b670:	b480      	push	{r7}
 800b672:	b083      	sub	sp, #12
 800b674:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b676:	4b0f      	ldr	r3, [pc, #60]	; (800b6b4 <prvResetNextTaskUnblockTime+0x44>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d101      	bne.n	800b684 <prvResetNextTaskUnblockTime+0x14>
 800b680:	2301      	movs	r3, #1
 800b682:	e000      	b.n	800b686 <prvResetNextTaskUnblockTime+0x16>
 800b684:	2300      	movs	r3, #0
 800b686:	2b00      	cmp	r3, #0
 800b688:	d004      	beq.n	800b694 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b68a:	4b0b      	ldr	r3, [pc, #44]	; (800b6b8 <prvResetNextTaskUnblockTime+0x48>)
 800b68c:	f04f 32ff 	mov.w	r2, #4294967295
 800b690:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b692:	e008      	b.n	800b6a6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b694:	4b07      	ldr	r3, [pc, #28]	; (800b6b4 <prvResetNextTaskUnblockTime+0x44>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	68db      	ldr	r3, [r3, #12]
 800b69a:	68db      	ldr	r3, [r3, #12]
 800b69c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	4a05      	ldr	r2, [pc, #20]	; (800b6b8 <prvResetNextTaskUnblockTime+0x48>)
 800b6a4:	6013      	str	r3, [r2, #0]
}
 800b6a6:	bf00      	nop
 800b6a8:	370c      	adds	r7, #12
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b0:	4770      	bx	lr
 800b6b2:	bf00      	nop
 800b6b4:	20000b34 	.word	0x20000b34
 800b6b8:	20000b9c 	.word	0x20000b9c

0800b6bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b6bc:	b480      	push	{r7}
 800b6be:	b083      	sub	sp, #12
 800b6c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b6c2:	4b0b      	ldr	r3, [pc, #44]	; (800b6f0 <xTaskGetSchedulerState+0x34>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d102      	bne.n	800b6d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	607b      	str	r3, [r7, #4]
 800b6ce:	e008      	b.n	800b6e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6d0:	4b08      	ldr	r3, [pc, #32]	; (800b6f4 <xTaskGetSchedulerState+0x38>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d102      	bne.n	800b6de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b6d8:	2302      	movs	r3, #2
 800b6da:	607b      	str	r3, [r7, #4]
 800b6dc:	e001      	b.n	800b6e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b6e2:	687b      	ldr	r3, [r7, #4]
	}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	370c      	adds	r7, #12
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ee:	4770      	bx	lr
 800b6f0:	20000b88 	.word	0x20000b88
 800b6f4:	20000ba4 	.word	0x20000ba4

0800b6f8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b084      	sub	sp, #16
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b704:	2300      	movs	r3, #0
 800b706:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d06e      	beq.n	800b7ec <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b712:	4b39      	ldr	r3, [pc, #228]	; (800b7f8 <xTaskPriorityInherit+0x100>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b718:	429a      	cmp	r2, r3
 800b71a:	d25e      	bcs.n	800b7da <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	699b      	ldr	r3, [r3, #24]
 800b720:	2b00      	cmp	r3, #0
 800b722:	db06      	blt.n	800b732 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b724:	4b34      	ldr	r3, [pc, #208]	; (800b7f8 <xTaskPriorityInherit+0x100>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b72a:	f1c3 0207 	rsb	r2, r3, #7
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	6959      	ldr	r1, [r3, #20]
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b73a:	4613      	mov	r3, r2
 800b73c:	009b      	lsls	r3, r3, #2
 800b73e:	4413      	add	r3, r2
 800b740:	009b      	lsls	r3, r3, #2
 800b742:	4a2e      	ldr	r2, [pc, #184]	; (800b7fc <xTaskPriorityInherit+0x104>)
 800b744:	4413      	add	r3, r2
 800b746:	4299      	cmp	r1, r3
 800b748:	d101      	bne.n	800b74e <xTaskPriorityInherit+0x56>
 800b74a:	2301      	movs	r3, #1
 800b74c:	e000      	b.n	800b750 <xTaskPriorityInherit+0x58>
 800b74e:	2300      	movs	r3, #0
 800b750:	2b00      	cmp	r3, #0
 800b752:	d03a      	beq.n	800b7ca <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	3304      	adds	r3, #4
 800b758:	4618      	mov	r0, r3
 800b75a:	f7fe fbc6 	bl	8009eea <uxListRemove>
 800b75e:	4603      	mov	r3, r0
 800b760:	2b00      	cmp	r3, #0
 800b762:	d115      	bne.n	800b790 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b768:	4924      	ldr	r1, [pc, #144]	; (800b7fc <xTaskPriorityInherit+0x104>)
 800b76a:	4613      	mov	r3, r2
 800b76c:	009b      	lsls	r3, r3, #2
 800b76e:	4413      	add	r3, r2
 800b770:	009b      	lsls	r3, r3, #2
 800b772:	440b      	add	r3, r1
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d10a      	bne.n	800b790 <xTaskPriorityInherit+0x98>
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b77e:	2201      	movs	r2, #1
 800b780:	fa02 f303 	lsl.w	r3, r2, r3
 800b784:	43da      	mvns	r2, r3
 800b786:	4b1e      	ldr	r3, [pc, #120]	; (800b800 <xTaskPriorityInherit+0x108>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	4013      	ands	r3, r2
 800b78c:	4a1c      	ldr	r2, [pc, #112]	; (800b800 <xTaskPriorityInherit+0x108>)
 800b78e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b790:	4b19      	ldr	r3, [pc, #100]	; (800b7f8 <xTaskPriorityInherit+0x100>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b79e:	2201      	movs	r2, #1
 800b7a0:	409a      	lsls	r2, r3
 800b7a2:	4b17      	ldr	r3, [pc, #92]	; (800b800 <xTaskPriorityInherit+0x108>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4313      	orrs	r3, r2
 800b7a8:	4a15      	ldr	r2, [pc, #84]	; (800b800 <xTaskPriorityInherit+0x108>)
 800b7aa:	6013      	str	r3, [r2, #0]
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7b0:	4613      	mov	r3, r2
 800b7b2:	009b      	lsls	r3, r3, #2
 800b7b4:	4413      	add	r3, r2
 800b7b6:	009b      	lsls	r3, r3, #2
 800b7b8:	4a10      	ldr	r2, [pc, #64]	; (800b7fc <xTaskPriorityInherit+0x104>)
 800b7ba:	441a      	add	r2, r3
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	3304      	adds	r3, #4
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	4610      	mov	r0, r2
 800b7c4:	f7fe fb34 	bl	8009e30 <vListInsertEnd>
 800b7c8:	e004      	b.n	800b7d4 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b7ca:	4b0b      	ldr	r3, [pc, #44]	; (800b7f8 <xTaskPriorityInherit+0x100>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	60fb      	str	r3, [r7, #12]
 800b7d8:	e008      	b.n	800b7ec <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b7de:	4b06      	ldr	r3, [pc, #24]	; (800b7f8 <xTaskPriorityInherit+0x100>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d201      	bcs.n	800b7ec <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
	}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3710      	adds	r7, #16
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	20000a7c 	.word	0x20000a7c
 800b7fc:	20000a80 	.word	0x20000a80
 800b800:	20000b84 	.word	0x20000b84

0800b804 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b804:	b580      	push	{r7, lr}
 800b806:	b086      	sub	sp, #24
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b810:	2300      	movs	r3, #0
 800b812:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d06e      	beq.n	800b8f8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b81a:	4b3a      	ldr	r3, [pc, #232]	; (800b904 <xTaskPriorityDisinherit+0x100>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	693a      	ldr	r2, [r7, #16]
 800b820:	429a      	cmp	r2, r3
 800b822:	d00a      	beq.n	800b83a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b828:	f383 8811 	msr	BASEPRI, r3
 800b82c:	f3bf 8f6f 	isb	sy
 800b830:	f3bf 8f4f 	dsb	sy
 800b834:	60fb      	str	r3, [r7, #12]
}
 800b836:	bf00      	nop
 800b838:	e7fe      	b.n	800b838 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d10a      	bne.n	800b858 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b846:	f383 8811 	msr	BASEPRI, r3
 800b84a:	f3bf 8f6f 	isb	sy
 800b84e:	f3bf 8f4f 	dsb	sy
 800b852:	60bb      	str	r3, [r7, #8]
}
 800b854:	bf00      	nop
 800b856:	e7fe      	b.n	800b856 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b85c:	1e5a      	subs	r2, r3, #1
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b86a:	429a      	cmp	r2, r3
 800b86c:	d044      	beq.n	800b8f8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b872:	2b00      	cmp	r3, #0
 800b874:	d140      	bne.n	800b8f8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	3304      	adds	r3, #4
 800b87a:	4618      	mov	r0, r3
 800b87c:	f7fe fb35 	bl	8009eea <uxListRemove>
 800b880:	4603      	mov	r3, r0
 800b882:	2b00      	cmp	r3, #0
 800b884:	d115      	bne.n	800b8b2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b88a:	491f      	ldr	r1, [pc, #124]	; (800b908 <xTaskPriorityDisinherit+0x104>)
 800b88c:	4613      	mov	r3, r2
 800b88e:	009b      	lsls	r3, r3, #2
 800b890:	4413      	add	r3, r2
 800b892:	009b      	lsls	r3, r3, #2
 800b894:	440b      	add	r3, r1
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d10a      	bne.n	800b8b2 <xTaskPriorityDisinherit+0xae>
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8a0:	2201      	movs	r2, #1
 800b8a2:	fa02 f303 	lsl.w	r3, r2, r3
 800b8a6:	43da      	mvns	r2, r3
 800b8a8:	4b18      	ldr	r3, [pc, #96]	; (800b90c <xTaskPriorityDisinherit+0x108>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	4013      	ands	r3, r2
 800b8ae:	4a17      	ldr	r2, [pc, #92]	; (800b90c <xTaskPriorityDisinherit+0x108>)
 800b8b0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8be:	f1c3 0207 	rsb	r2, r3, #7
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	409a      	lsls	r2, r3
 800b8ce:	4b0f      	ldr	r3, [pc, #60]	; (800b90c <xTaskPriorityDisinherit+0x108>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	4313      	orrs	r3, r2
 800b8d4:	4a0d      	ldr	r2, [pc, #52]	; (800b90c <xTaskPriorityDisinherit+0x108>)
 800b8d6:	6013      	str	r3, [r2, #0]
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8dc:	4613      	mov	r3, r2
 800b8de:	009b      	lsls	r3, r3, #2
 800b8e0:	4413      	add	r3, r2
 800b8e2:	009b      	lsls	r3, r3, #2
 800b8e4:	4a08      	ldr	r2, [pc, #32]	; (800b908 <xTaskPriorityDisinherit+0x104>)
 800b8e6:	441a      	add	r2, r3
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	3304      	adds	r3, #4
 800b8ec:	4619      	mov	r1, r3
 800b8ee:	4610      	mov	r0, r2
 800b8f0:	f7fe fa9e 	bl	8009e30 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b8f8:	697b      	ldr	r3, [r7, #20]
	}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3718      	adds	r7, #24
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
 800b902:	bf00      	nop
 800b904:	20000a7c 	.word	0x20000a7c
 800b908:	20000a80 	.word	0x20000a80
 800b90c:	20000b84 	.word	0x20000b84

0800b910 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b910:	b580      	push	{r7, lr}
 800b912:	b088      	sub	sp, #32
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b91e:	2301      	movs	r3, #1
 800b920:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2b00      	cmp	r3, #0
 800b926:	f000 8088 	beq.w	800ba3a <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b92a:	69bb      	ldr	r3, [r7, #24]
 800b92c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d10a      	bne.n	800b948 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800b932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b936:	f383 8811 	msr	BASEPRI, r3
 800b93a:	f3bf 8f6f 	isb	sy
 800b93e:	f3bf 8f4f 	dsb	sy
 800b942:	60fb      	str	r3, [r7, #12]
}
 800b944:	bf00      	nop
 800b946:	e7fe      	b.n	800b946 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b948:	69bb      	ldr	r3, [r7, #24]
 800b94a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b94c:	683a      	ldr	r2, [r7, #0]
 800b94e:	429a      	cmp	r2, r3
 800b950:	d902      	bls.n	800b958 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	61fb      	str	r3, [r7, #28]
 800b956:	e002      	b.n	800b95e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b958:	69bb      	ldr	r3, [r7, #24]
 800b95a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b95c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b95e:	69bb      	ldr	r3, [r7, #24]
 800b960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b962:	69fa      	ldr	r2, [r7, #28]
 800b964:	429a      	cmp	r2, r3
 800b966:	d068      	beq.n	800ba3a <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b968:	69bb      	ldr	r3, [r7, #24]
 800b96a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b96c:	697a      	ldr	r2, [r7, #20]
 800b96e:	429a      	cmp	r2, r3
 800b970:	d163      	bne.n	800ba3a <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b972:	4b34      	ldr	r3, [pc, #208]	; (800ba44 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	69ba      	ldr	r2, [r7, #24]
 800b978:	429a      	cmp	r2, r3
 800b97a:	d10a      	bne.n	800b992 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 800b97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b980:	f383 8811 	msr	BASEPRI, r3
 800b984:	f3bf 8f6f 	isb	sy
 800b988:	f3bf 8f4f 	dsb	sy
 800b98c:	60bb      	str	r3, [r7, #8]
}
 800b98e:	bf00      	nop
 800b990:	e7fe      	b.n	800b990 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b992:	69bb      	ldr	r3, [r7, #24]
 800b994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b996:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b998:	69bb      	ldr	r3, [r7, #24]
 800b99a:	69fa      	ldr	r2, [r7, #28]
 800b99c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b99e:	69bb      	ldr	r3, [r7, #24]
 800b9a0:	699b      	ldr	r3, [r3, #24]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	db04      	blt.n	800b9b0 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9a6:	69fb      	ldr	r3, [r7, #28]
 800b9a8:	f1c3 0207 	rsb	r2, r3, #7
 800b9ac:	69bb      	ldr	r3, [r7, #24]
 800b9ae:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b9b0:	69bb      	ldr	r3, [r7, #24]
 800b9b2:	6959      	ldr	r1, [r3, #20]
 800b9b4:	693a      	ldr	r2, [r7, #16]
 800b9b6:	4613      	mov	r3, r2
 800b9b8:	009b      	lsls	r3, r3, #2
 800b9ba:	4413      	add	r3, r2
 800b9bc:	009b      	lsls	r3, r3, #2
 800b9be:	4a22      	ldr	r2, [pc, #136]	; (800ba48 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800b9c0:	4413      	add	r3, r2
 800b9c2:	4299      	cmp	r1, r3
 800b9c4:	d101      	bne.n	800b9ca <vTaskPriorityDisinheritAfterTimeout+0xba>
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	e000      	b.n	800b9cc <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d034      	beq.n	800ba3a <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b9d0:	69bb      	ldr	r3, [r7, #24]
 800b9d2:	3304      	adds	r3, #4
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7fe fa88 	bl	8009eea <uxListRemove>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d115      	bne.n	800ba0c <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b9e0:	69bb      	ldr	r3, [r7, #24]
 800b9e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9e4:	4918      	ldr	r1, [pc, #96]	; (800ba48 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800b9e6:	4613      	mov	r3, r2
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	4413      	add	r3, r2
 800b9ec:	009b      	lsls	r3, r3, #2
 800b9ee:	440b      	add	r3, r1
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d10a      	bne.n	800ba0c <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800b9f6:	69bb      	ldr	r3, [r7, #24]
 800b9f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	fa02 f303 	lsl.w	r3, r2, r3
 800ba00:	43da      	mvns	r2, r3
 800ba02:	4b12      	ldr	r3, [pc, #72]	; (800ba4c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	4013      	ands	r3, r2
 800ba08:	4a10      	ldr	r2, [pc, #64]	; (800ba4c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800ba0a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ba0c:	69bb      	ldr	r3, [r7, #24]
 800ba0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba10:	2201      	movs	r2, #1
 800ba12:	409a      	lsls	r2, r3
 800ba14:	4b0d      	ldr	r3, [pc, #52]	; (800ba4c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	4a0c      	ldr	r2, [pc, #48]	; (800ba4c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800ba1c:	6013      	str	r3, [r2, #0]
 800ba1e:	69bb      	ldr	r3, [r7, #24]
 800ba20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba22:	4613      	mov	r3, r2
 800ba24:	009b      	lsls	r3, r3, #2
 800ba26:	4413      	add	r3, r2
 800ba28:	009b      	lsls	r3, r3, #2
 800ba2a:	4a07      	ldr	r2, [pc, #28]	; (800ba48 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ba2c:	441a      	add	r2, r3
 800ba2e:	69bb      	ldr	r3, [r7, #24]
 800ba30:	3304      	adds	r3, #4
 800ba32:	4619      	mov	r1, r3
 800ba34:	4610      	mov	r0, r2
 800ba36:	f7fe f9fb 	bl	8009e30 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ba3a:	bf00      	nop
 800ba3c:	3720      	adds	r7, #32
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}
 800ba42:	bf00      	nop
 800ba44:	20000a7c 	.word	0x20000a7c
 800ba48:	20000a80 	.word	0x20000a80
 800ba4c:	20000b84 	.word	0x20000b84

0800ba50 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800ba50:	b480      	push	{r7}
 800ba52:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ba54:	4b07      	ldr	r3, [pc, #28]	; (800ba74 <pvTaskIncrementMutexHeldCount+0x24>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d004      	beq.n	800ba66 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ba5c:	4b05      	ldr	r3, [pc, #20]	; (800ba74 <pvTaskIncrementMutexHeldCount+0x24>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ba62:	3201      	adds	r2, #1
 800ba64:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800ba66:	4b03      	ldr	r3, [pc, #12]	; (800ba74 <pvTaskIncrementMutexHeldCount+0x24>)
 800ba68:	681b      	ldr	r3, [r3, #0]
	}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba72:	4770      	bx	lr
 800ba74:	20000a7c 	.word	0x20000a7c

0800ba78 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b084      	sub	sp, #16
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
 800ba80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ba82:	4b29      	ldr	r3, [pc, #164]	; (800bb28 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba88:	4b28      	ldr	r3, [pc, #160]	; (800bb2c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	3304      	adds	r3, #4
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f7fe fa2b 	bl	8009eea <uxListRemove>
 800ba94:	4603      	mov	r3, r0
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d10b      	bne.n	800bab2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800ba9a:	4b24      	ldr	r3, [pc, #144]	; (800bb2c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baa0:	2201      	movs	r2, #1
 800baa2:	fa02 f303 	lsl.w	r3, r2, r3
 800baa6:	43da      	mvns	r2, r3
 800baa8:	4b21      	ldr	r3, [pc, #132]	; (800bb30 <prvAddCurrentTaskToDelayedList+0xb8>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	4013      	ands	r3, r2
 800baae:	4a20      	ldr	r2, [pc, #128]	; (800bb30 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bab0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bab8:	d10a      	bne.n	800bad0 <prvAddCurrentTaskToDelayedList+0x58>
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d007      	beq.n	800bad0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bac0:	4b1a      	ldr	r3, [pc, #104]	; (800bb2c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	3304      	adds	r3, #4
 800bac6:	4619      	mov	r1, r3
 800bac8:	481a      	ldr	r0, [pc, #104]	; (800bb34 <prvAddCurrentTaskToDelayedList+0xbc>)
 800baca:	f7fe f9b1 	bl	8009e30 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bace:	e026      	b.n	800bb1e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bad0:	68fa      	ldr	r2, [r7, #12]
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	4413      	add	r3, r2
 800bad6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bad8:	4b14      	ldr	r3, [pc, #80]	; (800bb2c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	68ba      	ldr	r2, [r7, #8]
 800bade:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bae0:	68ba      	ldr	r2, [r7, #8]
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d209      	bcs.n	800bafc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bae8:	4b13      	ldr	r3, [pc, #76]	; (800bb38 <prvAddCurrentTaskToDelayedList+0xc0>)
 800baea:	681a      	ldr	r2, [r3, #0]
 800baec:	4b0f      	ldr	r3, [pc, #60]	; (800bb2c <prvAddCurrentTaskToDelayedList+0xb4>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	3304      	adds	r3, #4
 800baf2:	4619      	mov	r1, r3
 800baf4:	4610      	mov	r0, r2
 800baf6:	f7fe f9bf 	bl	8009e78 <vListInsert>
}
 800bafa:	e010      	b.n	800bb1e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bafc:	4b0f      	ldr	r3, [pc, #60]	; (800bb3c <prvAddCurrentTaskToDelayedList+0xc4>)
 800bafe:	681a      	ldr	r2, [r3, #0]
 800bb00:	4b0a      	ldr	r3, [pc, #40]	; (800bb2c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	3304      	adds	r3, #4
 800bb06:	4619      	mov	r1, r3
 800bb08:	4610      	mov	r0, r2
 800bb0a:	f7fe f9b5 	bl	8009e78 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bb0e:	4b0c      	ldr	r3, [pc, #48]	; (800bb40 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	68ba      	ldr	r2, [r7, #8]
 800bb14:	429a      	cmp	r2, r3
 800bb16:	d202      	bcs.n	800bb1e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bb18:	4a09      	ldr	r2, [pc, #36]	; (800bb40 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	6013      	str	r3, [r2, #0]
}
 800bb1e:	bf00      	nop
 800bb20:	3710      	adds	r7, #16
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}
 800bb26:	bf00      	nop
 800bb28:	20000b80 	.word	0x20000b80
 800bb2c:	20000a7c 	.word	0x20000a7c
 800bb30:	20000b84 	.word	0x20000b84
 800bb34:	20000b68 	.word	0x20000b68
 800bb38:	20000b38 	.word	0x20000b38
 800bb3c:	20000b34 	.word	0x20000b34
 800bb40:	20000b9c 	.word	0x20000b9c

0800bb44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bb44:	b480      	push	{r7}
 800bb46:	b085      	sub	sp, #20
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	60f8      	str	r0, [r7, #12]
 800bb4c:	60b9      	str	r1, [r7, #8]
 800bb4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	3b04      	subs	r3, #4
 800bb54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bb5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	3b04      	subs	r3, #4
 800bb62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	f023 0201 	bic.w	r2, r3, #1
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	3b04      	subs	r3, #4
 800bb72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bb74:	4a0c      	ldr	r2, [pc, #48]	; (800bba8 <pxPortInitialiseStack+0x64>)
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	3b14      	subs	r3, #20
 800bb7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bb80:	687a      	ldr	r2, [r7, #4]
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	3b04      	subs	r3, #4
 800bb8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f06f 0202 	mvn.w	r2, #2
 800bb92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	3b20      	subs	r3, #32
 800bb98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3714      	adds	r7, #20
 800bba0:	46bd      	mov	sp, r7
 800bba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba6:	4770      	bx	lr
 800bba8:	0800bbad 	.word	0x0800bbad

0800bbac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bbac:	b480      	push	{r7}
 800bbae:	b085      	sub	sp, #20
 800bbb0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bbb6:	4b12      	ldr	r3, [pc, #72]	; (800bc00 <prvTaskExitError+0x54>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbbe:	d00a      	beq.n	800bbd6 <prvTaskExitError+0x2a>
	__asm volatile
 800bbc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc4:	f383 8811 	msr	BASEPRI, r3
 800bbc8:	f3bf 8f6f 	isb	sy
 800bbcc:	f3bf 8f4f 	dsb	sy
 800bbd0:	60fb      	str	r3, [r7, #12]
}
 800bbd2:	bf00      	nop
 800bbd4:	e7fe      	b.n	800bbd4 <prvTaskExitError+0x28>
	__asm volatile
 800bbd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbda:	f383 8811 	msr	BASEPRI, r3
 800bbde:	f3bf 8f6f 	isb	sy
 800bbe2:	f3bf 8f4f 	dsb	sy
 800bbe6:	60bb      	str	r3, [r7, #8]
}
 800bbe8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bbea:	bf00      	nop
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d0fc      	beq.n	800bbec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bbf2:	bf00      	nop
 800bbf4:	bf00      	nop
 800bbf6:	3714      	adds	r7, #20
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr
 800bc00:	20000024 	.word	0x20000024
	...

0800bc10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bc10:	4b07      	ldr	r3, [pc, #28]	; (800bc30 <pxCurrentTCBConst2>)
 800bc12:	6819      	ldr	r1, [r3, #0]
 800bc14:	6808      	ldr	r0, [r1, #0]
 800bc16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc1a:	f380 8809 	msr	PSP, r0
 800bc1e:	f3bf 8f6f 	isb	sy
 800bc22:	f04f 0000 	mov.w	r0, #0
 800bc26:	f380 8811 	msr	BASEPRI, r0
 800bc2a:	4770      	bx	lr
 800bc2c:	f3af 8000 	nop.w

0800bc30 <pxCurrentTCBConst2>:
 800bc30:	20000a7c 	.word	0x20000a7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bc34:	bf00      	nop
 800bc36:	bf00      	nop

0800bc38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bc38:	4808      	ldr	r0, [pc, #32]	; (800bc5c <prvPortStartFirstTask+0x24>)
 800bc3a:	6800      	ldr	r0, [r0, #0]
 800bc3c:	6800      	ldr	r0, [r0, #0]
 800bc3e:	f380 8808 	msr	MSP, r0
 800bc42:	f04f 0000 	mov.w	r0, #0
 800bc46:	f380 8814 	msr	CONTROL, r0
 800bc4a:	b662      	cpsie	i
 800bc4c:	b661      	cpsie	f
 800bc4e:	f3bf 8f4f 	dsb	sy
 800bc52:	f3bf 8f6f 	isb	sy
 800bc56:	df00      	svc	0
 800bc58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bc5a:	bf00      	nop
 800bc5c:	e000ed08 	.word	0xe000ed08

0800bc60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b086      	sub	sp, #24
 800bc64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bc66:	4b46      	ldr	r3, [pc, #280]	; (800bd80 <xPortStartScheduler+0x120>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	4a46      	ldr	r2, [pc, #280]	; (800bd84 <xPortStartScheduler+0x124>)
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	d10a      	bne.n	800bc86 <xPortStartScheduler+0x26>
	__asm volatile
 800bc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc74:	f383 8811 	msr	BASEPRI, r3
 800bc78:	f3bf 8f6f 	isb	sy
 800bc7c:	f3bf 8f4f 	dsb	sy
 800bc80:	613b      	str	r3, [r7, #16]
}
 800bc82:	bf00      	nop
 800bc84:	e7fe      	b.n	800bc84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bc86:	4b3e      	ldr	r3, [pc, #248]	; (800bd80 <xPortStartScheduler+0x120>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	4a3f      	ldr	r2, [pc, #252]	; (800bd88 <xPortStartScheduler+0x128>)
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	d10a      	bne.n	800bca6 <xPortStartScheduler+0x46>
	__asm volatile
 800bc90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc94:	f383 8811 	msr	BASEPRI, r3
 800bc98:	f3bf 8f6f 	isb	sy
 800bc9c:	f3bf 8f4f 	dsb	sy
 800bca0:	60fb      	str	r3, [r7, #12]
}
 800bca2:	bf00      	nop
 800bca4:	e7fe      	b.n	800bca4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bca6:	4b39      	ldr	r3, [pc, #228]	; (800bd8c <xPortStartScheduler+0x12c>)
 800bca8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	781b      	ldrb	r3, [r3, #0]
 800bcae:	b2db      	uxtb	r3, r3
 800bcb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	22ff      	movs	r2, #255	; 0xff
 800bcb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	781b      	ldrb	r3, [r3, #0]
 800bcbc:	b2db      	uxtb	r3, r3
 800bcbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bcc0:	78fb      	ldrb	r3, [r7, #3]
 800bcc2:	b2db      	uxtb	r3, r3
 800bcc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bcc8:	b2da      	uxtb	r2, r3
 800bcca:	4b31      	ldr	r3, [pc, #196]	; (800bd90 <xPortStartScheduler+0x130>)
 800bccc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bcce:	4b31      	ldr	r3, [pc, #196]	; (800bd94 <xPortStartScheduler+0x134>)
 800bcd0:	2207      	movs	r2, #7
 800bcd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bcd4:	e009      	b.n	800bcea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bcd6:	4b2f      	ldr	r3, [pc, #188]	; (800bd94 <xPortStartScheduler+0x134>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	3b01      	subs	r3, #1
 800bcdc:	4a2d      	ldr	r2, [pc, #180]	; (800bd94 <xPortStartScheduler+0x134>)
 800bcde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bce0:	78fb      	ldrb	r3, [r7, #3]
 800bce2:	b2db      	uxtb	r3, r3
 800bce4:	005b      	lsls	r3, r3, #1
 800bce6:	b2db      	uxtb	r3, r3
 800bce8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bcea:	78fb      	ldrb	r3, [r7, #3]
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcf2:	2b80      	cmp	r3, #128	; 0x80
 800bcf4:	d0ef      	beq.n	800bcd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bcf6:	4b27      	ldr	r3, [pc, #156]	; (800bd94 <xPortStartScheduler+0x134>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f1c3 0307 	rsb	r3, r3, #7
 800bcfe:	2b04      	cmp	r3, #4
 800bd00:	d00a      	beq.n	800bd18 <xPortStartScheduler+0xb8>
	__asm volatile
 800bd02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd06:	f383 8811 	msr	BASEPRI, r3
 800bd0a:	f3bf 8f6f 	isb	sy
 800bd0e:	f3bf 8f4f 	dsb	sy
 800bd12:	60bb      	str	r3, [r7, #8]
}
 800bd14:	bf00      	nop
 800bd16:	e7fe      	b.n	800bd16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bd18:	4b1e      	ldr	r3, [pc, #120]	; (800bd94 <xPortStartScheduler+0x134>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	021b      	lsls	r3, r3, #8
 800bd1e:	4a1d      	ldr	r2, [pc, #116]	; (800bd94 <xPortStartScheduler+0x134>)
 800bd20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bd22:	4b1c      	ldr	r3, [pc, #112]	; (800bd94 <xPortStartScheduler+0x134>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bd2a:	4a1a      	ldr	r2, [pc, #104]	; (800bd94 <xPortStartScheduler+0x134>)
 800bd2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	b2da      	uxtb	r2, r3
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bd36:	4b18      	ldr	r3, [pc, #96]	; (800bd98 <xPortStartScheduler+0x138>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	4a17      	ldr	r2, [pc, #92]	; (800bd98 <xPortStartScheduler+0x138>)
 800bd3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bd40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bd42:	4b15      	ldr	r3, [pc, #84]	; (800bd98 <xPortStartScheduler+0x138>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	4a14      	ldr	r2, [pc, #80]	; (800bd98 <xPortStartScheduler+0x138>)
 800bd48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bd4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bd4e:	f000 f8dd 	bl	800bf0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bd52:	4b12      	ldr	r3, [pc, #72]	; (800bd9c <xPortStartScheduler+0x13c>)
 800bd54:	2200      	movs	r2, #0
 800bd56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bd58:	f000 f8fc 	bl	800bf54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bd5c:	4b10      	ldr	r3, [pc, #64]	; (800bda0 <xPortStartScheduler+0x140>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	4a0f      	ldr	r2, [pc, #60]	; (800bda0 <xPortStartScheduler+0x140>)
 800bd62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bd66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bd68:	f7ff ff66 	bl	800bc38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bd6c:	f7ff fa5a 	bl	800b224 <vTaskSwitchContext>
	prvTaskExitError();
 800bd70:	f7ff ff1c 	bl	800bbac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bd74:	2300      	movs	r3, #0
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3718      	adds	r7, #24
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}
 800bd7e:	bf00      	nop
 800bd80:	e000ed00 	.word	0xe000ed00
 800bd84:	410fc271 	.word	0x410fc271
 800bd88:	410fc270 	.word	0x410fc270
 800bd8c:	e000e400 	.word	0xe000e400
 800bd90:	20000ba8 	.word	0x20000ba8
 800bd94:	20000bac 	.word	0x20000bac
 800bd98:	e000ed20 	.word	0xe000ed20
 800bd9c:	20000024 	.word	0x20000024
 800bda0:	e000ef34 	.word	0xe000ef34

0800bda4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bda4:	b480      	push	{r7}
 800bda6:	b083      	sub	sp, #12
 800bda8:	af00      	add	r7, sp, #0
	__asm volatile
 800bdaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdae:	f383 8811 	msr	BASEPRI, r3
 800bdb2:	f3bf 8f6f 	isb	sy
 800bdb6:	f3bf 8f4f 	dsb	sy
 800bdba:	607b      	str	r3, [r7, #4]
}
 800bdbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bdbe:	4b0f      	ldr	r3, [pc, #60]	; (800bdfc <vPortEnterCritical+0x58>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	3301      	adds	r3, #1
 800bdc4:	4a0d      	ldr	r2, [pc, #52]	; (800bdfc <vPortEnterCritical+0x58>)
 800bdc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bdc8:	4b0c      	ldr	r3, [pc, #48]	; (800bdfc <vPortEnterCritical+0x58>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	2b01      	cmp	r3, #1
 800bdce:	d10f      	bne.n	800bdf0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bdd0:	4b0b      	ldr	r3, [pc, #44]	; (800be00 <vPortEnterCritical+0x5c>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	b2db      	uxtb	r3, r3
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d00a      	beq.n	800bdf0 <vPortEnterCritical+0x4c>
	__asm volatile
 800bdda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdde:	f383 8811 	msr	BASEPRI, r3
 800bde2:	f3bf 8f6f 	isb	sy
 800bde6:	f3bf 8f4f 	dsb	sy
 800bdea:	603b      	str	r3, [r7, #0]
}
 800bdec:	bf00      	nop
 800bdee:	e7fe      	b.n	800bdee <vPortEnterCritical+0x4a>
	}
}
 800bdf0:	bf00      	nop
 800bdf2:	370c      	adds	r7, #12
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr
 800bdfc:	20000024 	.word	0x20000024
 800be00:	e000ed04 	.word	0xe000ed04

0800be04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800be04:	b480      	push	{r7}
 800be06:	b083      	sub	sp, #12
 800be08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800be0a:	4b12      	ldr	r3, [pc, #72]	; (800be54 <vPortExitCritical+0x50>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d10a      	bne.n	800be28 <vPortExitCritical+0x24>
	__asm volatile
 800be12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be16:	f383 8811 	msr	BASEPRI, r3
 800be1a:	f3bf 8f6f 	isb	sy
 800be1e:	f3bf 8f4f 	dsb	sy
 800be22:	607b      	str	r3, [r7, #4]
}
 800be24:	bf00      	nop
 800be26:	e7fe      	b.n	800be26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800be28:	4b0a      	ldr	r3, [pc, #40]	; (800be54 <vPortExitCritical+0x50>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	3b01      	subs	r3, #1
 800be2e:	4a09      	ldr	r2, [pc, #36]	; (800be54 <vPortExitCritical+0x50>)
 800be30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800be32:	4b08      	ldr	r3, [pc, #32]	; (800be54 <vPortExitCritical+0x50>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d105      	bne.n	800be46 <vPortExitCritical+0x42>
 800be3a:	2300      	movs	r3, #0
 800be3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	f383 8811 	msr	BASEPRI, r3
}
 800be44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800be46:	bf00      	nop
 800be48:	370c      	adds	r7, #12
 800be4a:	46bd      	mov	sp, r7
 800be4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be50:	4770      	bx	lr
 800be52:	bf00      	nop
 800be54:	20000024 	.word	0x20000024
	...

0800be60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800be60:	f3ef 8009 	mrs	r0, PSP
 800be64:	f3bf 8f6f 	isb	sy
 800be68:	4b15      	ldr	r3, [pc, #84]	; (800bec0 <pxCurrentTCBConst>)
 800be6a:	681a      	ldr	r2, [r3, #0]
 800be6c:	f01e 0f10 	tst.w	lr, #16
 800be70:	bf08      	it	eq
 800be72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800be76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be7a:	6010      	str	r0, [r2, #0]
 800be7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800be80:	f04f 0050 	mov.w	r0, #80	; 0x50
 800be84:	f380 8811 	msr	BASEPRI, r0
 800be88:	f3bf 8f4f 	dsb	sy
 800be8c:	f3bf 8f6f 	isb	sy
 800be90:	f7ff f9c8 	bl	800b224 <vTaskSwitchContext>
 800be94:	f04f 0000 	mov.w	r0, #0
 800be98:	f380 8811 	msr	BASEPRI, r0
 800be9c:	bc09      	pop	{r0, r3}
 800be9e:	6819      	ldr	r1, [r3, #0]
 800bea0:	6808      	ldr	r0, [r1, #0]
 800bea2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bea6:	f01e 0f10 	tst.w	lr, #16
 800beaa:	bf08      	it	eq
 800beac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800beb0:	f380 8809 	msr	PSP, r0
 800beb4:	f3bf 8f6f 	isb	sy
 800beb8:	4770      	bx	lr
 800beba:	bf00      	nop
 800bebc:	f3af 8000 	nop.w

0800bec0 <pxCurrentTCBConst>:
 800bec0:	20000a7c 	.word	0x20000a7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bec4:	bf00      	nop
 800bec6:	bf00      	nop

0800bec8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b082      	sub	sp, #8
 800becc:	af00      	add	r7, sp, #0
	__asm volatile
 800bece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed2:	f383 8811 	msr	BASEPRI, r3
 800bed6:	f3bf 8f6f 	isb	sy
 800beda:	f3bf 8f4f 	dsb	sy
 800bede:	607b      	str	r3, [r7, #4]
}
 800bee0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bee2:	f7ff f8e1 	bl	800b0a8 <xTaskIncrementTick>
 800bee6:	4603      	mov	r3, r0
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d003      	beq.n	800bef4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800beec:	4b06      	ldr	r3, [pc, #24]	; (800bf08 <SysTick_Handler+0x40>)
 800beee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bef2:	601a      	str	r2, [r3, #0]
 800bef4:	2300      	movs	r3, #0
 800bef6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	f383 8811 	msr	BASEPRI, r3
}
 800befe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bf00:	bf00      	nop
 800bf02:	3708      	adds	r7, #8
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}
 800bf08:	e000ed04 	.word	0xe000ed04

0800bf0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bf10:	4b0b      	ldr	r3, [pc, #44]	; (800bf40 <vPortSetupTimerInterrupt+0x34>)
 800bf12:	2200      	movs	r2, #0
 800bf14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bf16:	4b0b      	ldr	r3, [pc, #44]	; (800bf44 <vPortSetupTimerInterrupt+0x38>)
 800bf18:	2200      	movs	r2, #0
 800bf1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bf1c:	4b0a      	ldr	r3, [pc, #40]	; (800bf48 <vPortSetupTimerInterrupt+0x3c>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	4a0a      	ldr	r2, [pc, #40]	; (800bf4c <vPortSetupTimerInterrupt+0x40>)
 800bf22:	fba2 2303 	umull	r2, r3, r2, r3
 800bf26:	099b      	lsrs	r3, r3, #6
 800bf28:	4a09      	ldr	r2, [pc, #36]	; (800bf50 <vPortSetupTimerInterrupt+0x44>)
 800bf2a:	3b01      	subs	r3, #1
 800bf2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bf2e:	4b04      	ldr	r3, [pc, #16]	; (800bf40 <vPortSetupTimerInterrupt+0x34>)
 800bf30:	2207      	movs	r2, #7
 800bf32:	601a      	str	r2, [r3, #0]
}
 800bf34:	bf00      	nop
 800bf36:	46bd      	mov	sp, r7
 800bf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3c:	4770      	bx	lr
 800bf3e:	bf00      	nop
 800bf40:	e000e010 	.word	0xe000e010
 800bf44:	e000e018 	.word	0xe000e018
 800bf48:	20000004 	.word	0x20000004
 800bf4c:	10624dd3 	.word	0x10624dd3
 800bf50:	e000e014 	.word	0xe000e014

0800bf54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bf54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bf64 <vPortEnableVFP+0x10>
 800bf58:	6801      	ldr	r1, [r0, #0]
 800bf5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bf5e:	6001      	str	r1, [r0, #0]
 800bf60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bf62:	bf00      	nop
 800bf64:	e000ed88 	.word	0xe000ed88

0800bf68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bf68:	b480      	push	{r7}
 800bf6a:	b085      	sub	sp, #20
 800bf6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bf6e:	f3ef 8305 	mrs	r3, IPSR
 800bf72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	2b0f      	cmp	r3, #15
 800bf78:	d914      	bls.n	800bfa4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bf7a:	4a17      	ldr	r2, [pc, #92]	; (800bfd8 <vPortValidateInterruptPriority+0x70>)
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	4413      	add	r3, r2
 800bf80:	781b      	ldrb	r3, [r3, #0]
 800bf82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bf84:	4b15      	ldr	r3, [pc, #84]	; (800bfdc <vPortValidateInterruptPriority+0x74>)
 800bf86:	781b      	ldrb	r3, [r3, #0]
 800bf88:	7afa      	ldrb	r2, [r7, #11]
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	d20a      	bcs.n	800bfa4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bf8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf92:	f383 8811 	msr	BASEPRI, r3
 800bf96:	f3bf 8f6f 	isb	sy
 800bf9a:	f3bf 8f4f 	dsb	sy
 800bf9e:	607b      	str	r3, [r7, #4]
}
 800bfa0:	bf00      	nop
 800bfa2:	e7fe      	b.n	800bfa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bfa4:	4b0e      	ldr	r3, [pc, #56]	; (800bfe0 <vPortValidateInterruptPriority+0x78>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bfac:	4b0d      	ldr	r3, [pc, #52]	; (800bfe4 <vPortValidateInterruptPriority+0x7c>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d90a      	bls.n	800bfca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bfb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb8:	f383 8811 	msr	BASEPRI, r3
 800bfbc:	f3bf 8f6f 	isb	sy
 800bfc0:	f3bf 8f4f 	dsb	sy
 800bfc4:	603b      	str	r3, [r7, #0]
}
 800bfc6:	bf00      	nop
 800bfc8:	e7fe      	b.n	800bfc8 <vPortValidateInterruptPriority+0x60>
	}
 800bfca:	bf00      	nop
 800bfcc:	3714      	adds	r7, #20
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd4:	4770      	bx	lr
 800bfd6:	bf00      	nop
 800bfd8:	e000e3f0 	.word	0xe000e3f0
 800bfdc:	20000ba8 	.word	0x20000ba8
 800bfe0:	e000ed0c 	.word	0xe000ed0c
 800bfe4:	20000bac 	.word	0x20000bac

0800bfe8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b08a      	sub	sp, #40	; 0x28
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bff0:	2300      	movs	r3, #0
 800bff2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bff4:	f7fe ffae 	bl	800af54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bff8:	4b58      	ldr	r3, [pc, #352]	; (800c15c <pvPortMalloc+0x174>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d101      	bne.n	800c004 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c000:	f000 f910 	bl	800c224 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c004:	4b56      	ldr	r3, [pc, #344]	; (800c160 <pvPortMalloc+0x178>)
 800c006:	681a      	ldr	r2, [r3, #0]
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	4013      	ands	r3, r2
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	f040 808e 	bne.w	800c12e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d01d      	beq.n	800c054 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c018:	2208      	movs	r2, #8
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	4413      	add	r3, r2
 800c01e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f003 0307 	and.w	r3, r3, #7
 800c026:	2b00      	cmp	r3, #0
 800c028:	d014      	beq.n	800c054 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f023 0307 	bic.w	r3, r3, #7
 800c030:	3308      	adds	r3, #8
 800c032:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f003 0307 	and.w	r3, r3, #7
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d00a      	beq.n	800c054 <pvPortMalloc+0x6c>
	__asm volatile
 800c03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c042:	f383 8811 	msr	BASEPRI, r3
 800c046:	f3bf 8f6f 	isb	sy
 800c04a:	f3bf 8f4f 	dsb	sy
 800c04e:	617b      	str	r3, [r7, #20]
}
 800c050:	bf00      	nop
 800c052:	e7fe      	b.n	800c052 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d069      	beq.n	800c12e <pvPortMalloc+0x146>
 800c05a:	4b42      	ldr	r3, [pc, #264]	; (800c164 <pvPortMalloc+0x17c>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	687a      	ldr	r2, [r7, #4]
 800c060:	429a      	cmp	r2, r3
 800c062:	d864      	bhi.n	800c12e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c064:	4b40      	ldr	r3, [pc, #256]	; (800c168 <pvPortMalloc+0x180>)
 800c066:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c068:	4b3f      	ldr	r3, [pc, #252]	; (800c168 <pvPortMalloc+0x180>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c06e:	e004      	b.n	800c07a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c072:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	687a      	ldr	r2, [r7, #4]
 800c080:	429a      	cmp	r2, r3
 800c082:	d903      	bls.n	800c08c <pvPortMalloc+0xa4>
 800c084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d1f1      	bne.n	800c070 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c08c:	4b33      	ldr	r3, [pc, #204]	; (800c15c <pvPortMalloc+0x174>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c092:	429a      	cmp	r2, r3
 800c094:	d04b      	beq.n	800c12e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c096:	6a3b      	ldr	r3, [r7, #32]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	2208      	movs	r2, #8
 800c09c:	4413      	add	r3, r2
 800c09e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a2:	681a      	ldr	r2, [r3, #0]
 800c0a4:	6a3b      	ldr	r3, [r7, #32]
 800c0a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0aa:	685a      	ldr	r2, [r3, #4]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	1ad2      	subs	r2, r2, r3
 800c0b0:	2308      	movs	r3, #8
 800c0b2:	005b      	lsls	r3, r3, #1
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d91f      	bls.n	800c0f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c0b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	4413      	add	r3, r2
 800c0be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c0c0:	69bb      	ldr	r3, [r7, #24]
 800c0c2:	f003 0307 	and.w	r3, r3, #7
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d00a      	beq.n	800c0e0 <pvPortMalloc+0xf8>
	__asm volatile
 800c0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ce:	f383 8811 	msr	BASEPRI, r3
 800c0d2:	f3bf 8f6f 	isb	sy
 800c0d6:	f3bf 8f4f 	dsb	sy
 800c0da:	613b      	str	r3, [r7, #16]
}
 800c0dc:	bf00      	nop
 800c0de:	e7fe      	b.n	800c0de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e2:	685a      	ldr	r2, [r3, #4]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	1ad2      	subs	r2, r2, r3
 800c0e8:	69bb      	ldr	r3, [r7, #24]
 800c0ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ee:	687a      	ldr	r2, [r7, #4]
 800c0f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c0f2:	69b8      	ldr	r0, [r7, #24]
 800c0f4:	f000 f8f8 	bl	800c2e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c0f8:	4b1a      	ldr	r3, [pc, #104]	; (800c164 <pvPortMalloc+0x17c>)
 800c0fa:	681a      	ldr	r2, [r3, #0]
 800c0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0fe:	685b      	ldr	r3, [r3, #4]
 800c100:	1ad3      	subs	r3, r2, r3
 800c102:	4a18      	ldr	r2, [pc, #96]	; (800c164 <pvPortMalloc+0x17c>)
 800c104:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c106:	4b17      	ldr	r3, [pc, #92]	; (800c164 <pvPortMalloc+0x17c>)
 800c108:	681a      	ldr	r2, [r3, #0]
 800c10a:	4b18      	ldr	r3, [pc, #96]	; (800c16c <pvPortMalloc+0x184>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	429a      	cmp	r2, r3
 800c110:	d203      	bcs.n	800c11a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c112:	4b14      	ldr	r3, [pc, #80]	; (800c164 <pvPortMalloc+0x17c>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	4a15      	ldr	r2, [pc, #84]	; (800c16c <pvPortMalloc+0x184>)
 800c118:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c11c:	685a      	ldr	r2, [r3, #4]
 800c11e:	4b10      	ldr	r3, [pc, #64]	; (800c160 <pvPortMalloc+0x178>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	431a      	orrs	r2, r3
 800c124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c126:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c12a:	2200      	movs	r2, #0
 800c12c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c12e:	f7fe ff1f 	bl	800af70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c132:	69fb      	ldr	r3, [r7, #28]
 800c134:	f003 0307 	and.w	r3, r3, #7
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d00a      	beq.n	800c152 <pvPortMalloc+0x16a>
	__asm volatile
 800c13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c140:	f383 8811 	msr	BASEPRI, r3
 800c144:	f3bf 8f6f 	isb	sy
 800c148:	f3bf 8f4f 	dsb	sy
 800c14c:	60fb      	str	r3, [r7, #12]
}
 800c14e:	bf00      	nop
 800c150:	e7fe      	b.n	800c150 <pvPortMalloc+0x168>
	return pvReturn;
 800c152:	69fb      	ldr	r3, [r7, #28]
}
 800c154:	4618      	mov	r0, r3
 800c156:	3728      	adds	r7, #40	; 0x28
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}
 800c15c:	200017b8 	.word	0x200017b8
 800c160:	200017c4 	.word	0x200017c4
 800c164:	200017bc 	.word	0x200017bc
 800c168:	200017b0 	.word	0x200017b0
 800c16c:	200017c0 	.word	0x200017c0

0800c170 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b086      	sub	sp, #24
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d048      	beq.n	800c214 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c182:	2308      	movs	r3, #8
 800c184:	425b      	negs	r3, r3
 800c186:	697a      	ldr	r2, [r7, #20]
 800c188:	4413      	add	r3, r2
 800c18a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	685a      	ldr	r2, [r3, #4]
 800c194:	4b21      	ldr	r3, [pc, #132]	; (800c21c <vPortFree+0xac>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	4013      	ands	r3, r2
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d10a      	bne.n	800c1b4 <vPortFree+0x44>
	__asm volatile
 800c19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a2:	f383 8811 	msr	BASEPRI, r3
 800c1a6:	f3bf 8f6f 	isb	sy
 800c1aa:	f3bf 8f4f 	dsb	sy
 800c1ae:	60fb      	str	r3, [r7, #12]
}
 800c1b0:	bf00      	nop
 800c1b2:	e7fe      	b.n	800c1b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d00a      	beq.n	800c1d2 <vPortFree+0x62>
	__asm volatile
 800c1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c0:	f383 8811 	msr	BASEPRI, r3
 800c1c4:	f3bf 8f6f 	isb	sy
 800c1c8:	f3bf 8f4f 	dsb	sy
 800c1cc:	60bb      	str	r3, [r7, #8]
}
 800c1ce:	bf00      	nop
 800c1d0:	e7fe      	b.n	800c1d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	685a      	ldr	r2, [r3, #4]
 800c1d6:	4b11      	ldr	r3, [pc, #68]	; (800c21c <vPortFree+0xac>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	4013      	ands	r3, r2
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d019      	beq.n	800c214 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d115      	bne.n	800c214 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	685a      	ldr	r2, [r3, #4]
 800c1ec:	4b0b      	ldr	r3, [pc, #44]	; (800c21c <vPortFree+0xac>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	43db      	mvns	r3, r3
 800c1f2:	401a      	ands	r2, r3
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c1f8:	f7fe feac 	bl	800af54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c1fc:	693b      	ldr	r3, [r7, #16]
 800c1fe:	685a      	ldr	r2, [r3, #4]
 800c200:	4b07      	ldr	r3, [pc, #28]	; (800c220 <vPortFree+0xb0>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4413      	add	r3, r2
 800c206:	4a06      	ldr	r2, [pc, #24]	; (800c220 <vPortFree+0xb0>)
 800c208:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c20a:	6938      	ldr	r0, [r7, #16]
 800c20c:	f000 f86c 	bl	800c2e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c210:	f7fe feae 	bl	800af70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c214:	bf00      	nop
 800c216:	3718      	adds	r7, #24
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}
 800c21c:	200017c4 	.word	0x200017c4
 800c220:	200017bc 	.word	0x200017bc

0800c224 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c224:	b480      	push	{r7}
 800c226:	b085      	sub	sp, #20
 800c228:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c22a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800c22e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c230:	4b27      	ldr	r3, [pc, #156]	; (800c2d0 <prvHeapInit+0xac>)
 800c232:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	f003 0307 	and.w	r3, r3, #7
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d00c      	beq.n	800c258 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	3307      	adds	r3, #7
 800c242:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	f023 0307 	bic.w	r3, r3, #7
 800c24a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c24c:	68ba      	ldr	r2, [r7, #8]
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	1ad3      	subs	r3, r2, r3
 800c252:	4a1f      	ldr	r2, [pc, #124]	; (800c2d0 <prvHeapInit+0xac>)
 800c254:	4413      	add	r3, r2
 800c256:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c25c:	4a1d      	ldr	r2, [pc, #116]	; (800c2d4 <prvHeapInit+0xb0>)
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c262:	4b1c      	ldr	r3, [pc, #112]	; (800c2d4 <prvHeapInit+0xb0>)
 800c264:	2200      	movs	r2, #0
 800c266:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	68ba      	ldr	r2, [r7, #8]
 800c26c:	4413      	add	r3, r2
 800c26e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c270:	2208      	movs	r2, #8
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	1a9b      	subs	r3, r3, r2
 800c276:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f023 0307 	bic.w	r3, r3, #7
 800c27e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	4a15      	ldr	r2, [pc, #84]	; (800c2d8 <prvHeapInit+0xb4>)
 800c284:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c286:	4b14      	ldr	r3, [pc, #80]	; (800c2d8 <prvHeapInit+0xb4>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	2200      	movs	r2, #0
 800c28c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c28e:	4b12      	ldr	r3, [pc, #72]	; (800c2d8 <prvHeapInit+0xb4>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	2200      	movs	r2, #0
 800c294:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	68fa      	ldr	r2, [r7, #12]
 800c29e:	1ad2      	subs	r2, r2, r3
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c2a4:	4b0c      	ldr	r3, [pc, #48]	; (800c2d8 <prvHeapInit+0xb4>)
 800c2a6:	681a      	ldr	r2, [r3, #0]
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	685b      	ldr	r3, [r3, #4]
 800c2b0:	4a0a      	ldr	r2, [pc, #40]	; (800c2dc <prvHeapInit+0xb8>)
 800c2b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	685b      	ldr	r3, [r3, #4]
 800c2b8:	4a09      	ldr	r2, [pc, #36]	; (800c2e0 <prvHeapInit+0xbc>)
 800c2ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c2bc:	4b09      	ldr	r3, [pc, #36]	; (800c2e4 <prvHeapInit+0xc0>)
 800c2be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c2c2:	601a      	str	r2, [r3, #0]
}
 800c2c4:	bf00      	nop
 800c2c6:	3714      	adds	r7, #20
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ce:	4770      	bx	lr
 800c2d0:	20000bb0 	.word	0x20000bb0
 800c2d4:	200017b0 	.word	0x200017b0
 800c2d8:	200017b8 	.word	0x200017b8
 800c2dc:	200017c0 	.word	0x200017c0
 800c2e0:	200017bc 	.word	0x200017bc
 800c2e4:	200017c4 	.word	0x200017c4

0800c2e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b085      	sub	sp, #20
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c2f0:	4b28      	ldr	r3, [pc, #160]	; (800c394 <prvInsertBlockIntoFreeList+0xac>)
 800c2f2:	60fb      	str	r3, [r7, #12]
 800c2f4:	e002      	b.n	800c2fc <prvInsertBlockIntoFreeList+0x14>
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	60fb      	str	r3, [r7, #12]
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	687a      	ldr	r2, [r7, #4]
 800c302:	429a      	cmp	r2, r3
 800c304:	d8f7      	bhi.n	800c2f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	685b      	ldr	r3, [r3, #4]
 800c30e:	68ba      	ldr	r2, [r7, #8]
 800c310:	4413      	add	r3, r2
 800c312:	687a      	ldr	r2, [r7, #4]
 800c314:	429a      	cmp	r2, r3
 800c316:	d108      	bne.n	800c32a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	685a      	ldr	r2, [r3, #4]
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	685b      	ldr	r3, [r3, #4]
 800c320:	441a      	add	r2, r3
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	685b      	ldr	r3, [r3, #4]
 800c332:	68ba      	ldr	r2, [r7, #8]
 800c334:	441a      	add	r2, r3
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	429a      	cmp	r2, r3
 800c33c:	d118      	bne.n	800c370 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681a      	ldr	r2, [r3, #0]
 800c342:	4b15      	ldr	r3, [pc, #84]	; (800c398 <prvInsertBlockIntoFreeList+0xb0>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	429a      	cmp	r2, r3
 800c348:	d00d      	beq.n	800c366 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	685a      	ldr	r2, [r3, #4]
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	685b      	ldr	r3, [r3, #4]
 800c354:	441a      	add	r2, r3
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	681a      	ldr	r2, [r3, #0]
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	601a      	str	r2, [r3, #0]
 800c364:	e008      	b.n	800c378 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c366:	4b0c      	ldr	r3, [pc, #48]	; (800c398 <prvInsertBlockIntoFreeList+0xb0>)
 800c368:	681a      	ldr	r2, [r3, #0]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	601a      	str	r2, [r3, #0]
 800c36e:	e003      	b.n	800c378 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	681a      	ldr	r2, [r3, #0]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c378:	68fa      	ldr	r2, [r7, #12]
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	429a      	cmp	r2, r3
 800c37e:	d002      	beq.n	800c386 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	687a      	ldr	r2, [r7, #4]
 800c384:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c386:	bf00      	nop
 800c388:	3714      	adds	r7, #20
 800c38a:	46bd      	mov	sp, r7
 800c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c390:	4770      	bx	lr
 800c392:	bf00      	nop
 800c394:	200017b0 	.word	0x200017b0
 800c398:	200017b8 	.word	0x200017b8

0800c39c <siprintf>:
 800c39c:	b40e      	push	{r1, r2, r3}
 800c39e:	b500      	push	{lr}
 800c3a0:	b09c      	sub	sp, #112	; 0x70
 800c3a2:	ab1d      	add	r3, sp, #116	; 0x74
 800c3a4:	9002      	str	r0, [sp, #8]
 800c3a6:	9006      	str	r0, [sp, #24]
 800c3a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c3ac:	4809      	ldr	r0, [pc, #36]	; (800c3d4 <siprintf+0x38>)
 800c3ae:	9107      	str	r1, [sp, #28]
 800c3b0:	9104      	str	r1, [sp, #16]
 800c3b2:	4909      	ldr	r1, [pc, #36]	; (800c3d8 <siprintf+0x3c>)
 800c3b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3b8:	9105      	str	r1, [sp, #20]
 800c3ba:	6800      	ldr	r0, [r0, #0]
 800c3bc:	9301      	str	r3, [sp, #4]
 800c3be:	a902      	add	r1, sp, #8
 800c3c0:	f000 f9f6 	bl	800c7b0 <_svfiprintf_r>
 800c3c4:	9b02      	ldr	r3, [sp, #8]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	701a      	strb	r2, [r3, #0]
 800c3ca:	b01c      	add	sp, #112	; 0x70
 800c3cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3d0:	b003      	add	sp, #12
 800c3d2:	4770      	bx	lr
 800c3d4:	20000074 	.word	0x20000074
 800c3d8:	ffff0208 	.word	0xffff0208

0800c3dc <memset>:
 800c3dc:	4402      	add	r2, r0
 800c3de:	4603      	mov	r3, r0
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d100      	bne.n	800c3e6 <memset+0xa>
 800c3e4:	4770      	bx	lr
 800c3e6:	f803 1b01 	strb.w	r1, [r3], #1
 800c3ea:	e7f9      	b.n	800c3e0 <memset+0x4>

0800c3ec <_reclaim_reent>:
 800c3ec:	4b29      	ldr	r3, [pc, #164]	; (800c494 <_reclaim_reent+0xa8>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	4283      	cmp	r3, r0
 800c3f2:	b570      	push	{r4, r5, r6, lr}
 800c3f4:	4604      	mov	r4, r0
 800c3f6:	d04b      	beq.n	800c490 <_reclaim_reent+0xa4>
 800c3f8:	69c3      	ldr	r3, [r0, #28]
 800c3fa:	b143      	cbz	r3, 800c40e <_reclaim_reent+0x22>
 800c3fc:	68db      	ldr	r3, [r3, #12]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d144      	bne.n	800c48c <_reclaim_reent+0xa0>
 800c402:	69e3      	ldr	r3, [r4, #28]
 800c404:	6819      	ldr	r1, [r3, #0]
 800c406:	b111      	cbz	r1, 800c40e <_reclaim_reent+0x22>
 800c408:	4620      	mov	r0, r4
 800c40a:	f000 f87f 	bl	800c50c <_free_r>
 800c40e:	6961      	ldr	r1, [r4, #20]
 800c410:	b111      	cbz	r1, 800c418 <_reclaim_reent+0x2c>
 800c412:	4620      	mov	r0, r4
 800c414:	f000 f87a 	bl	800c50c <_free_r>
 800c418:	69e1      	ldr	r1, [r4, #28]
 800c41a:	b111      	cbz	r1, 800c422 <_reclaim_reent+0x36>
 800c41c:	4620      	mov	r0, r4
 800c41e:	f000 f875 	bl	800c50c <_free_r>
 800c422:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c424:	b111      	cbz	r1, 800c42c <_reclaim_reent+0x40>
 800c426:	4620      	mov	r0, r4
 800c428:	f000 f870 	bl	800c50c <_free_r>
 800c42c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c42e:	b111      	cbz	r1, 800c436 <_reclaim_reent+0x4a>
 800c430:	4620      	mov	r0, r4
 800c432:	f000 f86b 	bl	800c50c <_free_r>
 800c436:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c438:	b111      	cbz	r1, 800c440 <_reclaim_reent+0x54>
 800c43a:	4620      	mov	r0, r4
 800c43c:	f000 f866 	bl	800c50c <_free_r>
 800c440:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c442:	b111      	cbz	r1, 800c44a <_reclaim_reent+0x5e>
 800c444:	4620      	mov	r0, r4
 800c446:	f000 f861 	bl	800c50c <_free_r>
 800c44a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c44c:	b111      	cbz	r1, 800c454 <_reclaim_reent+0x68>
 800c44e:	4620      	mov	r0, r4
 800c450:	f000 f85c 	bl	800c50c <_free_r>
 800c454:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c456:	b111      	cbz	r1, 800c45e <_reclaim_reent+0x72>
 800c458:	4620      	mov	r0, r4
 800c45a:	f000 f857 	bl	800c50c <_free_r>
 800c45e:	6a23      	ldr	r3, [r4, #32]
 800c460:	b1b3      	cbz	r3, 800c490 <_reclaim_reent+0xa4>
 800c462:	4620      	mov	r0, r4
 800c464:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c468:	4718      	bx	r3
 800c46a:	5949      	ldr	r1, [r1, r5]
 800c46c:	b941      	cbnz	r1, 800c480 <_reclaim_reent+0x94>
 800c46e:	3504      	adds	r5, #4
 800c470:	69e3      	ldr	r3, [r4, #28]
 800c472:	2d80      	cmp	r5, #128	; 0x80
 800c474:	68d9      	ldr	r1, [r3, #12]
 800c476:	d1f8      	bne.n	800c46a <_reclaim_reent+0x7e>
 800c478:	4620      	mov	r0, r4
 800c47a:	f000 f847 	bl	800c50c <_free_r>
 800c47e:	e7c0      	b.n	800c402 <_reclaim_reent+0x16>
 800c480:	680e      	ldr	r6, [r1, #0]
 800c482:	4620      	mov	r0, r4
 800c484:	f000 f842 	bl	800c50c <_free_r>
 800c488:	4631      	mov	r1, r6
 800c48a:	e7ef      	b.n	800c46c <_reclaim_reent+0x80>
 800c48c:	2500      	movs	r5, #0
 800c48e:	e7ef      	b.n	800c470 <_reclaim_reent+0x84>
 800c490:	bd70      	pop	{r4, r5, r6, pc}
 800c492:	bf00      	nop
 800c494:	20000074 	.word	0x20000074

0800c498 <__errno>:
 800c498:	4b01      	ldr	r3, [pc, #4]	; (800c4a0 <__errno+0x8>)
 800c49a:	6818      	ldr	r0, [r3, #0]
 800c49c:	4770      	bx	lr
 800c49e:	bf00      	nop
 800c4a0:	20000074 	.word	0x20000074

0800c4a4 <__libc_init_array>:
 800c4a4:	b570      	push	{r4, r5, r6, lr}
 800c4a6:	4d0d      	ldr	r5, [pc, #52]	; (800c4dc <__libc_init_array+0x38>)
 800c4a8:	4c0d      	ldr	r4, [pc, #52]	; (800c4e0 <__libc_init_array+0x3c>)
 800c4aa:	1b64      	subs	r4, r4, r5
 800c4ac:	10a4      	asrs	r4, r4, #2
 800c4ae:	2600      	movs	r6, #0
 800c4b0:	42a6      	cmp	r6, r4
 800c4b2:	d109      	bne.n	800c4c8 <__libc_init_array+0x24>
 800c4b4:	4d0b      	ldr	r5, [pc, #44]	; (800c4e4 <__libc_init_array+0x40>)
 800c4b6:	4c0c      	ldr	r4, [pc, #48]	; (800c4e8 <__libc_init_array+0x44>)
 800c4b8:	f000 fc6a 	bl	800cd90 <_init>
 800c4bc:	1b64      	subs	r4, r4, r5
 800c4be:	10a4      	asrs	r4, r4, #2
 800c4c0:	2600      	movs	r6, #0
 800c4c2:	42a6      	cmp	r6, r4
 800c4c4:	d105      	bne.n	800c4d2 <__libc_init_array+0x2e>
 800c4c6:	bd70      	pop	{r4, r5, r6, pc}
 800c4c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4cc:	4798      	blx	r3
 800c4ce:	3601      	adds	r6, #1
 800c4d0:	e7ee      	b.n	800c4b0 <__libc_init_array+0xc>
 800c4d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4d6:	4798      	blx	r3
 800c4d8:	3601      	adds	r6, #1
 800c4da:	e7f2      	b.n	800c4c2 <__libc_init_array+0x1e>
 800c4dc:	0800d35c 	.word	0x0800d35c
 800c4e0:	0800d35c 	.word	0x0800d35c
 800c4e4:	0800d35c 	.word	0x0800d35c
 800c4e8:	0800d360 	.word	0x0800d360

0800c4ec <__retarget_lock_acquire_recursive>:
 800c4ec:	4770      	bx	lr

0800c4ee <__retarget_lock_release_recursive>:
 800c4ee:	4770      	bx	lr

0800c4f0 <memcpy>:
 800c4f0:	440a      	add	r2, r1
 800c4f2:	4291      	cmp	r1, r2
 800c4f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c4f8:	d100      	bne.n	800c4fc <memcpy+0xc>
 800c4fa:	4770      	bx	lr
 800c4fc:	b510      	push	{r4, lr}
 800c4fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c502:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c506:	4291      	cmp	r1, r2
 800c508:	d1f9      	bne.n	800c4fe <memcpy+0xe>
 800c50a:	bd10      	pop	{r4, pc}

0800c50c <_free_r>:
 800c50c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c50e:	2900      	cmp	r1, #0
 800c510:	d044      	beq.n	800c59c <_free_r+0x90>
 800c512:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c516:	9001      	str	r0, [sp, #4]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	f1a1 0404 	sub.w	r4, r1, #4
 800c51e:	bfb8      	it	lt
 800c520:	18e4      	addlt	r4, r4, r3
 800c522:	f000 f8df 	bl	800c6e4 <__malloc_lock>
 800c526:	4a1e      	ldr	r2, [pc, #120]	; (800c5a0 <_free_r+0x94>)
 800c528:	9801      	ldr	r0, [sp, #4]
 800c52a:	6813      	ldr	r3, [r2, #0]
 800c52c:	b933      	cbnz	r3, 800c53c <_free_r+0x30>
 800c52e:	6063      	str	r3, [r4, #4]
 800c530:	6014      	str	r4, [r2, #0]
 800c532:	b003      	add	sp, #12
 800c534:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c538:	f000 b8da 	b.w	800c6f0 <__malloc_unlock>
 800c53c:	42a3      	cmp	r3, r4
 800c53e:	d908      	bls.n	800c552 <_free_r+0x46>
 800c540:	6825      	ldr	r5, [r4, #0]
 800c542:	1961      	adds	r1, r4, r5
 800c544:	428b      	cmp	r3, r1
 800c546:	bf01      	itttt	eq
 800c548:	6819      	ldreq	r1, [r3, #0]
 800c54a:	685b      	ldreq	r3, [r3, #4]
 800c54c:	1949      	addeq	r1, r1, r5
 800c54e:	6021      	streq	r1, [r4, #0]
 800c550:	e7ed      	b.n	800c52e <_free_r+0x22>
 800c552:	461a      	mov	r2, r3
 800c554:	685b      	ldr	r3, [r3, #4]
 800c556:	b10b      	cbz	r3, 800c55c <_free_r+0x50>
 800c558:	42a3      	cmp	r3, r4
 800c55a:	d9fa      	bls.n	800c552 <_free_r+0x46>
 800c55c:	6811      	ldr	r1, [r2, #0]
 800c55e:	1855      	adds	r5, r2, r1
 800c560:	42a5      	cmp	r5, r4
 800c562:	d10b      	bne.n	800c57c <_free_r+0x70>
 800c564:	6824      	ldr	r4, [r4, #0]
 800c566:	4421      	add	r1, r4
 800c568:	1854      	adds	r4, r2, r1
 800c56a:	42a3      	cmp	r3, r4
 800c56c:	6011      	str	r1, [r2, #0]
 800c56e:	d1e0      	bne.n	800c532 <_free_r+0x26>
 800c570:	681c      	ldr	r4, [r3, #0]
 800c572:	685b      	ldr	r3, [r3, #4]
 800c574:	6053      	str	r3, [r2, #4]
 800c576:	440c      	add	r4, r1
 800c578:	6014      	str	r4, [r2, #0]
 800c57a:	e7da      	b.n	800c532 <_free_r+0x26>
 800c57c:	d902      	bls.n	800c584 <_free_r+0x78>
 800c57e:	230c      	movs	r3, #12
 800c580:	6003      	str	r3, [r0, #0]
 800c582:	e7d6      	b.n	800c532 <_free_r+0x26>
 800c584:	6825      	ldr	r5, [r4, #0]
 800c586:	1961      	adds	r1, r4, r5
 800c588:	428b      	cmp	r3, r1
 800c58a:	bf04      	itt	eq
 800c58c:	6819      	ldreq	r1, [r3, #0]
 800c58e:	685b      	ldreq	r3, [r3, #4]
 800c590:	6063      	str	r3, [r4, #4]
 800c592:	bf04      	itt	eq
 800c594:	1949      	addeq	r1, r1, r5
 800c596:	6021      	streq	r1, [r4, #0]
 800c598:	6054      	str	r4, [r2, #4]
 800c59a:	e7ca      	b.n	800c532 <_free_r+0x26>
 800c59c:	b003      	add	sp, #12
 800c59e:	bd30      	pop	{r4, r5, pc}
 800c5a0:	20001908 	.word	0x20001908

0800c5a4 <sbrk_aligned>:
 800c5a4:	b570      	push	{r4, r5, r6, lr}
 800c5a6:	4e0e      	ldr	r6, [pc, #56]	; (800c5e0 <sbrk_aligned+0x3c>)
 800c5a8:	460c      	mov	r4, r1
 800c5aa:	6831      	ldr	r1, [r6, #0]
 800c5ac:	4605      	mov	r5, r0
 800c5ae:	b911      	cbnz	r1, 800c5b6 <sbrk_aligned+0x12>
 800c5b0:	f000 fba6 	bl	800cd00 <_sbrk_r>
 800c5b4:	6030      	str	r0, [r6, #0]
 800c5b6:	4621      	mov	r1, r4
 800c5b8:	4628      	mov	r0, r5
 800c5ba:	f000 fba1 	bl	800cd00 <_sbrk_r>
 800c5be:	1c43      	adds	r3, r0, #1
 800c5c0:	d00a      	beq.n	800c5d8 <sbrk_aligned+0x34>
 800c5c2:	1cc4      	adds	r4, r0, #3
 800c5c4:	f024 0403 	bic.w	r4, r4, #3
 800c5c8:	42a0      	cmp	r0, r4
 800c5ca:	d007      	beq.n	800c5dc <sbrk_aligned+0x38>
 800c5cc:	1a21      	subs	r1, r4, r0
 800c5ce:	4628      	mov	r0, r5
 800c5d0:	f000 fb96 	bl	800cd00 <_sbrk_r>
 800c5d4:	3001      	adds	r0, #1
 800c5d6:	d101      	bne.n	800c5dc <sbrk_aligned+0x38>
 800c5d8:	f04f 34ff 	mov.w	r4, #4294967295
 800c5dc:	4620      	mov	r0, r4
 800c5de:	bd70      	pop	{r4, r5, r6, pc}
 800c5e0:	2000190c 	.word	0x2000190c

0800c5e4 <_malloc_r>:
 800c5e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5e8:	1ccd      	adds	r5, r1, #3
 800c5ea:	f025 0503 	bic.w	r5, r5, #3
 800c5ee:	3508      	adds	r5, #8
 800c5f0:	2d0c      	cmp	r5, #12
 800c5f2:	bf38      	it	cc
 800c5f4:	250c      	movcc	r5, #12
 800c5f6:	2d00      	cmp	r5, #0
 800c5f8:	4607      	mov	r7, r0
 800c5fa:	db01      	blt.n	800c600 <_malloc_r+0x1c>
 800c5fc:	42a9      	cmp	r1, r5
 800c5fe:	d905      	bls.n	800c60c <_malloc_r+0x28>
 800c600:	230c      	movs	r3, #12
 800c602:	603b      	str	r3, [r7, #0]
 800c604:	2600      	movs	r6, #0
 800c606:	4630      	mov	r0, r6
 800c608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c60c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c6e0 <_malloc_r+0xfc>
 800c610:	f000 f868 	bl	800c6e4 <__malloc_lock>
 800c614:	f8d8 3000 	ldr.w	r3, [r8]
 800c618:	461c      	mov	r4, r3
 800c61a:	bb5c      	cbnz	r4, 800c674 <_malloc_r+0x90>
 800c61c:	4629      	mov	r1, r5
 800c61e:	4638      	mov	r0, r7
 800c620:	f7ff ffc0 	bl	800c5a4 <sbrk_aligned>
 800c624:	1c43      	adds	r3, r0, #1
 800c626:	4604      	mov	r4, r0
 800c628:	d155      	bne.n	800c6d6 <_malloc_r+0xf2>
 800c62a:	f8d8 4000 	ldr.w	r4, [r8]
 800c62e:	4626      	mov	r6, r4
 800c630:	2e00      	cmp	r6, #0
 800c632:	d145      	bne.n	800c6c0 <_malloc_r+0xdc>
 800c634:	2c00      	cmp	r4, #0
 800c636:	d048      	beq.n	800c6ca <_malloc_r+0xe6>
 800c638:	6823      	ldr	r3, [r4, #0]
 800c63a:	4631      	mov	r1, r6
 800c63c:	4638      	mov	r0, r7
 800c63e:	eb04 0903 	add.w	r9, r4, r3
 800c642:	f000 fb5d 	bl	800cd00 <_sbrk_r>
 800c646:	4581      	cmp	r9, r0
 800c648:	d13f      	bne.n	800c6ca <_malloc_r+0xe6>
 800c64a:	6821      	ldr	r1, [r4, #0]
 800c64c:	1a6d      	subs	r5, r5, r1
 800c64e:	4629      	mov	r1, r5
 800c650:	4638      	mov	r0, r7
 800c652:	f7ff ffa7 	bl	800c5a4 <sbrk_aligned>
 800c656:	3001      	adds	r0, #1
 800c658:	d037      	beq.n	800c6ca <_malloc_r+0xe6>
 800c65a:	6823      	ldr	r3, [r4, #0]
 800c65c:	442b      	add	r3, r5
 800c65e:	6023      	str	r3, [r4, #0]
 800c660:	f8d8 3000 	ldr.w	r3, [r8]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d038      	beq.n	800c6da <_malloc_r+0xf6>
 800c668:	685a      	ldr	r2, [r3, #4]
 800c66a:	42a2      	cmp	r2, r4
 800c66c:	d12b      	bne.n	800c6c6 <_malloc_r+0xe2>
 800c66e:	2200      	movs	r2, #0
 800c670:	605a      	str	r2, [r3, #4]
 800c672:	e00f      	b.n	800c694 <_malloc_r+0xb0>
 800c674:	6822      	ldr	r2, [r4, #0]
 800c676:	1b52      	subs	r2, r2, r5
 800c678:	d41f      	bmi.n	800c6ba <_malloc_r+0xd6>
 800c67a:	2a0b      	cmp	r2, #11
 800c67c:	d917      	bls.n	800c6ae <_malloc_r+0xca>
 800c67e:	1961      	adds	r1, r4, r5
 800c680:	42a3      	cmp	r3, r4
 800c682:	6025      	str	r5, [r4, #0]
 800c684:	bf18      	it	ne
 800c686:	6059      	strne	r1, [r3, #4]
 800c688:	6863      	ldr	r3, [r4, #4]
 800c68a:	bf08      	it	eq
 800c68c:	f8c8 1000 	streq.w	r1, [r8]
 800c690:	5162      	str	r2, [r4, r5]
 800c692:	604b      	str	r3, [r1, #4]
 800c694:	4638      	mov	r0, r7
 800c696:	f104 060b 	add.w	r6, r4, #11
 800c69a:	f000 f829 	bl	800c6f0 <__malloc_unlock>
 800c69e:	f026 0607 	bic.w	r6, r6, #7
 800c6a2:	1d23      	adds	r3, r4, #4
 800c6a4:	1af2      	subs	r2, r6, r3
 800c6a6:	d0ae      	beq.n	800c606 <_malloc_r+0x22>
 800c6a8:	1b9b      	subs	r3, r3, r6
 800c6aa:	50a3      	str	r3, [r4, r2]
 800c6ac:	e7ab      	b.n	800c606 <_malloc_r+0x22>
 800c6ae:	42a3      	cmp	r3, r4
 800c6b0:	6862      	ldr	r2, [r4, #4]
 800c6b2:	d1dd      	bne.n	800c670 <_malloc_r+0x8c>
 800c6b4:	f8c8 2000 	str.w	r2, [r8]
 800c6b8:	e7ec      	b.n	800c694 <_malloc_r+0xb0>
 800c6ba:	4623      	mov	r3, r4
 800c6bc:	6864      	ldr	r4, [r4, #4]
 800c6be:	e7ac      	b.n	800c61a <_malloc_r+0x36>
 800c6c0:	4634      	mov	r4, r6
 800c6c2:	6876      	ldr	r6, [r6, #4]
 800c6c4:	e7b4      	b.n	800c630 <_malloc_r+0x4c>
 800c6c6:	4613      	mov	r3, r2
 800c6c8:	e7cc      	b.n	800c664 <_malloc_r+0x80>
 800c6ca:	230c      	movs	r3, #12
 800c6cc:	603b      	str	r3, [r7, #0]
 800c6ce:	4638      	mov	r0, r7
 800c6d0:	f000 f80e 	bl	800c6f0 <__malloc_unlock>
 800c6d4:	e797      	b.n	800c606 <_malloc_r+0x22>
 800c6d6:	6025      	str	r5, [r4, #0]
 800c6d8:	e7dc      	b.n	800c694 <_malloc_r+0xb0>
 800c6da:	605b      	str	r3, [r3, #4]
 800c6dc:	deff      	udf	#255	; 0xff
 800c6de:	bf00      	nop
 800c6e0:	20001908 	.word	0x20001908

0800c6e4 <__malloc_lock>:
 800c6e4:	4801      	ldr	r0, [pc, #4]	; (800c6ec <__malloc_lock+0x8>)
 800c6e6:	f7ff bf01 	b.w	800c4ec <__retarget_lock_acquire_recursive>
 800c6ea:	bf00      	nop
 800c6ec:	20001904 	.word	0x20001904

0800c6f0 <__malloc_unlock>:
 800c6f0:	4801      	ldr	r0, [pc, #4]	; (800c6f8 <__malloc_unlock+0x8>)
 800c6f2:	f7ff befc 	b.w	800c4ee <__retarget_lock_release_recursive>
 800c6f6:	bf00      	nop
 800c6f8:	20001904 	.word	0x20001904

0800c6fc <__ssputs_r>:
 800c6fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c700:	688e      	ldr	r6, [r1, #8]
 800c702:	461f      	mov	r7, r3
 800c704:	42be      	cmp	r6, r7
 800c706:	680b      	ldr	r3, [r1, #0]
 800c708:	4682      	mov	sl, r0
 800c70a:	460c      	mov	r4, r1
 800c70c:	4690      	mov	r8, r2
 800c70e:	d82c      	bhi.n	800c76a <__ssputs_r+0x6e>
 800c710:	898a      	ldrh	r2, [r1, #12]
 800c712:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c716:	d026      	beq.n	800c766 <__ssputs_r+0x6a>
 800c718:	6965      	ldr	r5, [r4, #20]
 800c71a:	6909      	ldr	r1, [r1, #16]
 800c71c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c720:	eba3 0901 	sub.w	r9, r3, r1
 800c724:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c728:	1c7b      	adds	r3, r7, #1
 800c72a:	444b      	add	r3, r9
 800c72c:	106d      	asrs	r5, r5, #1
 800c72e:	429d      	cmp	r5, r3
 800c730:	bf38      	it	cc
 800c732:	461d      	movcc	r5, r3
 800c734:	0553      	lsls	r3, r2, #21
 800c736:	d527      	bpl.n	800c788 <__ssputs_r+0x8c>
 800c738:	4629      	mov	r1, r5
 800c73a:	f7ff ff53 	bl	800c5e4 <_malloc_r>
 800c73e:	4606      	mov	r6, r0
 800c740:	b360      	cbz	r0, 800c79c <__ssputs_r+0xa0>
 800c742:	6921      	ldr	r1, [r4, #16]
 800c744:	464a      	mov	r2, r9
 800c746:	f7ff fed3 	bl	800c4f0 <memcpy>
 800c74a:	89a3      	ldrh	r3, [r4, #12]
 800c74c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c754:	81a3      	strh	r3, [r4, #12]
 800c756:	6126      	str	r6, [r4, #16]
 800c758:	6165      	str	r5, [r4, #20]
 800c75a:	444e      	add	r6, r9
 800c75c:	eba5 0509 	sub.w	r5, r5, r9
 800c760:	6026      	str	r6, [r4, #0]
 800c762:	60a5      	str	r5, [r4, #8]
 800c764:	463e      	mov	r6, r7
 800c766:	42be      	cmp	r6, r7
 800c768:	d900      	bls.n	800c76c <__ssputs_r+0x70>
 800c76a:	463e      	mov	r6, r7
 800c76c:	6820      	ldr	r0, [r4, #0]
 800c76e:	4632      	mov	r2, r6
 800c770:	4641      	mov	r1, r8
 800c772:	f000 faab 	bl	800cccc <memmove>
 800c776:	68a3      	ldr	r3, [r4, #8]
 800c778:	1b9b      	subs	r3, r3, r6
 800c77a:	60a3      	str	r3, [r4, #8]
 800c77c:	6823      	ldr	r3, [r4, #0]
 800c77e:	4433      	add	r3, r6
 800c780:	6023      	str	r3, [r4, #0]
 800c782:	2000      	movs	r0, #0
 800c784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c788:	462a      	mov	r2, r5
 800c78a:	f000 fac9 	bl	800cd20 <_realloc_r>
 800c78e:	4606      	mov	r6, r0
 800c790:	2800      	cmp	r0, #0
 800c792:	d1e0      	bne.n	800c756 <__ssputs_r+0x5a>
 800c794:	6921      	ldr	r1, [r4, #16]
 800c796:	4650      	mov	r0, sl
 800c798:	f7ff feb8 	bl	800c50c <_free_r>
 800c79c:	230c      	movs	r3, #12
 800c79e:	f8ca 3000 	str.w	r3, [sl]
 800c7a2:	89a3      	ldrh	r3, [r4, #12]
 800c7a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7a8:	81a3      	strh	r3, [r4, #12]
 800c7aa:	f04f 30ff 	mov.w	r0, #4294967295
 800c7ae:	e7e9      	b.n	800c784 <__ssputs_r+0x88>

0800c7b0 <_svfiprintf_r>:
 800c7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7b4:	4698      	mov	r8, r3
 800c7b6:	898b      	ldrh	r3, [r1, #12]
 800c7b8:	061b      	lsls	r3, r3, #24
 800c7ba:	b09d      	sub	sp, #116	; 0x74
 800c7bc:	4607      	mov	r7, r0
 800c7be:	460d      	mov	r5, r1
 800c7c0:	4614      	mov	r4, r2
 800c7c2:	d50e      	bpl.n	800c7e2 <_svfiprintf_r+0x32>
 800c7c4:	690b      	ldr	r3, [r1, #16]
 800c7c6:	b963      	cbnz	r3, 800c7e2 <_svfiprintf_r+0x32>
 800c7c8:	2140      	movs	r1, #64	; 0x40
 800c7ca:	f7ff ff0b 	bl	800c5e4 <_malloc_r>
 800c7ce:	6028      	str	r0, [r5, #0]
 800c7d0:	6128      	str	r0, [r5, #16]
 800c7d2:	b920      	cbnz	r0, 800c7de <_svfiprintf_r+0x2e>
 800c7d4:	230c      	movs	r3, #12
 800c7d6:	603b      	str	r3, [r7, #0]
 800c7d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7dc:	e0d0      	b.n	800c980 <_svfiprintf_r+0x1d0>
 800c7de:	2340      	movs	r3, #64	; 0x40
 800c7e0:	616b      	str	r3, [r5, #20]
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	9309      	str	r3, [sp, #36]	; 0x24
 800c7e6:	2320      	movs	r3, #32
 800c7e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7f0:	2330      	movs	r3, #48	; 0x30
 800c7f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c998 <_svfiprintf_r+0x1e8>
 800c7f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7fa:	f04f 0901 	mov.w	r9, #1
 800c7fe:	4623      	mov	r3, r4
 800c800:	469a      	mov	sl, r3
 800c802:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c806:	b10a      	cbz	r2, 800c80c <_svfiprintf_r+0x5c>
 800c808:	2a25      	cmp	r2, #37	; 0x25
 800c80a:	d1f9      	bne.n	800c800 <_svfiprintf_r+0x50>
 800c80c:	ebba 0b04 	subs.w	fp, sl, r4
 800c810:	d00b      	beq.n	800c82a <_svfiprintf_r+0x7a>
 800c812:	465b      	mov	r3, fp
 800c814:	4622      	mov	r2, r4
 800c816:	4629      	mov	r1, r5
 800c818:	4638      	mov	r0, r7
 800c81a:	f7ff ff6f 	bl	800c6fc <__ssputs_r>
 800c81e:	3001      	adds	r0, #1
 800c820:	f000 80a9 	beq.w	800c976 <_svfiprintf_r+0x1c6>
 800c824:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c826:	445a      	add	r2, fp
 800c828:	9209      	str	r2, [sp, #36]	; 0x24
 800c82a:	f89a 3000 	ldrb.w	r3, [sl]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	f000 80a1 	beq.w	800c976 <_svfiprintf_r+0x1c6>
 800c834:	2300      	movs	r3, #0
 800c836:	f04f 32ff 	mov.w	r2, #4294967295
 800c83a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c83e:	f10a 0a01 	add.w	sl, sl, #1
 800c842:	9304      	str	r3, [sp, #16]
 800c844:	9307      	str	r3, [sp, #28]
 800c846:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c84a:	931a      	str	r3, [sp, #104]	; 0x68
 800c84c:	4654      	mov	r4, sl
 800c84e:	2205      	movs	r2, #5
 800c850:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c854:	4850      	ldr	r0, [pc, #320]	; (800c998 <_svfiprintf_r+0x1e8>)
 800c856:	f7f3 fcdb 	bl	8000210 <memchr>
 800c85a:	9a04      	ldr	r2, [sp, #16]
 800c85c:	b9d8      	cbnz	r0, 800c896 <_svfiprintf_r+0xe6>
 800c85e:	06d0      	lsls	r0, r2, #27
 800c860:	bf44      	itt	mi
 800c862:	2320      	movmi	r3, #32
 800c864:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c868:	0711      	lsls	r1, r2, #28
 800c86a:	bf44      	itt	mi
 800c86c:	232b      	movmi	r3, #43	; 0x2b
 800c86e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c872:	f89a 3000 	ldrb.w	r3, [sl]
 800c876:	2b2a      	cmp	r3, #42	; 0x2a
 800c878:	d015      	beq.n	800c8a6 <_svfiprintf_r+0xf6>
 800c87a:	9a07      	ldr	r2, [sp, #28]
 800c87c:	4654      	mov	r4, sl
 800c87e:	2000      	movs	r0, #0
 800c880:	f04f 0c0a 	mov.w	ip, #10
 800c884:	4621      	mov	r1, r4
 800c886:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c88a:	3b30      	subs	r3, #48	; 0x30
 800c88c:	2b09      	cmp	r3, #9
 800c88e:	d94d      	bls.n	800c92c <_svfiprintf_r+0x17c>
 800c890:	b1b0      	cbz	r0, 800c8c0 <_svfiprintf_r+0x110>
 800c892:	9207      	str	r2, [sp, #28]
 800c894:	e014      	b.n	800c8c0 <_svfiprintf_r+0x110>
 800c896:	eba0 0308 	sub.w	r3, r0, r8
 800c89a:	fa09 f303 	lsl.w	r3, r9, r3
 800c89e:	4313      	orrs	r3, r2
 800c8a0:	9304      	str	r3, [sp, #16]
 800c8a2:	46a2      	mov	sl, r4
 800c8a4:	e7d2      	b.n	800c84c <_svfiprintf_r+0x9c>
 800c8a6:	9b03      	ldr	r3, [sp, #12]
 800c8a8:	1d19      	adds	r1, r3, #4
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	9103      	str	r1, [sp, #12]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	bfbb      	ittet	lt
 800c8b2:	425b      	neglt	r3, r3
 800c8b4:	f042 0202 	orrlt.w	r2, r2, #2
 800c8b8:	9307      	strge	r3, [sp, #28]
 800c8ba:	9307      	strlt	r3, [sp, #28]
 800c8bc:	bfb8      	it	lt
 800c8be:	9204      	strlt	r2, [sp, #16]
 800c8c0:	7823      	ldrb	r3, [r4, #0]
 800c8c2:	2b2e      	cmp	r3, #46	; 0x2e
 800c8c4:	d10c      	bne.n	800c8e0 <_svfiprintf_r+0x130>
 800c8c6:	7863      	ldrb	r3, [r4, #1]
 800c8c8:	2b2a      	cmp	r3, #42	; 0x2a
 800c8ca:	d134      	bne.n	800c936 <_svfiprintf_r+0x186>
 800c8cc:	9b03      	ldr	r3, [sp, #12]
 800c8ce:	1d1a      	adds	r2, r3, #4
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	9203      	str	r2, [sp, #12]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	bfb8      	it	lt
 800c8d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c8dc:	3402      	adds	r4, #2
 800c8de:	9305      	str	r3, [sp, #20]
 800c8e0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c9a8 <_svfiprintf_r+0x1f8>
 800c8e4:	7821      	ldrb	r1, [r4, #0]
 800c8e6:	2203      	movs	r2, #3
 800c8e8:	4650      	mov	r0, sl
 800c8ea:	f7f3 fc91 	bl	8000210 <memchr>
 800c8ee:	b138      	cbz	r0, 800c900 <_svfiprintf_r+0x150>
 800c8f0:	9b04      	ldr	r3, [sp, #16]
 800c8f2:	eba0 000a 	sub.w	r0, r0, sl
 800c8f6:	2240      	movs	r2, #64	; 0x40
 800c8f8:	4082      	lsls	r2, r0
 800c8fa:	4313      	orrs	r3, r2
 800c8fc:	3401      	adds	r4, #1
 800c8fe:	9304      	str	r3, [sp, #16]
 800c900:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c904:	4825      	ldr	r0, [pc, #148]	; (800c99c <_svfiprintf_r+0x1ec>)
 800c906:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c90a:	2206      	movs	r2, #6
 800c90c:	f7f3 fc80 	bl	8000210 <memchr>
 800c910:	2800      	cmp	r0, #0
 800c912:	d038      	beq.n	800c986 <_svfiprintf_r+0x1d6>
 800c914:	4b22      	ldr	r3, [pc, #136]	; (800c9a0 <_svfiprintf_r+0x1f0>)
 800c916:	bb1b      	cbnz	r3, 800c960 <_svfiprintf_r+0x1b0>
 800c918:	9b03      	ldr	r3, [sp, #12]
 800c91a:	3307      	adds	r3, #7
 800c91c:	f023 0307 	bic.w	r3, r3, #7
 800c920:	3308      	adds	r3, #8
 800c922:	9303      	str	r3, [sp, #12]
 800c924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c926:	4433      	add	r3, r6
 800c928:	9309      	str	r3, [sp, #36]	; 0x24
 800c92a:	e768      	b.n	800c7fe <_svfiprintf_r+0x4e>
 800c92c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c930:	460c      	mov	r4, r1
 800c932:	2001      	movs	r0, #1
 800c934:	e7a6      	b.n	800c884 <_svfiprintf_r+0xd4>
 800c936:	2300      	movs	r3, #0
 800c938:	3401      	adds	r4, #1
 800c93a:	9305      	str	r3, [sp, #20]
 800c93c:	4619      	mov	r1, r3
 800c93e:	f04f 0c0a 	mov.w	ip, #10
 800c942:	4620      	mov	r0, r4
 800c944:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c948:	3a30      	subs	r2, #48	; 0x30
 800c94a:	2a09      	cmp	r2, #9
 800c94c:	d903      	bls.n	800c956 <_svfiprintf_r+0x1a6>
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d0c6      	beq.n	800c8e0 <_svfiprintf_r+0x130>
 800c952:	9105      	str	r1, [sp, #20]
 800c954:	e7c4      	b.n	800c8e0 <_svfiprintf_r+0x130>
 800c956:	fb0c 2101 	mla	r1, ip, r1, r2
 800c95a:	4604      	mov	r4, r0
 800c95c:	2301      	movs	r3, #1
 800c95e:	e7f0      	b.n	800c942 <_svfiprintf_r+0x192>
 800c960:	ab03      	add	r3, sp, #12
 800c962:	9300      	str	r3, [sp, #0]
 800c964:	462a      	mov	r2, r5
 800c966:	4b0f      	ldr	r3, [pc, #60]	; (800c9a4 <_svfiprintf_r+0x1f4>)
 800c968:	a904      	add	r1, sp, #16
 800c96a:	4638      	mov	r0, r7
 800c96c:	f3af 8000 	nop.w
 800c970:	1c42      	adds	r2, r0, #1
 800c972:	4606      	mov	r6, r0
 800c974:	d1d6      	bne.n	800c924 <_svfiprintf_r+0x174>
 800c976:	89ab      	ldrh	r3, [r5, #12]
 800c978:	065b      	lsls	r3, r3, #25
 800c97a:	f53f af2d 	bmi.w	800c7d8 <_svfiprintf_r+0x28>
 800c97e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c980:	b01d      	add	sp, #116	; 0x74
 800c982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c986:	ab03      	add	r3, sp, #12
 800c988:	9300      	str	r3, [sp, #0]
 800c98a:	462a      	mov	r2, r5
 800c98c:	4b05      	ldr	r3, [pc, #20]	; (800c9a4 <_svfiprintf_r+0x1f4>)
 800c98e:	a904      	add	r1, sp, #16
 800c990:	4638      	mov	r0, r7
 800c992:	f000 f879 	bl	800ca88 <_printf_i>
 800c996:	e7eb      	b.n	800c970 <_svfiprintf_r+0x1c0>
 800c998:	0800d328 	.word	0x0800d328
 800c99c:	0800d332 	.word	0x0800d332
 800c9a0:	00000000 	.word	0x00000000
 800c9a4:	0800c6fd 	.word	0x0800c6fd
 800c9a8:	0800d32e 	.word	0x0800d32e

0800c9ac <_printf_common>:
 800c9ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9b0:	4616      	mov	r6, r2
 800c9b2:	4699      	mov	r9, r3
 800c9b4:	688a      	ldr	r2, [r1, #8]
 800c9b6:	690b      	ldr	r3, [r1, #16]
 800c9b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	bfb8      	it	lt
 800c9c0:	4613      	movlt	r3, r2
 800c9c2:	6033      	str	r3, [r6, #0]
 800c9c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c9c8:	4607      	mov	r7, r0
 800c9ca:	460c      	mov	r4, r1
 800c9cc:	b10a      	cbz	r2, 800c9d2 <_printf_common+0x26>
 800c9ce:	3301      	adds	r3, #1
 800c9d0:	6033      	str	r3, [r6, #0]
 800c9d2:	6823      	ldr	r3, [r4, #0]
 800c9d4:	0699      	lsls	r1, r3, #26
 800c9d6:	bf42      	ittt	mi
 800c9d8:	6833      	ldrmi	r3, [r6, #0]
 800c9da:	3302      	addmi	r3, #2
 800c9dc:	6033      	strmi	r3, [r6, #0]
 800c9de:	6825      	ldr	r5, [r4, #0]
 800c9e0:	f015 0506 	ands.w	r5, r5, #6
 800c9e4:	d106      	bne.n	800c9f4 <_printf_common+0x48>
 800c9e6:	f104 0a19 	add.w	sl, r4, #25
 800c9ea:	68e3      	ldr	r3, [r4, #12]
 800c9ec:	6832      	ldr	r2, [r6, #0]
 800c9ee:	1a9b      	subs	r3, r3, r2
 800c9f0:	42ab      	cmp	r3, r5
 800c9f2:	dc26      	bgt.n	800ca42 <_printf_common+0x96>
 800c9f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c9f8:	1e13      	subs	r3, r2, #0
 800c9fa:	6822      	ldr	r2, [r4, #0]
 800c9fc:	bf18      	it	ne
 800c9fe:	2301      	movne	r3, #1
 800ca00:	0692      	lsls	r2, r2, #26
 800ca02:	d42b      	bmi.n	800ca5c <_printf_common+0xb0>
 800ca04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca08:	4649      	mov	r1, r9
 800ca0a:	4638      	mov	r0, r7
 800ca0c:	47c0      	blx	r8
 800ca0e:	3001      	adds	r0, #1
 800ca10:	d01e      	beq.n	800ca50 <_printf_common+0xa4>
 800ca12:	6823      	ldr	r3, [r4, #0]
 800ca14:	6922      	ldr	r2, [r4, #16]
 800ca16:	f003 0306 	and.w	r3, r3, #6
 800ca1a:	2b04      	cmp	r3, #4
 800ca1c:	bf02      	ittt	eq
 800ca1e:	68e5      	ldreq	r5, [r4, #12]
 800ca20:	6833      	ldreq	r3, [r6, #0]
 800ca22:	1aed      	subeq	r5, r5, r3
 800ca24:	68a3      	ldr	r3, [r4, #8]
 800ca26:	bf0c      	ite	eq
 800ca28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca2c:	2500      	movne	r5, #0
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	bfc4      	itt	gt
 800ca32:	1a9b      	subgt	r3, r3, r2
 800ca34:	18ed      	addgt	r5, r5, r3
 800ca36:	2600      	movs	r6, #0
 800ca38:	341a      	adds	r4, #26
 800ca3a:	42b5      	cmp	r5, r6
 800ca3c:	d11a      	bne.n	800ca74 <_printf_common+0xc8>
 800ca3e:	2000      	movs	r0, #0
 800ca40:	e008      	b.n	800ca54 <_printf_common+0xa8>
 800ca42:	2301      	movs	r3, #1
 800ca44:	4652      	mov	r2, sl
 800ca46:	4649      	mov	r1, r9
 800ca48:	4638      	mov	r0, r7
 800ca4a:	47c0      	blx	r8
 800ca4c:	3001      	adds	r0, #1
 800ca4e:	d103      	bne.n	800ca58 <_printf_common+0xac>
 800ca50:	f04f 30ff 	mov.w	r0, #4294967295
 800ca54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca58:	3501      	adds	r5, #1
 800ca5a:	e7c6      	b.n	800c9ea <_printf_common+0x3e>
 800ca5c:	18e1      	adds	r1, r4, r3
 800ca5e:	1c5a      	adds	r2, r3, #1
 800ca60:	2030      	movs	r0, #48	; 0x30
 800ca62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca66:	4422      	add	r2, r4
 800ca68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca70:	3302      	adds	r3, #2
 800ca72:	e7c7      	b.n	800ca04 <_printf_common+0x58>
 800ca74:	2301      	movs	r3, #1
 800ca76:	4622      	mov	r2, r4
 800ca78:	4649      	mov	r1, r9
 800ca7a:	4638      	mov	r0, r7
 800ca7c:	47c0      	blx	r8
 800ca7e:	3001      	adds	r0, #1
 800ca80:	d0e6      	beq.n	800ca50 <_printf_common+0xa4>
 800ca82:	3601      	adds	r6, #1
 800ca84:	e7d9      	b.n	800ca3a <_printf_common+0x8e>
	...

0800ca88 <_printf_i>:
 800ca88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca8c:	7e0f      	ldrb	r7, [r1, #24]
 800ca8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ca90:	2f78      	cmp	r7, #120	; 0x78
 800ca92:	4691      	mov	r9, r2
 800ca94:	4680      	mov	r8, r0
 800ca96:	460c      	mov	r4, r1
 800ca98:	469a      	mov	sl, r3
 800ca9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ca9e:	d807      	bhi.n	800cab0 <_printf_i+0x28>
 800caa0:	2f62      	cmp	r7, #98	; 0x62
 800caa2:	d80a      	bhi.n	800caba <_printf_i+0x32>
 800caa4:	2f00      	cmp	r7, #0
 800caa6:	f000 80d4 	beq.w	800cc52 <_printf_i+0x1ca>
 800caaa:	2f58      	cmp	r7, #88	; 0x58
 800caac:	f000 80c0 	beq.w	800cc30 <_printf_i+0x1a8>
 800cab0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cab4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cab8:	e03a      	b.n	800cb30 <_printf_i+0xa8>
 800caba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cabe:	2b15      	cmp	r3, #21
 800cac0:	d8f6      	bhi.n	800cab0 <_printf_i+0x28>
 800cac2:	a101      	add	r1, pc, #4	; (adr r1, 800cac8 <_printf_i+0x40>)
 800cac4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cac8:	0800cb21 	.word	0x0800cb21
 800cacc:	0800cb35 	.word	0x0800cb35
 800cad0:	0800cab1 	.word	0x0800cab1
 800cad4:	0800cab1 	.word	0x0800cab1
 800cad8:	0800cab1 	.word	0x0800cab1
 800cadc:	0800cab1 	.word	0x0800cab1
 800cae0:	0800cb35 	.word	0x0800cb35
 800cae4:	0800cab1 	.word	0x0800cab1
 800cae8:	0800cab1 	.word	0x0800cab1
 800caec:	0800cab1 	.word	0x0800cab1
 800caf0:	0800cab1 	.word	0x0800cab1
 800caf4:	0800cc39 	.word	0x0800cc39
 800caf8:	0800cb61 	.word	0x0800cb61
 800cafc:	0800cbf3 	.word	0x0800cbf3
 800cb00:	0800cab1 	.word	0x0800cab1
 800cb04:	0800cab1 	.word	0x0800cab1
 800cb08:	0800cc5b 	.word	0x0800cc5b
 800cb0c:	0800cab1 	.word	0x0800cab1
 800cb10:	0800cb61 	.word	0x0800cb61
 800cb14:	0800cab1 	.word	0x0800cab1
 800cb18:	0800cab1 	.word	0x0800cab1
 800cb1c:	0800cbfb 	.word	0x0800cbfb
 800cb20:	682b      	ldr	r3, [r5, #0]
 800cb22:	1d1a      	adds	r2, r3, #4
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	602a      	str	r2, [r5, #0]
 800cb28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb30:	2301      	movs	r3, #1
 800cb32:	e09f      	b.n	800cc74 <_printf_i+0x1ec>
 800cb34:	6820      	ldr	r0, [r4, #0]
 800cb36:	682b      	ldr	r3, [r5, #0]
 800cb38:	0607      	lsls	r7, r0, #24
 800cb3a:	f103 0104 	add.w	r1, r3, #4
 800cb3e:	6029      	str	r1, [r5, #0]
 800cb40:	d501      	bpl.n	800cb46 <_printf_i+0xbe>
 800cb42:	681e      	ldr	r6, [r3, #0]
 800cb44:	e003      	b.n	800cb4e <_printf_i+0xc6>
 800cb46:	0646      	lsls	r6, r0, #25
 800cb48:	d5fb      	bpl.n	800cb42 <_printf_i+0xba>
 800cb4a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cb4e:	2e00      	cmp	r6, #0
 800cb50:	da03      	bge.n	800cb5a <_printf_i+0xd2>
 800cb52:	232d      	movs	r3, #45	; 0x2d
 800cb54:	4276      	negs	r6, r6
 800cb56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb5a:	485a      	ldr	r0, [pc, #360]	; (800ccc4 <_printf_i+0x23c>)
 800cb5c:	230a      	movs	r3, #10
 800cb5e:	e012      	b.n	800cb86 <_printf_i+0xfe>
 800cb60:	682b      	ldr	r3, [r5, #0]
 800cb62:	6820      	ldr	r0, [r4, #0]
 800cb64:	1d19      	adds	r1, r3, #4
 800cb66:	6029      	str	r1, [r5, #0]
 800cb68:	0605      	lsls	r5, r0, #24
 800cb6a:	d501      	bpl.n	800cb70 <_printf_i+0xe8>
 800cb6c:	681e      	ldr	r6, [r3, #0]
 800cb6e:	e002      	b.n	800cb76 <_printf_i+0xee>
 800cb70:	0641      	lsls	r1, r0, #25
 800cb72:	d5fb      	bpl.n	800cb6c <_printf_i+0xe4>
 800cb74:	881e      	ldrh	r6, [r3, #0]
 800cb76:	4853      	ldr	r0, [pc, #332]	; (800ccc4 <_printf_i+0x23c>)
 800cb78:	2f6f      	cmp	r7, #111	; 0x6f
 800cb7a:	bf0c      	ite	eq
 800cb7c:	2308      	moveq	r3, #8
 800cb7e:	230a      	movne	r3, #10
 800cb80:	2100      	movs	r1, #0
 800cb82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cb86:	6865      	ldr	r5, [r4, #4]
 800cb88:	60a5      	str	r5, [r4, #8]
 800cb8a:	2d00      	cmp	r5, #0
 800cb8c:	bfa2      	ittt	ge
 800cb8e:	6821      	ldrge	r1, [r4, #0]
 800cb90:	f021 0104 	bicge.w	r1, r1, #4
 800cb94:	6021      	strge	r1, [r4, #0]
 800cb96:	b90e      	cbnz	r6, 800cb9c <_printf_i+0x114>
 800cb98:	2d00      	cmp	r5, #0
 800cb9a:	d04b      	beq.n	800cc34 <_printf_i+0x1ac>
 800cb9c:	4615      	mov	r5, r2
 800cb9e:	fbb6 f1f3 	udiv	r1, r6, r3
 800cba2:	fb03 6711 	mls	r7, r3, r1, r6
 800cba6:	5dc7      	ldrb	r7, [r0, r7]
 800cba8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cbac:	4637      	mov	r7, r6
 800cbae:	42bb      	cmp	r3, r7
 800cbb0:	460e      	mov	r6, r1
 800cbb2:	d9f4      	bls.n	800cb9e <_printf_i+0x116>
 800cbb4:	2b08      	cmp	r3, #8
 800cbb6:	d10b      	bne.n	800cbd0 <_printf_i+0x148>
 800cbb8:	6823      	ldr	r3, [r4, #0]
 800cbba:	07de      	lsls	r6, r3, #31
 800cbbc:	d508      	bpl.n	800cbd0 <_printf_i+0x148>
 800cbbe:	6923      	ldr	r3, [r4, #16]
 800cbc0:	6861      	ldr	r1, [r4, #4]
 800cbc2:	4299      	cmp	r1, r3
 800cbc4:	bfde      	ittt	le
 800cbc6:	2330      	movle	r3, #48	; 0x30
 800cbc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cbcc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cbd0:	1b52      	subs	r2, r2, r5
 800cbd2:	6122      	str	r2, [r4, #16]
 800cbd4:	f8cd a000 	str.w	sl, [sp]
 800cbd8:	464b      	mov	r3, r9
 800cbda:	aa03      	add	r2, sp, #12
 800cbdc:	4621      	mov	r1, r4
 800cbde:	4640      	mov	r0, r8
 800cbe0:	f7ff fee4 	bl	800c9ac <_printf_common>
 800cbe4:	3001      	adds	r0, #1
 800cbe6:	d14a      	bne.n	800cc7e <_printf_i+0x1f6>
 800cbe8:	f04f 30ff 	mov.w	r0, #4294967295
 800cbec:	b004      	add	sp, #16
 800cbee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbf2:	6823      	ldr	r3, [r4, #0]
 800cbf4:	f043 0320 	orr.w	r3, r3, #32
 800cbf8:	6023      	str	r3, [r4, #0]
 800cbfa:	4833      	ldr	r0, [pc, #204]	; (800ccc8 <_printf_i+0x240>)
 800cbfc:	2778      	movs	r7, #120	; 0x78
 800cbfe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cc02:	6823      	ldr	r3, [r4, #0]
 800cc04:	6829      	ldr	r1, [r5, #0]
 800cc06:	061f      	lsls	r7, r3, #24
 800cc08:	f851 6b04 	ldr.w	r6, [r1], #4
 800cc0c:	d402      	bmi.n	800cc14 <_printf_i+0x18c>
 800cc0e:	065f      	lsls	r7, r3, #25
 800cc10:	bf48      	it	mi
 800cc12:	b2b6      	uxthmi	r6, r6
 800cc14:	07df      	lsls	r7, r3, #31
 800cc16:	bf48      	it	mi
 800cc18:	f043 0320 	orrmi.w	r3, r3, #32
 800cc1c:	6029      	str	r1, [r5, #0]
 800cc1e:	bf48      	it	mi
 800cc20:	6023      	strmi	r3, [r4, #0]
 800cc22:	b91e      	cbnz	r6, 800cc2c <_printf_i+0x1a4>
 800cc24:	6823      	ldr	r3, [r4, #0]
 800cc26:	f023 0320 	bic.w	r3, r3, #32
 800cc2a:	6023      	str	r3, [r4, #0]
 800cc2c:	2310      	movs	r3, #16
 800cc2e:	e7a7      	b.n	800cb80 <_printf_i+0xf8>
 800cc30:	4824      	ldr	r0, [pc, #144]	; (800ccc4 <_printf_i+0x23c>)
 800cc32:	e7e4      	b.n	800cbfe <_printf_i+0x176>
 800cc34:	4615      	mov	r5, r2
 800cc36:	e7bd      	b.n	800cbb4 <_printf_i+0x12c>
 800cc38:	682b      	ldr	r3, [r5, #0]
 800cc3a:	6826      	ldr	r6, [r4, #0]
 800cc3c:	6961      	ldr	r1, [r4, #20]
 800cc3e:	1d18      	adds	r0, r3, #4
 800cc40:	6028      	str	r0, [r5, #0]
 800cc42:	0635      	lsls	r5, r6, #24
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	d501      	bpl.n	800cc4c <_printf_i+0x1c4>
 800cc48:	6019      	str	r1, [r3, #0]
 800cc4a:	e002      	b.n	800cc52 <_printf_i+0x1ca>
 800cc4c:	0670      	lsls	r0, r6, #25
 800cc4e:	d5fb      	bpl.n	800cc48 <_printf_i+0x1c0>
 800cc50:	8019      	strh	r1, [r3, #0]
 800cc52:	2300      	movs	r3, #0
 800cc54:	6123      	str	r3, [r4, #16]
 800cc56:	4615      	mov	r5, r2
 800cc58:	e7bc      	b.n	800cbd4 <_printf_i+0x14c>
 800cc5a:	682b      	ldr	r3, [r5, #0]
 800cc5c:	1d1a      	adds	r2, r3, #4
 800cc5e:	602a      	str	r2, [r5, #0]
 800cc60:	681d      	ldr	r5, [r3, #0]
 800cc62:	6862      	ldr	r2, [r4, #4]
 800cc64:	2100      	movs	r1, #0
 800cc66:	4628      	mov	r0, r5
 800cc68:	f7f3 fad2 	bl	8000210 <memchr>
 800cc6c:	b108      	cbz	r0, 800cc72 <_printf_i+0x1ea>
 800cc6e:	1b40      	subs	r0, r0, r5
 800cc70:	6060      	str	r0, [r4, #4]
 800cc72:	6863      	ldr	r3, [r4, #4]
 800cc74:	6123      	str	r3, [r4, #16]
 800cc76:	2300      	movs	r3, #0
 800cc78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc7c:	e7aa      	b.n	800cbd4 <_printf_i+0x14c>
 800cc7e:	6923      	ldr	r3, [r4, #16]
 800cc80:	462a      	mov	r2, r5
 800cc82:	4649      	mov	r1, r9
 800cc84:	4640      	mov	r0, r8
 800cc86:	47d0      	blx	sl
 800cc88:	3001      	adds	r0, #1
 800cc8a:	d0ad      	beq.n	800cbe8 <_printf_i+0x160>
 800cc8c:	6823      	ldr	r3, [r4, #0]
 800cc8e:	079b      	lsls	r3, r3, #30
 800cc90:	d413      	bmi.n	800ccba <_printf_i+0x232>
 800cc92:	68e0      	ldr	r0, [r4, #12]
 800cc94:	9b03      	ldr	r3, [sp, #12]
 800cc96:	4298      	cmp	r0, r3
 800cc98:	bfb8      	it	lt
 800cc9a:	4618      	movlt	r0, r3
 800cc9c:	e7a6      	b.n	800cbec <_printf_i+0x164>
 800cc9e:	2301      	movs	r3, #1
 800cca0:	4632      	mov	r2, r6
 800cca2:	4649      	mov	r1, r9
 800cca4:	4640      	mov	r0, r8
 800cca6:	47d0      	blx	sl
 800cca8:	3001      	adds	r0, #1
 800ccaa:	d09d      	beq.n	800cbe8 <_printf_i+0x160>
 800ccac:	3501      	adds	r5, #1
 800ccae:	68e3      	ldr	r3, [r4, #12]
 800ccb0:	9903      	ldr	r1, [sp, #12]
 800ccb2:	1a5b      	subs	r3, r3, r1
 800ccb4:	42ab      	cmp	r3, r5
 800ccb6:	dcf2      	bgt.n	800cc9e <_printf_i+0x216>
 800ccb8:	e7eb      	b.n	800cc92 <_printf_i+0x20a>
 800ccba:	2500      	movs	r5, #0
 800ccbc:	f104 0619 	add.w	r6, r4, #25
 800ccc0:	e7f5      	b.n	800ccae <_printf_i+0x226>
 800ccc2:	bf00      	nop
 800ccc4:	0800d339 	.word	0x0800d339
 800ccc8:	0800d34a 	.word	0x0800d34a

0800cccc <memmove>:
 800cccc:	4288      	cmp	r0, r1
 800ccce:	b510      	push	{r4, lr}
 800ccd0:	eb01 0402 	add.w	r4, r1, r2
 800ccd4:	d902      	bls.n	800ccdc <memmove+0x10>
 800ccd6:	4284      	cmp	r4, r0
 800ccd8:	4623      	mov	r3, r4
 800ccda:	d807      	bhi.n	800ccec <memmove+0x20>
 800ccdc:	1e43      	subs	r3, r0, #1
 800ccde:	42a1      	cmp	r1, r4
 800cce0:	d008      	beq.n	800ccf4 <memmove+0x28>
 800cce2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cce6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ccea:	e7f8      	b.n	800ccde <memmove+0x12>
 800ccec:	4402      	add	r2, r0
 800ccee:	4601      	mov	r1, r0
 800ccf0:	428a      	cmp	r2, r1
 800ccf2:	d100      	bne.n	800ccf6 <memmove+0x2a>
 800ccf4:	bd10      	pop	{r4, pc}
 800ccf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ccfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ccfe:	e7f7      	b.n	800ccf0 <memmove+0x24>

0800cd00 <_sbrk_r>:
 800cd00:	b538      	push	{r3, r4, r5, lr}
 800cd02:	4d06      	ldr	r5, [pc, #24]	; (800cd1c <_sbrk_r+0x1c>)
 800cd04:	2300      	movs	r3, #0
 800cd06:	4604      	mov	r4, r0
 800cd08:	4608      	mov	r0, r1
 800cd0a:	602b      	str	r3, [r5, #0]
 800cd0c:	f7f5 f860 	bl	8001dd0 <_sbrk>
 800cd10:	1c43      	adds	r3, r0, #1
 800cd12:	d102      	bne.n	800cd1a <_sbrk_r+0x1a>
 800cd14:	682b      	ldr	r3, [r5, #0]
 800cd16:	b103      	cbz	r3, 800cd1a <_sbrk_r+0x1a>
 800cd18:	6023      	str	r3, [r4, #0]
 800cd1a:	bd38      	pop	{r3, r4, r5, pc}
 800cd1c:	20001900 	.word	0x20001900

0800cd20 <_realloc_r>:
 800cd20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd24:	4680      	mov	r8, r0
 800cd26:	4614      	mov	r4, r2
 800cd28:	460e      	mov	r6, r1
 800cd2a:	b921      	cbnz	r1, 800cd36 <_realloc_r+0x16>
 800cd2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd30:	4611      	mov	r1, r2
 800cd32:	f7ff bc57 	b.w	800c5e4 <_malloc_r>
 800cd36:	b92a      	cbnz	r2, 800cd44 <_realloc_r+0x24>
 800cd38:	f7ff fbe8 	bl	800c50c <_free_r>
 800cd3c:	4625      	mov	r5, r4
 800cd3e:	4628      	mov	r0, r5
 800cd40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd44:	f000 f81b 	bl	800cd7e <_malloc_usable_size_r>
 800cd48:	4284      	cmp	r4, r0
 800cd4a:	4607      	mov	r7, r0
 800cd4c:	d802      	bhi.n	800cd54 <_realloc_r+0x34>
 800cd4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cd52:	d812      	bhi.n	800cd7a <_realloc_r+0x5a>
 800cd54:	4621      	mov	r1, r4
 800cd56:	4640      	mov	r0, r8
 800cd58:	f7ff fc44 	bl	800c5e4 <_malloc_r>
 800cd5c:	4605      	mov	r5, r0
 800cd5e:	2800      	cmp	r0, #0
 800cd60:	d0ed      	beq.n	800cd3e <_realloc_r+0x1e>
 800cd62:	42bc      	cmp	r4, r7
 800cd64:	4622      	mov	r2, r4
 800cd66:	4631      	mov	r1, r6
 800cd68:	bf28      	it	cs
 800cd6a:	463a      	movcs	r2, r7
 800cd6c:	f7ff fbc0 	bl	800c4f0 <memcpy>
 800cd70:	4631      	mov	r1, r6
 800cd72:	4640      	mov	r0, r8
 800cd74:	f7ff fbca 	bl	800c50c <_free_r>
 800cd78:	e7e1      	b.n	800cd3e <_realloc_r+0x1e>
 800cd7a:	4635      	mov	r5, r6
 800cd7c:	e7df      	b.n	800cd3e <_realloc_r+0x1e>

0800cd7e <_malloc_usable_size_r>:
 800cd7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd82:	1f18      	subs	r0, r3, #4
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	bfbc      	itt	lt
 800cd88:	580b      	ldrlt	r3, [r1, r0]
 800cd8a:	18c0      	addlt	r0, r0, r3
 800cd8c:	4770      	bx	lr
	...

0800cd90 <_init>:
 800cd90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd92:	bf00      	nop
 800cd94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd96:	bc08      	pop	{r3}
 800cd98:	469e      	mov	lr, r3
 800cd9a:	4770      	bx	lr

0800cd9c <_fini>:
 800cd9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd9e:	bf00      	nop
 800cda0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cda2:	bc08      	pop	{r3}
 800cda4:	469e      	mov	lr, r3
 800cda6:	4770      	bx	lr
